[
  {
    "id": 564,
    "type": "business_rule",
    "name": "Set Manager from Department Head",
    "description": "Determines the userâ€™s department and assigns the department head as the manager. Executes on both insert and update.",
    "script": "(function executeRule(current, previous /*null when async*/) {\n\n    var departmentSysId = current.department;\n\n    if (gs.nil(departmentSysId)) {\n        gs.log(\"BR 'Set User Manager from Department': Department is empty for user \" + current.user_name + \". Skipping.\", \"User Manager Automation\");\n        return;\n    }\n\n    var deptGR = new GlideRecord('cmn_department');\n    if (deptGR.get(departmentSysId)) {\n        // Get the department's manager (dept_head)\n        var departmentManagerSysId = deptGR.dept_head;\n\n        if (!gs.nil(departmentManagerSysId)) {\n            if (current.manager != departmentManagerSysId) {\n                current.manager = departmentManagerSysId;\n                gs.info(\"BR 'Set User Manager from Department': Set manager for user '\" + current.user_name + \"' to '\" + deptGR.dept_head.getDisplayValue() + \"' from department '\" + deptGR.name + \"'.\", \"User Manager Automation\");\n            }\n        } else {\n            gs.info(\"BR 'Set User Manager from Department': Department '\" + deptGR.name + \"' has no manager (dept_head). User '\" + current.user_name + \"' manager not set by this rule.\", \"User Manager Automation\");\n        }\n    } else {\n        gs.warn(\"BR 'Set User Manager from Department': Department with sys_id '\" + departmentSysId + \"' not found for user '\" + current.user_name + \"'.\", \"User Manager Automation\");\n    }\n\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "table": "sys_user",
      "when": "before",
      "order": 100,
      "active": true,
      "filterCondition": [
        {
          "field": "department",
          "operator": "VALCHANGES",
          "value": "",
          "connector": "AND"
        },
        {
          "field": "department",
          "operator": "ISNOTEMPTY",
          "value": "",
          "connector": "AND"
        }
      ]
    },
    "createdAt": "2025-09-21T10:54:53.132Z",
    "updatedAt": "2025-09-21T10:57:40.844Z",
    "owner": {
      "email": "simenstaabyknudsen@gmail.com"
    },
    "canManage": false
  },
  {
    "id": 562,
    "type": "business_rule",
    "name": "Validate Assigned Topics",
    "description": "Validate Assigned Topics",
    "script": "(function executeRule(current, previous /*null when async*/) {\n\n    if (gs.nil(current.taxonomy_topic)) {\n        gs.addErrorMessage('You must select a Taxonomy Topic before saving the article. Go to \"Assigned Topics\" in the bottom of the page and add the topic of the Employee Center');\n        current.setAbortAction(true);\n    }\n\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "table": "kb_knowledge",
      "when": "before",
      "order": 100,
      "active": true,
      "filterCondition": []
    },
    "createdAt": "2025-09-21T10:39:20.332Z",
    "updatedAt": "2025-09-21T10:39:20.332Z",
    "owner": {
      "email": "simenstaabyknudsen@gmail.com"
    },
    "canManage": false
  },
  {
    "id": 561,
    "type": "rest_message_v2",
    "name": "youtubeclient",
    "description": "Example of how you can utilize the older style rest message v2 to interact with youtube data client. Has been replaced with the newer youtube spoke, but is fun to have around and reference how it used to be done.",
    "script": "var YouTubeDataClient = Class.create();\r\nYouTubeDataClient.prototype = {\r\n    initialize: function() {\r\n\t\tthis.channelId = 'YESWAI'; \r\n\t\tthis.apiKey    = 'NOWAI'; \r\n\t\tthis.endpoint  = 'https://www.googleapis.com/youtube/v3'; \r\n    },\r\n\t\r\n\tgetMyChannelInfo: function() {\r\n\t\tgs.debug('getMyChannelInfo()'); \r\n\t\tvar rm = new sn_ws.RESTMessageV2();\r\n\t\trm.setHttpMethod('GET');\r\n\t\trm.setEndpoint(this.endpoint + '/channels'); \r\n\t\trm.setQueryParameter('part', 'contentDetails'); \r\n\t\trm.setQueryParameter('id', this.channelId); \r\n\t\t\r\n\t\tthis._prepareRequest(rm); \r\n\t\t\r\n\t\tvar response = rm.execute(); \r\n\t\tvar body = response.getBody(); \r\n\r\n\t\tgs.debug('body -> ' + body); \r\n\t\t\r\n\t\treturn JSON.parse(body); \r\n\t},\r\n\t\r\n\tprocessMyUploads: function() {\r\n\t\tvar channelInfo = this.getMyChannelInfo(); \r\n\t\tvar uploadPlaylistId = channelInfo.items[0].contentDetails.relatedPlaylists.uploads; \r\n\t\tvar nextPageToken = 'INIT'; \r\n\t\t\r\n\t\tvar response, items; \r\n\t\twhile (nextPageToken == 'INIT' || nextPageToken != '') {\r\n\t\t\tgs.debug('Next page token: ' + nextPageToken); \r\n\t\t\t\r\n\t\t\tif (nextPageToken == 'INIT') {\r\n\t\t\t\tresponse = this._getMyUploads(uploadPlaylistId); \r\n\t\t\t} else {\r\n\t\t\t\tresponse = this._getMyUploads(uploadPlaylistId, nextPageToken); \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnextPageToken = response.nextPageToken || ''; \r\n\t\t\titems = response.items;\r\n\t\t\tthis._processVideoItems(items); \r\n\t\t}\r\n\t},\r\n\t\r\n\t_processVideoItems: function(items) {\r\n\t\tvar self = this; \r\n\t\titems.forEach(function(item) {\r\n\t\t\tself._createOrUpdateVideoRecordFromItem(item); \r\n\t\t});\r\n\t}, \r\n\t\r\n\t_createOrUpdateVideoRecordFromItem: function(item) {\r\n\t\tvar videoId = item.snippet.resourceId.videoId; \r\n\t\tvar video = new GlideRecord('x_snc_artifact_mgr_youtube_video'); \r\n\t\tvideo.addQuery('video_id', videoId); \r\n\t\tvideo.query(); \r\n\t\t\r\n\t\tvar url = 'https://www.youtube.com/watch?v=' + videoId; \r\n\r\n\t\tif (!video.next()) {\r\n\t\t\tgs.debug('Video does not exist, creating a new record'); \r\n\t\t\tvideo.initialize(); \r\n\t\t\tvideo.id = item.id; \r\n\t\t\tvideo.video_id = videoId; \r\n\t\t\tvideo.title = item.snippet.title; \r\n\t\t\tvideo.description = item.snippet.description; \r\n\t\t\tvideo.url = url;  \r\n\t\t\tvideo.published_at = new GlideDateTime(item.snippet.publishedAt.replace('T', ' ')); \r\n\t\t\tvideo.channel_id = item.snippet.channelId; \r\n\t\t\tvideo.insert(); \r\n\t\t} else {\r\n\t\t\tgs.debug('Video exists, updating it'); \r\n\t\t\tvideo.id = item.id; \r\n\t\t\tvideo.video_id = videoId; \r\n\t\t\tvideo.title = item.snippet.title; \r\n\t\t\tvideo.description = item.snippet.description;\r\n\t\t\tvideo.url = url; \r\n\t\t\tvideo.published_at = new GlideDateTime(item.snippet.publishedAt.replace('T', ' ')); \r\n\t\t\tvideo.channel_id = item.snippet.channelId; \r\n\t\t\tvideo.update(); \r\n\t\t}\r\n\t}, \r\n\t\r\n\t_getMyUploads: function(uploadPlaylistId, nextPageToken) {\r\n\t\tgs.debug('getMyUploads()'); \r\n\t\t\r\n\t\tgs.debug('Upload Playlist ID: ' + uploadPlaylistId); \r\n\t\t\r\n\t\tvar rm = new sn_ws.RESTMessageV2();\r\n\t\trm.setHttpMethod('GET');\r\n\t\trm.setEndpoint(this.endpoint + '/playlistItems'); \r\n\t\trm.setQueryParameter('part', 'id,snippet,contentDetails,status'); \r\n\t\trm.setQueryParameter('playlistId', uploadPlaylistId); \r\n\t\t\r\n\t\tif (nextPageToken) {\r\n\t\t\trm.setQueryParameter('pageToken', nextPageToken); \r\n\t\t}\r\n\t\t\r\n\t\tthis._prepareRequest(rm); \r\n\t\t\r\n\t\tvar response = rm.execute(); \r\n\t\tvar body = response.getBody(); \r\n\t\t\r\n\t\t// gs.debug('body -> ' + body); \r\n\t\t\r\n\t\treturn JSON.parse(body); \r\n\t},\r\n\t\r\n\t_prepareRequest: function(rm) {\r\n\t\trm.setQueryParameter('key', this.apiKey); \r\n\t}, \r\n\r\n    type: 'YouTubeDataClient'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "method": "GET",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "RESTMessageV2/youtubeclient",
        "scriptFiles": [
          "youtubeclient.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/RESTMessageV2/youtubeclient",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/RESTMessageV2/youtubeclient/youtubeclient.js"
      }
    },
    "createdAt": "2025-09-21T08:58:59.534Z",
    "updatedAt": "2025-09-21T08:58:59.534Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 560,
    "type": "rest_message_v2",
    "name": "Web Scraping REST Message",
    "description": "Web Scraper REST Message This snippet shows how you would use RESTMessageV2 to scrape HTML from a website using a GET HTTP request.",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n    var search = gs.urlEncode(current.text.replace(/!xkcd/, '').trim());\r\n    var rm = new sn_ws.RESTMessageV2();\r\n    rm.setHttpMethod('GET');\r\n    rm.setEndpoint('https://www.explainxkcd.com/wiki/index.php?search=' + search + '&title=Special%3ASearch&go=Go');\r\n    rm.setRequestHeader('User-Agent', 'servicenow');\r\n    var response = rm.execute();\r\n    var body = response.getBody();\r\n    var result = body.match(/(?:<a href=\"\\/wiki\\/index.php\\/)[0-9]+/gm)[0].replace(/<a href=\"\\/wiki\\/index.php\\//g, '');\r\n    if (parseInt(result)) {\r\n        var rm2 = new sn_ws.RESTMessageV2();\r\n        rm2.setHttpMethod('GET');\r\n        rm2.setEndpoint('https://xkcd.com/' + result + '/info.0.json');\r\n        rm2.setRequestHeader('User-Agent', 'servicenow');\r\n        var response2 = rm2.execute();\r\n        var body2 = JSON.parse(response2.getBody());\r\n        var safe_title = body2.safe_title;\r\n        var img = body2.img;\r\n        var alt = body2.alt;\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "method": "GET",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "RESTMessageV2/Web Scraping REST Message",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/RESTMessageV2/Web%20Scraping%20REST%20Message",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/RESTMessageV2/Web%20Scraping%20REST%20Message/code.js"
      }
    },
    "createdAt": "2025-09-21T08:58:59.530Z",
    "updatedAt": "2025-09-21T08:58:59.530Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 559,
    "type": "rest_message_v2",
    "name": "Reusable RESTMessageV2 retry pattern",
    "description": "Function: retry(func, retries, delayTime) Retries a given function multiple times with a delay between each attempt. Parameters",
    "script": "/**\r\n * Retries a given function multiple times with a delay between each attempt.\r\n *\r\n * @param {Function} func - The function to be executed and potentially retried on failure.\r\n * @param {number} retries - The number of times to retry the function if it fails or returns a null/undefined result.\r\n * @param {number} delayTime - The delay time between retries, in milliseconds.\r\n * \r\n * @returns {any} - Returns the result of the function if successful within the allowed retries; \r\n *                  otherwise, returns the last result (which may be null or undefined).\r\n *\r\n * The function attempts to execute the provided `func()` and checks for a non-null result. If the result is null\r\n * or an exception occurs, it retries the function up to the specified `retries`, with a delay of `delayTime`\r\n * milliseconds between each attempt.\r\n *\r\n * Example usage:\r\n * \r\n * function getToken() {\r\n *     // Simulated operation that might fail\r\n *     var request = new sn_ws.RESTMessageV2(\"token\", \"GET\");\r\n *     var response = request.execute();\r\n *     var statusCode = response.getStatusCode();\r\n *     var result = null;\r\n *     switch(statusCode) {\r\n *         case 200:\r\n *             result = JSON.parse(response.getBody());\r\n *             break;\r\n *         default:\r\n *             throw new Error(\"request failed, http status code: \" + statusCode);\r\n *     }\r\n *     return result;\r\n * }\r\n * \r\n * var result = retry(getToken, 3, 2000);  // Try 3 times, with a 2-second delay between each attempt\r\n * gs.info(\"Operation result: \" + result);\r\n */\r\nfunction retry(func, retires, delayTime) {\r\n    var result = null;\r\n    for(var i = 0; i < retires; i++) {\r\n        try {\r\n            result = func();\r\n            //error handling could depending on the implementation of func\r\n            if(!gs.nil(result)) return result;\r\n        } catch (error) {\r\n            gs.error(error);\r\n        }\r\n        gs.sleep(delayTime);\r\n    }\r\n    return result;\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "method": "POST",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "RESTMessageV2/Reusable RESTMessageV2 retry pattern",
        "scriptFiles": [
          "ReusableRESTMesaageV2Retry.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/RESTMessageV2/Reusable%20RESTMessageV2%20retry%20pattern",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/RESTMessageV2/Reusable%20RESTMessageV2%20retry%20pattern/ReusableRESTMesaageV2Retry.js"
      }
    },
    "createdAt": "2025-09-21T08:58:59.526Z",
    "updatedAt": "2025-09-21T08:58:59.526Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 558,
    "type": "rest_message_v2",
    "name": "Jira",
    "description": "JIRA Task Creation via ServiceNow Script This script demonstrates how to create a JIRA task using the JIRA REST API from ServiceNow. Requirements",
    "script": "// JIRA REST API Endpoint\r\nvar jiraEndpoint = 'https://your-jira-instance.atlassian.net/rest/api/latest/issue';\r\n\r\n// Authentication\r\nvar user = 'your_email@example.com'; \r\nvar token = 'your_api_token';\r\nvar auth = 'Basic ' + gs.base64Encode(user + ':' + token);  // Scoped Base64 Encode\r\n// var auth = 'Basic ' + GlideStringUtil.base64Encode(user + ':' + token); // Global Base64 Encode\r\n\r\n\r\n// JIRA Payload\r\nvar requestBody = {\r\n    \"fields\": {\r\n        \"project\": {\r\n            \"key\": \"PROJECT_KEY\"  // Project Key in JIRA\r\n        },\r\n        \"summary\": \"Task Summary\",\r\n        \"description\": \"Task Description\",\r\n        \"issuetype\": {\r\n            \"name\": \"Task\"  // Issue type\r\n        }\r\n    }\r\n};\r\n\r\n// REST API Call\r\nvar request = new sn_ws.RESTMessageV2();\r\nrequest.setHttpMethod('POST');\r\nrequest.setEndpoint(jiraEndpoint);\r\nrequest.setRequestHeader('Authorization', auth);\r\nrequest.setRequestHeader('Content-Type', 'application/json');\r\nrequest.setRequestBody(JSON.stringify(requestBody));\r\n\r\n// Execute the request\r\nvar response = request.execute();\r\nvar responseBody = response.getBody();\r\nvar httpStatus = response.getStatusCode();\r\n\r\n// Log response for debugging\r\ngs.info('JIRA Response Status: ' + httpStatus);\r\ngs.info('JIRA Response Body: ' + responseBody);",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "method": "POST",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "RESTMessageV2/Jira",
        "scriptFiles": [
          "createJiraTask.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/RESTMessageV2/Jira",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/RESTMessageV2/Jira/createJiraTask.js"
      }
    },
    "createdAt": "2025-09-21T08:58:59.520Z",
    "updatedAt": "2025-09-21T08:58:59.520Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 557,
    "type": "rest_message_v2",
    "name": "Integration Between 2 Instance",
    "description": "This code helps in integrating two ServiceNow instances using Rest Message - in that HTTP Post method, where I also included in the code that, once an incident is created in the source instance same record will be created in the target instance and the target record's sysid and incident number will be auto-populated in the source instance's incident record's Correlation ID& Display field's resp...",
    "script": "//The Below code is to integrate two instances, where I integrated two ServiceNow PDIs using outbound REST Message and used HTTP POST method.\r\n//whenever I create any incident in the source incident it will create the same incident in the Target incident using the REST message.\r\n//once the incident is created in the target instance that incident record's number and sys_id will be populated in the Correlation Display and Correlation ID field's of the source instance incident respectively.\r\n\r\n//I automated the process using a business rule(after, insert(checked))\r\n//below is the code that I used to automate the process for integrating 2 instances through business rule\r\n\r\n(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    try {\r\n        var r = new sn_ws.RESTMessageV2('Gupta Integration for two PDIs', 'Incident Creation By GUPTA');\r\n        //here \"Gupta Integration for two PDIs\" is the name of the REST Message record and \"Incident Creation By GUPTA\" is the HTTP POST record name respectively\r\n        r.setStringParameterNoEscape('caller_id', current.caller_id);\r\n        r.setStringParameterNoEscape('short_desc', current.short_description);\r\n        r.setStringParameterNoEscape('desc', current.description);\r\n        r.setStringParameterNoEscape('state', current.state);\r\n        r.setStringParameterNoEscape('ugency', current.urgency);\r\n        r.setStringParameterNoEscape('impact', current.impact);\r\n        r.setStringParameterNoEscape('configurationItem', current.cmdb_ci);\r\n        var response = r.execute();\r\n        var responseBody = response.getBody();\r\n        var responseBodyObj = JSON.parse(responseBody);//using JSON.parse\r\n        var targetSysId = responseBodyObj.result.sys_id;//getting the target record sys_id and storing in the varaible\r\n        var targetIncidentNumber = responseBodyObj.result.number;// getting the target incident record number and storing in the variable\r\n        //assigning those stored values to current record's correlation ID& Display field's respectively\r\n        current.correlation_id = targetSysId;\r\n        current.correlation_display = targetIncidentNumber;\r\n        current.update();\r\n\r\n        var httpStatus = response.getStatusCode();\r\n        //logging an info message so that we can check the logs for clarity\r\n        gs.info(\"Incident is created in target using REST\" + JSON.stringify(responseBody));\r\n\r\n    } catch (ex) {\r\n        var message = ex.message;\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "method": "POST",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "RESTMessageV2/Integration Between 2 Instance",
        "scriptFiles": [
          "IntegrationBetweenTwoInstancesWithReturnoftheCreatedRecordNumber.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/RESTMessageV2/Integration%20Between%202%20Instance",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/RESTMessageV2/Integration%20Between%202%20Instance/IntegrationBetweenTwoInstancesWithReturnoftheCreatedRecordNumber.js"
      }
    },
    "createdAt": "2025-09-21T08:58:59.516Z",
    "updatedAt": "2025-09-21T08:58:59.516Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 556,
    "type": "rest_message_v2",
    "name": "Google-Chat",
    "description": "How we can use RESTMessageV2 to send notification in Google chat using Google chat webhook. Reference link is given in the code on how we can get the Google chat webhook URL.",
    "script": "//Link to know how we can get Google chat webhook URL - https://developers.google.com/chat/how-tos/webhooks\r\n// gchat_webhook_api defined below is sample one.\r\nvar gchat_webhook_api = \"https://chat.googleapis.com/v1/spaces/AAAAB3/messages?key=AIzahuySyDdI0hCZtEySjMm-WEfRq3CPzqKqcghnHI&token=c2uhYt6VxQohfckyoG9G6XMBIEMczuxFu\";\r\nvar message = \"My message to send in google chat\";\r\n\r\nsendGChatMessage(gchat_webhook_api, message);\r\n\r\nfunction sendGChatMessage(gchat_webhook_api, message) {\r\n\r\n    var http_timeout = 10000;\r\n    var message_tosend = {};\r\n    message_tosend.text = message;\r\n\r\n    //Get RESTMessageV2 object\r\n    var request = new sn_ws.RESTMessageV2();\r\n\r\n    //Set Request Method to POST\r\n    request.setHttpMethod(\"POST\");\r\n\r\n    //Set Google chat webhook end point\r\n    request.setEndpoint(gchat_webhook_api);\r\n\r\n    //Set the message to send as JSON in the request body\r\n    request.setRequestBody(JSON.stringify(message_tosend));\r\n\r\n    //set the request timeout\r\n    request.setHttpTimeout(http_timeout);\r\n\r\n    //Post the message to google chat webhook\r\n    var response = request.execute();\r\n\r\n    if (response.getErrorCode() != 0) {\r\n        //If any error, it will print the error message code and message.\r\n        gs.print(\"Message FAILED to send : Response code : \" + response.getErrorCode() + \" | ERROR : \" + response.getErrorMessage());\r\n    } else {\r\n        //If message sent successfully, it will print the reqponse message received.\r\n        gs.print(\"Message sent - Response \" + response.getBody());\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "method": "POST",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "RESTMessageV2/Google-Chat",
        "scriptFiles": [
          "sendgchatmessage.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/RESTMessageV2/Google-Chat",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/RESTMessageV2/Google-Chat/sendgchatmessage.js"
      }
    },
    "createdAt": "2025-09-21T08:58:59.512Z",
    "updatedAt": "2025-09-21T08:58:59.512Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 555,
    "type": "rest_message_v2",
    "name": "AzureDevOps",
    "description": "This rest message is used to create an issue in azure devops from servicenow using basic authentication",
    "script": "//creating issues in azure devops from servicenow\r\n\r\ntry{\r\n    var content = {\"op\": \"add\", \"path\": \"/fields/System.Title\", \"from\": null, \"value\": \"Sample Task\"};\r\n\r\n\r\n    var request = new sn_ws.RESTMessageV2();\r\n\r\n    //replace the orgName and projectName with your own values\r\n    request.setEndPoint('https://dev.azure.com/orgName/projectName/_apis/wit/workitems/$issue?api-version=6.0');\r\n\r\n    //use the record in basic auth table\r\n    request.setAuthenticationProfile('basic', 'test');\t\r\n    request.setRequestHeader('Content-Type', 'application/json-patch+json');\r\n\trequest.setRequestBody(JSON.stringify(content));\r\n\r\n    var response = request.execute();\r\n    if(response.getStatusCode() == 200){\r\n        gs.info('successful creation of issue');\r\n    }\r\n}\r\ncatch(ex) {\r\n    gs.debug('Failing due to: ' + ex.message);\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "method": "POST",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "RESTMessageV2/AzureDevOps",
        "scriptFiles": [
          "azure.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/RESTMessageV2/AzureDevOps",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/RESTMessageV2/AzureDevOps/azure.js"
      }
    },
    "createdAt": "2025-09-21T08:58:59.508Z",
    "updatedAt": "2025-09-21T08:58:59.508Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 554,
    "type": "rest_message_v2",
    "name": "API for Automatic Group creation",
    "description": "1.The after insert business rule on sysusergroup in the source instance, will create a group in target instance when a new group is created in source instance. 2.It passes the required fields like group name, manager, type of the group to target instance. 3.End point to create group in target instance is https://instancename.service now.com/api/now/table/sysusergroup",
    "script": "var request = new sn_ws.RESTMessageV2();\r\nrequest.setEndpoint('https://instance_name.service-now.com/api/now/table/sys_user_group'); //Target Instance \r\nrequest.setHttpMethod('POST');\r\nvar user = 'username';\r\nvar password = 'password';\r\nrequest.setBasicAuth(user, password);\r\nrequest.setRequestHeader(\"Accept\", \"application/json\");\r\nrequest.setRequestHeader(\"Content-Type', 'application/json'); \r\n//set new group required field values\r\nrequest.setRequestBody(\" {\\\"name\\\":\\\"Group Name\\\",\\\"manager\\\":\\\"sys_id of the manager\\\",\\\"description\\\":\\\"Creating group with API\\\",\\\"type\\\":\\\"sys_id of the group type (GlideList)\\\"}\"); \r\nvar response = request.execute();",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "method": "POST",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "RESTMessageV2/API for Automatic Group creation",
        "scriptFiles": [
          "Automate Group Creation.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/RESTMessageV2/API%20for%20Automatic%20Group%20creation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/RESTMessageV2/API%20for%20Automatic%20Group%20creation/Automate%20Group%20Creation.js"
      }
    },
    "createdAt": "2025-09-21T08:58:59.504Z",
    "updatedAt": "2025-09-21T08:58:59.504Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 553,
    "type": "background_script",
    "name": "Version Checker",
    "description": "Version Checker for Out of the box configuration analysis VersionUpdateChecker.js Why us it?",
    "script": "var grVers = new GlideRecord('sys_update_version');\r\ngrVers.addEncodedQuery('application.nameIN<<names>>'); //change <<names>>\r\ngrVers.query();\r\n\r\nvar msg = \"\\n\\nUpdate Name|Type|Object Name|Application|Update Set|Action\\n\";\r\n\r\nwhile (grVers.next()){\r\n    var isOOTB = getOOTB(grVers.getValue('name'));\r\n    if (isOOTB){\r\n        msg += (grVers.getValue('name') + '|' + grVers.getValue('type') + '|' + grVers.getValue('record_name') + '|' + grVers.getDisplayValue('application') + '|' + grVers.getDisplayValue('source').replace('Update Set: ', '') + '|' + grVers.getValue('action') + '\\n');\r\n    }\r\n}\r\n\r\ngs.info(msg);\r\n\r\nfunction getOOTB(updateName){\r\n    var grU = new GlideRecord('sys_update_version');\r\n    grU.addEncodedQuery(\"name=\" + updateName + \"^source_table!=sys_update_set\");\r\n    grU.query();\r\n    if (grU.hasNext()){\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Version Checker for Out of the box configuration analysis VersionUpdateChecker.js Why us it?",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Version Checker",
        "scriptFiles": [
          "VersionUpdateChecker.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Version%20Checker",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Version%20Checker/VersionUpdateChecker.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.378Z",
    "updatedAt": "2025-09-21T08:58:59.500Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 552,
    "type": "background_script",
    "name": "User Has Role Exactly",
    "description": "hasRoleExactly This background script might be useful if you come in a situation where it would be necessary to check",
    "script": "function hasRoleExactly(role) {\r\n    var arrayUtil = new ArrayUtil();\r\n    var roles = gs.getSession().getRoles() + ''; \r\n    var roleArray = roles.split(\",\"); \r\n    var isAuthorized = arrayUtil.contains(roleArray, role); \r\n    return isAuthorized; \r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "hasRoleExactly This background script might be useful if you come in a situation where it would be necessary to check",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/User Has Role Exactly",
        "scriptFiles": [
          "user_has_role_exactly.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/User%20Has%20Role%20Exactly",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/User%20Has%20Role%20Exactly/user_has_role_exactly.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.374Z",
    "updatedAt": "2025-09-21T08:58:59.497Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 551,
    "type": "background_script",
    "name": "Updating a record in the sys_user table",
    "description": "update a record in sysuser table If we use the command below to update a record, it can lead to a problem. grUser.get('grUser.get('62826bf03710200044e0bfc8bcbe5df9')');",
    "script": "var grUser = new GlideRecord('sys_user');\r\n\r\nif (grUser.get('62826bf03710200044e0bfc8bcbe5df9')) {\r\n    grUser.user_name = 'test.user';\r\n    grUser.first_name = 'test';\r\n    grUser.last_name = 'user';\r\n    grUser.email = 'test.user@servicenow';\r\n    grUser.update();\r\n} else {\r\n    gs.info('Record not found.');\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "update a record in sysuser table If we use the command below to update a record, it can lead to a problem. grUser.get('grUser.get('62826bf03710200044e0bfc8bcbe5df9')');",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Updating a record in the sys_user table",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Updating%20a%20record%20in%20the%20sys_user%20table",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Updating%20a%20record%20in%20the%20sys_user%20table/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.370Z",
    "updatedAt": "2025-09-21T08:58:59.494Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 550,
    "type": "background_script",
    "name": "Update All Store Apps",
    "description": "Update All Store Apps Introduction Would you like to upgrade all of your installed plugins and store apps at the same time?  This script include can be used as a background script to allow you to do just that.",
    "script": "var upgradeUtil = Class.create();\r\nupgradeUtil.prototype = {\r\n\tinitialize: function () {\r\n        this.debug = true;  // Set to true to get more verbose output\r\n        //this.debug = false;  // Set to true to get more verbose output\r\n    },\r\n\r\n\t///////////////////////////////////////////////////////////////////////////////\r\n\tcountUpgrades: function () {\r\n\r\n        if (this.debug === true) gs.info(\"BEGIN: countUpgrades()\");\r\n\r\n\t\tvar log = [];\r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////\r\n\t\t// In sys_store_app records, compare version to latest_version to see if we can upgrade\t\t\r\n\t\t///////////////////////////////////////////////////////////////////////////\r\n\t\tvar appsGr = new GlideRecord('sys_store_app');\r\n\t\tappsGr.orderBy('name');\r\n\t\tappsGr.addQuery('active', true);\r\n\t\tappsGr.query();\r\n\r\n\t\tvar applicationsToUpgradeArr = []; // Create an empty JSON array\r\n\t\tvar upgrades = 0;\r\n\t\tvar total = appsGr.getRowCount();\r\n\t\tlog.push(\"\\n --> \" + total + \" apps found on [sys_store_app]\");\r\n\r\n\t\twhile (appsGr.next()) {\r\n\t\t\tvar notes = appsGr.getValue('name');\r\n\t\t\tvar upgrade = 0;\r\n\t\t\tvar upgrade_version = '';\r\n\t\t\tvar versionStr = appsGr.getValue('version');\r\n\t\t\tvar assignedVersionStr = appsGr.getValue('assigned_version');\r\n\t\t\tvar latestVersionStr = appsGr.getValue('latest_version');\r\n\t\t\t// Check if Latest Version field is populated, break the current loop if so as update cannot be checked\r\n\t\t\tif (!latestVersionStr) break;\r\n\t\t\t// Convert the strings to arrays of integers\r\n\t\t\tvar versionArr = versionStr.split('.').map(Number);\r\n\t\t\tvar assignedVersionArr = assignedVersionStr.split('.').map(Number);\r\n\t\t\tvar latestVersionArr = latestVersionStr.split('.').map(Number);\r\n\r\n\t\t\t// Compare the arrays element-wise\r\n\t\t\tfor (var i = 0; i < versionArr.length; i++) {\r\n\t\t\t\tif (versionArr[i] > assignedVersionArr[i] && versionArr[i] > latestVersionArr[i]) {\r\n                    if (this.debug === true) log.push(\"\\n --> \" + notes + \" version is highest value \" + versionStr);\r\n\t\t\t\t\tupgrade_version = versionStr;\r\n\t\t\t\t\tupgrade = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (assignedVersionArr[i] > versionArr[i] && assignedVersionArr[i] > latestVersionArr[i]) {\r\n                    if (this.debug === true) log.push(\"\\n --> \" + notes + \" assigned_version is highest value \" + assignedVersionStr);\r\n\t\t\t\t\tupgrade_version = assignedVersionStr;\r\n\t\t\t\t\tupgrade = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (latestVersionArr[i] > versionArr[i] && latestVersionArr[i] > assignedVersionArr[i]) {\r\n                    if (this.debug === true) log.push(\"\\n --> \" + notes + \" latest_version is highest value \" + latestVersionStr);\r\n\t\t\t\t\tupgrade_version = latestVersionStr;\r\n\t\t\t\t\tupgrade = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcontinue; // version values are all the same. no upgrade\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (upgrade == 1) { // If upgrade found, add packageDetails to JSON to send to API later\r\n\t\t\t\tvar packageDetails = {\r\n\t\t\t\t\tnotes: notes,\r\n\t\t\t\t\tid: appsGr.getValue('sys_id'),\r\n\t\t\t\t\trequested_version: upgrade_version,\r\n\t\t\t\t\tload_demo_data: true,\r\n\t\t\t\t\ttype: \"application\"\r\n\r\n\t\t\t\t};\r\n\t\t\t\tapplicationsToUpgradeArr.push(packageDetails);\r\n\t\t\t\tupgrades++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlog.push(\"\\n --> \" + upgrades + \" can be upgraded\");\r\n\t\tgs.info(log);\r\n\r\n        if (this.debug === true) gs.info(\"END: countUpgrades()\");\r\n\r\n\t\t//var value1 = 10;\r\n\t\t//var value2 = 20;\r\n\t\treturn {\r\n\t\t\tprop1: applicationsToUpgradeArr,\r\n\t\t\tprop2: upgrades\r\n\t\t}\r\n\r\n\t},\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\tupgradeAllAvailable: function (loginType, loginKey) {\r\n\r\n        if (this.debug === true) gs.info(\"BEGIN: upgradeAllAvailable() \");\r\n\r\n\t\t// Check if any inputs are missing\r\n\t\tif (!loginType || !loginKey) {\r\n\t\t\tgs.info(\"No inputs were provided. Please provide the required inputs.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar result = this.countUpgrades();\r\n\r\n        if (this.debug === true) gs.info(\"upgradeAllAvailable(): CONTINUE\");\r\n\r\n\t\tvar log = [];\r\n\r\n\r\n\t\tvar applicationsToUpgradeArr = result.prop1;\r\n\t\tvar upgrades = result.prop2;\r\n\r\n\t\tif (upgrades == \"0\") {\r\n\t\t\tlog.push(\"\\n --> No apps found to upgrade\");\r\n\t\t\t//gs.info(log);\r\n\t\t\t//return;\r\n\t\t}\r\n\r\n\r\n\t\t////////////////////////////////////////////////////////////////////////////////\r\n\t\t// Build the payload \r\n\t\t////////////////////////////////////////////////////////////////////////////////\r\n\t\t//var dateString = new GlideDateTime();\r\n\r\n\t\tnotes = \"Submitted \" + upgrades + \" apps to upgrade\"; // This will go in the Batch Install Plan Notes\r\n\r\n        if (this.debug === true) gs.info(notes);\r\n\r\n\t\t// Create a JSON object containing the packages array\r\n\t\tvar payload = {\r\n\t\t\t\"name\": \"upgradeUtil Script on \" + new GlideDateTime(),\r\n\t\t\t\"notes\": notes,\r\n\t\t\t\"packages\": applicationsToUpgradeArr\r\n\t\t};\r\n\r\n\t\t////////////////////////////////////////////////////////////////////////////////\r\n\t\t// check login type: username or Connection & Credential Alias\r\n\t\t////////////////////////////////////////////////////////////////////////////////\r\n\t\tvar basicUserName = '';\r\n\t\tvar basicPassword = '';\r\n\r\n\t\tif (loginType === \"\") {\r\n\t\t\tlog.push(\"\\n ERROR: loginType is blank\");\r\n\t\t\tgs.info(log);\r\n\t\t\texplainHowToMakeCreds();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (loginType == \"alias\") {\r\n\t\t\tif (this.debug === true) log.push(\"\\n\\n --> AUTHTYPE: Connection & Credential Alias\")\r\n\t\t\tvar aliasId = loginKey;\r\n\r\n\t\t\t// Set basic authentication using a username and password\r\n\t\t\t// https://developer.servicenow.com/dev.do#!/reference/api/tokyo/server/sn_cc-namespace/connectioninfo-api\r\n\t\t\tvar provider = new sn_cc.ConnectionInfoProvider();\r\n\t\t\tvar connectionInfo = provider.getConnectionInfo(aliasId);\r\n\t\t\tif (connectionInfo != null) {\r\n\t\t\t\tbasicUserName = connectionInfo.getCredentialAttribute(\"user_name\");\r\n\t\t\t\tbasicPassword = connectionInfo.getCredentialAttribute(\"password\");\r\n\r\n\t\t\t\tif (basicUserName == null) {\r\n\t\t\t\t\tlog.push(\"\\n ERROR: Connection Alias username issue\");\r\n\t\t\t\t\tgs.info(log);\r\n\t\t\t\t\texplainHowToMakeCreds();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (basicPassword == null) {\r\n\t\t\t\t\tlog.push(\"\\n ERROR: Connection Alias password issue\");\r\n\t\t\t\t\tgs.info(log);\r\n\t\t\t\t\texplainHowToMakeCreds();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tlog.push(\"\\n --> Connection Alias unknown issue - ABORTING!!!\");\r\n\t\t\t\tgs.info(log);\r\n\t\t\t\texplainHowToMakeCreds();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlog.push(\"\\n\\n --> Authentication will be with an account\")\r\n\t\t\tvar basicUserName = loginType.toString();\r\n\t\t\tvar basicPassword = loginKey.toString();\r\n\t\t\tlog.push(\"\\n --> User will be => \" + basicUserName);\r\n\t\t\t//log.push(\"\\n --> Key will be => \" + basicPassword);\r\n\t\t}\r\n\r\n\t\tif (basicUserName == '' || basicPassword == '') {\r\n\t\t\tlog.push(\"\\n --> credentials not found.\");\r\n\t\t\tgs.info(log);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t////////////////////////////////////////////////////////////////////////////////\r\n\t\t// Call the API\r\n\t\t////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t\t// Create a RESTMessageV2 object and set the endpoint URL and HTTP method\r\n\t\tvar instanceName = gs.getProperty('instance_name');\r\n\t\tif (instanceName.indexOf(\"nowlearning\") !== -1) { // need to add .lab to URL\r\n\t\t\tinstanceName = instanceName + \".lab\";\r\n\t\t}\r\n\r\n\t\tvar request = new sn_ws.RESTMessageV2();\r\n\t\trequest.setEndpoint('https://' + instanceName + '.service-now.com/api/sn_cicd/app/batch/install');\r\n\t\trequest.setHttpMethod('POST');\r\n\r\n\t\t// Set basic authentication using a username and password\r\n\t\trequest.setBasicAuth(basicUserName, basicPassword);\r\n\r\n\t\t// Set the request headers to accept JSON\r\n\t\trequest.setRequestHeader(\"Accept\", \"application/json\");\r\n\r\n\t\t// Set the request body to the JSON payload\r\n\t\trequest.setRequestBody(JSON.stringify(payload));\r\n\r\n\t\t// Execute the REST API call and log the response body\r\n\t\tvar response = request.execute();\r\n\t\tvar responseBody = response.getBody();\r\n\t\tvar statusCode = response.getStatusCode();\r\n\r\n        switch (statusCode) {\r\n            case 200:\r\n                if (this.debug === true) gs.info(\"HTTP 200: Auth Successful\");\r\n                break;\r\n            case 401:\r\n                gs.info('HTTP 401: Unauthorized');\r\n                gs.info('The credentials you provided did not work.');\r\n                return;\r\n                //break;\r\n            default:\r\n                gs.info(\"\\n\\nERROR: Request failed with status code \" + statusCode);\r\n                //gs.info(log);\r\n                return;\r\n                //break;\r\n        }\r\n\r\n\t\tvar responseBodyJSONObj = JSON.parse(responseBody);\r\n\r\n\t\tvar myObject = responseBodyJSONObj.result.links.results;\r\n\t\tfor (var property in myObject) {\r\n\t\t\tif (myObject.hasOwnProperty(property)) {\r\n\t\t\t\tvar value = myObject[property];\r\n\t\t\t\tif (property == \"id\") {\r\n\t\t\t\t\tvar batchUrl = 'https://' + instanceName + '.service-now.com/nav_to.do?uri=sys_batch_install_plan.do?sys_id=' + value;\r\n\t\t\t\t\tvar allBatchPlans = 'https://' + instanceName + '.service-now.com/now/nav/ui/classic/params/target/sys_batch_install_plan_list';\r\n\r\n\t\t\t\t\tlog.push(\"\\n\\n --> This Batch Plan: \\n\" + batchUrl + \"\\n\");\r\n\t\t\t\t\tlog.push(\"\\n\\n --> Batch Plan List: \\n\" + allBatchPlans + \"\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgs.info(log);\r\n\r\n\r\n        if (this.debug === true) gs.info(\"BEGIN: upgradeAllAvailable() \");\r\n\r\n\t},\r\n\r\n\texplainHowToMakeCreds: function(log) {\r\n\t\tvar instanceName = gs.getProperty('instance_name');\r\n\t\tvar connection_url = 'https://' + instanceName + '.service-now.com/';\r\n\t\tvar alias_url = 'https://' + instanceName + '.service-now.com/nav_to.do?uri=sys_alias.do?sys_id=752a91887740001038e286a2681061fb';\r\n\t\tvar log = [];\r\n\t\tlog.push(\"\\n\\n --> NEED TO RECONFIGURE CICD CONNECTION ALIAS FOR SCRIPT\");\r\n\t\tlog.push(\"\\n\\n --> Go to this URL:\\n\" + alias_url + \"\\n\");\r\n\t\tlog.push(\"\\n\\n --> Change 'Type' to 'Connection and Credential and Save Record\");\r\n\t\tlog.push(\"\\n     (Stay on page)\");\r\n\t\tlog.push(\"\\n\\n --> Create NEW Connection\");\r\n\t\tlog.push(\"\\n     NAME: (enter name)\");\r\n\t\tlog.push(\"\\n     Credential: (Create new record)\");\r\n\t\tlog.push(\"\\n     Connection URL: \" + connection_url);\r\n\t\tgs.info(log);\r\n\t},\r\n\r\n\ttype: 'upgradeUtil'\r\n};\r\n\r\nvar upgradeUtil = new upgradeUtil();",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Update All Store Apps Introduction Would you like to upgrade all of your installed plugins and store apps at the same time?  This script include can be used as a background script to allow you to do just that.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Update All Store Apps",
        "scriptFiles": [
          "update_all_apps.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Update%20All%20Store%20Apps",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Update%20All%20Store%20Apps/update_all_apps.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.365Z",
    "updatedAt": "2025-09-21T08:58:59.490Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 549,
    "type": "background_script",
    "name": "Typed Array Elements",
    "description": "Type Elements Of An Array This background script may be useful if you come across a situation where it would be necessary to convert",
    "script": "function arrayElementsToNumber(array) {\r\n    return array.map(Number);\r\n}\r\n\r\nfunction arrayElementsToString(array) {\r\n    return array.map(String);\r\n}\r\n\r\narrayElementsToNumber(['1', '2', '3'])\r\narrayElementsToString([1, 2, 3])",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Type Elements Of An Array This background script may be useful if you come across a situation where it would be necessary to convert",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Typed Array Elements",
        "scriptFiles": [
          "typed_array_elements.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Typed%20Array%20Elements",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Typed%20Array%20Elements/typed_array_elements.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.361Z",
    "updatedAt": "2025-09-21T08:58:59.485Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 548,
    "type": "background_script",
    "name": "Stale Tasks Auto-Close",
    "description": "The script identifies tasks that havenâ€™t been updated for a set period, sends reminder notifications to assigned users, and, if still inactive after additional time, automatically closes them. This helps keep task lists current and reduces manual follow-ups.",
    "script": "var staleDays = 7;\r\nvar closeDays = 14;\r\nvar reminderGR = new GlideRecord('task');\r\nreminderGR.addActiveQuery();\r\nreminderGR.addEncodedQuery('sys_updated_onRELATIVELE@dayofweek@ago@' + staleDays);\r\nreminderGR.query();\r\nwhile (reminderGR.next()) {\r\n    gs.eventQueue('task.reminder', reminderGR, reminderGR.assigned_to, staleDays + ' days without update.');\r\n    }\r\n\r\nvar closeGR = new GlideRecord('task');\r\ncloseGR.addActiveQuery();\r\ncloseGR.addEncodedQuery('sys_updated_onRELATIVELE@dayofweek@ago@' + closeDays);\r\ncloseGR.query();\r\nwhile (closeGR.next()) {\r\n    closeGR.state = 3; // Closed\r\n    closeGR.update();\r\n    }",
    "metadata": {
      "application": "Global",
      "notes": "The script identifies tasks that havenâ€™t been updated for a set period, sends reminder notifications to assigned users, and, if still inactive after additional time, automatically closes them. This helps keep task lists current and reduces manual follow-ups.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Stale Tasks Auto-Close",
        "scriptFiles": [
          "Stale Tasks Auto-Close.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Stale%20Tasks%20Auto-Close",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Stale%20Tasks%20Auto-Close/Stale%20Tasks%20Auto-Close.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.358Z",
    "updatedAt": "2025-09-21T08:58:59.482Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 547,
    "type": "background_script",
    "name": "SQL Checker",
    "description": "There is a simple way, how the generated SQL query can be checked, without activating the SQL Debugger feature in the navigator. Here you can see a small code snippet: By enabling the trace feature, the generated SQL query will be visible in the output:",
    "script": "// This example demonstrates how it is possible to see the generated SQL query without enabling the SQL debug feture in the navigator\r\ntry {\r\n\tgs.trace(true);\r\n\tvar incGr = new GlideRecord(\"incident\");\r\n\tincGr.setLimit(10);\r\n\tincGr.orderByDesc(\"sys_created_on\");\r\n\tincGr.query();\r\n  // TODO any other logic comes here...\r\n}\r\nfinally {\r\n\tgs.trace(false);\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "There is a simple way, how the generated SQL query can be checked, without activating the SQL Debugger feature in the navigator. Here you can see a small code snippet: By enabling the trace feature, the generated SQL query will be visible in the output:",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/SQL Checker",
        "scriptFiles": [
          "SQLChecker.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/SQL%20Checker",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/SQL%20Checker/SQLChecker.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.354Z",
    "updatedAt": "2025-09-21T08:58:59.478Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 546,
    "type": "background_script",
    "name": "Silent update on GlideRecord",
    "description": "Add the gr.autoSysFields(false) to prevent system updates when modifying GlideRecord in background script execution. This is to preserve audit containing the last known user modifications from ticket form.",
    "script": "//Update GlideRecord without modification to system fields\r\nvar grInc = new GlideRecord('incident');\r\nif (grInc.get('62826bf03710200044e0bfc8bcbe5df9')) {\r\n  grInc.active='false';\r\n  grInc.autoSysFields(false); //Do not update sys_updated_by, sys_updated_on, sys_mod_count, sys_created_by, and sys_created_on\r\n  grInc.setWorkflow(false); //Disables the running of business rules\r\n  grInc.update();\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Add the gr.autoSysFields(false) to prevent system updates when modifying GlideRecord in background script execution. This is to preserve audit containing the last known user modifications from ticket form.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Silent update on GlideRecord",
        "scriptFiles": [
          "slientUpdateOnGlideRecord.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Silent%20update%20on%20GlideRecord",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Silent%20update%20on%20GlideRecord/slientUpdateOnGlideRecord.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.350Z",
    "updatedAt": "2025-09-21T08:58:59.474Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 545,
    "type": "background_script",
    "name": "Set update sets to Complete",
    "description": "Executing this script would help the administrators to set all the inprogress update sets to complete state. Most of the times this script comes in handy before setting up the instance to patching or upgradation as during that time updatesets need to be set complete and a backup has to be taken. Be cautious while using this script as this sets all the update sets whose state is inprogress and n...",
    "script": "//note : this script is going to mark all the update sets that are in progress to complete so make sure the query meets your requirements.\r\n\r\nvar gr = new GlideRecord(\"sys_update_set\"); //querying the update sets table to check update sets which are in progress  \r\ngr.addEncodedQuery(\"state=in progress^nameNOT LIKEdefault\");\r\n\r\ngr.setValue(\"state\",\"complete\"); //marking them to complete and updating multiple records using updateMultiple()\r\ngr.updateMultiple();",
    "metadata": {
      "application": "Global",
      "notes": "Executing this script would help the administrators to set all the inprogress update sets to complete state. Most of the times this script comes in handy before setting up the instance to patching or upgradation as during that time updatesets need to be set complete and a backup has to be taken. Be cautious while using this script as this sets all the update sets whose state is inprogress and n...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Set update sets to Complete",
        "scriptFiles": [
          "set_update_sets_to_complete.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Set%20update%20sets%20to%20Complete",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Set%20update%20sets%20to%20Complete/set_update_sets_to_complete.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.346Z",
    "updatedAt": "2025-09-21T08:58:59.470Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 544,
    "type": "background_script",
    "name": "Set the status to Retired on Ec2 Instance",
    "description": "This background script is used to set the Installstatus to Retired if the status is terminated for the Ec2 Instances(Ci's) We are quering the table against the table cmdbciec2instance Then we have encoded query to search if there is any record with the status as terminated and installstatus is not retired",
    "script": "//This Script is used to check if the state is terminated then we will set the Install status to retired of Ec2 Instances(CI's)\r\n\r\nvar gr = new GlideRecord(\"cmdb_ci_ec2_instance\");\r\ngr.addEncodedQuery('state=terminated^install_status!=7');\r\ngr.orderByDesc('name');\r\ngr.setLimit(10000);\r\ngr.query();\r\nwhile (gr.next()){\r\ngr.install_status = \"7\";\r\n  //install_status attribute will be set to \"7\" which of retired\r\ngr.autoSysField(false);\r\ngr.setWorkflow(false);\r\ngr.update();\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "This background script is used to set the Installstatus to Retired if the status is terminated for the Ec2 Instances(Ci's) We are quering the table against the table cmdbciec2instance Then we have encoded query to search if there is any record with the status as terminated and installstatus is not retired",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Set the status to Retired on Ec2 Instance",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Set%20the%20status%20to%20Retired%20on%20Ec2%20Instance",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Set%20the%20status%20to%20Retired%20on%20Ec2%20Instance/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.342Z",
    "updatedAt": "2025-09-21T08:58:59.467Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 543,
    "type": "background_script",
    "name": "Retrieve age of Incident",
    "description": "This script is designed to calculate the age of incidents in the ServiceNow by comparing the creation date of each incident with the current date. It retrieves all the records from the incident table and iterates through them. For each incident, it calculates the time difference between its creation date (syscreatedon) and the current date in milliseconds, then converts that value into days. Th...",
    "script": "var grIncidentAge = new GlideRecord('incident');\r\ngrIncidentAge.query();\r\nwhile (grIncidentAge.next()) {\r\n    var incCreated = new GlideDateTime(grIncidentAge.sys_created_on);\r\n    var nowDT = new GlideDateTime();\r\n    var ageInMilliseconds = nowDT.getNumericValue() - incCreated.getNumericValue(); //The numeric values of the current and created dates are obtained, and the difference is calculated to find the age of the incident in milliseconds.\r\n    var ageInDays = Math.floor(ageInMilliseconds / (1000 * 60 * 60 * 24)); //The age in milliseconds is converted to days by dividing by the number of milliseconds in a day (1,000 milliseconds/second * 60 seconds/minute * 60 minutes/hour * 24 hours/day). The result is rounded down using Math.floor().\r\n    gs.info('Incident ' + grIncidentAge.number + ' is ' + ageInDays + ' days old.');\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "This script is designed to calculate the age of incidents in the ServiceNow by comparing the creation date of each incident with the current date. It retrieves all the records from the incident table and iterates through them. For each incident, it calculates the time difference between its creation date (syscreatedon) and the current date in milliseconds, then converts that value into days. Th...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Retrieve age of Incident",
        "scriptFiles": [
          "ageOfIncidents.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Retrieve%20age%20of%20Incident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Retrieve%20age%20of%20Incident/ageOfIncidents.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.338Z",
    "updatedAt": "2025-09-21T08:58:59.463Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 542,
    "type": "background_script",
    "name": "Restart RITM Flow",
    "description": "Restart RITM Flow Restarts a Flow Designer flow for an individual RITM. Description",
    "script": "var ritmSysId = '443c2b1f1b95f15036d94268b04bcbe9'; // Enter the RITM sys_id\r\n\r\nvar grScReqItem = new GlideRecord('sc_req_item');\r\ngrScReqItem.addEncodedQuery(\"sys_id=\" + ritmSysId);// sys_id of the RITM\r\ngrScReqItem.setLimit(1);\r\ngrScReqItem.query();\r\n\r\nif (grScReqItem.next()) {\r\ntry {\r\n\tgs.info(\"Restarting flow for \" + grScReqItem.number);\r\n\tvar flow = grScReqItem.cat_item.flow_designer_flow;\r\n\tvar flowName = flow.sys_scope.scope + \".\" + flow.internal_name;\r\n    \tvar inputs = {};\r\n    \tinputs['request_item'] = grScReqItem; // GlideRecord of table: sc_req_item\r\n    \tinputs['table_name'] = 'sc_req_item';\r\n\r\n    \tvar contextId = sn_fd.FlowAPI.startFlow(flowName, inputs);\t\r\n\t\r\n  } catch (ex) {\r\n    var message = ex.getMessage();\r\n    gs.error(\"Error restarting flow for \" + grScReqItem.number + \"\\n\\n\" + message);  \r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Restart RITM Flow Restarts a Flow Designer flow for an individual RITM. Description",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Restart RITM Flow",
        "scriptFiles": [
          "restart-ritm-flow.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Restart%20RITM%20Flow",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Restart%20RITM%20Flow/restart-ritm-flow.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.334Z",
    "updatedAt": "2025-09-21T08:58:59.460Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 541,
    "type": "background_script",
    "name": "Replace Text",
    "description": "Purpose of the script is to help replace text ITSAP with ITERP for all the Groups in Group table containing ITSAP as keyword. It uses replace method which follows format replace(/'ABCD'/g,'PQR') where ABCD is to be replaced with PQR",
    "script": "var replacemyname;\r\nvar replaceis=new GlideRecord('sys_user_group');\r\nreplaceis.addEncodedQuery('nameLIKEIT_SAP');\r\nreplaceis.query();\r\nwhile(replaceis.next())\r\n{\r\nreplaceis.name=replaceis.name.replace(/IT_SAP/g, 'IT_ERP'); // /IT_SAP/g is oldvalue 'IT_ERP' is new value\r\nreplaceis.update();\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Purpose of the script is to help replace text ITSAP with ITERP for all the Groups in Group table containing ITSAP as keyword. It uses replace method which follows format replace(/'ABCD'/g,'PQR') where ABCD is to be replaced with PQR",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Replace Text",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Replace%20Text",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Replace%20Text/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.331Z",
    "updatedAt": "2025-09-21T08:58:59.457Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 540,
    "type": "background_script",
    "name": "Remove roles from inactive user",
    "description": "Remove all roles from inactive user Code Snippet : Remove all roles from an inactive user When a user in an instance is inactive, it's a good practice to remove all roles assigned to that user. Following piece of code helps to remove all the roles from the inactive user.",
    "script": "var gr = new GlideRecord('sys_user_has_role');\r\ngr.addEncodedQuery('user.active=false');\r\ngr.query();\r\ngr.deleteMultiple();",
    "metadata": {
      "application": "Global",
      "notes": "Remove all roles from inactive user Code Snippet : Remove all roles from an inactive user When a user in an instance is inactive, it's a good practice to remove all roles assigned to that user. Following piece of code helps to remove all the roles from the inactive user.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Remove roles from inactive user",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Remove%20roles%20from%20inactive%20user",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Remove%20roles%20from%20inactive%20user/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.327Z",
    "updatedAt": "2025-09-21T08:58:59.454Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 539,
    "type": "background_script",
    "name": "Remove Inactive User",
    "description": "This code snippet helps to remove the inactive users from active groups. It won't delete the user record from \"sysuser\" table it will just delete the entry from the \"sysusergrmember\" table.",
    "script": "var user = new GlideRecord(\"sys_user\");\r\nuser.addInactiveQuery();  // Filter the InActive user from the sys_user table.\r\nuser.query();\r\nwhile(user.next()){\r\nvar group = new GlideRecord(\"sys_user_group\");\r\ngroup.addQuery(\"user\",user.getUniqueValue());  // Compare the group in which Inactive user would find.\r\ngroup.query();\r\nif(group.next()){\r\n\t// gs.print(\"Group sys_id is \"+ group.getUniqueValue());\r\n\tvar groupMember= new GlideRecord(\"sys_user_grmember\");\r\n\tgroupMember.addQuery(\"group\",group.getUniqueValue());  // Compare the group member in which Inactive user would find.\r\n\tgroupMember.query();\r\n\tif(groupMember.next()){\r\n\t\tgs.print(\"Group sys_id is \"+ group.getUniqueValue());  // Get the sys_id of the group;\r\n\t\tgs.print(\"Member sys_id is \"+ groupMember.getUniqueValue());  // Get the sys_id of the member which is inactive.\r\n\t\tgs.print(\"Deleted record is \"+ groupMember.sys_id);  // Get the sys_id of the record which is going to delete;\r\n\t\tgroupMember.deleteRecord();  // Delete the record\r\n\t\t\r\n\t}\r\n}\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "This code snippet helps to remove the inactive users from active groups. It won't delete the user record from \"sysuser\" table it will just delete the entry from the \"sysusergrmember\" table.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Remove Inactive User",
        "scriptFiles": [
          "Remove Inactive user from active group.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Remove%20Inactive%20User",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Remove%20Inactive%20User/Remove%20Inactive%20user%20from%20active%20group.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.323Z",
    "updatedAt": "2025-09-21T08:58:59.450Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 538,
    "type": "background_script",
    "name": "Remove element from list field",
    "description": "This script can be used to remove a specific element from a list field across multiple records in a table that match a query condition. It requires 3 variables to be set: - table {string}: the name of the table to run on, e.g. 'kbknowledgeblock'",
    "script": "var table = ''; // Name of the table, e.g. kb_knowledge_block\r\nvar listField = ''; // Name of the list field to remove an element from, e.g. can_read_user_criteria\r\nvar whatToRemove = ''; // Sys_id of the element to remove from the list field, e.g. sys_id of user criteria\r\nvar encQ = listField + 'LIKE' + whatToRemove; // encoded query to limit queried record to those that contain the element we want to remove\r\nvar listArray = []; // initial array variable declaration\r\nvar elementIndex = -1; // initial index variable declaration\r\n\r\n\r\n/* Run a GlideRecord query to find all records that contain the element to be deleted from the specifid list field */\r\nvar listGr = new GlideRecord(table);\r\nlistGr.addEncodedQuery(encQ);\r\nlistGr.query();\r\nwhile(listGr.next()) {\r\n  listArray = listGr[listField].toString().split(','); // set the array variable based on the List field of the found record\r\n  elementIndex = listArray.indexOf(whatToRemove); // search for the element to remove from this particular record\r\n  /* Only try to remove the element and update the record if it was found, i.e. not -1 */\r\n  if(elementIndex > -1) {\r\n    listArray.splice(elementIndex,1);\r\n    listGr.setValue(listField,listArray);\r\n    listGr.update();\r\n  }\r\n  /* Reset the initial array related variables */\r\n  listArray = [];\r\n  elementIndex = -1;\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "This script can be used to remove a specific element from a list field across multiple records in a table that match a query condition. It requires 3 variables to be set: - table {string}: the name of the table to run on, e.g. 'kbknowledgeblock'",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Remove element from list field",
        "scriptFiles": [
          "removeFromList.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Remove%20element%20from%20list%20field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Remove%20element%20from%20list%20field/removeFromList.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.319Z",
    "updatedAt": "2025-09-21T08:58:59.447Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 537,
    "type": "background_script",
    "name": "Read Encoded Query",
    "description": "This background script code to get the any encoded query in redable format. You need to paste the encoded query in the quotes of the function API which you want to read in simple layman format Input Required as below",
    "script": "// This code get the encoded query in readable format.\r\n// Pass the table name and encoded query in the function API whoch you want to read.\r\n\r\nvar grQ= new GlideQueryBreadcrumbs().getReadableQuery('table name', 'Pass the encoded query');\r\ngs.info(\"Readable Query is \"+grQ);",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "This background script code to get the any encoded query in redable format. You need to paste the encoded query in the quotes of the function API which you want to read in simple layman format Input Required as below",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Read Encoded Query",
        "scriptFiles": [
          "readQuery.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Read%20Encoded%20Query",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Read%20Encoded%20Query/readQuery.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.316Z",
    "updatedAt": "2025-09-21T08:58:59.444Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 536,
    "type": "background_script",
    "name": "QuickCurrent",
    "description": "QuickCurrent I use this all the time to test out workflow or business rule script logic without having to go through end-to-end testing of a catalog item workflow or fill out mandatory fields or approvals multiple times just to make sure a complex script has the desired output. By having a quick snippet to create a \"current\" variable, there is no need to modify the script that may be retrieving...",
    "script": "var table = \"sc_req_item\"; //Requested item\r\nvar sid = \"[Insert record sys_id]\";\r\nvar current = new GlideRecord(table);\r\ncurrent.get(sid);\r\nvar vars = current.variables; //Short-hand access to variables to check values before/after running the script\r\n//ex: vars.requested_for, vars.color, vars.desired_delivery_date\r\ngs.info(current.number + \"\\n\" + current.short_description); //display record number and short description\r\n\r\n//##### Enter script using 'current' below this line #####",
    "metadata": {
      "application": "Global",
      "notes": "QuickCurrent I use this all the time to test out workflow or business rule script logic without having to go through end-to-end testing of a catalog item workflow or fill out mandatory fields or approvals multiple times just to make sure a complex script has the desired output. By having a quick snippet to create a \"current\" variable, there is no need to modify the script that may be retrieving...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/QuickCurrent",
        "scriptFiles": [
          "quickCurrent.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/QuickCurrent",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/QuickCurrent/quickCurrent.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.312Z",
    "updatedAt": "2025-09-21T08:58:59.440Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 535,
    "type": "background_script",
    "name": "Prevent unnecessary notifications from being sent out",
    "description": "Created a background script to prevent unnecessary notifications from being sent out. It helps in managing the volume of emails being sent so that we do not send the notifications even by mistake. This script is mostly used in dev or uat to avoid any notifications being sent from lower instances.",
    "script": "var emailGR = new GlideRecord('sys_email');\r\n\r\n// Query for the emails you want to ignore\r\nemailGR.addQuery('state', 'ready'); // Only emails that are ready to send\r\nemailGR.addEncodedQuery(\"sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()\"); // Optional timeline filter\r\n\r\n// Set the fields to ignore and update all matching records at once\r\nemailGR.setValue('state', 'ignored'); // Set state to \"ignored\"\r\nemailGR.setValue('type', 'send-ignored'); // Set type to 'send-ignored'\r\nemailGR.updateMultiple(); // Bulk update all matching records\r\n\r\ngs.info('All relevant emails have been marked as ignored.');",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Created a background script to prevent unnecessary notifications from being sent out. It helps in managing the volume of emails being sent so that we do not send the notifications even by mistake. This script is mostly used in dev or uat to avoid any notifications being sent from lower instances.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Prevent unnecessary notifications from being sent out",
        "scriptFiles": [
          "Prevent_unnecessary_notifications_from_being_sent_out.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Prevent%20unnecessary%20notifications%20from%20being%20sent%20out",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Prevent%20unnecessary%20notifications%20from%20being%20sent%20out/Prevent_unnecessary_notifications_from_being_sent_out.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.308Z",
    "updatedAt": "2025-09-21T08:58:59.437Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 534,
    "type": "background_script",
    "name": "Parse ISO8601 Date",
    "description": "ISO8601 Date Parser Script Some APIs commonly return dates in ISO8601 format. This script can help you parse the date and get 'GlideDateTime' object in return. Usage",
    "script": "/* ISO8601 Date. 30 Hours were put for demonstration purposes */\r\nvar date = '2022-05-01T30:00:00Z';\r\n\r\ngs.info('Parsed date: ' + parseISO8601DateTime(date));\r\n\r\n/* Function to parse ISO8601 date format */\r\nfunction parseISO8601DateTime(isoDate) {\r\n    try {\r\n        /* Check if the input date is valid and not the default value */\r\n        if (isoDate && isoDate !== '1970-01-01T00:00:00Z') {\r\n            /* Split the date and time components */\r\n            var dateAndTime = isoDate.split('T');  \r\n\r\n            /* Ensure there are both date and time components */\r\n            if (dateAndTime.length !== 2) {\r\n                /* Handle invalid input format */\r\n                gs.error('Invalid ISO8601 date format: ' + isoDate);\r\n                return null;\r\n            }\r\n\r\n            var date = dateAndTime[0];\r\n            var time = dateAndTime[1].substring(0, 8);\r\n\r\n            /* Construct a valid GlideDateTime object */\r\n            var parsedDateTime = new GlideDateTime(date + ' ' + time);\r\n            return parsedDateTime;\r\n        }\r\n    } catch (e) {\r\n        gs.error('Error parsing date: ' + e.message);\r\n    }\r\n    /* Return false in case of any errors */\r\n    return null;\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "ISO8601 Date Parser Script Some APIs commonly return dates in ISO8601 format. This script can help you parse the date and get 'GlideDateTime' object in return. Usage",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Parse ISO8601 Date",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Parse%20ISO8601%20Date",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Parse%20ISO8601%20Date/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.305Z",
    "updatedAt": "2025-09-21T08:58:59.434Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 533,
    "type": "background_script",
    "name": "Notify User of Password Expiry",
    "description": "This script will work to notify the users if their password is going to expire in less than 7 days. Prerequisite : You will need to create an event first.",
    "script": "var userGR = new GlideRecord('sys_user');\r\nuserGR.query();\r\nwhile (userGR.next()) {\r\n    var expiryDate = new GlideDateTime(userGR.password_needs_reset_by);\r\n    var today = new GlideDateTime();\r\n    var diff = GlideDateTime.subtract(expiryDate, today);\r\n\r\n    // Check the difference in days\r\n    if (diff.getDays() < 7) {\r\n        gs.eventQueue('password_expiry', userGR, 'Your password will expire in ' + diff.getDays() + ' days.', '');\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "This script will work to notify the users if their password is going to expire in less than 7 days. Prerequisite : You will need to create an event first.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Notify User of Password Expiry",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Notify%20User%20of%20Password%20Expiry",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Notify%20User%20of%20Password%20Expiry/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.301Z",
    "updatedAt": "2025-09-21T08:58:59.430Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 532,
    "type": "background_script",
    "name": "Move Customer Updates",
    "description": "Move Customer Updates I've developed a script to facilitate the transfer of customer updates between two update sets within the same application scope. The script needs to run at the global scope for execution.",
    "script": "//A background script to move customer updates from source update set to target update set within the same application scope.\r\nfunction moveCustomerUpdates(sourceUpdateSetSysId, targetUpdateSetSysId) {\r\n    var customerUpdateGR = new GlideRecord('sys_update_xml');\r\n    customerUpdateGR.addQuery('update_set', sourceUpdateSetSysId);\r\n    customerUpdateGR.setValue('update_set', targetUpdateSetSysId);\r\n    customerUpdateGR.updateMultiple();\r\n}\r\n\r\nmoveCustomerUpdates('sourceUpdateSetSysId', 'targetUpdateSetSysId');",
    "metadata": {
      "application": "Global",
      "notes": "Move Customer Updates I've developed a script to facilitate the transfer of customer updates between two update sets within the same application scope. The script needs to run at the global scope for execution.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Move Customer Updates",
        "scriptFiles": [
          "moveCustomerUpdates.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Move%20Customer%20Updates",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Move%20Customer%20Updates/moveCustomerUpdates.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.297Z",
    "updatedAt": "2025-09-21T08:58:59.426Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 531,
    "type": "background_script",
    "name": "Logout User",
    "description": "Logout Users Used to log out all users within the platform. Usage",
    "script": "logOutAllUsers('admin'); // Admin user is ignored.\r\n\r\nfunction logOutAllUsers(ignoreUser) {\r\n    var logoutCounter = 0;\r\n    var grSession = new GlideRecord(\"v_user_session\");\r\n    if (ignoreUser && ignoreUser != '') {\r\n        grSession.addQuery(\"user\", \"!=\", ignoreUser);\r\n    }\r\n    grSession.query();\r\n\r\n    while (grSession.next()) {\r\n        var username = grSession.user;\r\n\r\n        // Try to find the user record, based on their username.\r\n        var grUser = new GlideRecord(\"sys_user\");\r\n        grUser.addQuery(\"user_name\", username);\r\n        grUser.setLimit(1);\r\n        grUser.query();\r\n\r\n        if (grUser.next()) {\r\n            // Logout the user\r\n            gs.print(\"Logging out session for user \" + username + \".\");\r\n            logoutCounter += 1;\r\n            grSession.locked = true;\r\n            grSession.update();\r\n        }\r\n    }\r\n    gs.print(\"Completed logout of \" + logoutCounter + \" users.\");\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Logout Users Used to log out all users within the platform. Usage",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Logout User",
        "scriptFiles": [
          "logoutUser.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Logout%20User",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Logout%20User/logoutUser.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.294Z",
    "updatedAt": "2025-09-21T08:58:59.421Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 530,
    "type": "background_script",
    "name": "List Stories and Tasks by User and Date Range",
    "description": "List Stories and Tasks by User / Date Range This script is nice for those who love playing with background scripts.  The script can be configured with a user ID and a start/end date range, and will list all stories or tasks assigned or closed during that period for the given user. Running the Script",
    "script": "/**\r\n * Stories / Tasks Report\r\n * Stories, Changes, Problems, Tasks\r\n * Run from Scripts - Background\r\n * @author: Kevin Custer\r\n */\r\n\r\n// User Variables - Change These ////////////\r\nvar userName  = \"aileen.mottern\";\r\nvar startDate = \"2021-10-01 00:00:00\";\r\nvar endDate   = \"2021-10-31 23:59:59\";\r\n/////////////////////////////////////////////\r\n\r\n// Script Variables\r\nvar storyCount = 0;\r\nvar taskCount = 0;\r\n\r\n// Print Stories\r\nvar grStory = new GlideRecord(\"rm_story\");\r\nvar query =  'assigned_to.user_name=' + userName + '^';\r\n    query += \"state!=4\" + '^';\r\n    query += 'sys_created_onBETWEEN' + startDate + '@' + endDate + '^OR';\r\n    query += 'closed_atBETWEEN' + startDate + '@' + endDate;\r\n\r\ngrStory.addEncodedQuery(query);\r\ngrStory.orderBy(\"closed_at\");\r\ngrStory.query();\r\n\r\ngs.print('           Stories / Tasks Report for: ' + userName);\r\ngs.print('');\r\ngs.print('              Report Start: ' + startDate);\r\ngs.print('                Report End: ' + endDate);\r\ngs.print('');\r\ngs.print('');\r\ngs.print('Stories Assigned or Closed:');\r\ngs.print('');\r\n\r\n// Print Header Row\r\ngs.print(this.padEnd(\"Number\", 15) +\r\n         this.padEnd(\"Assigned\", 12) +\r\n         this.padEnd(\"Closed (*)\", 12) +\r\n         this.padEnd(\"Product\", 40) +\r\n         this.padEnd(\"CI\", 70) +\r\n         this.padEnd(\"State\", 25) +\r\n         \"Description\");\r\ngs.print(Array(225).join('-'));\r\n\r\nwhile (grStory.next()) {\r\n  gs.print(this.padEnd(grStory.number.toString(), 15) +\r\n           this.padEnd(grStory.sys_created_on.getByFormat('MM-dd-yyyy'), 12) + \r\n           this.padEnd(grStory.closed_at.getByFormat('MM-dd-yyyy') || '', 12) +\r\n           this.padEnd(grStory.product.getDisplayValue().substring(0,38), 40) +\r\n           this.padEnd(grStory.cmdb_ci.getDisplayValue().substring(0,68), 70) +\r\n           this.padEnd(grStory.state.getDisplayValue(), 25) +\r\n           grStory.short_description);\r\n  storyCount++;\r\n}\r\n\r\ngs.print('');\r\ngs.print('Total Stories: ' + storyCount);\r\ngs.print('');\r\ngs.print('');\r\n\r\n\r\n// Print Tasks\r\nvar grTask = new GlideRecord(\"task\");\r\nvar query = 'assigned_to.user_name=' + userName + '^';\r\nquery += \"state!=4\" + '^';\r\nquery += 'sys_class_name!=rm_story^sys_class_name!=rm_scrum_task^';\r\nquery += 'sys_created_onBETWEEN' + startDate + '@' + endDate + '^OR';\r\nquery += 'closed_atBETWEEN' + startDate + '@' + endDate;\r\n\r\ngrTask.addEncodedQuery(query);\r\ngrTask.orderBy(\"closed_at\");\r\ngrTask.query();\r\n\r\ngs.print('Non-Story Tasks Assigned or Closed:');\r\ngs.print('');\r\n\r\n// Print Header Row\r\ngs.print(this.padEnd(\"Number\", 15) +\r\n         this.padEnd(\"Assigned\", 12) +\r\n         this.padEnd(\"Closed (*)\", 12) +\r\n         this.padEnd(\"CMDB CI\", 40) +\r\n         this.padEnd(\"State\", 25) +\r\n         \"Description\");\r\ngs.print(Array(155).join('-'));\r\n\r\nwhile (grTask.next()) {\r\n  gs.print(this.padEnd(grTask.number.toString(), 15) +\r\n           this.padEnd(grTask.sys_created_on.getByFormat('MM-dd-yyyy'), 12) + \r\n           this.padEnd(grTask.closed_at.getByFormat('MM-dd-yyyy') || '', 12) +\r\n           this.padEnd(grTask.cmdb_ci.getDisplayValue().substring(0,38), 40) +\r\n           this.padEnd(grTask.state.getDisplayValue(), 25) +\r\n           grTask.short_description);\r\n  taskCount++;\r\n}\r\n\r\ngs.print('');\r\ngs.print('Total Tasks: ' + taskCount);\r\ngs.print('');\r\ngs.print('');\r\ngs.print('* - Sorted by ascending values');\r\n\r\nfunction padEnd(str, padAmount) {\r\n  if (typeof str === 'undefined') \r\n    return '';\r\n\r\n  var padding = Array(padAmount + 1).join(' ');\r\n  return (str + padding).substring(0, padding.length);\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "List Stories and Tasks by User / Date Range This script is nice for those who love playing with background scripts.  The script can be configured with a user ID and a start/end date range, and will list all stories or tasks assigned or closed during that period for the given user. Running the Script",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/List Stories and Tasks by User and Date Range",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/List%20Stories%20and%20Tasks%20by%20User%20and%20Date%20Range",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/List%20Stories%20and%20Tasks%20by%20User%20and%20Date%20Range/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.290Z",
    "updatedAt": "2025-09-21T08:58:59.417Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 529,
    "type": "background_script",
    "name": "List fields in table",
    "description": "Get Fields in Table Quick script to print out the fields on one or multiple tables. Especialy helpful for CMBD tables when a stakeholder inevitably asks \"Can you send me a list of all the tables and fields? Use",
    "script": "var table = [\r\n  \"cmdb_ci_netgear\",\r\n  \"cmdb_ci_firewall_network\",\r\n  \"cmdb_ci_ip_firewall\",\r\n  \"cmdb_ci_switch\",\r\n  \"cmdb_ci_ip_router\",\r\n  \"cmdb_ci_computer\",\r\n  \"cmdb_ci_hardware\",\r\n  \"cmdb_ci_lb\",\r\n  \"cmdb_ci_lb_interface\",\r\n  \"cmdb_ci_lb_pool\",\r\n  \"cmdb_ci_lb_pool_member\",\r\n  \"cmdb_ci_lb_service\",\r\n  \"cmdb_ci_vlan\",\r\n  \"cmdb_ci_server\",\r\n  \"cmdb_ci_linux_server\",\r\n  \"cmdb_ci_win_server\",\r\n  \"cmdb_ci_ups\",\r\n];\r\n\r\nfor (var i = 0; i < table.length; i++) {\r\n  gs.print(\"<<<<<-------START TABLE------->>>>>\");\r\n  gs.print(\"TABLE \" + table[i]);\r\n  getFields(\"alm_asset\");\r\n  gs.print(\"<<<<<-------END TABLE------->>>>>\\n\\n\");\r\n}\r\n\r\nfunction getFields(table) {\r\n  var i = 0;\r\n\r\n  var gr = new GlideRecord(\"sys_dictionary\");\r\n\r\n  gr.addQuery(\"name\", table);\r\n\r\n  gr.query();\r\n  gs.print(\"Row, Field name, Display name\");\r\n  while (gr.next()) {\r\n    i = i + 1;\r\n    gs.print(\"Field \" + i + \": \" + gr.element + \" (\" + gr.column_label + \")\");\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Get Fields in Table Quick script to print out the fields on one or multiple tables. Especialy helpful for CMBD tables when a stakeholder inevitably asks \"Can you send me a list of all the tables and fields? Use",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/List fields in table",
        "scriptFiles": [
          "listFieldsInTable.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/List%20fields%20in%20table",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/List%20fields%20in%20table/listFieldsInTable.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.286Z",
    "updatedAt": "2025-09-21T08:58:59.413Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 528,
    "type": "background_script",
    "name": "Limit String and Add Elipses",
    "description": "This function can be used to show the string with  limited number of characters and add the ellipses to it. This is mostly used on the portal side.",
    "script": "function addElipses(string, maxLength) {\r\n    var maxLength = Number(maxLength);\r\n    \r\n        if (string.length > maxLength) {\r\n            return string.substr(0, maxLength) + '...';\r\n        }\r\n    \r\n    return string;\r\n};\r\n\r\nvar StringName = 'hafsa asif razzak';\r\ngs.info(addElipses(StringName, 5));",
    "metadata": {
      "application": "Global",
      "notes": "This function can be used to show the string with  limited number of characters and add the ellipses to it. This is mostly used on the portal side.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Limit String and Add Elipses",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Limit%20String%20and%20Add%20Elipses",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Limit%20String%20and%20Add%20Elipses/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.282Z",
    "updatedAt": "2025-09-21T08:58:59.409Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 527,
    "type": "background_script",
    "name": "inserting a new record into the sys_user table",
    "description": "inserting a new record into the sysuser table. With this code, we are creating a new GlideRecord object for the 'sysuser' table, initializing it, setting the values for the 'username,' 'firstname,' 'lastname,' and 'email' fields, and then inserting a new record into the 'sysuser' table with the specified values. In sysuser table a new rcord will be created",
    "script": "var gr=new GlideRecord('sys_user');\r\ngr.initialize();\r\ngr.user_name='test.user';\r\ngr.first_name='test';\r\ngr.last_name='user';\r\ngr.email='test.user@servicenow';\r\ngr.insert();",
    "metadata": {
      "application": "Global",
      "notes": "inserting a new record into the sysuser table. With this code, we are creating a new GlideRecord object for the 'sysuser' table, initializing it, setting the values for the 'username,' 'firstname,' 'lastname,' and 'email' fields, and then inserting a new record into the 'sysuser' table with the specified values. In sysuser table a new rcord will be created",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/inserting a new record into the sys_user table",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/inserting%20a%20new%20record%20into%20the%20sys_user%20table",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/inserting%20a%20new%20record%20into%20the%20sys_user%20table/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.278Z",
    "updatedAt": "2025-09-21T08:58:59.406Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 526,
    "type": "background_script",
    "name": "Incident Auto-Categorization Based on Keywords",
    "description": "Incident Auto-Categorization Based on Keywords This background script auto-categorizes uncategorized incidents based on keywords found in the shortdescription field, updating the incident with relevant categories (e.g., \"Email\", \"Network\").",
    "script": "var grIncident = new GlideRecord('incident');\r\ngrIncident.addQuery('category', ''); // Only process uncategorized incidents\r\ngrIncident.query();\r\n\r\nwhile (grIncident.next()) {\r\n    try {\r\n        var description = grIncident.getValue('short_description');\r\n        var category = categorizeIncident(description); // Call helper function to categorize\r\n\r\n        if (category) {\r\n            grIncident.category = category;\r\n            grIncident.update();\r\n            gs.info('Incident ' + grIncident.number + ' categorized as ' + category);\r\n        } else {\r\n            gs.warn('No category found for incident ' + grIncident.number);\r\n        }\r\n    } catch (e) {\r\n        gs.error('Failed to categorize incident ' + grIncident.number + ': ' + e.message);\r\n    }\r\n}\r\n\r\n// Helper function to categorize incidents based on keywords\r\nfunction categorizeIncident(description) {\r\n    if (!description) return null;\r\n\r\n    description = description.toLowerCase();\r\n    if (description.includes('email')) return 'Email';\r\n    if (description.includes('network')) return 'Network';\r\n    if (description.includes('password')) return 'Password Reset';\r\n    if (description.includes('hardware')) return 'Hardware';\r\n    return null;\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Incident Auto-Categorization Based on Keywords This background script auto-categorizes uncategorized incidents based on keywords found in the shortdescription field, updating the incident with relevant categories (e.g., \"Email\", \"Network\").",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Incident Auto-Categorization Based on Keywords",
        "scriptFiles": [
          "Incident Auto-Categorization Based on Keywords.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Incident%20Auto-Categorization%20Based%20on%20Keywords",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Incident%20Auto-Categorization%20Based%20on%20Keywords/Incident%20Auto-Categorization%20Based%20on%20Keywords.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.275Z",
    "updatedAt": "2025-09-21T08:58:59.403Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 525,
    "type": "background_script",
    "name": "Identification and Reconciliation",
    "description": "Identification and Reconciliation rule is used to identify the true source of data inserted/updated into a table from different sources. Here we will see how we can use the given script in business rule, scheduled job, etc to run the IRE on any payload",
    "script": "identificationReconciliationRule();\r\n\r\nfunction identificationReconciliationRule() {\r\n\r\n   var gdtToday = new GlideDate();\r\n   var todayDate = gdtToday.getDisplayValue();\r\n\r\n   var payload = {\r\n  items: [{\r\n    className:'cmdb_ci_computer',\r\n    values: {\r\n      name: '382735F5AD9E493',\r\n      serial_number:'28398596-3000301',\r\n      u_glide_date: todayDate,\r\n      asset_tag: 'P1000148'\r\n    }\r\n  }]\r\n};\r\n\r\n//'ServiceNow' is the 'Data Source' which we have defined in the reconciliation rules for the table [cmdb_ci_computer]\r\n\r\n   var input = new JSON().encode(payload);\r\n   var output = SNC.IdentificationEngineScriptableApi.createOrUpdateCI('ServiceNow', input);\r\n   gs.info(output);\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Identification and Reconciliation rule is used to identify the true source of data inserted/updated into a table from different sources. Here we will see how we can use the given script in business rule, scheduled job, etc to run the IRE on any payload",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Identification and Reconciliation",
        "scriptFiles": [
          "identificationReconciliationOnPayload.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Identification%20and%20Reconciliation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Identification%20and%20Reconciliation/identificationReconciliationOnPayload.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.271Z",
    "updatedAt": "2025-09-21T08:58:59.399Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 524,
    "type": "background_script",
    "name": "GreenHouse ServiceNow Integration Snippet",
    "description": "This utility contains sample code to integrate ServiceNow with GreenHouse and pull employee files from GreenHouse in ServiceNow Employee Document Management OOB Table records. Sample code queries HR profile which a filtered query of active users which has a valid greenhouse ID present in ServiceNow HR profile records. REST message which calls Greenhouse REST API is using below REST endpoint.",
    "script": "var instanceName = gs.getProperty('instance_name');\r\n  var hr = new GlideRecord('sn_hr_core_profile');\r\n  hr.addEncodedQuery('user.active=true^user.u_worker_idISNOTEMPTY^u_worker_type=EE^u_greenhouse_idISNOTEMPTY');\r\n  hr.query();\r\n  while (hr.next()) {\r\n\r\n      var workerID = hr.user.u_worker_id + '';\r\n      var greenhouseID = hr.getValue('u_greenhouse_id');\r\n      var userSys = hr.user.sys_id.toString();\r\n\r\n      var key = 'Basic ' + gs.getProperty('sn_hr_core.greenhouseApiKey');\r\n\r\n      var r = new sn_ws.RESTMessageV2('Greenhouse', 'Retrieve Candidate');\r\n      r.setStringParameterNoEscape('id', greenhouseID);\r\n      r.setStringParameterNoEscape('Authorization', key);\r\n\r\n      var response = r.execute();\r\n      var responseBody = response.getBody();\r\n      var httpStatus = response.getStatusCode();\r\n\r\n      var rBody = JSON.parse(responseBody);\r\n\r\n      var attachments = rBody.attachments;\r\n\r\n      for (var i = 0; i < attachments.length; i++) {\r\n\r\n          var type = attachments[i].type + '';\r\n          var fileName = attachments[i].filename + '';\r\n          var docType = '';\r\n          var encodedUri = attachments[i].url;\r\n          //var decodedUrl = decodeURI(encodedUri);\r\n          //var url = decodedUrl.replace(/ /g, '%20');\r\n\r\n          if (type == 'offer_packet' || type == 'signed_offer_letter' || type == 'offer_letter') {\r\n\r\n              docType = '3a4a029adb3bac9444c5ebd8489619d1';\r\n\r\n          } else if (type == 'resume') {\r\n\r\n              docType = '9af9ca5adb3bac9444c5ebd8489619a3';\r\n\r\n          } else if (type == 'form_attachment' || type == 'cover_letter' || type == 'other') {\r\n\r\n              docType = '696549a3dbbfe41044c5ebd8489619c5';\r\n\r\n          }\r\n\r\n          var newDoc = new GlideRecord('sn_hr_ef_employee_document');\r\n          newDoc.newRecord();\r\n          newDoc.employee = userSys;\r\n          newDoc.document_type = docType;\r\n          newDoc.u_title = fileName;\r\n          newDoc.insert();\r\n\r\n          var request = new sn_ws.RESTMessageV2();\r\n          request.setHttpMethod('get');\r\n          request.setEndpoint(encodedUri);\r\n          request.saveResponseBodyAsAttachment('sn_hr_ef_employee_document', newDoc.sys_id, fileName);\r\n          var response1 = request.execute();\r\n\r\n      }\r\n  }",
    "metadata": {
      "application": "Global",
      "notes": "This utility contains sample code to integrate ServiceNow with GreenHouse and pull employee files from GreenHouse in ServiceNow Employee Document Management OOB Table records. Sample code queries HR profile which a filtered query of active users which has a valid greenhouse ID present in ServiceNow HR profile records. REST message which calls Greenhouse REST API is using below REST endpoint.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/GreenHouse ServiceNow Integration Snippet",
        "scriptFiles": [
          "GreenHouse_SN_Snippet.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/GreenHouse%20ServiceNow%20Integration%20Snippet",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/GreenHouse%20ServiceNow%20Integration%20Snippet/GreenHouse_SN_Snippet.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.267Z",
    "updatedAt": "2025-09-21T08:58:59.396Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 523,
    "type": "background_script",
    "name": "GetRecordsFromMultipleTables",
    "description": "Creating a background script to print the total count of all tables with a specific filter condition",
    "script": "var tablesList = ['customer_account','cmn_location','customer_contact','sn_install_base_sold_product','cmdb_model','sn_install_base_item','sn_install_base_m2m_contract_sold_product','sn_install_base_sold_product_related_party','business_unit','contract_rel_contact','cmdb_contract_product_model','cmdb_contract_model_lifecycle','cmn_department','cmdb_service_product_model','sn_install_base_m2m_installed_product','cmdb_ci_service_discovered','cmdb_ci','cmdb_rel_ci','cmdb_rel_team','cmdb_ci_service','service_offering','cab_agenda_item','cab_attendee','cab_meeting','kb_article_template','kb_article_template_definition','kb_category','kb_feedback','kb_feedback_task','kb_knowledge','kb_knowledge_base','kb_knowledge_summary','kb_template_m2m_knowledge_base','kb_uc_cannot_contribute_mtom','kb_uc_cannot_read_mtom','kb_uc_can_contribute_mtom','kb_uc_can_read_mtom','kb_use','kb_version','m2m_kb_feedback_likes','m2m_kb_task','ts_query_kb','u_kb_template_askim_article_template','u_kb_template_askit_article_template','u_kb_template_msc_known_error_databases_template','u_msc_known_error_data_migration','v_st_kb_category','v_st_kb_most_viewed','user_criteria','live_message','m2m_sp_portal_knowledge_base','sys_data_source','sys_import_set','sys_import_set_run','sysevent_register','sys_user_group_type','sys_user_group','core_company','sn_customerservice_contact_relationship','pc_product_cat_item','sc_cat_item_content','sc_cat_item_guide','sc_cat_item_producer','sc_cat_item_service','sc_cat_item_wizard','sc_category_list','sc_cat_item_list','kb_quality_checklist','dl_u_priority','sys_user_group','sys_group_has_role','sys_user','sys_user_role','sys_user_grmember','sys_user_group_type','sys_user_group','sys_group_has_role','sysapproval_group','sysapproval_approver','sc_cat_item_content','sc_cat_item_guide','sc_cat_item_producer','sc_cat_item_service','sc_cat_item_wizard','chg_model','sn_customerservice_catalog_item_per_change_category_per_offer','std_change_record_producer'];\r\ngs.print('| Table | \\t Records ');\r\ntablesList.forEach(function(table){\r\n\tgetTotalRecords(table);\r\n});\r\n//Print total count of table Records\r\nfunction getTotalRecords(table){\r\n\ttry { \r\n\t\tvar records = new GlideAggregate(table);\r\n\t\trecords.addAggregate('COUNT');\r\n\t\trecords.addEncodedQuery(\"sys_updated_on<=javascript:gs.dateGenerate('2024-09-30','23:59:59')\")\r\n\t\trecords.query();\r\n\t\r\n\t\tif (records.next()){\r\n\t\t  gs.print( '| ' +table + ' | \\t ' + records.getAggregate('COUNT') + ' records');\r\n\r\n\t\t}\r\n\t  } catch (err) {\r\n\t\t  gs.print(\"We've got an error for table: \" + table);\r\n\t  }\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Creating a background script to print the total count of all tables with a specific filter condition",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/GetRecordsFromMultipleTables",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/GetRecordsFromMultipleTables",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/GetRecordsFromMultipleTables/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.264Z",
    "updatedAt": "2025-09-21T08:58:59.392Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 522,
    "type": "background_script",
    "name": "GetFlowNames",
    "description": "This Background script check and provides all the flow names running on any given specific table. You need to put table name on below line from code on which you want to see the all the running flows. var strTableName = 'changerequest'; //replace with your table name",
    "script": "var grActionInstance = new GlideAggregate('sys_hub_action_instance');\r\nvar strTableName = 'change_request'; //replace with your table name\r\n\r\ngrActionInstance.addJoinQuery('sys_variable_value', 'sys_id', 'document_key').addCondition('value', strTableName);\r\ngrActionInstance.addAggregate('GROUP_CONCAT_DISTINCT', 'flow'); \r\ngrActionInstance.groupBy('flow');\r\ngrActionInstance.addQuery('flow.sys_class_name', 'sys_hub_flow')\r\ngrActionInstance.query();\r\n\r\nwhile(grActionInstance.next()) {\r\n    gs.info( '[{0}]\\t{1}',  grActionInstance.flow.active ? 'active' : 'inactive', grActionInstance.flow.name);\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "This Background script check and provides all the flow names running on any given specific table. You need to put table name on below line from code on which you want to see the all the running flows. var strTableName = 'changerequest'; //replace with your table name",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/GetFlowNames",
        "scriptFiles": [
          "getFlowNames.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/GetFlowNames",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/GetFlowNames/getFlowNames.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.260Z",
    "updatedAt": "2025-09-21T08:58:59.389Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 521,
    "type": "background_script",
    "name": "Get The Last Journal Comment Date",
    "description": "Timestamp Extraction from Comment This code snippet demonstrates how to extract a timestamp from a comment text and create a 'GlideDateTime' object from it. It may be useful if you don't want to drill down to the 'sysjournalfield' table.",
    "script": "/* Get required record by sys_id */\r\nvar record = new GlideRecord('<table>');\r\nrecord.get('<SYSID>');\r\n\r\n/* Get the latest comment, replace comments with your journal field if required */\r\nvar commentText = record.comments.getJournalEntry(1);\r\n\r\n/* Catch the timestamp out of it with regex */\r\nvar timestampMatch = commentText.match(/(\\d{2}-\\d{2}-\\d{4} \\d{2}:\\d{2}:\\d{2}) -/);\r\n\r\n/* If catched, created new DateTime out of it */\r\nif (timestampMatch) {\r\n    var parsedTimestamp = new GlideDateTime(timestampMatch[1]);\r\n    gs.info(\"Timestamp: \" + parsedTimestamp);\r\n} else {\r\n    gs.error(\"No timestamp found: \" + commentText);\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Timestamp Extraction from Comment This code snippet demonstrates how to extract a timestamp from a comment text and create a 'GlideDateTime' object from it. It may be useful if you don't want to drill down to the 'sysjournalfield' table.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get The Last Journal Comment Date",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20The%20Last%20Journal%20Comment%20Date",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20The%20Last%20Journal%20Comment%20Date/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.256Z",
    "updatedAt": "2025-09-21T08:58:59.385Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 520,
    "type": "background_script",
    "name": "Get the current version of an application",
    "description": "- Set the appName variable to the exact name of the application youâ€™re checking (in this case as an example, Project Workspace). - This script queries the Application [sysapp] table for a record with the specified name. - If the application is found, it retrieves and prints the version. If not, it prints a message stating the application wasnâ€™t found.",
    "script": "// Replace 'Project Workspace' with the name of the application you want to check\r\nvar appName = 'Project Workspace';\r\n\r\nvar appRecord = new GlideRecord('sys_app');\r\nappRecord.addQuery('name', appName);\r\nappRecord.query();\r\n\r\nif (appRecord.next()) {\r\n    gs.print(\"Application Name: \" + appName);\r\n    gs.print(\"Current Version: \" + appRecord.getValue('version'));\r\n} else {\r\n    gs.print(\"The Application '\" + appName + \"' is not found.\");\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "- Set the appName variable to the exact name of the application youâ€™re checking (in this case as an example, Project Workspace). - This script queries the Application [sysapp] table for a record with the specified name. - If the application is found, it retrieves and prints the version. If not, it prints a message stating the application wasnâ€™t found.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get the current version of an application",
        "scriptFiles": [
          "currentversionscript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20the%20current%20version%20of%20an%20application",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20the%20current%20version%20of%20an%20application/currentversionscript.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.252Z",
    "updatedAt": "2025-09-21T08:58:59.382Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 519,
    "type": "background_script",
    "name": "Get My Groups",
    "description": "The GlideSystem User object has a useful function, which is called getMyGroups. This gives back the sysids of current user's group. But the functionality behaves differently depending where it is called from. If the function is called from Global scope a Java object (com.glide.collections.StringList) is returned: Result:",
    "script": "// Get current user's group\r\nvar currentUserGroups = gs.getUser().getMyGroups();\r\n\r\n// Check that the collection object type is JavaObject or not\r\nif (Object.prototype.toString.call(currentUserGroups).match(/^\\[object\\s(.*)\\]$/)[1] == \"JavaObject\") {\r\n    // ArrayUtil can be used to create a JS Array from Java collection object\r\n    var arrayUtil = new global.ArrayUtil();\r\n    currentUserGroups = arrayUtil.convertArray(currentUserGroups);\r\n}\r\n\r\ngs.info(currentUserGroups);\r\ngs.info('Object type: ' + Object.prototype.toString.call(currentUserGroups));",
    "metadata": {
      "application": "scope",
      "notes": "The GlideSystem User object has a useful function, which is called getMyGroups. This gives back the sysids of current user's group. But the functionality behaves differently depending where it is called from. If the function is called from Global scope a Java object (com.glide.collections.StringList) is returned: Result:",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get My Groups",
        "scriptFiles": [
          "getMyGroups.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20My%20Groups",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20My%20Groups/getMyGroups.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.248Z",
    "updatedAt": "2025-09-21T08:58:59.378Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 518,
    "type": "background_script",
    "name": "Get list of Update Set types",
    "description": "This snippet outputs a list of module types included in an update set. By checking the included module types before committing an update set, you can be sure you aren't including any unintended updates.",
    "script": "function getListOfUpdateSetTypes(update_set){\r\n    var result = []\r\n    var gr = new GlideAggregate('sys_update_xml');\r\n    gr.addQuery('update_set', update_set);\r\n    gr.groupBy('type');\r\n    gr.query();\r\n    while(gr.next()){\r\n        result.push(gr.type.getDisplayValue())\r\n    }\r\n    return result;\r\n}\r\n\r\ngetListOfUpdateSetTypes('update_set_sys_id');",
    "metadata": {
      "application": "Global",
      "notes": "This snippet outputs a list of module types included in an update set. By checking the included module types before committing an update set, you can be sure you aren't including any unintended updates.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get list of Update Set types",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20list%20of%20Update%20Set%20types",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20list%20of%20Update%20Set%20types/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.244Z",
    "updatedAt": "2025-09-21T08:58:59.375Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 517,
    "type": "background_script",
    "name": "Get Journal Entry as HTML Without Header",
    "description": "Get Journal Entry as HTML This script can be used in a Business Rule or background script, or any other server-side script. It assumes the presence of the current object, but can be used with any positioned GlideRecord. Use",
    "script": "var journalFieldName = 'comments';\r\nvar journalText = current[journalFieldName]\r\n\t.getJournalEntry(1)\r\n\t.trim()\r\n\t.split('\\n')\r\n\t.slice(1)\r\n\t.join('<br />\\n');",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Get Journal Entry as HTML This script can be used in a Business Rule or background script, or any other server-side script. It assumes the presence of the current object, but can be used with any positioned GlideRecord. Use",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get Journal Entry as HTML Without Header",
        "scriptFiles": [
          "GetJournalEntryAsHTMLWithoutHeader.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20Journal%20Entry%20as%20HTML%20Without%20Header",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20Journal%20Entry%20as%20HTML%20Without%20Header/GetJournalEntryAsHTMLWithoutHeader.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.240Z",
    "updatedAt": "2025-09-21T08:58:59.371Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 516,
    "type": "background_script",
    "name": "Get Instance Info",
    "description": "These are few scripts to run from Background Script editor to get the instance info.",
    "script": "var gl= GlideTransaction.get().getRemoteAddr();\r\ngs.addInfoMessage('IP Address:'+gl);\r\nvar gl1=GlideServlet.getSystemID();\r\ngs.addInfoMessage('Node ID:'+gl1);\r\nvar env = gs.getProperty(\"instance_name\");\r\ngs.info(env);",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "These are few scripts to run from Background Script editor to get the instance info.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get Instance Info",
        "scriptFiles": [
          "getInstanceInfo.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20Instance%20Info",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20Instance%20Info/getInstanceInfo.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.236Z",
    "updatedAt": "2025-09-21T08:58:59.368Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 515,
    "type": "background_script",
    "name": "Get Instance DB Size",
    "description": "This is to get the size of the DB from the SN instance using SNC.",
    "script": "gs.info(\r\n  SNC.UsageAnalyticsScriptUtils.getCount(\r\n    'Primary DB size (MB)',\r\n    'Primary DB size of this instance (in MB)'\r\n  )\r\n); //Run this code in the Background Scripts module to get the size of the DB",
    "metadata": {
      "application": "Global",
      "notes": "This is to get the size of the DB from the SN instance using SNC.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get Instance DB Size",
        "scriptFiles": [
          "getInstDBSize.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20Instance%20DB%20Size",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20Instance%20DB%20Size/getInstDBSize.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.233Z",
    "updatedAt": "2025-09-21T08:58:59.364Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 514,
    "type": "background_script",
    "name": "Get Installed Plugins details",
    "description": "Background Script provides the list of installed plugins, version installed and version available for the upgrade in the instance Note: We need to set the basic auth credential in order for the script to work on the instance where we are running it.",
    "script": "//Get the instance\r\nvar instance_name = gs.getProperty(\"instance_name\");\r\n\r\n//build the endpoint\r\nvar endPoint = 'https://'+instance_name+'.service-now.com/api/sn_appclient/appmanager/apps?tab_context=installed';\r\n\r\n//initialize the RestMessageV2 API.\r\nvar request = new sn_ws.RESTMessageV2();\r\nrequest.setEndpoint(endPoint);\r\nrequest.setHttpMethod('POST');\r\n\r\n//Eg. UserName=\"admin\", Password=\"admin\" for this code sample.\r\nvar user = 'admin';\r\nvar password = '****'; \r\n\r\n//set the authentication\r\nrequest.setBasicAuth(user,password);\r\n\r\n//set the request header\r\nrequest.setRequestHeader(\"Accept\",\"application/json\");\r\n\r\n//invoke the API\r\nvar response = request.execute();\r\n\r\n//Parse the response\r\nvar jsonResponse = JSON.parse(response.getBody());\r\n\r\nvar appsList = jsonResponse.result.apps;\r\n\r\n//Print the Header for the response\r\ngs.info(\"Application name\"+\" | \"+ \"Assigned version\"+\" | \" + \"Latest version | \"  + \"Hasupdate\");\r\nappsList.forEach(function(app){\r\n    //Print the plugin details\r\n   var hasUpdate = app.update_available == 1 ? \"true\" : \"false\";\r\ngs.info(app.name+\" | \"+ app.assigned_version+\" | \" + app.latest_version+\" | \" + hasUpdate);\r\n});",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Background Script provides the list of installed plugins, version installed and version available for the upgrade in the instance Note: We need to set the basic auth credential in order for the script to work on the instance where we are running it.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get Installed Plugins details",
        "scriptFiles": [
          "getInstalledPluginInfo.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20Installed%20Plugins%20details",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20Installed%20Plugins%20details/getInstalledPluginInfo.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.229Z",
    "updatedAt": "2025-09-21T08:58:59.361Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 513,
    "type": "background_script",
    "name": "Get GlideRecord Reference Field",
    "description": "Get GlideRecord to a reference field using getRefRecord() method Use case : Background script that retrieves the complete record of a reference field",
    "script": "var grApproval = new GlideRecord('sysapproval_approver');\r\ngrApproval.get('007a44badba52200a6a2b31be0b8f525');\r\n\r\nif(grApproval.sysapproval.getRefRecord().isValidRecord()) { \r\n   return grApproval.sysapproval.getRefRecord();\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Get GlideRecord to a reference field using getRefRecord() method Use case : Background script that retrieves the complete record of a reference field",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get GlideRecord Reference Field",
        "scriptFiles": [
          "get_glide_record_reference_field.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20GlideRecord%20Reference%20Field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20GlideRecord%20Reference%20Field/get_glide_record_reference_field.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.225Z",
    "updatedAt": "2025-09-21T08:58:59.357Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 512,
    "type": "background_script",
    "name": "Get Duplicate",
    "description": "Using GlideAggregate function to find out tickets (tasks) with same number. OOB there happens to be a Unique checkbox at dictionary level and if in case not set to True it might create duplicate numbered tickets. Script will help find, ticekts if any.",
    "script": "var dpchk = new GlideAggregate('task');               \r\ndpchk.groupBy('number');                             \r\ndpchk.addHaving('COUNT', '>', 1);\r\ndpchk.query();\r\nwhile(dpchk.next())\t\r\n{\r\n\t\tgs.print(dpchk.number);                               \r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Using GlideAggregate function to find out tickets (tasks) with same number. OOB there happens to be a Unique checkbox at dictionary level and if in case not set to True it might create duplicate numbered tickets. Script will help find, ticekts if any.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get Duplicate",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20Duplicate",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20Duplicate/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.222Z",
    "updatedAt": "2025-09-21T08:58:59.353Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 511,
    "type": "background_script",
    "name": "Get current logged in user count in all nodes of instance",
    "description": "Get current logged in user count in all nodes of instance Use case : Background script that will print the count of all currently logged in users in the instance info : This method is to achieve the above use-case just with one time run of background script",
    "script": "var total_users = 0;\r\nvar diag = new Diagnostics();\r\n\r\nwhile (diag.nextNode()) {\r\n    var diagNode = diag.getNode();\r\n    var summary = diagNode.stats.sessionsummary;\r\n\r\n    if (summary) {\r\n        total_users += parseInt(diagNode.stats.sessionsummary[\"@logged_in\"]);\r\n    }\r\n}\r\n\r\ngs.info(total_users);",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Get current logged in user count in all nodes of instance Use case : Background script that will print the count of all currently logged in users in the instance info : This method is to achieve the above use-case just with one time run of background script",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get current logged in user count in all nodes of instance",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20current%20logged%20in%20user%20count%20in%20all%20nodes%20of%20instance",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20current%20logged%20in%20user%20count%20in%20all%20nodes%20of%20instance/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.218Z",
    "updatedAt": "2025-09-21T08:58:59.350Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 510,
    "type": "background_script",
    "name": "Get all users where manager is empty",
    "description": "Get all users without manager Use the script in script.js file to get the list of all users in sysuser table who do not have an manager. This GlideRecord script can be used in multiple places. For example in background scripts.",
    "script": "(function () {\r\n    var users = [];\r\n    var userGr = new GlideRecord('sys_user'); // used different variable name instead of gr.\r\n    userGr.addActiveQuery(); // used to filter more on the records fetched.\r\n    userGr.addNullQuery('manager');\r\n    userGr.query();\r\n    while (userGr.next()) {\r\n        users.push(userGr.getDisplayValue()); // used getDisplayValue() method to get the name as a string instead of using gr.name\r\n    }\r\n    gs.info(\"Users without manager are : \" + users);\r\n\r\n})(); // Used a self executing function to wrap the code with a function for reducing variable scoping issues",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Get all users without manager Use the script in script.js file to get the list of all users in sysuser table who do not have an manager. This GlideRecord script can be used in multiple places. For example in background scripts.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get all users where manager is empty",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20all%20users%20where%20manager%20is%20empty",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20all%20users%20where%20manager%20is%20empty/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.214Z",
    "updatedAt": "2025-09-21T08:58:59.346Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 509,
    "type": "background_script",
    "name": "Get All the CI classes",
    "description": "This background script provides the names of all the available Ci classes present in the system",
    "script": "// Find all CI Classes\r\nvar table = new TableUtils(\"cmdb_ci\");\r\nvar ciTableList = j2js(table.getAllExtensions());\r\nfor (var i = 0; i < ciTableList.length; i++) \r\ngs.print(ciTableList[i]);",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "This background script provides the names of all the available Ci classes present in the system",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get All the CI classes",
        "scriptFiles": [
          "getAllCiClasses.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20All%20the%20CI%20classes",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20All%20the%20CI%20classes/getAllCiClasses.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.210Z",
    "updatedAt": "2025-09-21T08:58:59.343Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 508,
    "type": "background_script",
    "name": "Get Active MID Servers",
    "description": "ServiceNow Script: getActiveMidServer Description This ServiceNow script defines a function, getActiveMidServer, that retrieves the name of an active MID Server that is both up and validated. MID Servers are essential components in the ServiceNow platform for various integration and automation tasks.",
    "script": "/**\r\n * Retrieves the name of an active MID Server that is both up and validated.\r\n * @returns {string|null} The name of the active MID Server, or null if none is found.\r\n */\r\nfunction getActiveMidServer() {\r\n    // Create a GlideRecord object for the 'ecc_agent' table\r\n    var grServer = new GlideRecord('ecc_agent');\r\n\r\n    // Add an encoded query to filter for MID Servers that are up and validated\r\n    grServer.addEncodedQuery('status=Up^validated=true');\r\n\r\n    // Execute the query\r\n    grServer.query();\r\n\r\n    // Check if a record matching the query criteria was found\r\n    if (grServer.next()) {\r\n        // Return the name of the active MID Server\r\n        return grServer.name;\r\n    } else {\r\n        // No active MID Server found, return null\r\n        return null;\r\n    }\r\n}\r\n\r\ngetActiveMidServer();",
    "metadata": {
      "application": "Global",
      "notes": "ServiceNow Script: getActiveMidServer Description This ServiceNow script defines a function, getActiveMidServer, that retrieves the name of an active MID Server that is both up and validated. MID Servers are essential components in the ServiceNow platform for various integration and automation tasks.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Get Active MID Servers",
        "scriptFiles": [
          "GetActiveMidServer.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Get%20Active%20MID%20Servers",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Get%20Active%20MID%20Servers/GetActiveMidServer.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.207Z",
    "updatedAt": "2025-09-21T08:58:59.339Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 507,
    "type": "background_script",
    "name": "Generate statistics about events created today",
    "description": "Background Script Background Script, to easily generate statistics about today's created events in system. You can call getStats() with different parameters to get information about current situation in sysevent table. You can generate statistic about different aggregation functions, different aggregation fields and selected group by fields. It can be helpful for example to detect which type of...",
    "script": "//Script to quickly generate needed statistic about events generated today in system \r\n\r\n//Function to generate statistics based on parameters\r\n//field - name of field which should be used in aggregate function\r\n//aggFunction - name of aggregate function which should be used\r\n//orderByField - name of field which should be used to orderBy\r\nfunction getStats(field, aggFunction, orderByField) {\r\n\r\n    gs.info('[Events stats] --- Statistics for field: ' + field + ' and with aggreagte function: ' + aggFunction);\r\n\r\n    //GlideAggregate query to get data from sysevent table\r\n    var agEvent = new GlideAggregate('sysevent');\r\n    agEvent.addAggregate(aggFunction, field);\r\n    agEvent.orderBy(orderByField);\r\n    agEvent.addEncodedQuery('sys_created_onONToday@javascript:gs.daysAgoStart(0)@javascript:gs.daysAgoEnd(0)');\r\n\r\n    //Order results descending by aggregate results\r\n    agEvent.orderByAggregate(aggFunction, field);\r\n    agEvent.query();\r\n\r\n    //Display statistics for all groups\r\n    while (agEvent.next()) {\r\n        var eventNumber = agEvent.getAggregate(aggFunction, field);\r\n        var label = agEvent.getValue(orderByField);\r\n        if (field == orderByField) {\r\n            gs.info('[Events stats] ------ Event in ' + orderByField + ': ' + label + ': ' + eventNumber);\r\n        } else {\r\n            gs.info('[Events stats] ------ Event in ' + orderByField + ': ' + label + ': ' + eventNumber + ' ' + aggFunction + ' ' + field);\r\n        }\r\n\r\n    }\r\n}\r\n\r\ngs.info('[Events stats] - Generating events statistics created on: ' + gs.nowDateTime());\r\n\r\n//Calling getStats function which different parameters\r\n//Get events count group by state\r\ngetStats('state', 'count', 'state');\r\n\r\n//Get events count group by name\r\ngetStats('name', 'count', 'name');\r\n\r\n//Get events average processing duration grouped by table name\r\ngetStats('processing_duration', 'avg', 'table');",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Background Script Background Script, to easily generate statistics about today's created events in system. You can call getStats() with different parameters to get information about current situation in sysevent table. You can generate statistic about different aggregation functions, different aggregation fields and selected group by fields. It can be helpful for example to detect which type of...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Generate statistics about events created today",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Generate%20statistics%20about%20events%20created%20today",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Generate%20statistics%20about%20events%20created%20today/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.203Z",
    "updatedAt": "2025-09-21T08:58:59.336Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 506,
    "type": "background_script",
    "name": "Generate Random Incident Records",
    "description": "Generate Random Incident Records This script can be used to generate random Incident records for testing purposes. Usage",
    "script": "// Create a specified number of random incident records\r\nvar numberOfIncidents = 50;\r\nvar incidentTable = 'incident';\r\nvar incidentGR;\r\n\r\n// Sample values for Category, Subcategory, Impact, and Urgency\r\nvar categories = ['Software', 'Hardware', 'Network'];\r\nvar subcategories = ['CPU', 'Disk','Memory', 'Monitor','Mouse', 'Email', 'Application', 'Desktop', 'Server', 'Router', 'VPN', 'DNS', 'DB2', 'MS SQL Server','Oracle'];\r\nvar impacts = [1, 2, 3]; // Low, Moderate, High\r\nvar urgencies = [1, 2, 3]; // Low, Moderate, High\r\n\r\n// Sample array for requestedFor\r\nvar requestedForArray = [{\r\n    \"name\": \"Fred Luddy\",\r\n    \"email\": \"fred.luddy@example.com\"\r\n}, {\r\n    \"name\": \"Beth Anglin\",\r\n    \"email\": \"beth.anglin@example.com\"\r\n}, {\r\n    \"name\": \"System Administrator\",\r\n    \"email\": \"admin@example.com\"\r\n}, {\r\n    \"name\": \"Joe Employee\",\r\n    \"email\": \"employee@example.com\"\r\n}];\r\n\r\nfor (var i = 0; i < numberOfIncidents; i++) {\r\n    // Create a new incident record\r\n    incidentGR = new GlideRecord(incidentTable);\r\n    incidentGR.initialize();\r\n\r\n    // Set random values for incident fields\r\n    incidentGR.description = 'This is a random incident generated for testing purposes.';\r\n    incidentGR.category = categories[Math.floor(Math.random() * categories.length)];\r\n    incidentGR.subcategory = subcategories[Math.floor(Math.random() * subcategories.length)];\r\n    incidentGR.impact = impacts[Math.floor(Math.random() * impacts.length)];\r\n    incidentGR.urgency = urgencies[Math.floor(Math.random() * urgencies.length)];\r\n    incidentGR.short_description = 'Random Incident ' + (i + 1) + ' ' + incidentGR.category +\r\n        ' ' + incidentGR.subcategory + incidentGR.impact + ' ' + incidentGR.urgency;\r\n\t\r\n    // Set random values for AssignedTo, IssueDate\r\n    var randomRequester = requestedForArray[Math.floor(Math.random() * requestedForArray.length)];\r\n    incidentGR.assigned_to = randomRequester.name;\r\n    incidentGR.requested_for = randomRequester.name;\r\n    incidentGR.caller_id = \"System Administrator\"; // You can use your user name for easy identification.\r\n\r\n    // Randomly set the state: New, In Progress, Resolved, Closed, or Canceled\r\n    var stateRandom = Math.random();\r\n    if (stateRandom < 0.2) {\r\n        incidentGR.state = 3; // Resolved\r\n        incidentGR.close_code = 'Solution provided'; // Set the resolution code\r\n        incidentGR.resolved_date = gs.daysAgo(Math.floor(Math.random() * 30)); // Resolved within the last 30 days\r\n        incidentGR.u_resolved_date = gs.daysAgo(Math.floor(Math.random() * 30)); // User created Resolved date within the last 30 days\t\t\r\n        incidentGR.close_notes = 'Randomly Resolved';\r\n    } else if (stateRandom < 0.4) {\r\n        incidentGR.state = 7; // Closed\r\n        incidentGR.close_code = 'Solution provided'; // Set the resolution code\r\n        incidentGR.resolved_date = gs.daysAgo(Math.floor(Math.random() * 30)); // Resolved within the last 30 days\r\n        incidentGR.u_resolved_date = gs.daysAgo(Math.floor(Math.random() * 30)); // User created Resolved Date within the last 30 days\t\t\r\n        incidentGR.close_notes = 'Randomly Closed';\r\n    } else if (stateRandom < 0.6) {\r\n        incidentGR.state = 8; // Canceled\r\n    } else if (stateRandom < 0.8) {\r\n        incidentGR.state = 1; // New\r\n        incidentGR.assigned_to = '';\r\n    } else {\r\n        incidentGR.state = 2; // In Progress\r\n    }\r\n\r\n\r\n    // Generate random issue_date within the last month\r\n    var rightNow = new GlideDateTime();\r\n    pickDate = (Math.floor(Math.random() * 60) - 30);\r\n    rightNow.addDaysUTC(pickDate);\r\n    incidentGR.setValue(\"issue_date\", rightNow.getDate());\r\n    incidentGR.setValue(\"u_issue_date\", rightNow.getDate());\r\n\r\n    // Insert the record\r\n    incidentGR.insert();\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Generate Random Incident Records This script can be used to generate random Incident records for testing purposes. Usage",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Generate Random Incident Records",
        "scriptFiles": [
          "generate_random_incident.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Generate%20Random%20Incident%20Records",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Generate%20Random%20Incident%20Records/generate_random_incident.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.197Z",
    "updatedAt": "2025-09-21T08:58:59.331Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 505,
    "type": "background_script",
    "name": "Generate JWT Token",
    "description": "Generate JWT Token This is used to generate the JWT token from SN background script by using jwtAPI and the corresponding method:generateJWT()",
    "script": "var jwtAPI = new sn_auth.GlideJWTAPI(); // Instantiate the object\r\nvar headerJSON = {  \"kid\": \"<key id value>\"  }; //Add the header\r\nvar header = JSON.stringify(headerJSON);\r\nvar payloadJSON = { \"iss\": \"<client_id value>\", \"sub\": \"ravikumar@gmail.com\", \"aud\":\"<client_id value>\", \"exp\":\"36500\" }; //Prepare the payload\r\nvar payload = JSON.stringify(payloadJSON);\r\nvar jwtProviderSysId = \"<JWT provider sys id value>\"; //Mention the JWT provider instance id\r\nvar jwt = jwtAPI.generateJWT(jwtProviderSysId, header, payload); //Now generate the JWT token\r\ngs.info(\"******JWT Token:\" + jwt);",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Generate JWT Token This is used to generate the JWT token from SN background script by using jwtAPI and the corresponding method:generateJWT()",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Generate JWT Token",
        "scriptFiles": [
          "generateJWTToken.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Generate%20JWT%20Token",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Generate%20JWT%20Token/generateJWTToken.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.194Z",
    "updatedAt": "2025-09-21T08:58:59.327Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 504,
    "type": "background_script",
    "name": "Form Field Count",
    "description": "This background or fix script will list forms that have more than a certain number of fields (starting threshold is 30, but can be changed on line 2).  It looks through all form sections, and excludes container starts and splits.  Forms / sections with more than 30(?) fields will appear on the Health Scan / Impact report as a possible performance impact, causing the form to take a noticeable am...",
    "script": "var count = 0;\r\nvar maxFields = 30; //change to match your threshold/allowance\r\nvar frmGr = new GlideRecord('sys_ui_form');\r\nfrmGr.query();\r\nwhile (frmGr.next()){\r\n\tcount = 0;\r\n\tvar frmsecGr = new GlideRecord('sys_ui_form_section');\r\n\tfrmsecGr.addQuery('sys_ui_form', frmGr.sys_id);\r\n\tfrmsecGr.query();\r\n\twhile (frmsecGr.next()){\r\n\t\tvar secGr = new GlideRecord('sys_ui_section');\r\n\t\tsecGr.addQuery('sys_id', frmsecGr.sys_ui_section);\r\n\t\tsecGr.query();\r\n\t\twhile (secGr.next()) {\r\n\t\t\tvar eleGr = new GlideRecord('sys_ui_element');\r\n \t\t\teleGr.addQuery('sys_ui_section', secGr.sys_id);\r\n\t\t\teleGr.addNullQuery('type');\r\n \t\t\teleGr.query();\r\n \t\t\tif (eleGr.next()) {\r\n\t \t\t\tcount += eleGr.getRowCount();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (count > maxFields) {\r\n\t\tgs.info('FORM FIELD SCRIPT: Fields on form ' + frmGr.name + ' = ' + count);\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "This background or fix script will list forms that have more than a certain number of fields (starting threshold is 30, but can be changed on line 2).  It looks through all form sections, and excludes container starts and splits.  Forms / sections with more than 30(?) fields will appear on the Health Scan / Impact report as a possible performance impact, causing the form to take a noticeable am...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Form Field Count",
        "scriptFiles": [
          "Form Field Count.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Form%20Field%20Count",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Form%20Field%20Count/Form%20Field%20Count.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.190Z",
    "updatedAt": "2025-09-21T08:58:59.324Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 503,
    "type": "background_script",
    "name": "Force new value to read only or protected field",
    "description": "Background Script Background Script, to force update on read only or protected fields. It can be used when it is a need of fixing a value, of field which can not be done from list / form edit. It can be used to any type of table, record and field, need just correct configuration. How to use",
    "script": "//Background script to force new value on read only fields\r\n\r\n//ticketSysId - sys_id value of record which you would like to update\r\nvar ticketSysId = '';\r\n\r\n//table - table where this record exists\r\nvar table = '';\r\n\r\n//field - field which should be forced with new value on record\r\nvar field = '';\r\n\r\n//value - new value which should be set on record\r\nvar value = '';\r\n\r\n//GlideRecord to retrieve chose record\r\nvar gr = new GlideRecord(table);\r\nvar result = gr.get(ticketSysId);\r\n\r\nif (result) {\r\n    //In case record was correctly found, log information is executed and then update is made on record\r\n    gs.info('Record found, updating field: ' + field + ' with value: ' + value);\r\n    gr.setWorkflow(false);\r\n    gr.setValue(field, value);\r\n    gr.update();\r\n} else {\r\n    //In case record was not found, error log information is displayed\r\n    gs.error('Not found record with sys_id: ' + ticketSysId + ' in table: ' + table);\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Background Script Background Script, to force update on read only or protected fields. It can be used when it is a need of fixing a value, of field which can not be done from list / form edit. It can be used to any type of table, record and field, need just correct configuration. How to use",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Force new value to read only or protected field",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Force%20new%20value%20to%20read%20only%20or%20protected%20field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Force%20new%20value%20to%20read%20only%20or%20protected%20field/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.186Z",
    "updatedAt": "2025-09-21T08:58:59.319Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 502,
    "type": "background_script",
    "name": "FlushOutbox",
    "description": "Flush Outbox Delete or Ignore all email sitting in the outbox. Useful when enabling email in sub-prd and not wanting to get spammed with unsent email",
    "script": "var deleteAll = false;\r\n/**\r\n * Delete or Ignore all email sitting in the outbox\r\n * Useful when enabling email in sub-prd and\r\n * not wanting to get spammed with unsent email\r\n */\r\nvar gr = new GlideRecord(\"sys_email\");\r\ngr.addQuery(\"mailbox\", \"outbox\");\r\ngr.addQuery(\"type\", \"send-ready\");\r\nif (deleteAll) gr.deleteMultiple();\r\nelse {\r\n  gr.query();\r\n  gs.print(\"Found \" + gr.getRowCount() + \" emails in outbox.\");\r\n  while (gr.next()) {\r\n    gr.type = \"send-ignored\";\r\n    gr.update();\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Flush Outbox Delete or Ignore all email sitting in the outbox. Useful when enabling email in sub-prd and not wanting to get spammed with unsent email",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/FlushOutbox",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/FlushOutbox",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/FlushOutbox/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.182Z",
    "updatedAt": "2025-09-21T08:58:59.316Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 501,
    "type": "background_script",
    "name": "Fix reference to Choice",
    "description": "How to fix a reference to the Choice [syschoice] table The Choice table is used internally by the platform and depending on the payload of an operation, for performance reasons the platform can decide that it is better to drop the table and insert all the values instead of perform updates on specific records. When we insert a new record in a table, a new sysid is generated. If we have the Choic...",
    "script": "// File: script_v1.js\n/*\r\n    Carlos Camacho \r\n    Fix Script name: Fix choices on MainTable\r\n    -------------------------------------------------\r\n    Description:\r\n        Populate the field u_new_field with correct values based on the field \r\n        core_choice (type = List)\r\n    -------------------------------------------------\r\n    Debug or Execute:\r\n    - camachoDebug: \r\n                    true: the script will not update any record. Shows sys_ids from \r\n                    existing choices; \r\n                    false: Do not show debug information and do update the main table \r\n                    new field that refers the App choices table.  \r\n\r\n    Variables to replace: \r\n    - x_aaaa_carlos_maintable: table that contains the field ref to Choice and the new \r\n      field ref to internal choices table;\r\n    - core_choice: field name (main table) that is a reference (List) to the Choice \r\n      table.\r\n    - tbchoices: table to store the App choices.\r\n    - u_new_field: field name (main table) that is a reference (List) to the App \r\n      choices table. \r\n*/\r\n\r\nvar camachoDebug = true; \r\n\r\nvar grMainTable = new GlideRecord(\"x_aaaa_carlos_maintable\");\r\ngrMainTable.setWorkflow(false);\r\ngrMainTable.query();\r\nvar listArr = [];\r\n\r\nwhile (grMainTable.next()) {\r\n\r\n    if (camachoDebug)\r\n       gs.info(grMainTable.number);\r\n\r\n    var old_choices = grMainTable.core_choice ? grMainTable.core_choice : \"\";\r\n    listArr = [];\r\n\r\n    if (old_choices) {\r\n\r\n        old_choices = old_choices.split(\",\");\r\n\r\n        for (var i = 0; i < old_choices.length; i++) {\r\n            var grOldChoice = new GlideRecord(\"sys_choice\");\r\n            grOldChoice.addQuery('sys_id', old_choices[i]);\r\n            grOldChoice.setLimit(1);\r\n            grOldChoice.query();\r\n            if (grOldChoice.next()) {\r\n                listArr.push(grOldChoice.getValue('value'));\r\n            }\r\n        }\r\n\r\n        if (camachoDebug)\r\n           gs.info('OldValues: ' + listArr.toString().split(',') );\r\n\r\n        var grNewChoice = new GlideRecord(\"tbchoices\");\r\n        grNewChoice.addEncodedQuery('valueIN' + listArr.toString().split(','));\r\n        grNewChoice.query();\r\n        var newListArr = [];\r\n\r\n        while (grNewChoice.next()) {\r\n           newListArr.push(grNewChoice.getValue('sys_id'));\r\n        }\r\n\r\n        if (camachoDebug) {\r\n\r\n            gs.info('NewValues: ' + newListArr.toString().split(',') );\r\n\r\n        } else {\r\n\r\n            grMainTable.setValue('u_new_field', newListArr.join(',') );\r\n            grMainTable.update();\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\n\n// File: script_v2.js\n/*\r\n    Carlos Camacho \r\n    Fix Script name: Fix choices on MainTable\r\n    -------------------------------------------------\r\n    Description:\r\n        Populate the field u_new_field with correct values based on the field \r\n        core_choice (type = Reference)\r\n    -------------------------------------------------\r\n    Debug or Execute:\r\n    - camachoDebug: \r\n                    true: the script will not update any record. Shows sys_ids from \r\n                    existing choices; \r\n                    false: Do not show debug information and do update the main table \r\n                    new field that refers the App choices table.  \r\n    Variables to replace: \r\n    - x_aaaa_carlos_maintable: table that contains the field ref to Choice and the \r\n      new field ref to internal choices table;\r\n    - core_choice: field name (main table) that is a reference (Reference) to the \r\n      Choice table.\r\n    - tbchoices: table to store the App choices.\r\n    - u_new_field: field name (main table) that is a reference (Reference) to the \r\n      App choices table. \r\n*/\r\nvar camachoDebug = true; \r\nvar grMainTable = new GlideRecord(\"x_aaaa_carlos_maintable\");\r\ngrMainTable.setWorkflow(false);\r\ngrMainTable.query();\r\nvar listArr = [];\r\nwhile (grMainTable.next()) {\r\n    if (camachoDebug)\r\n       gs.info(grMainTable.number);\r\n    var old_choice = grMainTable.core_choice ? grMainTable.core_choice : \"\";\r\n    if (old_choice) {\r\n        var grOldChoice = new GlideRecord(\"sys_choice\");\r\n        grOldChoice.addQuery('sys_id', old_choice);\r\n        grOldChoice.setLimit(1);\r\n        grOldChoice.query();\r\n        if (grOldChoice.next()) {\r\n            var oldValue = grOldChoice.getValue('value');\r\n        }\r\n        if (camachoDebug)\r\n           gs.info('OldValue: ' + oldValue);\r\n        var grNewChoice = new GlideRecord(\"tbchoices\");\r\n        grNewChoice.addQuery('value', oldValue);\r\n        grNewChoice.query();\r\n        if (grNewChoice.next()) {\r\n           var newValue = grNewChoice.getValue('sys_id');\r\n        }\r\n        if (camachoDebug) {\r\n            gs.info('NewValues: ' + newValue );\r\n        } else {\r\n            grMainTable.setValue('u_new_field', newValue);\r\n            grMainTable.update();\r\n        }\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "How to fix a reference to the Choice [syschoice] table The Choice table is used internally by the platform and depending on the payload of an operation, for performance reasons the platform can decide that it is better to drop the table and insert all the values instead of perform updates on specific records. When we insert a new record in a table, a new sysid is generated. If we have the Choic...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Fix reference to Choice",
        "scriptFiles": [
          "script_v1.js",
          "script_v2.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Fix%20reference%20to%20Choice"
      }
    },
    "createdAt": "2025-09-21T07:57:14.178Z",
    "updatedAt": "2025-09-21T08:58:59.312Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 500,
    "type": "background_script",
    "name": "findTableSize",
    "description": "The script retrieves and logs the size of the sysattachmentdoc table in ServiceNow by querying the sysphysicaltablestats table, which stores metadata about the physical size of tables in the instance. - The variable tablename is defined as 'sysattachmentdoc', which is the table that holds the data for attachments in ServiceNow. - A new GlideRecord instance tabSizeinGB is created for the sysphys...",
    "script": "var table_name = 'sys_attachment_doc'; //The file data of attachment is stored in this Table in ServiceNow\r\n\r\nvar tabSizeinGB = new GlideRecord('sys_physical_table_stats');\r\ntabSizeinGB.addQuery('table_name', table_name); //Querying with the 'sys_attachment_doc' table to get the size of it\r\ntabSizeinGB.setLimit(1); //This will limit to one record query\r\ntabSizeinGB.query();\r\nif (tabSizeinGB.next()) {\r\n    gs.info('[' + tabSizeinGB.getValue('table_name') +']' + ' table Size is: ' + tabSizeinGB.getValue('table_size_in_gb') + ' GB');\r\n} else {\r\n    gs.info('Table not found!');\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "The script retrieves and logs the size of the sysattachmentdoc table in ServiceNow by querying the sysphysicaltablestats table, which stores metadata about the physical size of tables in the instance. - The variable tablename is defined as 'sysattachmentdoc', which is the table that holds the data for attachments in ServiceNow. - A new GlideRecord instance tabSizeinGB is created for the sysphys...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/findTableSize",
        "scriptFiles": [
          "findTableSize.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/findTableSize",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/findTableSize/findTableSize.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.173Z",
    "updatedAt": "2025-09-21T08:58:59.309Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 499,
    "type": "background_script",
    "name": "Finding groups with inactive managers",
    "description": "This script is designed to identify all active user groups in ServiceNow where: The group has no manager assigned, OR The assigned manager is inactive.",
    "script": "function Checkgrps() {\r\n    var arr = []; //empty arr\r\n    var gr = new GlideRecord(\"sys_user_group\"); //querying group table\r\n    gr.addActiveQuery(); //filtering only active groups\r\n    gr.query();\r\n    while (gr.next()) {\r\n        if (gr.manager.active == false || gr.manager.nil()) { //dot-walking to check manager's active status and also checking if the group does'nt have a manager assigned or not\r\n            arr.push(gr.name.toString() + \" \"); //pushing all the group names into an array\r\n        }\r\n    }\r\n    gs.info(\"Groups with inactive or no manager: \" + arr); //\r\n    return arr; //returns the arr with all the group names\r\n}\r\n\r\nCheckgrps(); //calling the function to execute the script",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "This script is designed to identify all active user groups in ServiceNow where: The group has no manager assigned, OR The assigned manager is inactive.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Finding groups with inactive managers",
        "scriptFiles": [
          "Finding groups with inactive managers.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Finding%20groups%20with%20inactive%20managers",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Finding%20groups%20with%20inactive%20managers/Finding%20groups%20with%20inactive%20managers.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.169Z",
    "updatedAt": "2025-09-21T08:58:59.305Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 498,
    "type": "background_script",
    "name": "Find sys_id named records",
    "description": "Find sysid named records Use this background script to find records that contain a sysid value in a specified field (other than the actual sysid field) This might for example have happened by accident during migration of data between two ServiceNow instances where referenced records on the target instance were accidentally created due to a Choice action=create setting on a Field Map.",
    "script": "//\r\n// Finds values in fields that are pure sys_id's\r\n//\r\n\r\nvar table = \"cmn_location\"; // Table to search in\r\nvar field = \"name\"; // Table field to search in\r\n\r\nvar grTable = new GlideRecord(table);\r\ngrTable.query();\r\nvar searchresults = \"\";\r\nwhile (grTable.next()) {\r\n    var fieldvalue=grTable.getValue(field);\r\n    if(/^[a-f0-9]{32}$/.test(fieldvalue)) {\r\n        searchresults += fieldvalue + \",\";\r\n    }\r\n}\r\nif( searchresults != \"\" ) {\r\n    gs.info(\"The following sys-ids were found in the \" + table + \".\" + field + \" field:\");\r\n    gs.info(searchresults);\r\n} else {\r\n    gs.info(\"No Sys-ID based values in \" + table + \".\" + field);\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Find sysid named records Use this background script to find records that contain a sysid value in a specified field (other than the actual sysid field) This might for example have happened by accident during migration of data between two ServiceNow instances where referenced records on the target instance were accidentally created due to a Choice action=create setting on a Field Map.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Find sys_id named records",
        "scriptFiles": [
          "findSysIdNamedFiles.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Find%20sys_id%20named%20records",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Find%20sys_id%20named%20records/findSysIdNamedFiles.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.165Z",
    "updatedAt": "2025-09-21T08:58:59.302Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 497,
    "type": "background_script",
    "name": "Find out Duplicate Records",
    "description": "This script helps to find out duplicate records in the table and returns an array of the duplicate records sysid's. In this example I have shown how to find out records in knowledge table. All you need to do is use the call the function with the table and field values as shown below:",
    "script": "// File: Duplicate Records for any table based on field.js\n// Function to check for duplicates in a specified field of a given table\r\nfunction DupCheck(table, field) {\r\n    var arr = [];\r\n    var gr = new GlideAggregate(table);\r\n\r\n    // Aggregate count of the specified field and group by it\r\n    gr.addAggregate('COUNT', field);\r\n    gr.groupBy(field);\r\n    gr.addHaving('COUNT', '>', 1);\r\n    gr.query();\r\n\r\n    gs.info(\"Please find the duplicates from the \" + table + \" for the field \" + field + \" below:\");\r\n\r\n    // Loop through each group with duplicate counts\r\n    while (gr.next()) {\r\n        var duplicateValue = gr.getValue(field);\r\n        var kb = new GlideRecord(table);\r\n\r\n        // Query for active records matching the duplicate value\r\n        kb.addQuery(field, duplicateValue);\r\n        kb.addQuery('active', 'true');\r\n        kb.query();\r\n\r\n        // Collect and log the duplicates\r\n        while (kb.next()) {\r\n            arr.push(kb.sys_id.toString());\r\n            gs.info('--> Number: {0}, and its Sys ID: {1}', [kb.number, kb.sys_id]);\r\n        }\r\n    }\r\n\r\n    // Optionally return the array of sys_ids for further processing\r\n    gs.info(\"array of sys_id's : \" + arr);\r\n    return arr;\r\n}\r\n\r\n// Call the function to check for duplicates in the incident table\r\nDupCheck(\"kb_knowledge\", \"short_description\");\n\n// File: Duplicate Records.js\nvar gr = new GlideAggregate(incident); \r\ngr.addAggregate('COUNT', number); \r\ngr.groupBy(number); \r\ngr.addHaving('COUNT', '>', 1); \r\ngr.query(); \r\nwhile (gr.next()) { \r\n    gs.print(gr.getValue(number) + ' has ' + gr.getAggregate('COUNT', field) + ' duplicate records ');\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "This script helps to find out duplicate records in the table and returns an array of the duplicate records sysid's. In this example I have shown how to find out records in knowledge table. All you need to do is use the call the function with the table and field values as shown below:",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Find out Duplicate Records",
        "scriptFiles": [
          "Duplicate Records for any table based on field.js",
          "Duplicate Records.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Find%20out%20Duplicate%20Records"
      }
    },
    "createdAt": "2025-09-21T07:57:14.161Z",
    "updatedAt": "2025-09-21T08:58:59.299Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 496,
    "type": "background_script",
    "name": "Find Groups Without Members",
    "description": "Initialize an Array: var myGroups = []; Create a GlideRecord Object for User Groups:",
    "script": "var myGroups = [];\r\nvar grGroup = new GlideRecord(\"sys_user_group\");\r\ngrGroup.addActiveQuery();\r\ngrGroup.query();\r\nwhile (grGroup.next()) {\r\nvar gaGroupMember = new GlideAggregate(\"sys_user_grmember\");\r\ngaGroupMember.addQuery(\"group\",grGroup.sys_id.toString());\r\ngaGroupMember.addAggregate('COUNT');\r\ngaGroupMember.query();\r\nvar gm = 0;\r\nif (gaGroupMember.next()) {\r\ngm = gaGroupMember.getAggregate('COUNT');\r\nif (gm == 0) \r\n      myGroups.push(grGroup.name.toString());\r\n}\r\n}\r\ngs.print(myGroups);",
    "metadata": {
      "application": "Global",
      "notes": "Initialize an Array: var myGroups = []; Create a GlideRecord Object for User Groups:",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Find Groups Without Members",
        "scriptFiles": [
          "Get Groups with no Members.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Find%20Groups%20Without%20Members",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Find%20Groups%20Without%20Members/Get%20Groups%20with%20no%20Members.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.157Z",
    "updatedAt": "2025-09-21T08:58:59.295Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 495,
    "type": "background_script",
    "name": "Fetch Active Groups list without members",
    "description": "Sample code to clean up the Groups with no members. This code help to get the Active groups list  with no members",
    "script": "var emptyGroupMembers=[];\r\nvar grSysUserGroup = new GlideRecord('sys_user_group');\r\ngrSysUserGroup.addEncodedQuery(\"active=true\");\r\ngrSysUserGroup.orderBy('name');\r\n//grSysUserGroup.setLimit(1500);\r\ngrSysUserGroup.query();\r\nwhile (grSysUserGroup.next()) {\r\n        var groupid=grSysUserGroup.getValue('sys_id');\r\n        var groupname=grSysUserGroup.getValue('name');\r\n    var grSysUserGrmember = new GlideAggregate('sys_user_grmember');\r\ngrSysUserGrmember.addEncodedQuery(\"group.active=true^group=\"+groupid);\r\ngrSysUserGrmember.addAggregate('COUNT');\r\nvar gcount=0;\r\ngrSysUserGrmember.query();\r\nwhile (grSysUserGrmember.next()) {\r\n     gcount=grSysUserGrmember.getAggregate('COUNT');\r\nif(gcount<1)\r\n{\r\n \r\n    emptyGroupMembers.push(groupname); // push Group name to array\r\n    //emptyGroupMembers.push(groupid); // pushes groups sys ids\r\n\r\n}\r\n}\r\n}\r\n\r\n\r\ngs.print(emptyGroupMembers +  \"zero group count leangth\" + \"\\n\");\r\n\r\n\r\n//gs.print(grSysUserGroup.getRowCount() + \" total query group count\" + \"\\n\");\r\n\r\n//gs.print(emptyGroupMembers +  \"zero group count leangth\" + \"\\n\");\r\n//gs.print(grSysUserGroup.getValue('name'));",
    "metadata": {
      "application": "Global",
      "notes": "Sample code to clean up the Groups with no members. This code help to get the Active groups list  with no members",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Fetch Active Groups list without members",
        "scriptFiles": [
          "activeGroupsWithoutMembers.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Fetch%20Active%20Groups%20list%20without%20members",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Fetch%20Active%20Groups%20list%20without%20members/activeGroupsWithoutMembers.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.153Z",
    "updatedAt": "2025-09-21T08:58:59.292Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 494,
    "type": "background_script",
    "name": "Extend Code Search Base",
    "description": "Description Over time, your code spreads across dozens of artifact types and it becomes very difficult to keep track of it all. The whole thing is made more difficult by the fact that JavaScript code is not always contained in pure script fields but also, for example, in conditions or even in JSON payloads.",
    "script": "var grSearchGroup = new GlideRecord('sn_codesearch_search_group');\r\n\r\ngrSearchGroup.query();\r\n\r\n//iterate all code search groups\r\nwhile (grSearchGroup.next()) {\r\n\tvar grDictionary        = new GlideRecord('sys_dictionary');\r\n\tvar strSearchGroupSysID = grSearchGroup.getValue('sys_id');\r\n\tvar objArrayUtil        = new ArrayUtil();\r\n\r\n  //determine all candidates for a code search from the dictionary \r\n\tgrDictionary.addEncodedQuery(\r\n\t\t'internal_type.nameINscript,condition,condition_string,script_plain,XML,script_server' +\r\n\t\t'^ORelement=reference_qual' +\r\n\t\t'^ORelement=calculation' +\r\n\t\t'^NQelementSTARTSWITHscript' +\r\n\t\t'^ORelementLIKE_script' +\r\n\t\t'^internal_type.nameSTARTSWITHstring' +\r\n\t\t'^ORinternal_type.name=json' +\r\n\t\t'^NQname=sys_variable_value' +\r\n\t\t'^element=value'\r\n\t);\r\n\r\n\tgrDictionary.query();\r\n\r\n\twhile (grDictionary.next()) {\r\n\t\tvar grCodeSearch = new GlideRecord('sn_codesearch_table');\r\n\t\tvar strTable     = grDictionary.getValue('name');\r\n\t\tvar strField     = grDictionary.getValue('element');\r\n\r\n    //load everything which is already registered as code search base\r\n\t\tgrCodeSearch.addQuery('table', strTable);\r\n\t\tgrCodeSearch.addQuery('search_group', strSearchGroupSysID);\r\n\t\tgrCodeSearch.setLimit(1);\r\n\t\tgrCodeSearch.query();\r\n\r\n\t\t//for the respective table there is already a record available\r\n\t\tif (grCodeSearch.next()) {\r\n\t\t\tvar arrFields = grCodeSearch.getValue('search_fields').split(',');\r\n\r\n\t\t\tarrFields.push(strField);\r\n\t\t\tgrCodeSearch.setValue('search_fields', objArrayUtil.unique(arrFields).join(','));\r\n\t\t\tgrCodeSearch.update();\r\n\t\t}\r\n\t\t// create a new record at table \"sn_codesearch_table\"\r\n\t\telse {\r\n\t\t\tgrCodeSearch.initialize();\r\n\t\t\tgrCodeSearch.setValue('table', strTable);\r\n\t\t\tgrCodeSearch.setValue('search_group', strSearchGroupSysID);\r\n\t\t\tgrCodeSearch.setValue('search_fields', strField);\r\n\t\t\tgrCodeSearch.insert();\r\n\t\t}\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Description Over time, your code spreads across dozens of artifact types and it becomes very difficult to keep track of it all. The whole thing is made more difficult by the fact that JavaScript code is not always contained in pure script fields but also, for example, in conditions or even in JSON payloads.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Extend Code Search Base",
        "scriptFiles": [
          "add_more_tables_to_code_search.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Extend%20Code%20Search%20Base",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Extend%20Code%20Search%20Base/add_more_tables_to_code_search.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.150Z",
    "updatedAt": "2025-09-21T08:58:59.288Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 493,
    "type": "background_script",
    "name": "encryptAndDecryptPasswordFields",
    "description": "Generally when you want to encrypt or decrypt any Non-password fields earlier we have Glide Encrypter API methods for encryption and decryption. The GlideEncrypter API uses 3DES encryption standard with NIST 800-131 A Rev2 has recommended against using to encrypt data after 2023. ServiceNow offers alternative cryptographic (Key Management Framwork) solutions to the GlideEncrypter API.",
    "script": "//For Non-password fields Encryption syntax using Key Management Framework Cryptographic module\r\n\r\nvar password = \"Hello World\";\r\nvar encryptOp = new sn_kmf_ns.KMFCryptoOperation(\"global.vamsi_glideencrypter\", \"SYMMETRIC_ENCRYPTION\")\r\n .withInputFormat(\"KMFNone\");\r\nvar encryptedText = encryptOp.doOperation(password); //Encrypting Hello world\r\ngs.info(\"After Encryption: \" + encryptedText);\r\n\r\n\r\n//For Non-password fields Decryption syntax using Key Management Framework Cryptographic module\r\n\r\nvar encryptOp = new sn_kmf_ns.KMFCryptoOperation(\"global.vamsi_glideencrypter\", \"SYMMETRIC_DECRYPTION\")\r\n .withOutputFormat(\"KMFNone\");\r\nvar clear_text = encryptOp.doOperation('91ddbb5d47c012101b589d2f316d438012p3lgrR72vEQW5yLk-WXKQ==aGqxYzUXuyLt3HTqcW6-HA=='); //Pass Cipher text of Hello World (Which is the output of first script)\r\ngs.info(\"After decryption: \" + clear_text);",
    "metadata": {
      "application": "Global",
      "notes": "Generally when you want to encrypt or decrypt any Non-password fields earlier we have Glide Encrypter API methods for encryption and decryption. The GlideEncrypter API uses 3DES encryption standard with NIST 800-131 A Rev2 has recommended against using to encrypt data after 2023. ServiceNow offers alternative cryptographic (Key Management Framwork) solutions to the GlideEncrypter API.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/encryptAndDecryptPasswordFields",
        "scriptFiles": [
          "Encrypt and Decrypt Non-Password Fields.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/encryptAndDecryptPasswordFields",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/encryptAndDecryptPasswordFields/Encrypt%20and%20Decrypt%20Non-Password%20Fields.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.146Z",
    "updatedAt": "2025-09-21T08:58:59.285Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 492,
    "type": "background_script",
    "name": "encryptAndDecryptNonPasswordFields",
    "description": "Dear ServiceNow Community, The GlideEncrypter API uses 3DES encryption standard with NIST 800-131 A Rev2 has recommended against using to encrypt data after 2023. ServiceNow offers alternative cryptographic solutions to the GlideEncrypter API. Glide Element API to encrypt/decrypt password2 values through GlideRecord.",
    "script": "//To Encrypt password field\r\nvar grIncident = new GlideRecord('incident');\r\nif (grIncident.get('dc1c4143476202101b589d2f316d4390')) {\r\n grIncident.setDisplayValue('u_pass', 'demo@123');\r\n grIncident.update();\r\n}\r\n//NOTE: You can't use the setValue() API for the Password2 field\r\n\r\n//To print cipher text\r\nvar grIncident = new GlideRecord('incident');\r\nif (grIncident.get('dc1c4143476202101b589d2f316d4390')) {\r\n gs.info('Encrypted cipher test of password ' + grIncident.getValue('u_pass'));\r\n}\r\n\r\n//To decrypt password field\r\nvar grIncident = new GlideRecord('incident');\r\nif (grIncident.get('dc1c4143476202101b589d2f316d4390')) {\r\n var result = grIncident.u_pass.getDecryptedValue();\r\n gs.info(\"Decrypted password- \" +result);\r\n}\r\n//NOTE: The getDecryptedValue() API isn't scoped. It's available globally.",
    "metadata": {
      "application": "Global",
      "notes": "Dear ServiceNow Community, The GlideEncrypter API uses 3DES encryption standard with NIST 800-131 A Rev2 has recommended against using to encrypt data after 2023. ServiceNow offers alternative cryptographic solutions to the GlideEncrypter API. Glide Element API to encrypt/decrypt password2 values through GlideRecord.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/encryptAndDecryptNonPasswordFields",
        "scriptFiles": [
          "encryptAndDecryptNonPasswordFields.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/encryptAndDecryptNonPasswordFields",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/encryptAndDecryptNonPasswordFields/encryptAndDecryptNonPasswordFields.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.142Z",
    "updatedAt": "2025-09-21T08:58:59.282Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 491,
    "type": "background_script",
    "name": "Encrypt & decrypt payload via base64",
    "description": "This code is an example to encrypt or decrypt the payload using base64Encode and decode methods of GlideStringUtil API.",
    "script": "var obj ={};\r\nobj.name = 'Mohit Kaushik';\r\nobj.email ='Mohit.1@abc.com';\r\nobj.contact = '1234567890';\r\n\r\nvar str = JSON.stringify(obj,null,4);\r\n\r\nvar encryption = GlideStringUtil.base64Encode(str);\r\ngs.info(encryption);\r\n\r\nvar decrypt = GlideStringUtil.base64Decode(encryption);\r\ngs.info(JSON.stringify(decrypt,null,2));",
    "metadata": {
      "application": "Global",
      "notes": "This code is an example to encrypt or decrypt the payload using base64Encode and decode methods of GlideStringUtil API.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Encrypt & decrypt payload via base64",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Encrypt%20%26%20decrypt%20payload%20via%20base64",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Encrypt%20%26%20decrypt%20payload%20via%20base64/code.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.138Z",
    "updatedAt": "2025-09-21T08:58:59.278Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 490,
    "type": "background_script",
    "name": "Encode and Decode URI",
    "description": "EncodeURI refers to the process of converting a string into that is safe for use in URI(Uniform Resource identifier). It is done by replacing characters that have special meanings in a URI with their percentage encoded equivalents. The common use case in ServiceNow is in the Rest Message Endpoint.",
    "script": "var getURI = 'https://api.dynatrace.com/v2/query=min:tls.get_days{*}by{name,script}';\r\nvar encoded = encodeURI(getURI);\r\ngs.info(encoded);\r\n// Expected output: \"https://api.dynatrace.com/v2/query=min:tls.get_days%7B*%7Dby%7Bname,script%7D\"\r\n\r\nvar decoded = decodeURI(encoded);\r\ngs.info(decoded);\r\n// Expected output: \"https://api.dynatrace.com/v2/query=min:tls.get_days{*}by{name,script}\"",
    "metadata": {
      "application": "Global",
      "notes": "EncodeURI refers to the process of converting a string into that is safe for use in URI(Uniform Resource identifier). It is done by replacing characters that have special meanings in a URI with their percentage encoded equivalents. The common use case in ServiceNow is in the Rest Message Endpoint.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Encode and Decode URI",
        "scriptFiles": [
          "encodeURIdecodeURI.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Encode%20and%20Decode%20URI",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Encode%20and%20Decode%20URI/encodeURIdecodeURI.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.135Z",
    "updatedAt": "2025-09-21T08:58:59.275Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 489,
    "type": "background_script",
    "name": "Discover Datacenters for Service Accounts",
    "description": "Discover the data centers for all the cloud service accounts. Description: This script will discover the data centers for all the service accounts. If you have a lot of service accounts, it is best to run the script as a Scheduled Job",
    "script": "var g = new GlideRecord('cmdb_ci_cloud_service_account');\r\ng.query();\r\ngs.info('Record Count ' + g.getRowCount());\r\n\r\nwhile (g.next()) {\r\n    var scheduleConfig = new global.CloudDiscoveryScheduleConfig();\r\n    var accountSysId = g.sys_id + '';\r\n    var result = {};\r\n    gs.info(\"Discovering datacenters for: \" + g.name + \" \" + accountSysId);\r\n    try {\r\n        result = scheduleConfig.discoverDatacenters(accountSysId);\r\n        gs.info(\"Result: Success\");\r\n    } catch(err) {\r\n        result.error = err;\r\n    }\r\n \r\n    if (result.error){\r\n        gs.addErrorMessage(result.error);\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Discover the data centers for all the cloud service accounts. Description: This script will discover the data centers for all the service accounts. If you have a lot of service accounts, it is best to run the script as a Scheduled Job",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Discover Datacenters for Service Accounts",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Discover%20Datacenters%20for%20Service%20Accounts",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Discover%20Datacenters%20for%20Service%20Accounts/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.131Z",
    "updatedAt": "2025-09-21T08:58:59.271Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 488,
    "type": "background_script",
    "name": "Decrypt Password Field",
    "description": "Sometimes we forget the password we are using e.g. the Credentials records for integrations. With this code, you can go into the \"basicauthcredentials\" table and decrypt the field \"password\" which is of the type password2. The API GlideEncrypter does only work in the Global scope.",
    "script": "//Remember to run this in the global scope\r\n\r\n//Get the record that has the password2 field.\r\nvar getBasicAuthGR = new GlideRecord('basic_auth_credentials');\r\ngetBasicAuthGR.get('INSERT_SYS_ID');\r\n\r\n//Decrypt the password and show it.\r\nvar Encrypter = new GlideEncrypter();  \r\nvar decryptedPassword= Encrypter.decrypt(getBasicAuthGR.password);\r\n\r\ngs.info(\"password is: \" + decryptedPassword);//Remember this also ends up in the logfile.",
    "metadata": {
      "application": "Global",
      "notes": "Sometimes we forget the password we are using e.g. the Credentials records for integrations. With this code, you can go into the \"basicauthcredentials\" table and decrypt the field \"password\" which is of the type password2. The API GlideEncrypter does only work in the Global scope.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Decrypt Password Field",
        "scriptFiles": [
          "decryptfield.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Decrypt%20Password%20Field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Decrypt%20Password%20Field/decryptfield.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.127Z",
    "updatedAt": "2025-09-21T08:58:59.267Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 487,
    "type": "background_script",
    "name": "Deactivate groups with no members and inactive manager",
    "description": "Deactivate groups with no members and inactive manager Use case : Background script that will deactivate all the groups in which there are 0 members and group manager is inactive info : This method is to achieve the above use-case just with one time run of background script",
    "script": "var gr = new GlideRecord('sys_user_group');\r\ngr.addEncodedQuery(\"active=true^manager.active=false^RLQUERYsys_user_grmember.group,<1,m2m^ENDRLQUERY\");\r\ngr.query();\r\ngr.active = false;\r\ngr.updateMultiple();",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Deactivate groups with no members and inactive manager Use case : Background script that will deactivate all the groups in which there are 0 members and group manager is inactive info : This method is to achieve the above use-case just with one time run of background script",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Deactivate groups with no members and inactive manager",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Deactivate%20groups%20with%20no%20members%20and%20inactive%20manager",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Deactivate%20groups%20with%20no%20members%20and%20inactive%20manager/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.124Z",
    "updatedAt": "2025-09-21T08:58:59.264Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 486,
    "type": "background_script",
    "name": "Custom Table Usage",
    "description": "Custom Table Usage Count This script provides a way of counting where any custom tables (u) are used in the instance. This script is not to be used to determine subscription and license usage.  It is simply to determine how widespread the use of a custom table is in your instance to assist with tidying up unused tables.",
    "script": "/* \r\n * This script is not to be used to determine subscription and license usage.  \r\n * It is simply to determine how widespread the use of a custom table is in your instance to assist with tidying up unused tables.\r\n */\r\n\r\nconst USAGE_COUNT_CONFIG = [\r\n    { \"table\": \"sys_dictionary\", \"field\": \"reference\", \"title\": \"Dictionary\" },\r\n    { \"table\": \"item_option_new\", \"field\": \"reference\", \"title\": \"Variables\" },\r\n    { \"table\": \"sys_script\", \"field\": \"collection\", \"title\": \"Business Rules\" },\r\n    { \"table\": \"sys_script_client\", \"field\": \"table\", \"title\": \"Client Scripts\" },\r\n    { \"table\": \"sys_dictionary\", \"field\": \"name\", \"title\": \"Dictionary Entries\" },\r\n    { \"table\": \"sys_dictionary_override\", \"field\": \"name\", \"title\": \"Dictionary Overrides\" },\r\n    // { \"table\": \"sysevent_email_action\", \"field\": \"collection \", \"title\": \"Notifications\", \"query\": \"\" },\r\n    { \"table\": \"sys_ui_action\", \"field\": \"table\", \"title\": \"UI Actions\" },\r\n    { \"table\": \"sys_security_acl\", \"field\": \"name\", \"title\": \"ACL\", \"query\": \"STARTSWITH\" },\r\n    { \"table\": \"sys_ui_policy\", \"field\": \"table\", \"title\": \"UI Policies\", },\r\n    { \"table\": \"sys_data_policy2\", \"field\": \"model_table\", \"title\": \"Data Policy\" },\r\n    { \"table\": \"sys_ui_style\", \"field\": \"name\", \"title\": \"Styles\" },\r\n    { \"table\": \"sysrule_view\", \"field\": \"table\", \"title\": \"View Rules\" },\r\n    { \"table\": \"wf_workflow\", \"field\": \"table\", \"title\": \"Workflows\" },\r\n    { \"table\": \"sys_hub_flow\", \"field\": \"sys_id\", \"title\": \"Flows\", \"query\": \"\", \"query_field\": \"sys_id\" },\r\n    { \"table\": \"sys_script_include\", \"field\": \"script\", \"title\": \"Script Include\", 'query': 'CONTAINS'}\r\n];\r\n\r\n// get list of fields to query from the table\r\n// grab any fields which are listed as query_fields in the usage config, and add name and label.\r\nvar selectFields = USAGE_COUNT_CONFIG.map(function (_obj) {\r\n    return _obj.query_field;\r\n}).filter(Boolean);\r\n\r\nselectFields.push('name');\r\nselectFields.push('label');\r\n\r\nvar gqTables = new global.GlideQuery('sys_db_object')\r\n    .where('name', 'STARTSWITH', 'u_')\r\n    // don't want m2m tables\r\n    .where('name', 'NOT LIKE', 'm2m')\r\n    // don't want tables extended from Import Set Row or Query Builder Results\r\n    // apologies for the hard-coded sys_ids, they'll never change, right?\r\n    .where('super_class', 'NOT IN', ['88d993c3b4232110320f8dc279c8042b', '897b97c7b4632110320f8dc279c80489'])\r\n    .select(selectFields)\r\n    .map(function (_table) {\r\n        var references = {};\r\n        _table.references = references;\r\n\r\n        USAGE_COUNT_CONFIG.forEach(function (_usageConfig) {\r\n            var query_type = _usageConfig['query'] ? _usageConfig['query'] : \"=\";\r\n            var query_field = _usageConfig['query_field'] ? _usageConfig['query_field'] : 'name';\r\n\r\n            var gqUsageCount = new global.GlideQuery(_usageConfig.table)\r\n                .where(_usageConfig.field, query_type, _table[query_field])\r\n                .count();\r\n\r\n            references[_usageConfig.title] = gqUsageCount;\r\n        })\r\n        delete _table[\"sys_id\"]; // get rid of the sys_id field\r\n\r\n        return _table;\r\n    })\r\n    .reduce(function (arr, e) { arr.push(e); return arr; }, []);\r\n\r\ngs.info(JSON.stringify(gqTables, '', 3))",
    "metadata": {
      "application": "Global",
      "notes": "Custom Table Usage Count This script provides a way of counting where any custom tables (u) are used in the instance. This script is not to be used to determine subscription and license usage.  It is simply to determine how widespread the use of a custom table is in your instance to assist with tidying up unused tables.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Custom Table Usage",
        "scriptFiles": [
          "customTableUsage.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Custom%20Table%20Usage",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Custom%20Table%20Usage/customTableUsage.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.120Z",
    "updatedAt": "2025-09-21T08:58:59.260Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 485,
    "type": "background_script",
    "name": "Currency Formatting",
    "description": "Format currency values to your preferred locale and format. Examples are provided for EUR, HUF with English and Hungarian number format. formatString values:",
    "script": "var amount = '9123456.123456789';\r\nvar currencyCode = 'EUR';\r\nvar formatString = '%s%v %c';\r\nvar exchangeValue = new sn_currency.GlideCurrencyFormatter(formatString);\r\nexchangeValue.setLocale(\"en\", \"EN\"); // Language = en Country = EN\r\n\r\ngs.info('Formatted currency: ' + exchangeValue.setMaxFractionDigits(1).format(amount, currencyCode));\r\n// expected output: Formatted currency: â‚¬9,123,456.1 EUR\r\n\r\namount = '9123456.127456789';\r\ncurrencyCode = 'HUF';\r\nformatString = '%v %c';\r\nexchangeValue = new sn_currency.GlideCurrencyFormatter(formatString);\r\nexchangeValue.setLocale(\"hu\", \"HU\"); // Language = hu Country = HU\r\n\r\ngs.info('Formatted currency: ' + exchangeValue.setMaxFractionDigits(2).format(amount, currencyCode));\r\n// expected output: Formatted currency: 9 123 456,13 HUF",
    "metadata": {
      "application": "Global",
      "notes": "Format currency values to your preferred locale and format. Examples are provided for EUR, HUF with English and Hungarian number format. formatString values:",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Currency Formatting",
        "scriptFiles": [
          "currencyFormatting.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Currency%20Formatting",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Currency%20Formatting/currencyFormatting.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.116Z",
    "updatedAt": "2025-09-21T08:58:59.256Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 484,
    "type": "background_script",
    "name": "Currency Conversion",
    "description": "Convert the currency from one country denomination to other This is for the currency conversion purpose and the js file has the code snippet",
    "script": "var conv = new sn_currency.GlideCurrencyConverter('EUR', 'USD'); // call to API by passing Europe and USA\r\nconv.setAmount(100); //currency value\r\ngs.info(conv.convert()); //call the method from the API",
    "metadata": {
      "application": "Global",
      "notes": "Convert the currency from one country denomination to other This is for the currency conversion purpose and the js file has the code snippet",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Currency Conversion",
        "scriptFiles": [
          "currencyConvert.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Currency%20Conversion",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Currency%20Conversion/currencyConvert.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.112Z",
    "updatedAt": "2025-09-21T08:58:59.253Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 483,
    "type": "background_script",
    "name": "Copy table name list header action",
    "description": "Add \"Copy Table Name\" menu item to the List context Description: This background script programmatically adds a menu item to any list context menu that will copy the respective table name of that list. Example: In this case, clicking the \"Copy Table Name\" menu item will copy  to your clipboard",
    "script": "// File: addMenuItem.js\nvar agg = new GlideAggregate(\"sys_ui_context_menu\");\r\nagg.addEncodedQuery(\"name=Copy Table Name^order=9876\");\r\nagg.addAggregate(\"COUNT\");\r\nagg.query();\r\nvar count = 0;\r\n// Process returned records\r\nwhile (agg.next()) {\r\n  count = agg.getAggregate(\"COUNT\");\r\n}\r\nif (count > 0) {\r\n  gs.info(\"No Action: The menu item already exists\");\r\n} else {\r\n  var gr = new GlideRecord(\"sys_ui_context_menu\");\r\n  gr.initialize();\r\n  gr.name = \"Copy Table Name\";\r\n  gr.active = true;\r\n  gr.order = 9876;\r\n  gr.type.setDisplayValue(\"action\");\r\n  gr.action_script = \"copyToClipboard(g_list.tableName);\";\r\n  gr.menu.setDisplayValue(\"list_title\");\r\n  gr.insert();\r\n  gs.info('List context \"Copy Table Name\" menu item was added');\r\n}\n\n// File: removeMenuItem.js\n//Find existing Copy Table Name menu item and remove it\r\nvar gr = new GlideRecord('sys_ui_context_menu');\r\ngr.addEncodedQuery('name=Copy Table Name^order=9876');\r\ngr.query();\r\nvar found = false;\r\nwhile (gr.next()) {\r\n  found = true;\r\n  gr.deleteRecord();\r\n  gs.info('The menu item was removed');\r\n}\r\nif (!found) {\r\n  gs.info('No Action: The menu item was not found.');\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "**",
      "notes": "Add \"Copy Table Name\" menu item to the List context Description: This background script programmatically adds a menu item to any list context menu that will copy the respective table name of that list. Example: In this case, clicking the \"Copy Table Name\" menu item will copy  to your clipboard",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Copy table name list header action",
        "scriptFiles": [
          "addMenuItem.js",
          "removeMenuItem.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Copy%20table%20name%20list%20header%20action"
      }
    },
    "createdAt": "2025-09-21T07:57:14.109Z",
    "updatedAt": "2025-09-21T08:58:59.249Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 482,
    "type": "background_script",
    "name": "Convert Incident Records to JSON",
    "description": "Overview of Converting Incident Records to JSON The provided script fetches all active incident records from the ServiceNow database and converts them into a JSON format. Importance of Understanding JSON in ServiceNow",
    "script": "var incidents = [];\r\nvar gr = new GlideRecord('incident');\r\ngr.addQuery('active', true);\r\ngr.query();\r\nwhile (gr.next()) {\r\n    incidents.push({\r\n        number: gr.number.toString(),\r\n        short_description: gr.short_description.toString(),\r\n        state: gr.state.toString(),\r\n        assigned_to: gr.assigned_to.getDisplayValue('name'),\r\n        created_on: gr.sys_created_on.getDisplayValue()\r\n    });\r\n}\r\n\r\nvar jsonOutput = JSON.stringify(incidents);\r\ngs.info(jsonOutput);",
    "metadata": {
      "application": "Global",
      "notes": "Overview of Converting Incident Records to JSON The provided script fetches all active incident records from the ServiceNow database and converts them into a JSON format. Importance of Understanding JSON in ServiceNow",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Convert Incident Records to JSON",
        "scriptFiles": [
          "convert code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Convert%20Incident%20Records%20to%20JSON",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Convert%20Incident%20Records%20to%20JSON/convert%20code.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.105Z",
    "updatedAt": "2025-09-21T08:58:59.246Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 481,
    "type": "background_script",
    "name": "Convert Date Time",
    "description": "This is the simple code to run independently from AES - Background Scripts module and convert the datetime from one time zone to other",
    "script": "var strConvertedDateTime=new GlideScheduleDateTime(\"2022-03-03 06:30:00\").convertTimeZone(\"CET\", \"IST\"); // Instantiate the object by passing the timezones\r\nvar gdtConvertedDateTime = new GlideDateTime(strConvertedDateTime); //Call the method to convert the date time from CET to IST\r\ngs.info(gdtConvertedDateTime); //Print the converted value",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "This is the simple code to run independently from AES - Background Scripts module and convert the datetime from one time zone to other",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Convert Date Time",
        "scriptFiles": [
          "convertTimeZone.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Convert%20Date%20Time",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Convert%20Date%20Time/convertTimeZone.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.101Z",
    "updatedAt": "2025-09-21T08:58:59.242Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 480,
    "type": "background_script",
    "name": "Convert comma separated values in string to columns",
    "description": "1.Take any comma separated string to be displayed in columns 2.Apply above logic 3.update to field /Print /Use this in mail scripts to include in the notification.",
    "script": "var Str = \"Element1,Element2,Element3,Element4,Element5,Element6\";\r\nresult =[];\r\nvar myArray = Str.split(\",\");\r\nfor(var i =0; i<=myArray.length;i++){\r\nresult.push(myArray[i]);\r\n}\r\nvar output= \"\\n\" +result.join(\"\\n\");\r\ngs.info(output);",
    "metadata": {
      "application": "Global",
      "notes": "1.Take any comma separated string to be displayed in columns 2.Apply above logic 3.update to field /Print /Use this in mail scripts to include in the notification.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Convert comma separated values in string to columns",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Convert%20comma%20separated%20values%20in%20string%20to%20columns",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Convert%20comma%20separated%20values%20in%20string%20to%20columns/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.098Z",
    "updatedAt": "2025-09-21T08:58:59.239Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 479,
    "type": "background_script",
    "name": "Compare Roles Between Two Users",
    "description": "Compare Roles of Two Users Provide the usernames of two users and this script will print out the roles they share and the roles they don't share. Usage",
    "script": "(function(){\r\n\t\r\n\t// false - only directly assigned roles\r\n\t// true - roles inherited from other roles or groups\r\n\tvar include_inherited_roles = false;\r\n\t\r\n\t// Username of the two users we want to compare roles agaist\r\n\tvar username_a = \"abel.tuter\";\r\n\tvar username_b = \"abraham.lincoln\";\r\n\r\n\tvar set_a = [];\r\n\tvar set_b = [];\r\n\t\r\n\t// Query for user A's roles\r\n\tvar gr_user_a = new GlideRecord(\"sys_user_has_role\");\r\n\tgr_user_a.addQuery(\"user.user_name\", username_a);\r\n\tif(!include_inherited_roles)\r\n\t\tgr_user_a.addQuery(\"inherited\", false);\r\n\tgr_user_a.addQuery(\"state\",\"active\");\r\n\tgr_user_a.query();\r\n\twhile(gr_user_a.next())\r\n\t\tset_a.push(gr_user_a.role.name.toString());\r\n\t\r\n\t\r\n\t// Query for user B's roles\r\n\tvar gr_user_b = new GlideRecord(\"sys_user_has_role\");\r\n\tgr_user_b.addQuery(\"user.user_name\", username_b);\r\n\tif(!include_inherited_roles)\r\n\t\tgr_user_b.addQuery(\"inherited\", false);\r\n\tgr_user_b.addQuery(\"state\",\"active\");\r\n\tgr_user_b.query();\r\n\twhile(gr_user_b.next())\r\n\t\tset_b.push(gr_user_b.role.name.toString());\r\n\t\r\n\t// Roles that A has that B does not have\r\n\tvar a_not_b = set_a.concat(set_b).filter( function(value, index, self){return set_b.indexOf(value) < 0;} );\r\n\t// Roles that B has that A does not have\r\n\tvar b_not_a = set_a.concat(set_b).filter( function(value, index, self){return set_a.indexOf(value) < 0;} );\r\n\t// Roles that both A and B have\r\n\tvar a_intersect_b = set_a.concat(set_b).filter( function(value, index, self){return set_b.indexOf(value) >= 0 && set_a.indexOf(value) >= 0;} ).filter(function(value, index, self){return self.indexOf(value) === index;});\r\n\t\r\n\tgs.print(\"\\n-Exclusive Role(s) to \" + username_a + \":\\n\\t\" + a_not_b.join(\"\\n\\t\") + \"\\n\\n-Exclusive Role(s) to \" + username_b + \":\\n\\t\" + b_not_a.join(\"\\n\\t\") + \"\\n\\n-Shared Roles:\\n\\t\" + a_intersect_b.join(\"\\n\\t\"));\r\n})();",
    "metadata": {
      "application": "Global",
      "notes": "Compare Roles of Two Users Provide the usernames of two users and this script will print out the roles they share and the roles they don't share. Usage",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Compare Roles Between Two Users",
        "scriptFiles": [
          "compare-roles-2-users.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Compare%20Roles%20Between%20Two%20Users",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Compare%20Roles%20Between%20Two%20Users/compare-roles-2-users.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.095Z",
    "updatedAt": "2025-09-21T08:58:59.235Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 478,
    "type": "background_script",
    "name": "Clone User with Roles and Groups",
    "description": "Clone User with Roles and Groups I have created a script in ServiceNow to replicate a user's profile. This script not only duplicates the user's data but also replicates the roles and groups assigned to that user.",
    "script": "function cloneUser(currentUserId, newUserId) {\r\n\r\n    var newUserRecordSysId = createNewUserRecord(newUserId);\r\n    cloneCurrentUserFields(currentUserId, newUserId);\r\n    cloneUserRoles(currentUserId, newUserRecordSysId);\r\n    cloneUserGroups(currentUserId, newUserRecordSysId);\r\n}\r\n\r\nfunction cloneCurrentUserFields(currentUserId, newUserId) {\r\n\r\n    var currentUserGR = new GlideRecord(\"sys_user\");\r\n    currentUserGR.addQuery(\"user_name\", currentUserId);\r\n    currentUserGR.query();\r\n\r\n    if (currentUserGR.next()) {\r\n        var newUserGR = new GlideRecord(\"sys_user\");\r\n        newUserGR.addQuery(\"user_name\", newUserId);\r\n        newUserGR.query();\r\n        if (newUserGR.next()) {\r\n            var userGRU = new GlideRecordUtil();\r\n            var fieldList = userGRU.getFields(currentUserGR);\r\n            for (var index = 0; index < fieldList.length; index++) {\r\n                var fieldName = fieldList[index];\r\n                if (!newUserGR.getValue(fieldName)) {\r\n                    newUserGR.setValue(fieldName, currentUserGR.getValue(fieldName));\r\n                    newUserGR.update();\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction createNewUserRecord(userId) {\r\n\r\n    var userGR = new GlideRecord(\"sys_user\");\r\n    userGR.initialize();\r\n    userGR.setValue(\"user_name\", userId);\r\n    var sysId = userGR.insert();\r\n    return sysId;\r\n}\r\n\r\nfunction cloneUserRoles(currentUserId, newUserRecordSysId) {\r\n\r\n    var currentUserRoleGR = new GlideRecord(\"sys_user_has_role\");\r\n    currentUserRoleGR.addQuery('user.user_name', currentUserId);\r\n    currentUserRoleGR.addQuery('inherited', 'false');\r\n    currentUserRoleGR.query();\r\n\r\n    while (currentUserRoleGR.next()) {\r\n        var newUserRoleGR = new GlideRecord(\"sys_user_has_role\");\r\n        newUserRoleGR.initialize();\r\n        newUserRoleGR.setValue('user', newUserRecordSysId);\r\n        newUserRoleGR.setValue('role', currentUserRoleGR.getValue('role'));\r\n        newUserRoleGR.insert();\r\n    }\r\n}\r\n\r\nfunction cloneUserGroups(currentUserId, newUserRecordSysId) {\r\n\r\n    var currentUserGroupGR = new GlideRecord(\"sys_user_grmember\");\r\n    currentUserGroupGR.addQuery('user.user_name', currentUserId);\r\n    currentUserGroupGR.query();\r\n\r\n    while (currentUserGroupGR.next()) {\r\n        var newUserGroupGR = new GlideRecord(\"sys_user_grmember\");\r\n        newUserGroupGR.initialize();\r\n        newUserGroupGR.setValue('user', newUserRecordSysId);\r\n        newUserGroupGR.setValue('group', currentUserGroupGR.getValue('group'));\r\n        newUserGroupGR.insert();\r\n    }\r\n}\r\n\r\ncloneUser('currentUserId', 'newUserId'); //currentUserId: Id of the you that we want to clone, newUserId: Id of the new user record.",
    "metadata": {
      "application": "Global",
      "notes": "Clone User with Roles and Groups I have created a script in ServiceNow to replicate a user's profile. This script not only duplicates the user's data but also replicates the roles and groups assigned to that user.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Clone User with Roles and Groups",
        "scriptFiles": [
          "cloneUser.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Clone%20User%20with%20Roles%20and%20Groups",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Clone%20User%20with%20Roles%20and%20Groups/cloneUser.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.091Z",
    "updatedAt": "2025-09-21T08:58:59.232Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 477,
    "type": "background_script",
    "name": "Clone User Record",
    "description": "Clone a user to another user after creating a new user from SN and run the below script from Background Script under System Definition app. The sys id's are needed from both users to run the background script.",
    "script": "createUserRoles();\r\nfunction createUserRoles(){\r\nvar gr = new GlideRecord('sys_user_has_role');\r\ngr.addQuery('user', '<old sys id for that user instance>'); //old sys_id\r\ngr.query();\r\nwhile(gr.next()){\r\nvar gr1 = new GlideRecord('sys_user_has_role');\r\ngr1.initialize();\r\ngr1.user = '<new sys id for that user instance>';//new user sys_id\r\ngr1.role = gr.role;\r\ngr1.insert();\r\n}\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Clone a user to another user after creating a new user from SN and run the below script from Background Script under System Definition app. The sys id's are needed from both users to run the background script.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Clone User Record",
        "scriptFiles": [
          "cloneUserRec.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Clone%20User%20Record",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Clone%20User%20Record/cloneUserRec.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.087Z",
    "updatedAt": "2025-09-21T08:58:59.228Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 476,
    "type": "background_script",
    "name": "Check String is Valid JSON",
    "description": "Function to check if string is a valid JSON Problem statement When working with serialized data, you might come across some malformed or invalid JSON strings from time to time. While JavaScript doesn't have a built-in validation method for JSON, it has a handy JSON.parse() method that can be used to check if a string is a valid JSON format.",
    "script": "// Function to check if a string is a valid JSON\r\nfunction isValidJSON(str) {\r\n    try {\r\n        // Try to parse the string as JSON\r\n        JSON.parse(str);\r\n    } catch (e) {\r\n        // If an error occurs, the string is not valid JSON\r\n        return false;\r\n    }\r\n    // If no error occurs, the string is valid JSON\r\n    return true;                    \r\n}\r\n\r\n// Example JSON string\r\nconst str = '{ \"firstName\":\"John\" , \"lastName\": \"Doe\"}'; \r\n\r\n// Check if the string is valid JSON and log the result\r\nif (isValidJSON(str)) {\r\n  console.log('String is valid JSON');\r\n} else {\r\n  console.log('String is not valid JSON');\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Function to check if string is a valid JSON Problem statement When working with serialized data, you might come across some malformed or invalid JSON strings from time to time. While JavaScript doesn't have a built-in validation method for JSON, it has a handy JSON.parse() method that can be used to check if a string is a valid JSON format.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Check String is Valid JSON",
        "scriptFiles": [
          "checkStringisValidJson.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Check%20String%20is%20Valid%20JSON",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Check%20String%20is%20Valid%20JSON/checkStringisValidJson.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.082Z",
    "updatedAt": "2025-09-21T08:58:59.225Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 475,
    "type": "background_script",
    "name": "Check for duplicates on multiple criteria",
    "description": "Use this script to check for duplicates (and delete if necessary) in a table based on 2 or more criteria. For reference: https://www.servicenow.com/community/developer-blog/search-for-duplicates-delete-based-on-2-columns/ba-p/2279274",
    "script": "deleteDuplicates('table_name', 'criteria1', 'criteria2');\r\n\r\nfunction deleteDuplicates(tableName, field1, field2){\r\n\r\n// declare an array\r\nvar dupRecords = [];\r\nvar duplicateCheck = new GlideAggregate(tableName);\r\nduplicateCheck.addNotNullQuery(field1);\r\nduplicateCheck.addNotNullQuery(field2);\r\nduplicateCheck.groupBy(field1);\r\nduplicateCheck.groupBy(field2);\r\nduplicateCheck.addHaving('COUNT', '>', 1); // addHaving func won't work in scope app\r\nduplicateCheck.query();\r\nwhile(duplicateCheck.next()) {\r\nvar jsonObj = {}; // declare a json object\r\njsonObj[field1] = duplicateCheck[field1].toString();\r\njsonObj[field2] = duplicateCheck[field2].toString()\r\ndupRecords.push(jsonObj);\r\n}\r\n\r\nvar jsonString = JSON.stringify(dupRecords); // convert json object to string\r\n\r\nvar parser = new JSONParser();\r\nvar parsedData = parser.parse(jsonString);\r\nvar length = parsedData.length;\r\n\r\nfor(var i=0; i<length; i++){\r\n\r\nvar encodedQuery = field1 + '=' + parsedData[i][field1] + '^' + field2 + '=' + parsedData[i][field2];\r\n\r\nvar tableRec = new GlideRecord(tableName);\r\ntableRec.addEncodedQuery(encodedQuery);\r\ntableRec.query();\r\nif(tableRec.next()){\r\ngs.info('Repeated Data is: User -> ' + tableRec.getDisplayValue('user') + ' Group -> ' + tableRec.getDisplayValue('group'));\r\ntableRec.deleteRecord();\r\n}\r\n}\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Use this script to check for duplicates (and delete if necessary) in a table based on 2 or more criteria. For reference: https://www.servicenow.com/community/developer-blog/search-for-duplicates-delete-based-on-2-columns/ba-p/2279274",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Check for duplicates on multiple criteria",
        "scriptFiles": [
          "check-for-ducplicates.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Check%20for%20duplicates%20on%20multiple%20criteria",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Check%20for%20duplicates%20on%20multiple%20criteria/check-for-ducplicates.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.079Z",
    "updatedAt": "2025-09-21T08:58:59.221Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 474,
    "type": "background_script",
    "name": "Change Update Set Application Scope",
    "description": "Change update set application scope In ServiceNow, there are instances where an update set is mistakenly created in the incorrect application scope. To rectify this, I've developed a background script that facilitates the alteration of the update set's application scope to the appropriate one.",
    "script": "function changeUpdateSetApplicationScope(updateSetName, currentApplicationScope, newApplicationScope) {\r\n\r\n    var newApplicationScopeSysId = getApplicationScopeSysId(newApplicationScope);\r\n\r\n    var updateSetGR = new GlideRecord(\"sys_update_set\");\r\n    updateSetGR.addQuery('name', updateSetName);\r\n    updateSetGR.addQuery('application.name', currentApplicationScope);\r\n    updateSetGR.query();\r\n\r\n    if (updateSetGR.next()) {\r\n        updateSetGR.setValue('application', newApplicationScopeSysId);\r\n        updateSetGR.update();\r\n    }\r\n\r\n}\r\n\r\nfunction getApplicationScopeSysId(scopeName) {\r\n  \r\n    var appGR = new GlideRecord('sys_app');\r\n    appGR.addQuery('name', scopeName);\r\n    appGR.query();\r\n    if (appGR.next()) {\r\n        return appGR.getValue('sys_id');\r\n    }\r\n}\r\n\r\nchangeUpdateSetApplicationScope('updateSetName', 'currentApplicationScope', 'newApplicationScope');",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Change update set application scope In ServiceNow, there are instances where an update set is mistakenly created in the incorrect application scope. To rectify this, I've developed a background script that facilitates the alteration of the update set's application scope to the appropriate one.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Change Update Set Application Scope",
        "scriptFiles": [
          "changeApplicationScope.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Change%20Update%20Set%20Application%20Scope",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Change%20Update%20Set%20Application%20Scope/changeApplicationScope.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.075Z",
    "updatedAt": "2025-09-21T08:58:59.218Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 473,
    "type": "background_script",
    "name": "Change Approver",
    "description": "Use the code to change approver for any record from background script Replace <Approvalrecordsysid with sysid of record for which approval is triggered Replace <UserDisplayName with name of user who needs to be set as approver",
    "script": "var ab=new GlideRecord('sysapproval_approver');\r\nab.addQuery('sysapproval','<Approval_record_sys_id>');\r\nab.query();\r\nif(ab.next())\r\n{\r\nab.approver.setDisplayValue('<User_Display_Name>')';\r\nab.update();\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Use the code to change approver for any record from background script Replace <Approvalrecordsysid with sysid of record for which approval is triggered Replace <UserDisplayName with name of user who needs to be set as approver",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Change Approver",
        "scriptFiles": [
          "BgScript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Change%20Approver",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Change%20Approver/BgScript.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.072Z",
    "updatedAt": "2025-09-21T08:58:59.215Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 472,
    "type": "background_script",
    "name": "Capturing a record in to the current update set",
    "description": "Using this script present in \"Capturing a record in to the current update set using background script.js\" file we can capture a record from a table (eg; groups, approval configurations) to the current update set We have to provide the table name and the sysid of the record properly as mentioned in the script. When using the GlideUpdateManager2 API, a record is created in the sysupdateversion ta...",
    "script": "var gr = new GlideRecord('<table_name>');//in <table_name> provide the table name in which the record is present\r\ngr.get('<sys_id of the record>');//in <sys_id of the record> provide the sys_id of the record which you need to capture in the update set\r\nvar gum = new GlideUpdateManager2(); //more details on GlideUpdateManager2 API is provided in the readme.md file\r\ngum.saveRecord(gr);",
    "metadata": {
      "application": "and",
      "runContext": "Background script",
      "notes": "Using this script present in \"Capturing a record in to the current update set using background script.js\" file we can capture a record from a table (eg; groups, approval configurations) to the current update set We have to provide the table name and the sysid of the record properly as mentioned in the script. When using the GlideUpdateManager2 API, a record is created in the sysupdateversion ta...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Capturing a record in to the current update set",
        "scriptFiles": [
          "Capturing a record in to the current update set using background script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Capturing%20a%20record%20in%20to%20the%20current%20update%20set",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Capturing%20a%20record%20in%20to%20the%20current%20update%20set/Capturing%20a%20record%20in%20to%20the%20current%20update%20set%20using%20background%20script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.068Z",
    "updatedAt": "2025-09-21T08:58:59.212Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 471,
    "type": "background_script",
    "name": "Bulk Update Tables",
    "description": "Bulk Update Function Documentation - Use the code/function to bulk change some fields in any tables. bulkUpdate(table, query, data) Performs a bulk update on a specified table, applying the given data to all records that match the query.",
    "script": "/**\r\n * Performs a bulk update on a specified table, applying the given data to all records that match the query.\r\n *\r\n * @param {string} table - The name of the table where the bulk update is to be performed.\r\n * @param {string} query - The encoded query string that filters which records to update.\r\n * @param {Object} data - An object representing the field-value pairs to update. \r\n *                        Each key is a field name, and the value is the new value for that field.\r\n *\r\n * Example usage:\r\n * bulkUpdate('incident', 'priority=1^state=2', { priority: 2, state: 3 });\r\n * \r\n * This updates all incidents where priority is 1 and state is 2, setting priority to 2 and state to 3.\r\n */\r\nfunction bulkUpdate(table, query, data) {\r\n\r\n    var getRecord = new GlideRecord(table);\r\n    getRecord.addEncodedQuery(query);\r\n    getRecord.query();\r\n    while (getRecord.next()) {\r\n        for (var field in data) {\r\n            if (data.hasOwnProperty(field)) {\r\n\t\t\t\tgetRecord.setValue(field, data[field]);\r\n            }\r\n        }\r\n\t\tgetRecord.update();\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Bulk Update Function Documentation - Use the code/function to bulk change some fields in any tables. bulkUpdate(table, query, data) Performs a bulk update on a specified table, applying the given data to all records that match the query.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Bulk Update Tables",
        "scriptFiles": [
          "BulkUpdateWithConditions.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Bulk%20Update%20Tables",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Bulk%20Update%20Tables/BulkUpdateWithConditions.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.064Z",
    "updatedAt": "2025-09-21T08:58:59.209Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 470,
    "type": "background_script",
    "name": "Bulk Role Assignment Based on Conditions",
    "description": "Description: This is a script that assigns roles to users in bulk based on specific conditions such as department,location or job title. This script can simplify the process of managing user roles and permissions. Use Case: Assign the 'itil' role to all users in the 'IT' department who are located in a specific region.",
    "script": "// Define the role to be assigned\r\nvar roleName = 'itil';\r\n\r\n// Define the conditions for user selection\r\nvar department = 'IT';\r\nvar location = 'San Diego';\r\n\r\n// Fetch the role record\r\nvar roleGR = new GlideRecord('sys_user_role');\r\nroleGR.addQuery('name', roleName);\r\nroleGR.query();\r\nif (!roleGR.next()) {\r\n    gs.error('Role not found: ' + roleName);\r\n    return;\r\n}\r\n\r\n// Fetch users matching the conditions\r\nvar userGR = new GlideRecord('sys_user');\r\nuserGR.addQuery('department.name', department);\r\nuserGR.addQuery('location.name', location);\r\nuserGR.query();\r\n\r\nvar count = 0;\r\nwhile (userGR.next()) {\r\n    // Check if the user already has the role\r\n    var userRoleGR = new GlideRecord('sys_user_has_role');\r\n    userRoleGR.addQuery('user', userGR.sys_id);\r\n    userRoleGR.addQuery('role', roleGR.sys_id);\r\n    userRoleGR.query();\r\n    if (!userRoleGR.next()) {\r\n        // Assign the role to the user\r\n        var newUserRoleGR = new GlideRecord('sys_user_has_role');\r\n        newUserRoleGR.initialize();\r\n        newUserRoleGR.user = userGR.sys_id;\r\n        newUserRoleGR.role = roleGR.sys_id;\r\n        newUserRoleGR.insert();\r\n        count++;\r\n    }\r\n}\r\n\r\ngs.info('Assigned role \"' + roleName + '\" to ' + count + ' users.');",
    "metadata": {
      "application": "Global",
      "notes": "Description: This is a script that assigns roles to users in bulk based on specific conditions such as department,location or job title. This script can simplify the process of managing user roles and permissions. Use Case: Assign the 'itil' role to all users in the 'IT' department who are located in a specific region.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Bulk Role Assignment Based on Conditions",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Bulk%20Role%20Assignment%20Based%20on%20Conditions",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Bulk%20Role%20Assignment%20Based%20on%20Conditions/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.061Z",
    "updatedAt": "2025-09-21T08:58:59.205Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 469,
    "type": "background_script",
    "name": "Bulk Delete Records in Multiple Tables with Conditions",
    "description": "Bulk Delete Function Documentation - Use the code/function to bulk-deletes records from multiple tables based on provided encoded queries. Function: bulkDelete(target) Deletes records from multiple tables based on provided encoded queries.",
    "script": "/**\r\n * Deletes records from multiple tables based on provided encoded queries.\r\n *\r\n * @param {Object} target - An object where each key is the name of a table and each value is an encoded query string.\r\n *                          The function will delete all records matching the encoded query for each specified table.\r\n *\r\n * Example usage:\r\n * bulkDelete({\r\n *     'incident': 'priority=1^state=2',\r\n *     'change_request': 'state=3^risk=high'\r\n * });\r\n * \r\n * This deletes all records in the 'incident' table where the priority is 1 and the state is 2,\r\n * and all records in the 'change_request' table where the state is 3 and risk is 'high'.\r\n */\r\nfunction bulkDelete(target) {\r\n\r\n    for (var table in target) {\r\n        if (target.hasOwnProperty(table)) {\r\n            var getRecord = new GlideRecord(table);\r\n            getRecord.addEncodedQuery(target[table]);\r\n            getRecord.query();\r\n            while (getRecord.next()) {\r\n                \r\n                getRecord.deleteRecord();\r\n            }\r\n        }\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Bulk Delete Function Documentation - Use the code/function to bulk-deletes records from multiple tables based on provided encoded queries. Function: bulkDelete(target) Deletes records from multiple tables based on provided encoded queries.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Bulk Delete Records in Multiple Tables with Conditions",
        "scriptFiles": [
          "BulkDeleteRecordsMultipleTablesWithConditions.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Bulk%20Delete%20Records%20in%20Multiple%20Tables%20with%20Conditions",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Bulk%20Delete%20Records%20in%20Multiple%20Tables%20with%20Conditions/BulkDeleteRecordsMultipleTablesWithConditions.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.058Z",
    "updatedAt": "2025-09-21T08:58:59.202Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 468,
    "type": "background_script",
    "name": "Bulk Create Records in Multiple Tables",
    "description": "Function: bulkCreateRecords(target) Creates multiple records in specified tables based on provided data. Parameters",
    "script": "/**\r\n * Creates multiple records in specified tables based on provided data.\r\n *\r\n * @param {Object} target - An object where each key is the name of a table,\r\n *                          and each value is an array of objects representing\r\n *                          the records to be created. Each object in the array\r\n *                          should contain field-value pairs for the respective table.\r\n *\r\n * Example usage:\r\n * bulkCreateRecords({\r\n *     'incident': [\r\n *         { short_description: 'Network issue', caller_id: '681ccaf9c0a8016401c5a33be04be441', priority: 2 },\r\n *         { short_description: 'Email outage', caller_id: '681ccaf9c0a8016401c5a33be04be442', priority: 1 }\r\n *     ],\r\n *     'change_request': [\r\n *         { short_description: 'Server upgrade', assigned_to: '681ccaf9c0a8016401c5a33be04be443', state: 'new' }\r\n *     ]\r\n * });\r\n *\r\n * This creates two new records in the 'incident' table and one new record in the\r\n * 'change_request' table with the specified field values.\r\n */\r\n\r\nfunction bulkCreateRecords(target) {\r\n    for (var table in target) {\r\n        if (target.hasOwnProperty(table)) {\r\n\t\t\tvar recordData = target[table];\r\n            recordData.forEach(function(data) {\r\n                var gr = new GlideRecord(table);\r\n                gr.initialize();\r\n                for (var field in data) {\r\n                    if (data.hasOwnProperty(field)) {\r\n                        gr.setValue(field, data[field]);\r\n                    }\r\n                }\r\n                gr.insert();\r\n            });\r\n        }\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Function: bulkCreateRecords(target) Creates multiple records in specified tables based on provided data. Parameters",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Bulk Create Records in Multiple Tables",
        "scriptFiles": [
          "BulkCreateRecordsMultipleTables.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Bulk%20Create%20Records%20in%20Multiple%20Tables",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Bulk%20Create%20Records%20in%20Multiple%20Tables/BulkCreateRecordsMultipleTables.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.054Z",
    "updatedAt": "2025-09-21T08:58:59.198Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 467,
    "type": "background_script",
    "name": "Attach Workflow to Existing Record",
    "description": "Attach Workflow to existing records This background script can be useful if you run into a situation where the workflow condition did not trigger on an intended record, or an older version of a workflow had a flaw but the record already began fulfillment.",
    "script": "//add table name, encrypted query, and workflow sys_id you want to attach to the record(s)\r\n\r\n//example data\r\nvar table = \"sc_req_item\";\r\nvar encQuery =\r\n  \"active=true^cat_item=a01e54b3dbb46340cd5af9041d961958^numberINRITM0028376,RITM0028370,RITM0028310,RITM0028234,RITM0028385)\";\r\nvar workflow_sys_id = \"[enter workflow sys_id here]\";\r\n\r\nvar task = new GlideRecord(table);\r\ntask.addEncodedQuery(encQuery);\r\ntask.query();\r\n\r\nwhile (task.next()) {\r\n  var wf = new Workflow();\r\n  var context = wf.startFlow(workflow_sys_id, task, task.update());\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Attach Workflow to existing records This background script can be useful if you run into a situation where the workflow condition did not trigger on an intended record, or an older version of a workflow had a flaw but the record already began fulfillment.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Attach Workflow to Existing Record",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Attach%20Workflow%20to%20Existing%20Record",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Attach%20Workflow%20to%20Existing%20Record/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.051Z",
    "updatedAt": "2025-09-21T08:58:59.195Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 466,
    "type": "background_script",
    "name": "Approval Reminders",
    "description": "Use Case: Approval are pending due approver unavailability Solution : Assign delgates to the approver and send reminder email notification using the Approval reminder code.It will send email to delgates and they will get notified with the approval request to approve/reject per limited period. Steps: Register an event and create a notification to send  email to manager when the event fired/trigg...",
    "script": "Background script to send approval reminder to Approver Delegates:\r\n========================================\r\nvar appr = new GlideRecord('sysapproval_approver');\r\nappr.addQuery('state', 'requested');\r\nappr.addQuery('sysapproval.sys_class_name', 'sc_req_item');\r\nappr.addEncodedQuery(\"sysapproval.numberLIKERITM0010468\");\r\nappr.query();\r\nwhile(appr.next())\r\n\t{\r\n    //\" approval.reminded\" is a registered event to trigger notificationn email to  their delegates to approve or reject approval requests when approvar not available\r\n\t\tgs.eventQueue(\"approval.reminded\" , appr , appr.approver , appr.approver.getUserName());\r\n\t}\r\n\r\n\r\ngs.print(appr.getRowCount());",
    "metadata": {
      "application": "Global",
      "notes": "Use Case: Approval are pending due approver unavailability Solution : Assign delgates to the approver and send reminder email notification using the Approval reminder code.It will send email to delgates and they will get notified with the approval request to approve/reject per limited period. Steps: Register an event and create a notification to send  email to manager when the event fired/trigg...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Approval Reminders",
        "scriptFiles": [
          "approvalReminderToDelegates.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Approval%20Reminders",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Approval%20Reminders/approvalReminderToDelegates.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.047Z",
    "updatedAt": "2025-09-21T08:58:59.191Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 465,
    "type": "background_script",
    "name": "Adding bookmark to Favorites tab",
    "description": "The script bookmarks the list of incidents assigned to the user's groups in ServiceNow's favorite tab. It works by : -- Constructing a filter for incidents assigned to logged-in user's groups using the OOTB dynamic filter functionality. -- Checking if the list is already bookmarked.",
    "script": "var filter = \"active=true^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\";// using dynamic filter we are filtering the assignments groups of the logged-in user\r\n\r\nvar listURL = \"/incident_list.do?sysparm_query=\" + encodeURIComponent(filter); //creating the url with the filter to showcase the list of tickets assigned to the groups which the user is a part of.\r\n\r\nvar bookmark = new GlideRecord(\"sys_ui_bookmark\"); //gliding bookmark table to verify the logged-in user's has already a book mark or not \r\nbookmark.addQuery(\"user\", gs.getUserID());\r\nbookmark.addQuery(\"url\", listURL);\r\nbookmark.query();\r\nif (!bookmark.next()) { //if not available then we are creating a new bookmark under favorites tab of the logged-in users\r\n    var newBookmark = new GlideRecord(\"sys_ui_bookmark\");\r\n\tnewBookmark.initialize();\r\n\tnewBookmark.order=9;\r\n\tnewBookmark.icon=\"list\";\r\n\tnewBookmark.user = gs.getUserID();\r\n\tnewBookmark.url = listURL;\r\n\tnewBookmark.title = \"Incidents assigned to my groups\";\r\n    \tnewBookmark.pinned = true;\r\n    \tnewBookmark.insert();\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "The script bookmarks the list of incidents assigned to the user's groups in ServiceNow's favorite tab. It works by : -- Constructing a filter for incidents assigned to logged-in user's groups using the OOTB dynamic filter functionality. -- Checking if the list is already bookmarked.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Adding bookmark to Favorites tab",
        "scriptFiles": [
          "Adding bookmark into Favorites tab.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Adding%20bookmark%20to%20Favorites%20tab",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Adding%20bookmark%20to%20Favorites%20tab/Adding%20bookmark%20into%20Favorites%20tab.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.043Z",
    "updatedAt": "2025-09-21T08:58:59.188Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 464,
    "type": "background_script",
    "name": "Add Standard Change Model",
    "description": "Add the OOTB \"Standard Change\" model to an existing change record. OOTB, the Standard Change model is applied through an onDisplay business rule, and is not an available choice from the Model field. If you have migrated to use Change Models and generate some change requests with scripts, you may need to add the model with a background script if there is already an existing workflow context or i...",
    "script": "var sid = 'ADD YOUR CHANGE RECORD SYS_ID HERE';\r\n\r\nvar chg = new GlideRecord('change_request');\r\nif(chg.get(sid)) {\r\n    chg.setValue('chg_model', 'e55d0bfec343101035ae3f52c1d3ae49'); //standard change model\r\nchg.update();\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Add the OOTB \"Standard Change\" model to an existing change record. OOTB, the Standard Change model is applied through an onDisplay business rule, and is not an available choice from the Model field. If you have migrated to use Change Models and generate some change requests with scripts, you may need to add the model with a background script if there is already an existing workflow context or i...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Add Standard Change Model",
        "scriptFiles": [
          "addStandardChgModel.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Add%20Standard%20Change%20Model",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Add%20Standard%20Change%20Model/addStandardChgModel.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.040Z",
    "updatedAt": "2025-09-21T08:58:59.185Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 463,
    "type": "background_script",
    "name": "Add No Audit Attribute To Multiple Dictionary Entries",
    "description": "A background script add the no-audit attribute to multiple dictionary entries. The no-audit attribute will exclued the specified attributes from the system audit process and will not produc audit track at all.",
    "script": "/*\r\nThis script is used to add the [no_audit=true] attribute to multiple dictionary entries in bulk.\r\nCan be used for other attributes as well. \r\nNB: The attribut sys_id must be verified before the script execution!\r\n*/\r\n\r\nvar encodedQuery = '<insert encoded query here>'\r\n\r\n//Verify this is in your instance before script execution\r\nvar noAuitAttributeSysID = '96ea04dfeb321100d4360c505206fe7d'; \r\n\r\nvar grSD = new GlideRecord('sys_dictionary');\r\ngrSD.addEncodedQuery(encodedQuery);\r\ngrSD.query();\r\nwhile (grSD.next()) {\r\n\r\n\r\n    var grExistingAttribute = new GlideRecord('sys_schema_attribute_m2m');\r\n    grExistingAttribute.addQuery('schema', grSD.getUniqueValue());\r\n    grExistingAttribute.addQuery('attribute', noAuitAttributeSysID); //\r\n    grExistingAttribute.query();\r\n\r\n    if(grExistingAttribute.hasNext()){\r\n        grExistingAttribute.next();\r\n\r\n        if(grExistingAttribute.getValue('value')=='false'){\r\n            grExistingAttribute.setValue('value', 'true');\r\n            grExistingAttribute.update();\r\n        }\r\n    }else{\r\n\r\n        var grDicitionaryAttributeM2M = new GlideRecord('sys_schema_attribute_m2m');\r\n        grDicitionaryAttributeM2M.initialize();\r\n        grDicitionaryAttributeM2M.setValue('schema', grSD.getUniqueValue());\r\n        grDicitionaryAttributeM2M.setValue('attribute', noAuitAttributeSysID)\r\n        grDicitionaryAttributeM2M.setValue('value', 'true');\r\n        grDicitionaryAttributeM2M.insert();\r\n    }\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "A background script add the no-audit attribute to multiple dictionary entries. The no-audit attribute will exclued the specified attributes from the system audit process and will not produc audit track at all.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Add No Audit Attribute To Multiple Dictionary Entries",
        "scriptFiles": [
          "AddNoAuditAttributeToMultipleDictionaryEntries.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Add%20No%20Audit%20Attribute%20To%20Multiple%20Dictionary%20Entries",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Add%20No%20Audit%20Attribute%20To%20Multiple%20Dictionary%20Entries/AddNoAuditAttributeToMultipleDictionaryEntries.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.036Z",
    "updatedAt": "2025-09-21T08:58:59.181Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 462,
    "type": "background_script",
    "name": "add member to groups",
    "description": "Script to Add a User to list of User Groups Where They Are Not Already a Member Purpose: we often recive requests add a single group member to multiple groups. that's a manual task. this script makes it very simple. - The first GlideRecord('sysusergroup'): Creates a GlideRecord instance to query the sysusergroup table.",
    "script": "var rec = new GlideRecord('sys_user_group');\r\nrec.addEncodedQuery('');  //get the list of groups needed.\r\nrec.query();\r\nwhile (rec.next())\r\n{\r\n    var rec1 = new GlideRecord('sys_user_grmember');\r\n    rec1.addQuery('group' , rec.sys_id);\r\n    rec1.addQuery('user' , '7279f455939e71944c77b6b5fbba1033');   // put the sys_id of \"user\" here\r\n    rec1.query();\r\nif(!rec1.next())  //checking if group member is already existed. if not, we add them.\r\n{\r\nrec1.initialize();\r\nrec1.group = rec.sys_id;\r\nrec1.user = '7279f455939e71944c77b6b5fbba1033'; // put the sys_id of \"user 1\" here, to insert group member\r\nrec1.insert();\r\ngs.log(\"User group record inserted\");\r\n}\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Script to Add a User to list of User Groups Where They Are Not Already a Member Purpose: we often recive requests add a single group member to multiple groups. that's a manual task. this script makes it very simple. - The first GlideRecord('sysusergroup'): Creates a GlideRecord instance to query the sysusergroup table.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/add member to groups",
        "scriptFiles": [
          "Add the members to List of the Groups using GlideRecord.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/add%20member%20to%20groups",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/add%20member%20to%20groups/Add%20the%20members%20to%20List%20of%20the%20Groups%20using%20GlideRecord.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.032Z",
    "updatedAt": "2025-09-21T08:58:59.178Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 461,
    "type": "background_script",
    "name": "Add Comments",
    "description": "There have been scenarios where you are working on an integration and one of the usecase is to add comments on a record. In this scenario once you add comments directly to the record by assigning the value in the comments or worknotes field, it captures it as a integration user in the activity formatter. But with setJournalEntry() method you can pass the username and it will add the comment on...",
    "script": "function addComments(tableName,recSysId, userName, fieldName){\r\nvar rec = new GlideRecord(tableName);\r\nif(rec.get(recSysId)){\r\n  rec[fieldName].setJournalEntry('This is my comment',userName);\r\n  rec.update();\r\n}\r\n}\r\n\r\naddComments(tableName,recSysId,userName,fieldName);",
    "metadata": {
      "application": "Global",
      "notes": "There have been scenarios where you are working on an integration and one of the usecase is to add comments on a record. In this scenario once you add comments directly to the record by assigning the value in the comments or worknotes field, it captures it as a integration user in the activity formatter. But with setJournalEntry() method you can pass the username and it will add the comment on...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Add Comments",
        "scriptFiles": [
          "addComment.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Add%20Comments",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Add%20Comments/addComment.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.029Z",
    "updatedAt": "2025-09-21T08:58:59.175Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 460,
    "type": "background_script",
    "name": "Add Bookmarks - ITIL Users",
    "description": "Script to be used to add bookmark for ITIL users. This will help add favorites for SLAs for - My Group Tasks - SLAs for My Tasks",
    "script": "var jsonFavList = {\r\n  \"SLA for My Group Tasks\": \"task_list.do?sysparm_query=assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744&sysparm_first_row=1&sysparm_view=\",\r\n  \"SLA for My Tasks\": \"task_list.do?sysparm_query=assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe&sysparm_first_row=1&sysparm_view=\",\r\n  \"Tasks Assigned to Me\": \"task_list.do?sysparm_query=stateNOT INclosed_complete,closed_abandoned^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe\",\r\n  \"My approvals\": \"sysapproval_approver_list.do?sysparm_query=approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe&sysparm_first_row=1&sysparm_view=\"\r\n};\r\n\r\nvar g = new GlideRecord(\"sys_user_has_role\");\r\ng.addEncodedQuery(\"role=282bf1fac6112285017366cb5f867469\");//considering sys_id for ITIL role is 282bf1fac6112285017366cb5f867469\r\ng.query();\r\nwhile (g.next()) {\r\n\tfor (var fav in jsonFavList) {\r\n\t\tvar grBookMark = new GlideRecord(\"sys_ui_bookmark\");\r\n\t\tgrBookMark.addEncodedQuery(\"user=\" + g.user + \"^title=\" + fav + \"^url=\" + jsonFavList[fav]);\r\n\t\tgrBookMark.query();\r\n\t\tif (!grBookMark.next()) {\r\n\t\t\tgrBookMark.initialize();\r\n\t\t\tgrBookMark.pinned = true;\r\n\t\t\tgrBookMark.title = fav;\r\n\t\t\tgrBookMark.url = jsonFavList[fav];\r\n\t\t\tgrBookMark.user = g.user;\r\n\t\t\tgrBookMark.insert();\r\n\t\t}\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Script to be used to add bookmark for ITIL users. This will help add favorites for SLAs for - My Group Tasks - SLAs for My Tasks",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/Add Bookmarks - ITIL Users",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/Add%20Bookmarks%20-%20ITIL%20Users",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/Add%20Bookmarks%20-%20ITIL%20Users/script.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.025Z",
    "updatedAt": "2025-09-21T08:58:59.171Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 459,
    "type": "background_script",
    "name": " Bulk Change of Incident Priority Based on Category",
    "description": "The code helps to automates the bulk update of incident priorities based on predefined category mappings.",
    "script": "var priorityMapping = {\r\n    'Network': 1, \r\n    'Application': 2, \r\n    'Hardware': 3 \r\n};\r\n\r\nvar incidentGR = new GlideRecord('incident');\r\nincidentGR.addQuery('active', true);\r\nincidentGR.query();\r\n\r\nwhile (incidentGR.next()) {\r\n    var category = incidentGR.category.toString();\r\n    var newPriority = priorityMapping[category];\r\n\r\n    if (newPriority) {\r\n        incidentGR.priority = newPriority;\r\n        incidentGR.update();\r\n        gs.info('Updated Incident: ' + incidentGR.number + ' to Priority: ' + newPriority);\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "The code helps to automates the bulk update of incident priorities based on predefined category mappings.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Background Scripts/ Bulk Change of Incident Priority Based on Category",
        "scriptFiles": [
          "Bulk Change of Incident Priority Based on Category.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Background%20Scripts/%20Bulk%20Change%20of%20Incident%20Priority%20Based%20on%20Category",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Background%20Scripts/%20Bulk%20Change%20of%20Incident%20Priority%20Based%20on%20Category/Bulk%20Change%20of%20Incident%20Priority%20Based%20on%20Category.js"
      }
    },
    "createdAt": "2025-09-21T07:57:14.021Z",
    "updatedAt": "2025-09-21T08:58:59.168Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 458,
    "type": "catalog_client_script",
    "name": "Validate a Credit Card Number",
    "description": "Description of the Credit Card Number Validation Script Purpose The script validates a credit card number entered by the user in a ServiceNow form.",
    "script": "function onSubmit() {\r\n    var cardNumber = g_form.getValue('credit_card'); // Change 'credit_card' to your field name\r\n    var cardPattern = /^\\d{16}$/; // Simple pattern for 16-digit cards\r\n\r\n    if (!cardPattern.test(cardNumber) || !isValidCardNumber(cardNumber)) {\r\n        g_form.showFieldMsg('credit_card', 'Please enter a valid 16-digit credit card number.', 'error');\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction isValidCardNumber(number) {\r\n    var sum = 0;\r\n    var alternate = false;\r\n    for (var i = number.length - 1; i >= 0; i--) {\r\n        var n = parseInt(number.charAt(i), 10);\r\n        if (alternate) {\r\n            n *= 2;\r\n            if (n > 9) n -= 9;\r\n        }\r\n        sum += n;\r\n        alternate = !alternate;\r\n    }\r\n    return sum % 10 === 0;\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Validate a Credit Card Number",
        "scriptFiles": [
          "Script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Validate%20a%20Credit%20Card%20Number",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Validate%20a%20Credit%20Card%20Number/Script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.468Z",
    "updatedAt": "2025-09-21T08:58:59.164Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 457,
    "type": "catalog_client_script",
    "name": "Strong Username Validation Script",
    "description": "Description of the Strong Username Validation Script Purpose The script is designed to validate a username entered by the user in a ServiceNow catalog item form. It ensures that the username adheres to specific criteria before the form can be successfully submitted.",
    "script": "function onSubmit() {\r\n    // Get the username value from the field\r\n    var username = g_form.getValue('username'); // Change 'username' to your field name\r\n\r\n    // Define the regex pattern for a strong username\r\n    var usernamePattern = /^[a-zA-Z][a-zA-Z0-9]{5,}$/;\r\n\r\n    // Validate the username against the pattern\r\n    if (!usernamePattern.test(username)) {\r\n        // Display an error message if validation fails\r\n        g_form.showFieldMsg('username', 'Username must start with a letter, be at least 6 characters long, and contain only letters and numbers.', 'error');\r\n        return false; // Prevent form submission\r\n    }\r\n\r\n    return true; // Allow form submission if validation passes\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Strong Username Validation Script",
        "scriptFiles": [
          "Script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Strong%20Username%20Validation%20Script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Strong%20Username%20Validation%20Script/Script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.464Z",
    "updatedAt": "2025-09-21T08:58:59.161Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 456,
    "type": "catalog_client_script",
    "name": "Special Characters",
    "description": "Validate Special Characters for a catalog variable With this onChange catalog client script you can validate if there are any special characters present in the input given by user in a particular field and show an error message below the field and clear the field value. Although we have other methods to do this, it is much easier and you can customize your error message.",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n\r\n    //In the below regex, you can add or remove any special characters as per your requirement\r\n    var special_chars = /[~@|$^<>\\*+=;?`')[\\]]/;   \r\n\r\n    if (special_chars.test(newValue)) {\r\n        g_form.clearValue('<give your field name for which you are validating>');\r\n        g_form.showErrorBox('<give your field name for which you are validating>','Special Characters are not allowed');  //you can change the error message as required.\r\n    }\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Special Characters",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Special%20Characters",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Special%20Characters/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.460Z",
    "updatedAt": "2025-09-21T08:58:59.158Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 455,
    "type": "catalog_client_script",
    "name": "Set User Field Values on Load",
    "description": "On Load Catalog client script is created to auto set the field values and make that field read only - Navigate to your instance - App Navigator  Open Catalog CLient Script [catalogscriptclient] - Set following field Values",
    "script": "/*\r\nSet user field value on load using catalog cleint script and make the field readonly\r\n*/\r\n\r\nfunction onLoad()\r\n{\r\n  var user_id = g_user.userID;\r\n  g_form.setValue('field_name', user_id);\r\n  g_form.setReadOnly('field_name', true);\r\n}",
    "metadata": {
      "application": "Global",
      "type": "onLoad",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Set User Field Values on Load",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Set%20User%20Field%20Values%20on%20Load",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Set%20User%20Field%20Values%20on%20Load/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.457Z",
    "updatedAt": "2025-09-21T08:58:59.153Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 454,
    "type": "catalog_client_script",
    "name": "Set fields from URL Parameters",
    "description": "Set fields on a catalog item from URL parameters. This only works on both the classic ui and service portal. To use this you must provide the technical name as a url parameter and then provide the value you would like set. This script is also console logging the techcnical names if you don't have them handy. Reference fields require using the sysid.",
    "script": "function onLoad() {\r\n\r\n\ttry{ // Classic UI\r\n\t\tvar pFields = g_form.nameMap;\r\n\t\tconsole.log(pFields);\r\n\t\tpFields.forEach(function(field){\r\n\t\t\tif(getParam(field.prettyName)){\r\n\t\t\t\tg_form.setValue(field.prettyName, getParam(field.prettyName));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}catch(e){ // Service Portal or Mobile\r\n\t\tvar fields = g_form.getEditableFields();\r\n\t\tconsole.log(fields);\r\n\t\tfields.forEach(function(field){\r\n\t\t\tif(getParam(field)){\r\n\t\t\t\tg_form.setValue(field, getParam(field));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction getParam(name){\r\n\tvar url = new URL(top.location);\r\n\treturn url.searchParams.get(name);\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Set fields from URL Parameters",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Set%20fields%20from%20URL%20Parameters",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Set%20fields%20from%20URL%20Parameters/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.453Z",
    "updatedAt": "2025-09-21T08:58:59.150Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 453,
    "type": "catalog_client_script",
    "name": "Set fields from URL Parameter 2",
    "description": "Set fields on a catalog item from URL parameters. The mission was to get a sysid from the URL, query a record and return a value to the front-end. In the front-end we have a Record Producer (RP) with a String field.",
    "script": "// File: CatalogClientScript.js\nfunction onLoad() {\r\n   \r\n    var taskId = getParameterValue(\"taskid\");\r\n   \r\n    if (taskId != \"\" && taskId != null && taskId != undefined) {\r\n      console.log('=== CAMACHO Task id: ' + taskId);\r\n      \r\n      var gaGetTaskNumber = new GlideAjax('UtilsAjax');\r\n      gaGetTaskNumber.addParam('sysparm_name', 'getTaskNumber');\r\n      gaGetTaskNumber.addParam('sysparm_task_id', taskId);\r\n      gaGetTaskNumber.getXMLAnswer(setmyFormValue);\r\n    }\r\n }\r\n \r\n function setmyFormValue(answer) {\r\n   \r\n   //console.log('=== CAMACHO Entered setmyFormValue');\r\n   if (answer) {\r\n     var obj = JSON.parse(answer);\r\n     var numero = obj.number.toString();\r\n     console.log(numero);\r\n     \r\n     g_form.setValue('task_number', numero);\r\n     \r\n   }\r\n }\r\n \r\n function getParameterValue(name) {\r\n   var url = top.location.href;\r\n   var value = new URLSearchParams(url).get(name);\r\n   if (value) {\r\n     return value;\r\n   } else {\r\n     return null;\r\n   }\r\n }\n\n// File: KMXOUtils.js\nvar KMXOUtils = Class.create();\r\nKMXOUtils.prototype = {\r\n    initialize: function() {\r\n    },\r\n\r\n  /*\r\n  * Receives a um sys_id and returns a Task table field value\r\n  *\r\n  * @param {String} - taskId\r\n  * @return {Object}\r\n  */\r\n  getTaskNumber: function(taskId)\r\n  {\r\n      if (taskId != \"\" && taskId != null && taskId != undefined) {\r\n\r\n        var grTask = new GlideRecord('x_770214_consultor_rwd_activity');\r\n\r\n        if (grTask.get(taskId)) {\r\n          \r\n          var number = grTask.getValue('number');\r\n          \r\n          var obj = {};\r\n          obj[\"number\"] = number;\r\n          \r\n          return obj;\r\n\r\n        } else {\r\n\r\n          return {};\r\n\r\n        }\r\n        \r\n      }\r\n  },\r\n\r\n    type: 'KMXOUtils'\r\n};\n\n// File: UtilsAjax.js\nvar UtilsAjax = Class.create();\r\nUtilsAjax.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\r\n\r\n  getTaskNumber: function() {\r\n    var taskId = this.getParameter('sysparm_task_id');\r\n    gs.debug('=== Camacho UtilsAjax = Received the sys_id ' + taskId);\r\n    return JSON.stringify(new KMXOUtils().getTaskNumber(taskId));\r\n    \r\n  },\r\n    type: 'UtilsAjax'\r\n});",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Set fields from URL Parameter 2",
        "scriptFiles": [
          "CatalogClientScript.js",
          "KMXOUtils.js",
          "UtilsAjax.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Set%20fields%20from%20URL%20Parameter%202"
      }
    },
    "createdAt": "2025-09-21T07:53:33.448Z",
    "updatedAt": "2025-09-21T08:58:59.146Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 452,
    "type": "catalog_client_script",
    "name": "Rounding Money or Price Field",
    "description": "This script is OnChange, and will automatically round the selected field to [x] value. The script can either be applied to a Catalog Item, or a specific Variable in a Var Set. For example, if prompting a user for a cost, and said cost should only be in multiples of $5.",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n\r\n    //Value for increment rounding\r\n    var roundTo = [ROUNDING INCREMENT];\r\n\r\n    //Standard onChange code + if the value is now empty, return\r\n    if (isLoading || newValue == '') return;\r\n\r\n    //Get the existing value, and remove the $, if it exists\r\n    var existingVal = newValue.replace('$', '');\r\n\r\n    //Make sure the field contains a valid numerical value\r\n    if(!Number.isInteger(parseInt(existingVal))) return;\r\n\r\n    //Round up if not a multiple of the increment\r\n    if(existingVal % roundTo !=0) {\r\n\r\n        //Calculate the rounded value\r\n        var newVal = (Math.ceil(existingVal/roundTo)*roundTo);\r\n        \r\n        //Set the value of the field to the new, rounded value\r\n        g_form.setValue('[VAR_NAME]', \"$\"+ newVal);\r\n\r\n        //Show a message beneath the field indicating it was rounded, and the new value\r\n        g_form.showFieldMsg('[VAR_NAME]', \"Rounded $\" + existingVal + \" to $\" + newVal);\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Rounding Money or Price Field",
        "scriptFiles": [
          "catalog_client_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Rounding%20Money%20or%20Price%20Field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Rounding%20Money%20or%20Price%20Field/catalog_client_script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.444Z",
    "updatedAt": "2025-09-21T08:58:59.142Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 451,
    "type": "catalog_client_script",
    "name": "Restrict Number of rows in Multi Row Variable",
    "description": "restrictmultirow.js Use this to restrict multi row variable set rows to 1. this value can be changed to any number of rows as requirement.",
    "script": "function onLoad() {\r\n\tvar field = g_form.getField(\"mrvs_variable_set_name\");\r\n\tif (field != null) {\r\n\t\tfield.max_rows_size = 1;\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Restrict Number of rows in Multi Row Variable",
        "scriptFiles": [
          "restrict_multi_row.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Restrict%20Number%20of%20rows%20in%20Multi%20Row%20Variable",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Restrict%20Number%20of%20rows%20in%20Multi%20Row%20Variable/restrict_multi_row.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.440Z",
    "updatedAt": "2025-09-21T08:58:59.139Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 450,
    "type": "catalog_client_script",
    "name": "Remove reference icon from portal",
    "description": "Remove reference icon from portal using Catalog Client script of a Catalog Item This catalog client script is design to remove the reference icon from the Portal for any reference field record. This needs to be configured for each Catalog Item where the reference field is being used.",
    "script": "function onLoad() {\r\n    setTimeout(function() {\r\n        var referenceElement = top.document.getElementsByClassName('btn btn-default bg-white lookup')[0];\r\n\r\n        if (referenceElement != undefined || referenceElement != null)\r\n            referenceElement.remove();\r\n        \r\n    }, 500);\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Remove reference icon from portal",
        "scriptFiles": [
          "remove-reference-icon-from-portal-onLoad.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Remove%20reference%20icon%20from%20portal",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Remove%20reference%20icon%20from%20portal/remove-reference-icon-from-portal-onLoad.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.436Z",
    "updatedAt": "2025-09-21T08:58:59.134Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 449,
    "type": "catalog_client_script",
    "name": "Regex Validation",
    "description": "Regular Expression on Catalog Client script With the help of this code you can easily validate the input value from the user and if it's not a email format you can clear and throw a error message below the variable. Of course you can use Email type variable as well but you cannot have a formatted error message. script.js",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n\tif (isLoading || newValue == '') {\r\n\t\treturn;\r\n\t}\r\n\t//Defining the regular expression to validate if the given value is valid email address or not\r\n\tvar emailValidation = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\r\n\tif (!emailValidation.test(newValue)) { \r\n\t\tg_form.clearValue('VARIABLE_NAME'); // Clear's the variable \r\n\t\tg_form.showFieldMsg('VARIABLE_NAME', 'Please enter a valid email address', 'error'); // Display a message below variable\r\n\t\treturn false; // Stop submission\r\n\t}\r\n\treturn true;",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Regex Validation",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Regex%20Validation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Regex%20Validation/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.433Z",
    "updatedAt": "2025-09-21T08:58:59.131Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 448,
    "type": "catalog_client_script",
    "name": "Prevent duplicate records on MRVS",
    "description": "Prevent duplicate records to be selected in Multi row variable set We have many ways to do this but this is bit unique compare to what you find in community, you can do it in one single script within the Variable set. Of course ServiceNow introduce a new feature in Quebec and have Unique checkbox field introuduced but to have a custom info message you need to go with the custom script.",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n\tif (isLoading || newValue == '') {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tvar MRVS_FIELD = \"field_name_here\"; //Multi row variable set name\r\n\t\r\n\tvar MRVS = (g_service_catalog.parent.getValue(MRVS_FIELD).length != 0) ? JSON.parse(g_service_catalog.parent.getValue(MRVS_FIELD)) : [];\r\n\t\r\n\t//If the MRVS is empty - exit\r\n\tif(MRVS.length == 0)return;\r\n\t\r\n\tvar valueExists = MRVS.some(function(obj){\r\n\t\treturn obj.Variable_Name == newValue; // Reference variable name which needs to be unique\r\n\t});\r\n\t\r\n\tif(valueExists){\r\n\t\tg_form.showFieldMsg(MRVS_FIELD , \"Field must be unique\");\r\n\t}\r\n\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Prevent duplicate records on MRVS",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Prevent%20duplicate%20records%20on%20MRVS",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Prevent%20duplicate%20records%20on%20MRVS/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.429Z",
    "updatedAt": "2025-09-21T08:58:59.128Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 447,
    "type": "catalog_client_script",
    "name": "PopulateDropdown",
    "description": "Load / Populate the options for the second dropdown field (select box) based on what user chooses in the first dropdown Use case You need to dynamically populate the options for a dropdown (select box) field following another field.",
    "script": "// Please check readme for the set up\r\nvar data = {\r\n  Japan: [\"Tokyo\", \"Osaka\"],\r\n  USA: [\"New York\", \"Chicago\", \"San Diego\"],\r\n};\r\n\r\nfunction onChange(control, oldValue, newValue, isLoading) {\r\n  var secondDropdown = \"city\";\r\n\r\n  g_form.clearOptions(secondDropdown); // Remove all the options of the 2nd dropdown\r\n\r\n  // When user switch to 'None' in country or when the form is loaded\r\n  if (newValue == \"\" || isLoading) {\r\n    return;\r\n  }\r\n\r\n  var cities = data[newValue];\r\n\r\n  if (cities && cities.length) {\r\n    cities.forEach(function (value) {\r\n      g_form.addOption(secondDropdown, value, value);\r\n    });\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/PopulateDropdown",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/PopulateDropdown",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/PopulateDropdown/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.425Z",
    "updatedAt": "2025-09-21T08:58:59.124Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 446,
    "type": "catalog_client_script",
    "name": "Password Validation Script",
    "description": "Description of the Combined Password Validation Script Purpose The script validates the password entered by the user in a ServiceNow catalog item form. It ensures that the password meets strong security criteria and does not include the user's first or last name, enhancing overall security.",
    "script": "function onSubmit() {\r\n    // Get the password value from the field\r\n    var password = g_form.getValue('password'); // Change 'password' to your field name\r\n    // Get the first and last name values from the fields\r\n    var firstName = g_form.getValue('first_name'); // Change 'first_name' to your field name\r\n    var lastName = g_form.getValue('last_name'); // Change 'last_name' to your field name\r\n    // Define the regex pattern for a strong password\r\n    var passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n    \r\n    // Check if the password contains the first or last name\r\n    if (password.includes(firstName) || password.includes(lastName)) {\r\n        // Display an error message if validation fails\r\n        g_form.showFieldMsg('password', 'Password cannot contain your first or last name.', 'error');\r\n        return false; // Prevent form submission\r\n    }\r\n  // Validate the password against the pattern\r\n    if (!passwordPattern.test(password)) {\r\n        // Display an error message if validation fails\r\n        g_form.showFieldMsg('password', 'Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character.', 'error');\r\n        return false; // Prevent form submission\r\n    }\r\n\r\n\r\n    return true; // Allow form submission if all validations pass\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Password Validation Script",
        "scriptFiles": [
          "Script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Password%20Validation%20Script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Password%20Validation%20Script/Script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.421Z",
    "updatedAt": "2025-09-21T08:58:59.121Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 445,
    "type": "catalog_client_script",
    "name": "Passport Validation",
    "description": "This OnChange Catalog Client Script is for validating passport number, date of issue, and date of expiry. It follows the specified rules(As per indian passport):- - The passport number should be 8 characters long, with the first character as an uppercase letter, the second and third characters as numbers (1-9 for the first digit, 0-9 for the second digit).",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading) return;\r\n  \r\n    var passportNumber = g_form.getValue('passport_number');\r\n    var dateOfIssue = g_form.getValue('date_of_issue');\r\n    var age = parseInt(g_form.getValue('age'), 10);\r\n    var dateOfExpiry = g_form.getValue('date_of_expiry');\r\n  \r\n    // Passport Number Validation\r\n    var passportPattern = /^[A-Z][1-9][0-9][A-Z0-9]{5}$/;\r\n    if (passportNumber && !passportPattern.test(passportNumber)) {\r\n        g_form.showFieldMsg('passport_number', \"The entered number is invalid passport number format. It must be 8 characters long, start with an uppercase letter, followed by a number between 1-9, then 0-9, and the rest alphanumeric.\", \"error\");\r\n        g_form.clearValue('passport_number');\r\n    } else {\r\n        g_form.hideFieldMsg('passport_number');\r\n    }\r\n  \r\n    // Date of Expiry Calculation based on date of issue\r\n    if (dateOfIssue && age) {\r\n        var issueDate = new GlideDate();\r\n        issueDate.setValue(dateOfIssue);\r\n        var expiryDate = new GlideDate();\r\n        expiryDate.setValue(issueDate);\r\n      \r\n        if (age >= 18) {\r\n            expiryDate.addYears(5); // Adult - add 5 years\r\n        } else {\r\n            expiryDate.addYears(10); // Under 18 - add 10 years\r\n        }\r\n      \r\n        g_form.setValue('date_of_expiry', expiryDate.getByFormat('yyyy-MM-dd')); // Set expiry date in correct format\r\n        g_form.hideFieldMsg('date_of_expiry');\r\n    } else if (!dateOfIssue) {\r\n        g_form.showFieldMsg('date_of_issue', \"Please enter the Date of Issue first.\", \"info\");\r\n    } else if (!age) {\r\n        g_form.showFieldMsg('age', \"Please enter your age first.\", \"info\");\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Passport Validation",
        "scriptFiles": [
          "passportvalidity.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Passport%20Validation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Passport%20Validation/passportvalidity.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.416Z",
    "updatedAt": "2025-09-21T08:58:59.113Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 444,
    "type": "catalog_client_script",
    "name": "PAN Validation",
    "description": "PAN is a ten-digit unique alphanumeric number issued by the Income Tax Department. Indian PAN (Permanent Account Number) card based on its standardized format. A PAN number is a unique 10-character alphanumeric identifier issued by the Indian government, and it follows a specific structure:",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n    var panNumber = g_form.getValue(\"pan_number\"); //Get the PAN card information\r\n    var panRegex = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/; // Regex for the PAN Card\r\n\r\n    if (panRegex.test(panNumber)) {\r\n        g_form.showFieldMsg(\"pan_number\", \"Valid PAN card number.\", true); //Valid PAN card enterd populates this message \r\n    } else {\r\n        g_form.showErrorBox(\"pan_number\", \"InValid PAN card number.\", true); //In Valid PAN card details enterd populate this message \r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/PAN Validation",
        "scriptFiles": [
          "PAN Validation.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/PAN%20Validation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/PAN%20Validation/PAN%20Validation.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.412Z",
    "updatedAt": "2025-09-21T08:58:59.104Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 443,
    "type": "catalog_client_script",
    "name": "Open modal widget in an Onsubmit",
    "description": "Code snippet to stop submission of a form in an Onsubmit Client Script, use an asynchronous call, and open a Widget in Modal view. In the script provided, there are two buttons in the modal. The first continues with the submission to create a new record and the second one cancels it. We can use a Script Include to get some value that we want and based on that open the modal or continue with sub...",
    "script": "function onSubmit() {\r\n\r\n      \r\n        if (g_scratchpad.isFormValid)\r\n            return true;\r\n\r\n      //We can do some check using a Client Callable script include\r\n        var getAnswer = new GlideAjax('example');\r\n        getAnswer.addParam('sysparm_name', 'checkFor');\r\n        getAnswer.addParam('sysparm_input1', g_user.userID);\r\n        getAnswer.addParam('sysparm_input2', g_form.getUniqueValue());\r\n\r\n        getAnswer.getXML(parsing);\r\n\r\n        function parsing(response) {\r\n\r\n            var answer = response.responseXML.documentElement.getAttribute('answer');\r\n            if (answer) {\r\n                var data = JSON.parse(answer);\r\n          \r\n                if (data == true) {\r\n\r\n                    spModal.open({\r\n                        title: \"Test title\",\r\n                        widget: \"mywidget\",\r\n                        buttons: [{\r\n                                label: 'Close',\r\n                                value: 'close'\r\n                            },\r\n                            {\r\n                                label: 'Create New Record',\r\n                                value: 'create'\r\n                            }\r\n                        ],\r\n                        size: 'md'\r\n                    }).then(function(answer) {\r\n                      //if button pressed is \"create\" then submit the form\r\n                        if (answer.value == 'create') {\r\n                            g_scratchpad.isFormValid = true;\r\n                            g_form.submit();\r\n                        }\r\n                    });\r\n                } else {\r\n                    g_scratchpad.isFormValid = true;\r\n                    g_form.submit();\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n      //Dont submit the form\r\n        return false;\r\n    }",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Open modal widget in an Onsubmit",
        "scriptFiles": [
          "openmodal.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Open%20modal%20widget%20in%20an%20Onsubmit",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Open%20modal%20widget%20in%20an%20Onsubmit/openmodal.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.408Z",
    "updatedAt": "2025-09-21T08:58:59.100Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 442,
    "type": "catalog_client_script",
    "name": "onCellEdit Catalog Task State Change Restriction",
    "description": "Catalog Task state should not be closed from list edit The onCellEdit Client Script type is used for lists rather than forms and here it is being used so that the task should not be closed from the list edit without",
    "script": "function onCellEdit(sysIDs, table, oldValues, newValue, callback) {\r\n  var saveAndClose = true;\r\n //Type appropriate comment here, and begin script below\r\n  // here the values are 7|closed skipped, 3|closed complete and 4|closed incomplete\r\n if(newValue == 7 || newValue == 3 || newValue == 4) {\r\n\tsaveAndClose = false;\r\n\talert('you cannot update from list');\r\n }\r\n callback(saveAndClose); \r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/onCellEdit Catalog Task State Change Restriction",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/onCellEdit%20Catalog%20Task%20State%20Change%20Restriction",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/onCellEdit%20Catalog%20Task%20State%20Change%20Restriction/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.403Z",
    "updatedAt": "2025-09-21T08:58:59.097Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 441,
    "type": "catalog_client_script",
    "name": "MRVS Reference Qualifier from Catalog Item Variable",
    "description": "On a reference variable in a multi-row variable set, sometimes you want the reference qualifier to include the value of a variable that is part of the Catalog Item, not within the MRVS. In this simplified example, I have a Manager (vmanager) reference variable (sysuser table) that belongs to the Catalog Item.  In the MRVS, I have an Employee (vemployee) reference variable (sysuser table).  I on...",
    "script": "// File: Catalog Client Script.js\nfunction onLoad() {\r\n\tvar mgr = g_service_catalog.parent.getValue('v_manager'); //if using this script onLoad of the MRVS\r\n\t//var mgr = newValue; // if using this script onChange of the Catalog Item variable\r\n\tvar filterString = 'active=true^manager=' + mgr; //Reference qualifier following the 'javascript:'\r\n\t//alternate method for Service Portal only\r\n\t// if (window == null){ //Service Portal method\r\n\t// \tvar setfilter = g_list.get('v_employee');\r\n\t// \tsetfilter.setQuery(filterString);\r\n\t// } else { //native UI method\r\n\t\tvar ga = new GlideAjax('refQualUtils'); //Client callable Script Include Name\r\n\t\tga.addParam('sysparm_name', 'setSysProp'); //Function in Script Include\r\n\t\tga.addParam('sysparm_sys_prop_name', 'sr.mrvs.ref_qual.emp'); //System Property Name used in MRVS variable Reference qualifier \r\n\t\tga.addParam('sysparm_sys_prop_value', filterString);\r\n\t\tga.getXML(getResponse);\r\n\t\t\t\r\n\t\tfunction getResponse(response) { //to avoid Service Portal 'There is a JavaScript error in your browser console'\r\n\t\t\tvar answer = response.responseXML.documentElement.getAttribute(\"answer\"); \r\n\t\t}\r\n\t//}\r\n}\n\n// File: Script Include.js\nvar refQualUtils = Class.create();\r\nrefQualUtils.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n   \r\n   \tsetSysProp: function(){\r\n\t\tvar propertyName = this.getParameter('sysparm_sys_prop_name');\r\n\t\tvar propertyValue =  this.getParameter('sysparm_sys_prop_value');\r\n\t\tvar property = gs.getProperty(propertyName);\r\n\t\tgs.setProperty(propertyName, propertyValue);\r\n\t\treturn;\r\n\t},\r\n\t\t\r\n    type: 'refQualUtils'\r\n});",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/MRVS Reference Qualifier from Catalog Item Variable",
        "scriptFiles": [
          "Catalog Client Script.js",
          "Script Include.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/MRVS%20Reference%20Qualifier%20from%20Catalog%20Item%20Variable"
      }
    },
    "createdAt": "2025-09-21T07:53:33.398Z",
    "updatedAt": "2025-09-21T08:58:59.093Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 440,
    "type": "catalog_client_script",
    "name": "MRVS Loop Rows",
    "description": "Use this to loop through a Multi Row Variable Set and create an array of objects with the variables in it.",
    "script": "var mrvsObj = [];\r\nvar multiRow = variable.mrvsName; //replace with the actual name of the mrvs\r\nif (multiRow.getRowCount()) { //if there are any entries on the MRVS loop through it\r\n\tvar eachRow = multiRow.getRowCount();\r\n\tfor (var i = 0; i < eachRow; i++) {\r\n\t\tvar row = multiRow.getRow(i);\r\n\t\tvar rowVars = {};\r\n\t\trowVars.var1 = row.var1; //replace with the variables in the mrvs\r\n\t\trowVars.var2 = row.var2;\r\n\t\trowVars.var3 = row.var3;\r\n\t\t// ... add rows as appropriate for your mrvs\r\n\t\tmrvsObj.push(rowVars); // creates an array of objects of the above fields from the MRVS\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/MRVS Loop Rows",
        "scriptFiles": [
          "loopRows.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/MRVS%20Loop%20Rows",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/MRVS%20Loop%20Rows/loopRows.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.394Z",
    "updatedAt": "2025-09-21T08:58:59.089Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 439,
    "type": "catalog_client_script",
    "name": "MRVS Interact With Parent Form",
    "description": "Use this code snippet to interact with the parent form (i.e the main Cataloge Item) from within a Catalog Client Script that applies to a multi-row variable set. The gservicecatalog object allows for accessing the \"parent\" GlideForm (gform) object for getValue only (for now?) To affect a variable in the main catalogue item using setValue, clearValue, etc. parent.gform... is available in the nat...",
    "script": "// File: Portal onLoad.js\n//Using this Catalog Client Script that Applies to the Catalog Item will enable g_form methods like setValue and clearValue which affect Catalog Item variables from a Catalog Client Script that applies to the multi-row variable set\r\nfunction onLoad() {\r\n\tif (this) {//we only need to do this for Service Portal\r\n\t\t//We need to make the g_form object for the parent item available from the MRVS window\r\n\t\tthis.cat_g_form = g_form;\r\n\t}\r\n}\n\n// File: Write to Parent Form.js\n//These methods can be used onLoad, onChange, or onSubmit in a script that Applies to the MRVS \r\n\r\n//Retrieve a variable value from the parent form - works in native UI as well as Service Portal, etc.\r\ng_service_catalog.parent.getValue('variable_name');\r\n\r\n//With this approach, you can set a variable value on the parent form - use similar code for other g_form methods like clearValue\r\n//Service Portal method requires an additional Catalog Client Script onLoad that Applies to the Catalog Item\r\nif (this) { //Service Portal method\r\n\t\tthis.cat_g_form.clearValue('variable_name');\r\n\t} else { //native UI method\r\n\t\tparent.g_form.clearValue('variable_name');\r\n\t}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/MRVS Interact With Parent Form",
        "scriptFiles": [
          "Portal onLoad.js",
          "Write to Parent Form.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/MRVS%20Interact%20With%20Parent%20Form"
      }
    },
    "createdAt": "2025-09-21T07:53:33.390Z",
    "updatedAt": "2025-09-21T08:58:59.085Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 438,
    "type": "catalog_client_script",
    "name": "MRVS Email Validation with Mutation Observer",
    "description": "Email Validation on Catalog UI This file contains a client script that validates email addresses in the MRVS (Multi-Row Variable Set) field using a MutationObserver. The script ensures that duplicate email addresses are not allowed in the catalog. File Structure",
    "script": "/**\r\n * This is a client script that validates the email address in the MRVS field.\r\n * It uses MutationObserver to observe the changes in the MRVS field.\r\n * UseCase: Validate the email address in the catalog whenever user is going to add another email, \r\n * and show an error message if a duplicate email address is found. \r\n */\r\nfunction onLoad() {\r\n    var document = document || top.document;\r\n\r\n    var duplicateErrorMessageStatus = false; //adding this as corner case as observer will be called multiple times\r\n\r\n    setTimeout(function () {\r\n        var tbody = document.querySelector(\"#user_details > div > tbody\");\r\n\r\n        if (tbody) {\r\n            var observer = new MutationObserver(function (m, o) {\r\n\r\n                var users = g_form.getValue('user_details');\r\n\r\n                var hasDuplicateEmails = validateUserDetails();\r\n\r\n                if (!users || hasDuplicateEmails) {\r\n                    if (hasDuplicateEmails && !duplicateErrorMessageStatus) {\r\n                        g_form.addErrorMessage('Duplicate email address found');\r\n                        duplicateErrorMessageStatus = true;\r\n                    }\r\n                    //disable the submit button\r\n                } else {\r\n                    duplicateErrorMessageStatus = false;\r\n                    g_form.clearMessages();\r\n                    //enable the submit button\r\n                }\r\n\r\n            });\r\n            observer.observe(tbody, {\r\n                attributes: true,\r\n                childList: true,\r\n                subtree: true\r\n            });\r\n        }\r\n    }, 3000);\r\n\r\n}\r\n\r\n// MRVS contains the user details in the form of JSON\r\nfunction validateUserDetails() {\r\n    var userDetailsMRVS = g_form.getValue('user_details');\r\n    if (userDetailsMRVS) {\r\n        var multiRowData = JSON.parse(userDetailsMRVS);\r\n        var emailSet = new Set();\r\n\r\n        for (var i = 0; i < multiRowData.length; i++) {\r\n            var row = multiRowData[i];\r\n\r\n            var email = row.email.trim().toLowerCase();\r\n\r\n            if (emailSet.has(email)) {\r\n\r\n                return true;\r\n            }\r\n            emailSet.add(email);\r\n        }\r\n    }\r\n    return false;\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/MRVS Email Validation with Mutation Observer",
        "scriptFiles": [
          "EmailValidationOnCatalogUI.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/MRVS%20Email%20Validation%20with%20Mutation%20Observer",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/MRVS%20Email%20Validation%20with%20Mutation%20Observer/EmailValidationOnCatalogUI.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.385Z",
    "updatedAt": "2025-09-21T08:58:59.081Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 437,
    "type": "catalog_client_script",
    "name": "Mandatory Attachments with 'n' numbers",
    "description": "Enable Mandatory Attachments Count wtih 'n' numbers on Service Catalog item Problem: Check if exact 'n' number of attachments are added or not when user submit a request through service catalog from Portal/Platform UI. For example: We need to ensure there are exact 3 attachments added before submission",
    "script": "function onSubmit() {\r\n\t//Type appropriate comment here, and begin script below\r\n\r\nvar count = 3; //Pass the number to ensure given number of attachments are added\r\nvar alertMsg=\"You must add \"+count+\" attachments before submitting this request.\";\r\n\tif(window == null){\r\n\t\t// Service portal validation, Make sure Isolate Script is set to False\r\n\t\tif(this.document.getElementsByClassName('get-attachment').length != count) {\r\n\t\t\tspModal.alert(alertMsg);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\telse{\r\n\t\t// Platform View\r\n         var length = $j(\"li.attachment_list_items\").find(\"span\").length;\r\n\t\tif(length != count){\r\n\t\t\talertWindow(alertMsg);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}\r\nfunction alertWindow(message) {\r\n    var modal = new GlideModal(\"glide_warn\");\r\n    modal.setTitle(\"Attachment issue\");\r\n    modal.setPreference(\"title\", message);\r\n    modal.render();\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Mandatory Attachments with 'n' numbers",
        "scriptFiles": [
          "onSubmitClientScript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Mandatory%20Attachments%20with%20'n'%20numbers",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Mandatory%20Attachments%20with%20'n'%20numbers/onSubmitClientScript.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.381Z",
    "updatedAt": "2025-09-21T08:58:59.078Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 436,
    "type": "catalog_client_script",
    "name": "Make OOB Attachment Mandatory",
    "description": "Make out of the box attahcment mandatory onChange of a field in Catalog Item This scripts makes the out of the box attachments to mandatory on the Service Portal for any Catalog Item. Usage:",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading || newValue == 'No') {\r\n\t\tsetAttachmentMandatory(false);\r\n        return;\r\n    }\r\n\r\n    if (newValue == 'Yes') setAttachmentMandatory(true);\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Make OOB Attachment Mandatory",
        "scriptFiles": [
          "onChange.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Make%20OOB%20Attachment%20Mandatory",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Make%20OOB%20Attachment%20Mandatory/onChange.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.377Z",
    "updatedAt": "2025-09-21T08:58:59.074Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 435,
    "type": "catalog_client_script",
    "name": "Hide Variables of Catalog Item on Order Guide",
    "description": "1. The onLoad catalog client script can be used to hide the catalog varaibles on catalog form when the catalog item is being used on OrderGuide and cascade varaibles field is enabled on Order guide. 2. Cascading enables the transfer of values entered for variables in the initial order form to their corresponding variables in the catalog items that have been ordered. 3. Assume that the variables...",
    "script": "function onLoad(){\r\n  if(g_service_catalog.isOrderGuide()){\r\n    //variable_name1, varaible_name2 are the fields already present on the Order guide, hence hiding below fields on the catalog form when the catalog form is used through an order guide.\r\n    g_form.setDisplay('varible_name1',false);\r\n    g_form.setDisplay('varible_name2',false);\r\n  }",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Hide Variables of Catalog Item on Order Guide",
        "scriptFiles": [
          "Hide Variables.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Hide%20Variables%20of%20Catalog%20Item%20on%20Order%20Guide",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Hide%20Variables%20of%20Catalog%20Item%20on%20Order%20Guide/Hide%20Variables.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.372Z",
    "updatedAt": "2025-09-21T08:58:59.071Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 434,
    "type": "catalog_client_script",
    "name": "Get MRVS Values from Parent",
    "description": "Get Multi-row Variable Set Values from parent form Sometimes you need to query the current set of values for a MRVS from the actual MRVS or another MRVS. This requires getting the data from the parent form, the method to retrieve and the format of the data is different",
    "script": "function onLoad() {\r\n\r\n    /*\r\n     * work out the parent form based on platform and return the given MRVS data\r\n     * This could go in a global UI script but that wouldn't work for Portal, \r\n     * would love anyone to suggest an alternative for portal :)\r\n     */\r\n    function getMRVSDataFromParent(mrvsName) {\r\n        var parent_g_form = g_service_catalog.parent; // default for backend/platform\r\n        if (parent.angular) {\r\n            // this is portal so get a different way\r\n            var parentItem = parent.angular.element(parent.$('#sc_cat_item').find('sp-variable-layout')[0]).scope();\r\n            parent_g_form = parentItem.getGlideForm();\r\n        }\r\n        var vmData = parent_g_form.getValue(mrvsName);\r\n        // on portal we get back an empty string rather than an empty array so convert\r\n        return vmData == '' ? [] : JSON.parse(vmData);\r\n    }\r\n\r\n    var vmJSONData = getMRVSDataFromParent('virtual_machine');\r\n    console.log(\"JSON \" + JSON.stringify(vmJSONData, '', 3));\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Get MRVS Values from Parent",
        "scriptFiles": [
          "onload.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Get%20MRVS%20Values%20from%20Parent",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Get%20MRVS%20Values%20from%20Parent/onload.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.368Z",
    "updatedAt": "2025-09-21T08:58:59.067Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 433,
    "type": "catalog_client_script",
    "name": "Get Display Value of MRVS",
    "description": "Get Display Value of MultiRow Variableset (MRVS) While there are different ways to do this, the easiest of them is to leverage an out of box script named 'VariableUtil'. The script is present in the global scope and contains an function named getDisplayValue aptly. This function seems to work on both the normal variable as well as multirow variableset. You just need to pass the sysid of the var...",
    "script": "var script = new global.VariableUtil();\r\nvar gr = new GlideRecord(\"sc_req_item\");\r\ngr.addEncodedQuery(\"sys_id=<Copy & Paste RITM Sys ID>\");\r\ngr.query();\r\nif (gr.next()) {\r\n    gs.info(script.getDisplayValue('<MRVS Variableset SYSID>', gr.variables.MRVSName)); //MRVS Display Value\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Get Display Value of MRVS",
        "scriptFiles": [
          "mrvs.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Get%20Display%20Value%20of%20MRVS",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Get%20Display%20Value%20of%20MRVS/mrvs.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.364Z",
    "updatedAt": "2025-09-21T08:58:59.063Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 432,
    "type": "catalog_client_script",
    "name": "Dynamically Update Reference Qualifier",
    "description": "When we have a reference variable that is used in a (single row) variable set, sometimes we want to update the Reference qualifier only for specific Catalog Item(s). In this example, I have a Configuration item (named vconfigurationitem) reference variable (cmdbci table) in a single row variable set that has been included in a number of Catalog Items.  The simple Reference qualifier for this va...",
    "script": "// File: Catalog Item onLoad.js\nfunction onLoad() {\r\n\tvar filterString = 'sys_class_name=cmdb_ci_ip_router^ORsys_class_name=cmdb_ci_ip_switch^ORsys_class_name=cmdb_ci_vpn' //Reference qualifier for this Catalog Item\r\n\t//alternate method for Service Portal only\r\n\t// if (window == null){ //Service Portal method\r\n\t// \tvar setfilter = g_list.get('v_configuration_item');\r\n\t// \tsetfilter.setQuery(filterString);\r\n\t// } else { //native UI method\r\n\t\tvar ga = new GlideAjax('refQualUtils'); //Client callable Script Include Name\r\n\t\tga.addParam('sysparm_name', 'setSysProp'); //Function in Script Include\r\n\t\tga.addParam('sysparm_sys_prop_name', 'sr.ref_qual.ci'); //System Property Name used in Reference qualifier \r\n\t\tga.addParam('sysparm_sys_prop_value', filterString);\r\n\t\tga.getXML(getResponse);\r\n\t\t\t\r\n\t\tfunction getResponse(response) { //to avoid Service Portal 'There is a JavaScript error in your browser console'\r\n\t\t\tvar answer = response.responseXML.documentElement.getAttribute(\"answer\"); \r\n\t\t}\r\n\t//}\r\n}\n\n// File: Script Include.js\nvar refQualUtils = Class.create();\r\nrefQualUtils.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n   \r\n   \tsetSysProp: function(){\r\n\t\tvar propertyName = this.getParameter('sysparm_sys_prop_name');\r\n\t\tvar propertyValue =  this.getParameter('sysparm_sys_prop_value');\r\n\t\tvar property = gs.getProperty(propertyName);\r\n\t\tgs.setProperty(propertyName, propertyValue);\r\n\t\treturn;\r\n\t},\r\n\t\t\r\n    type: 'refQualUtils'\r\n});\n\n// File: Variable Set onLoad.js\nfunction onLoad() {\r\n\tvar filterString = 'sys_class_name=cmdb_ci_ip_router^ORsys_class_name=cmdb_ci_ip_switch' //Reference qualifier that was replaced\r\n\t//alternate method for Service Portal only\r\n\t// if (window == null){ //Service Portal method\r\n\t// \tvar setfilter = g_list.get('v_configuration_item');\r\n\t// \tsetfilter.setQuery(filterString);\r\n\t// } else { //native UI method\r\n\t\tvar ga = new GlideAjax('refQualUtils'); //Client callable Script Include Name\r\n\t\tga.addParam('sysparm_name', 'setSysProp'); //Function in Script Include\r\n\t\tga.addParam('sysparm_sys_prop_name', 'sr.ref_qual.ci'); //System Property Name used in Reference qualifier \r\n\t\tga.addParam('sysparm_sys_prop_value', filterString);\r\n\t\tga.getXML(getResponse);\r\n\t\t\t\r\n\t\tfunction getResponse(response) { //to avoid Service Portal 'There is a JavaScript error in your browser console'\r\n\t\t\tvar answer = response.responseXML.documentElement.getAttribute(\"answer\"); \r\n\t\t}\r\n\t//}\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Dynamically Update Reference Qualifier",
        "scriptFiles": [
          "Catalog Item onLoad.js",
          "Script Include.js",
          "Variable Set onLoad.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Dynamically%20Update%20Reference%20Qualifier"
      }
    },
    "createdAt": "2025-09-21T07:53:33.360Z",
    "updatedAt": "2025-09-21T08:58:59.059Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 431,
    "type": "catalog_client_script",
    "name": "Date Management",
    "description": "Useful ways to interact with variable date/time values without needing to make a trip to the server The following functions and variables are defined by ServiceNow and loaded at run-time. They are accessible from within the client script without the need to turn off script isolation. - guserdateformat",
    "script": "//Various useful ways to interact with dates on the client without needing to make a trip to the server\r\n\r\n\r\n//Use the following to take a date / date time variable and turn it to a JS Date value\r\n/*newValue = date(/time) variable value, i.e from an onChange script\r\n/*getDateFromFormat = This is a ServiceNow provided function loaded into the browser\r\n/*g_user_date_format = a variable loaded into the browser on session load that stores the users date format\r\n*/\r\nvar date = new Date(getDateFromFormat(newValue, g_user_date_format));\r\n\r\n\r\n//Validate a value is a date\r\n//This is a function loaded into the browser by ServiceNow\r\n//i.e isDate(newValue , g_user_date_format);\r\n//Returns a Boolean\r\n\r\nvar checkDate = isDate(value , format);\r\n\r\n\r\n//Compare two dates\r\n//This is a function loaded into the browser by ServiceNow\r\n//i.e compareDates(\"29-10-2021\" , \"dd-MM-yyyy\" , \"20-10-2021\" , \"dd-MM-yyyy\");\r\n//Returns -1 if either date value is not a valid date\r\n//Returns 1 if date1 is greater than date2\r\n//Returns 0 otherwise\r\n\r\nvar isSecondDateLarger = compareDates(\"29-10-2021\" , \"dd-MM-yyyy\" , \"20-10-2021\" , \"dd-MM-yyyy\");\r\n\r\n\r\n//Format a date value to the user session format to save in a variable/field\r\n\r\nvar date = formatDate(date,format);\r\n\r\n/*Exampe of the above in use*/\r\nvar dateNumber = getDateFromFormat(newValue , g_user_date_format);\r\nvar date = new Date(dateNumber);\r\ndate.setDate(date.getDate() - 1);\r\ng_form.setValue('date' , formatDate(date , g_user_date_format));",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Date Management",
        "scriptFiles": [
          "Date Management.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Date%20Management",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Date%20Management/Date%20Management.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.355Z",
    "updatedAt": "2025-09-21T08:58:59.055Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 430,
    "type": "catalog_client_script",
    "name": "CustomAlert",
    "description": "These scripts helps you to create custom popup easily. follow the below steps to implement it on your instance. Steps 1. Create UI page with name \"customalertbox\"",
    "script": "// File: custom_alert_box.js\n*****************HTML Section Start*****************\r\n<style>\r\n    /* dialog styles */\r\n    .dialog_content {\r\n        width: 100%;\r\n        height: 100px;\r\n        vertical-align: middle;\r\n        min-width: 300px;\r\n        padding: 0 10px 10px 10px;\r\n    }\r\n\r\n    .dialog_buttons {\r\n        display: inline;\r\n        text-align: right;\r\n        vertical-align: bottom;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .modal-header {\r\n        background-color: #d9edf7;\r\n        color: #31708f;\r\n    }\r\n\r\n    .modal-content {\r\n        border-color: #bce8f1;\r\n        border-width: medium !important;\r\n    }\r\n</style>\r\n<g:ui_form onsubmit=\"return invokePromptCallBack();\">\r\n    <g2:evaluate>\r\n        var infoText = \"${RP.getWindowProperties().get('infoText')}\";\r\n        infoText = new GlideStringUtil().unEscapeHTML(infoText);\r\n        var warning = \"${RP.getWindowProperties().get('warning')}\";\r\n        warning = new GlideStringUtil().unEscapeHTML(warning);\r\n        var alertType = \"${RP.getWindowProperties().get('alertType')}\";\r\n    </g2:evaluate>\r\n    <j2:if test=\"$[alertType == 'warning']\">\r\n        <style>\r\n            .modal-header {\r\n                background-color: #fcf8e3;\r\n                color: #8a6d3b;\r\n            }\r\n\r\n            .modal-content {\r\n                border-color: #faebcc;\r\n                border-width: medium !important;\r\n            }\r\n        </style>\r\n    </j2:if>\r\n\t<j2:if test=\"$[alertType == 'danger']\">\r\n        <style>\r\n            .modal-header {\r\n                background-color: #f2dede;\r\n                color: #a94442;\r\n            }\r\n\r\n            .modal-content {\r\n                border-color: #ebccd1;\r\n                border-width: medium !important;\r\n            }\r\n        </style>\r\n    </j2:if>\r\n\t<j2:if test=\"$[alertType == 'success']\">\r\n        <style>\r\n            .modal-header {\r\n                background-color: #dff0d8;\r\n                color: #3c763d;\r\n            }\r\n\r\n            .modal-content {\r\n                border-color: #d6e9c6;\r\n                border-width: medium !important;\r\n            }\r\n        </style>\r\n    </j2:if>\r\n    <table border=\"0\" width=\"100%\">\r\n        <tr>\r\n            <td>\r\n                <table border=\"0\" width=\"100%\">\r\n                    <tr>\r\n                        <td class=\"dialog_content\" id=\"bodycell\"></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td class=\"dialog_buttons\">\r\n                            <g:dialog_button_ok ok=\"invokePromptCallBack();\" ok_type=\"button\" />\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</g:ui_form>\r\n*****************HTML Section End*****************\r\n\r\n*****************Client Script Start*****************\r\nfunction unescapeHTML(html) {\r\n    var textarea = document.createElement('textarea');\r\n    textarea.innerHTML = html; // Set the HTML content\r\n    return textarea.value; // Return the unescaped text\r\n}\r\n\r\nvar infoText = \"${RP.getWindowProperties().get('infoText')}\";\r\ninfoText = unescapeHTML(infoText); // Unescape the HTML\r\n\r\n// Now set the title to your dialog or display it\r\ndocument.getElementById('bodycell').innerHTML = infoText; // Assuming there's a titleCell in your HTML\r\n\r\nfunction invokePromptCallBack() {\r\n    var gdw = GlideDialogWindow.get();\r\n    gdw.destroy();\r\n    return false;\r\n}\r\n\r\nvar gdw = GlideDialogWindow.get();\r\ngel('ok_button').focus();\r\n*****************Client Script Start*****************\n\n// File: custom_alert.js\nfunction onLoad() {\r\n    // Function to show a custom link in a GlideModal\r\n    function showCustomLinkInGlideModal() {\r\n        // Create an instance of GlideModal using the 'custom_alert_box' UI page\r\n        // The second parameter 'true' indicates that the modal should be a dialog,\r\n        // and '600' sets the width of the modal to 600 pixels.\r\n        var gm = new GlideModal(\"custom_alert_box\", true, 600);\r\n\r\n        // Set the modal's title to anything you want\r\n        gm.setTitle('Important Information'); //for e.g. Important Information\r\n        \r\n        // Set a preference for the modal indicating the type of alert\r\n        // This can be used to style the modal or control its behavior.\r\n        // available choices {info, danger, warning, success}\r\n        gm.setPreference('alertType', 'danger');\r\n\r\n        // Custom HTML content to be displayed in the modal\r\n        // This includes a paragraph and a link to an external website.\r\n        var htmlContent = '<p>Please visit the following link:</p>' +\r\n            '<a href=\"https://example.com\" target=\"_blank\">Click here to go to Example.com</a>';\r\n\r\n        // Set the HTML content of the modal using the 'infoText' preference.\r\n        // We disable escaping since we're providing our own HTML.\r\n        gm.setPreference('infoText', htmlContent);\r\n\r\n        // Render the modal on the screen\r\n        gm.render();\r\n    }\r\n\r\n    // Call the function to display the modal when the form loads\r\n    showCustomLinkInGlideModal();\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/CustomAlert",
        "scriptFiles": [
          "custom_alert.js",
          "custom_alert_box.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/CustomAlert"
      }
    },
    "createdAt": "2025-09-21T07:53:33.351Z",
    "updatedAt": "2025-09-21T08:58:59.051Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 429,
    "type": "catalog_client_script",
    "name": "Currency Validation",
    "description": "Currency Validation Use this catalog client script to validate the value of a variable used to get currency. As of now 3 things are being checked in the script but you can make changes as per requirement. 1) Characters after the $ sign should be numerics.",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading || newValue == '') {\r\n        return;\r\n    }\r\n\r\n    var cost = g_form.getValue('variable_name'); //update variable name used for currency\r\n    cost = cost.trim();\r\n    // first character should be dollar sign\r\n    var firstChar = cost.substring(0, 1);\r\n    if (firstChar != '$') {\r\n        validationAlert(oldValue);\r\n    }\r\n\r\n    // characters after the $ sign should be numerics\r\n    var costType = isNaN(cost.substring(1));\r\n    if (costType == true) {\r\n        validationAlert(oldValue);\r\n    }\r\n\r\n    // entered value should have a decimal point\r\n    var num = cost.substring(1);\r\n    if (num.indexOf('.') == -1) {\r\n        validationAlert(oldValue);\r\n    }\r\n\r\n    // there must be 2 digits only after the decimal\r\n    var decNum = num.substring(num.indexOf('.') + 1, num.length);\r\n    if (decNum.length != 2) {\r\n        validationAlert(oldValue);\r\n    }\r\n}\r\n\r\nfunction validationAlert(oldValue) {\r\n    g_form.setValue(\"variable_name\", oldValue);\r\n    var gm = new GlideModal(\"glide_warn\");\r\n    gm.setTitle(\"Currency formatting problem\");\r\n    gm.setPreference(\"title\", \"Please enter cost in $0.00 format\");\r\n    gm.render();\r\n    return;\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Currency Validation",
        "scriptFiles": [
          "currency_validation.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Currency%20Validation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Currency%20Validation/currency_validation.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.347Z",
    "updatedAt": "2025-09-21T08:58:59.046Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 428,
    "type": "catalog_client_script",
    "name": "Control all RITM variables in one go",
    "description": "Control all RITM variables in one go Requirement : We need to make all the variables on the RITM (screqitem) form read only or editable Problem : If there are so many variables then it becomes difficult to write multiple UI policies or writing multiple lines of code in catalog client script for each variable seperately.",
    "script": "function onLoad()\r\n{\r\n  \r\n   g_form.setVariablesReadOnly(true); //if you want to make all variables read-only\r\n  \r\n   g_form.setVariablesReadOnly(false); //if you want to make all variables editable\r\n  \r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Control all RITM variables in one go",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Control%20all%20RITM%20variables%20in%20one%20go",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Control%20all%20RITM%20variables%20in%20one%20go/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.342Z",
    "updatedAt": "2025-09-21T08:58:59.042Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 427,
    "type": "catalog_client_script",
    "name": "Combine variables into Description",
    "description": "OnSUbmit Catalog Client script is created to Combine all variable values required and display in Description field. Steps: 1. Navigate to your instance open catalog client script table [catalogscriptclient]",
    "script": "// Combine variables into Description\r\n// Type: onSubmit\r\n\r\nfunction onSubmit()\r\n{\r\n  \r\n  // Combine provided all fields to Description field\r\n  \r\n  var description = g_form.getValue ('description');\r\n  var first = g_form.getDisplayValue ('first_variable');\r\n  var second = g_form.getDisplayValue ('second_variable');\r\n  var third = g_form.getDisplayValue ('third_variable');\r\n  \r\n  g_form.setValue('description', ''+ description + '\\n\\nType: ' + first + '\\n Text: ' + second + '\\nText: ' + third);\r\n  return true;\r\n}",
    "metadata": {
      "application": "Application scope applies to",
      "type": "onSubmit",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Combine variables into Description",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Combine%20variables%20into%20Description",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Combine%20variables%20into%20Description/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.338Z",
    "updatedAt": "2025-09-21T08:58:59.039Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 426,
    "type": "catalog_client_script",
    "name": "Clear all fields",
    "description": "Clear all fields on a catalog item form This works on both the native platform and service portal / mobile. Typically used with an OnChange catalog client script when you would like to reset all the fields after a certain variable is changed. This function does support an exclusion list if there are fields you would like to exclude from being reset, typically you would want to add the field tha...",
    "script": "/**SNDOC\r\n    @name clearFields\r\n    @description Clear/reset all fields on a form\r\n    @param  {Array} [dontClearFieldsArray] - Fields to not clear\r\n    @example\r\n    clearFields(['field1', 'field2']);\r\n*/\r\n\r\nfunction clearFields(dontClearFieldsArray){\r\n\r\n\ttry{ // Classic UI\r\n\t\tvar pFields = g_form.nameMap;\r\n\t\tpFields.forEach(function(field){\r\n\t\t\tif(dontClearFieldsArray.indexOf(field.prettyName) == -1){\r\n\t\t\t\tg_form.clearValue(field.prettyName);\r\n\t\t\t}\r\n\t\t});\r\n\t}catch(e){ // Service Portal or Mobile\r\n\t\tvar fields = g_form.getEditableFields();\r\n\t\tfields.forEach(function(field){\r\n\t\t\tif(dontClearFieldsArray.indexOf(fields) == -1){\r\n\t\t\t\tg_form.clearValue(field);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Clear all fields",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Clear%20all%20fields",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Clear%20all%20fields/script.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.334Z",
    "updatedAt": "2025-09-21T08:58:59.035Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 425,
    "type": "catalog_client_script",
    "name": "Calculate age on based on date of birth",
    "description": "Age Calculator - On Change Client Script This script is designed to calculate a person's age based on their date of birth. Functions",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading || newValue == '') {\r\n       return;\r\n    }\r\n \r\n function calculateAge(dateOfBirth) {\r\n     if (!dateOfBirth || isNaN(Date.parse(dateOfBirth))) {\r\n         alert('Invalid date of birth provided.');\r\n         return;\r\n     }\r\n     var dob = new Date(dateOfBirth);\r\n     var currentDate = new Date();\r\n     var age = calculateAgeDifference(dob, currentDate);\r\n     var ageString = '';\r\n \r\n     if (age.years > 0) {\r\n         ageString += age.years + ' years';\r\n         if (age.months > 0 || age.days > 0) {\r\n             ageString += ', ';\r\n         }\r\n     }\r\n \r\n     if (age.months > 0) {\r\n         ageString += age.months + ' months';\r\n         if (age.days > 0) {\r\n             ageString += ', ';\r\n         }\r\n     }\r\n \r\n     if (age.days > 0) {\r\n         ageString += age.days + ' days';\r\n     }\r\n      return ageString;\r\n }\r\n \r\n function calculateAgeDifference(startDate, endDate) {\r\n     var years = endDate.getFullYear() - startDate.getFullYear();\r\n     var months = endDate.getMonth() - startDate.getMonth();\r\n     var days = endDate.getDate() - startDate.getDate();\r\n \r\n     if (days < 0) {\r\n         months--;\r\n         days += new Date(endDate.getFullYear(), endDate.getMonth(), 0).getDate();\r\n     }\r\n \r\n     if (months < 0) {\r\n         years--;\r\n         months += 12;\r\n     }\r\n \r\n     return { years: years, months: months, days: days };\r\n }\r\n \r\n var dateOfBirth = newValue;\r\n var age = calculateAge(dateOfBirth);\r\n g_form.setValue('age', age);\r\n }",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Calculate age on based on date of birth",
        "scriptFiles": [
          "Calculate age based on dob.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Calculate%20age%20on%20based%20on%20date%20of%20birth",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Calculate%20age%20on%20based%20on%20date%20of%20birth/Calculate%20age%20based%20on%20dob.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.330Z",
    "updatedAt": "2025-09-21T08:58:59.032Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 424,
    "type": "catalog_client_script",
    "name": "Block Submit",
    "description": "Code Snippet to block submission of catalog item based on answer to other yes/no variable. update To fix a task from issue 745",
    "script": "//Block the user from submitting the form based on variable answer\r\nfunction onSubmit() {\r\n  var someVariable = g_form.getValue(\"someVariable\");\r\n  if(someVariable == 'No'){\r\n\tvar gm = new GlideModal('glide_warn',false);\r\n        gm.setTitle(\"Submit Blocked! You can only use this form for someReason.  Review someInstructions\");\r\n        gm.render();\r\n    \treturn false; // this stops user from submitting the form\r\n    }\r\n  return true; // allow form submit\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Block Submit",
        "scriptFiles": [
          "block_submit.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Block%20Submit",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Block%20Submit/block_submit.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.325Z",
    "updatedAt": "2025-09-21T08:58:59.028Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 423,
    "type": "catalog_client_script",
    "name": "Autopopulate Department",
    "description": "Autopopulate Department Catalog Client Script Use this onChange catalog client script to populate a department variable in a catalog item based on a modifiable requestedfor. Both variables must be reference type pointing to their respective tables. Use case",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n  g_form.getReference(\"requested_for\", function (gr) {\r\n    g_form.setValue(\"department\", gr.department);\r\n    g_form.setValue(\"email\", gr.email);\r\n    g_form.setValue(\"phone\", gr.phone);\r\n  });\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Autopopulate Department",
        "scriptFiles": [
          "autopopulateDepartment.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Autopopulate%20Department",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Autopopulate%20Department/autopopulateDepartment.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.320Z",
    "updatedAt": "2025-09-21T08:58:59.024Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 422,
    "type": "catalog_client_script",
    "name": "Add Rows in MRVS",
    "description": "With this simple script you can through a client script add rows in the MRVS if you like. Ex. you want to prefill a few rows that you get from a GlideAjax call depending on what the user choosed in another variable",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n\tif (isLoading)\r\n\t\treturn;\r\n\r\n\tvar obj = (g_form.getValue('multi_test').length != 0) ? JSON.parse(g_form.getValue('multi_test')): [];//Get the MRVS\r\n\r\n  //Push in what you want\r\n\tobj.push({var_one: 'test1',\r\n\t\t\t  var_two: 'test2'});\r\n\tg_form.setValue('multi_test', JSON.stringify(obj));//And set the value again\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Add Rows in MRVS",
        "scriptFiles": [
          "addrows.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Add%20Rows%20in%20MRVS",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Add%20Rows%20in%20MRVS/addrows.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.314Z",
    "updatedAt": "2025-09-21T08:58:59.020Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 421,
    "type": "catalog_client_script",
    "name": "Add Label For Attachment",
    "description": "Code Snippet to add a label to the attachment for a Catalog Item on the Portal.",
    "script": "function onLoad() {\r\n    var attachmentElement = top.document.querySelectorAll('[ng-if=\"c.showAttachments()\"]');\r\n    \r\n\tif (attachmentElement[0]) {\r\n\t\tvar label = top.document.createElement('label');\r\n\t\tlabel.innerHTML = 'LABEL COMES HERE';\r\n\t\tattachmentElement[0].prepend(label);\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Catalog Client Script/Add Label For Attachment",
        "scriptFiles": [
          "add_label_for_attachment.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Catalog%20Client%20Script/Add%20Label%20For%20Attachment",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Catalog%20Client%20Script/Add%20Label%20For%20Attachment/add_label_for_attachment.js"
      }
    },
    "createdAt": "2025-09-21T07:53:33.308Z",
    "updatedAt": "2025-09-21T08:58:59.016Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 420,
    "type": "mail_script",
    "name": "RITM Reject Reason",
    "description": "After finding that reject reasons added from Employee Center for Requests do not get added to the Approval record but instead the RITM record, I made a change to the rejectreason email script to include the RITM reject reason (if found) The changes calls the Script Include \"RequestNotificationUtil\" with an added function to call the RITM reject reason",
    "script": "(function runMailScript(/* GlideRecord */ current, /* TemplatePrinter */ template,\r\n/* Optional EmailOutbound */ email, /* Optional GlideRecord */ email_action,\r\n/* Optional GlideRecord */ event) {\r\n\r\n\tvar requestId = current;\r\n\tvar portalSuffix = new sn_ex_emp_fd.FoundationNotificationUtil().getPortalSuffix();\r\n\tvar requestUrl = '/' + portalSuffix + '?id=order_status&table=sc_request&sys_id=' + current.sys_id.toString();\r\n\tvar fontSize = 'font-size: 16px;';\r\n\tvar lineHeight = 'line-height: 24px;';\r\n\tvar notificationUtil = new RequestNotificationUtil();\r\n\r\n\tvar requestDetails = notificationUtil.getRequestDetails(current.sys_id, current);\r\n\tvar tasks = requestDetails.tasks;\r\n\tvar totalTasks = requestDetails.totalTasks;\r\n\r\n\tnotificationUtil.createNotificationPrimayAction(template, requestUrl, 'View request');\r\n\ttemplate.print('<div style=\"font-size: 15pt; line-height:30px;\"><b>About this request</b></div>');\r\n\r\n\tvar commentLeft = notificationUtil.getRequestComment(current.sys_id, current.approval);\r\n\tif (commentLeft) {\r\n\t\ttemplate.print('<div style=\"padding-top: 16px; ' + fontSize + lineHeight + '\"><span>Rejection notes: </span>' + '<span style=\"font-weight: 600;\">' + commentLeft + '</span></div>');\r\n\t}\r\n    //For reject comments added to RITM record\r\n\tvar commentLeftRITM = notificationUtil.getRejectCommentRITM(current.sys_id);\r\n    if (commentLeftRITM) {\r\n        template.print('<div style=\"padding-top:18px; ' + fontSize + lineHeight + '\"><span>Rejection notes: </span>' + '<span style=\"font-weight: 600;\">' + commentLeftRITM + '</span></div><br />');\r\n    }\r\n\tif (requestDetails.totalTasks > 1) {\r\n\t\ttemplate.print('<div style=\"font-size: 15pt;padding-top:16px;font-weight:600;\">Requested items (' + requestDetails.totalTasks + ')</div>');\r\n\t}\r\n\ttasks.forEach(function (task, index) {\r\n\t\tvar borderBottom = 'border-bottom:1px solid #DADDE2';\r\n\t\ttemplate.print('<div style=\"padding-top:16px;padding-bottom:16px;');\r\n\t\tif (requestDetails.totalTasks > requestDetails.tasks.length || (index + 1 < requestDetails.tasks.length)) {\r\n\t\t\ttemplate.print(borderBottom);\r\n\t\t}\r\n\t\ttemplate.print('\">');\r\n\t\ttemplate.print('<div style=\"' + fontSize + lineHeight + '\"><span>Requested item number:</span> <span style=\"font-weight: 600;\">' + task.requestNumber + '</span></div>');\r\n\t\ttemplate.print('<div style=\"' + fontSize + lineHeight + '\"><span>Short description: </span><span style=\"font-weight: 600;\">' + task.item + '</span></div>');\r\n\t\ttemplate.print('</div>');\r\n\t});\r\n\r\n\tif (totalTasks > 3) {\r\n\t\ttemplate.print('<div style=\"' + fontSize + lineHeight + 'padding-top:16px; padding-bottom:16px;\"><a style=\"color:#3C59E7\" href=\"' + requestUrl + '\">');\r\n\t\ttemplate.print(gs.getMessage('View all items'));\r\n\t\ttemplate.print('</a></div>');\r\n\t}\r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "sc_request",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/RITM Reject Reason",
        "scriptFiles": [
          "reject_reason_new.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/RITM%20Reject%20Reason",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/RITM%20Reject%20Reason/reject_reason_new.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.401Z",
    "updatedAt": "2025-09-21T08:58:59.013Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 419,
    "type": "mail_script",
    "name": "PrintRecordDetailsinEmailBody",
    "description": "1. Overview This mail script is designed for use in ServiceNow notifications. It dynamically generates an HTML structure that displays key record details (Short Description, Description, and Comments) in a visually appealing format. The script can be used in any ServiceNow notification to provide recipients with a clear, styled summary of the record's information. 2. How It Works",
    "script": "// Start the HTML container with gray color and Helvetica font\r\ntemplate.print('<div style=\"color: #808080; font-family: helvetica;\">');\r\n\r\n// Display the Short Description label in bold and larger font\r\ntemplate.print('<font size=\"4\"><strong>Short Description: </strong></font>');\r\n\r\n// Display the actual short description from the current record in a smaller font\r\ntemplate.print('<font size=\"3\">' + gs.getMessage(current.short_description).replace(/(\\r\\n|\\n|\\r)/g, '') + '</font>');\r\ntemplate.print('<br />\\n');  // Add a line break after the short description\r\n\r\n// Display the Description label in bold and larger font\r\ntemplate.print('<font size=\"4\"><strong>' + gs.getMessage('Description') + ':</strong></font>');\r\n\r\n// Display the actual description from the current record, preserving line breaks\r\ntemplate.print('<font size=\"3\" style=\"white-space: pre-line;\">' + gs.getMessage(current.description) + '</font>');\r\ntemplate.print('<br />\\n');  // Add a line break after the description\r\n\r\n// Display the Comments label in bold and larger font\r\ntemplate.print('<font size=\"4\"><strong>' + gs.getMessage('Comments') + ':</strong></font><br />');\r\n\r\n// Display the actual comments from the current record in a smaller font\r\ntemplate.print('<font size=\"3\">' + gs.getMessage('${current.comments}') + '</font>');\r\n\r\n// Close the HTML container\r\ntemplate.print('</div>');",
    "metadata": {
      "application": "Global",
      "table": "to",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/PrintRecordDetailsinEmailBody",
        "scriptFiles": [
          "print_record_details_to_body.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/PrintRecordDetailsinEmailBody",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/PrintRecordDetailsinEmailBody/print_record_details_to_body.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.398Z",
    "updatedAt": "2025-09-21T08:58:59.009Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 418,
    "type": "mail_script",
    "name": "Print variables to mail",
    "description": "Script block to be used within a Notification Email Script or as a standalone one. It prints all variables + answers of a catalog produced record to the email body, along with the short description of the task on top (please check script).",
    "script": "(function runMailScript( /* GlideRecord */ current, /* TemplatePrinter */ template,\r\n    /* Optional EmailOutbound */\r\n    email, /* Optional GlideRecord */ email_action,\r\n    /* Optional GlideRecord */\r\n    event) {\r\n\r\n    var tableName = current.getDisplayValue('sys_class_name');\r\n    \r\n    template.print(\"<p></p>\" + tableName + \": \");\r\n    \r\n    printVars();\r\n\r\n    function printVars() {\r\n        var varSet = new GlideappVariablePoolQuestionSet();\r\n        varSet.setRequestID(current.getValue('sys_id'));\r\n        varSet.load();\r\n        template.print(current.getDisplayValue('cat_item') + \"\\n\");\r\n        template.print(\"\\n\");\r\n        var variables = varSet.getFlatQuestions();\r\n        for (var i = 0; i < variables.size(); i++) {\r\n            if (variables.get(i).getLabel() != '') {\r\n                if (variables.get(i).getDisplayValue() != '') {\r\n//                     template.space(6);\r\n                    template.print(variables.get(i).getLabel() + \" : \" + variables.get(i).getDisplayValue() + \"<br/>\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "Name",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Print variables to mail",
        "scriptFiles": [
          "printVarsToMail.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Print%20variables%20to%20mail",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Print%20variables%20to%20mail/printVarsToMail.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.394Z",
    "updatedAt": "2025-09-21T08:58:59.005Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 417,
    "type": "mail_script",
    "name": "Open Survey In Portal",
    "description": "1)create a notification on \"Assessment Instance\" table</br 2)when record is created and state is ready to take trigger notification to assigned to </br 3)use this mail script to get the url to survey in the email that takes them to the portal</br",
    "script": "var survey = '<a href=\"' + gs.getProperty('glide.servlet.uri') + '/sp?id=take_survey&instance_id=' +current.sys_id + '\">Click Here to take Survey </a>';  \r\n template.print(survey);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Open Survey In Portal",
        "scriptFiles": [
          "open_survey.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Open%20Survey%20In%20Portal",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Open%20Survey%20In%20Portal/open_survey.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.390Z",
    "updatedAt": "2025-09-21T08:58:59.002Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 416,
    "type": "mail_script",
    "name": "HTML Table Creation from ServiceNow Table",
    "description": "This mail script uses a GlideRecord object to get values from a ServiceNow table and then format that information into an HTML table in a notification. Replace \"exampletable\" with your desired table. Change the style tags to fit your desired results, like background-color, etc.",
    "script": "(function runMailScript(\r\n  /* GlideRecord */ current,\r\n  /* TemplatePrinter */ template,\r\n  /* Optional EmailOutbound */\r\n  email,\r\n  /* Optional GlideRecord */ email_action,\r\n  /* Optional GlideRecord */\r\n  event\r\n) {\r\n  // Add your code here\r\n\r\n  template.print(\"<style>td, th {text-align: left;padding: 8px;}</style>\");\r\n  template.print(\r\n    \"<table style=' font-family: arial, sans-serif;width:90%;margin-left:.5in; border-collapse:collapse;border:none' >\"\r\n  );\r\n  template.print(\"<tr style='background-color: #3DCD58;'>\");\r\n  template.print(\r\n    \"<th style='color: #ffffff'>SKU</th><th style='color: #ffffff'>SKU Description</th><th style='color: #ffffff'>License Serial Number</th>\"\r\n  );\r\n  template.print(\"</tr>\");\r\n\r\n  var gr = new GlideRecord(\"example_table\");\r\n  gr.addQuery(\"example_query\");\r\n  gr.query();\r\n  while (gr.next()) {\r\n    template.print(\"<tr>\");\r\n    template.print(\"<td>\" + gr.model.name + \"</td>\");\r\n    template.print(\"<td>\" + gr.model.short_description + \"</td>\");\r\n    template.print(\"<td>\" + gr.serial_number + \"</td>\");\r\n    template.print(\"</tr>\");\r\n  }\r\n\r\n  template.print(\"</table>\");\r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "and",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/HTML Table Creation from ServiceNow Table",
        "scriptFiles": [
          "MailScript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/HTML%20Table%20Creation%20from%20ServiceNow%20Table",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/HTML%20Table%20Creation%20from%20ServiceNow%20Table/MailScript.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.386Z",
    "updatedAt": "2025-09-21T08:58:58.997Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 415,
    "type": "mail_script",
    "name": "Exclude DateTime details from Comments",
    "description": "//Retrieves the most recent comment (journal entry) from the comments field of the current record. //We can call this notification email script in notifications to get the comments only excluding the name, date/time details. current.comments.getJournalEntry(1)",
    "script": "(function runMailScript(current, template, email, email_action, event) {\r\n\r\n    current.comments.getJournalEntry(1).match(/\\n.*/gm).join('').replace(/^\\s*\\n/gm, \"\"); //getting the comments without the username,date/time\r\n\r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Exclude DateTime details from Comments",
        "scriptFiles": [
          "commentsWithoutDateTime.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Exclude%20DateTime%20details%20from%20Comments",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Exclude%20DateTime%20details%20from%20Comments/commentsWithoutDateTime.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.382Z",
    "updatedAt": "2025-09-21T08:58:58.993Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 414,
    "type": "mail_script",
    "name": "Convert DateTime to Date",
    "description": "Use this mail script to extract the date from GlideDateTime objects and use it in your email notification. example: 2024:10:29 18:18:52 to 2024:10:29 Use case:",
    "script": "(function runMailScript( /* GlideRecord */ current, /* TemplatePrinter */ template,\r\n    /* Optional EmailOutbound */\r\n    email, /* Optional GlideRecord */ email_action,\r\n    /* Optional GlideRecord */\r\n    event) {\r\n\r\n\r\n    // Add your code here\r\n    var date = new GlideDateTime(current.sys_created_on); //datetime object of created date of current record\r\n    var con_date= date.getLocalDate(); // Gets the date from dateime object in user's time zone\r\n    template.print(con_date); //prints the date in email body\r\n\r\n\r\n\r\n\r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Convert DateTime to Date",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Convert%20DateTime%20to%20Date",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Convert%20DateTime%20to%20Date/script.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.378Z",
    "updatedAt": "2025-09-21T08:58:58.989Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 413,
    "type": "mail_script",
    "name": "Configurer Approve Reject Buttons Using Email Scripts",
    "description": "Use Case: Set up Approve and Reject buttons using Email script to Approve/Reject through Email (Use thisv email script on the sysapprovalapprover Table Notifications) 1)Upload below images to DB tables in ServiceNow (System UI Images)and use them in email scripts Approve Button Image :",
    "script": "(function runMailScript(/* GlideRecord */ current, /* TemplatePrinter */ template,\r\n/* Optional EmailOutbound */ email, /* Optional GlideRecord */ email_action,\r\n/* Optional GlideRecord */ event) {\r\n\tvar emailID = gs.getProperty('instance_name')+\"@service-now.com\"; //Get your intance address\r\n\tvar apButStr = '<a href=\"mailto:'+emailID+'?subject=Re:'+current.sysapproval.number+' - approve&body='+ email.watermark +'\"><img src=\"/approve.png\" alt=\"Approve\" width=\"94\" height=\"34\"></a>'; //instructions to load approve image has been provided in the readme.md file\t\r\n\tvar rejButStr = '<a href=\"mailto:'+emailID+'?subject=Re:'+current.sysapproval.number+' - reject&body='+ email.watermark +'\"><img src=\"/reject.png\" alt=\"Reject\" width=\"93\" height=\"33\"></a>'; //instructions to load reject image has been provided in the readme.md file\t\r\n\ttemplate.print(apButStr  +'&nbsp;&nbsp;'+ rejButStr);\r\n\t\r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "Notifications",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Configurer Approve Reject Buttons Using Email Scripts",
        "scriptFiles": [
          "Email Script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Configurer%20Approve%20Reject%20Buttons%20Using%20Email%20Scripts",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Configurer%20Approve%20Reject%20Buttons%20Using%20Email%20Scripts/Email%20Script.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.374Z",
    "updatedAt": "2025-09-21T08:58:58.985Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 412,
    "type": "mail_script",
    "name": "cc all group members",
    "description": "This mail script can be used to CC all members of a group in the current record context. Use case: CC all members of the assignment group for the current record.",
    "script": "(function runMailScript( /* GlideRecord */ current, /* TemplatePrinter */ template,\r\n    /* Optional EmailOutbound */\r\n    email, /* Optional GlideRecord */ email_action,\r\n    /* Optional GlideRecord */\r\n    event) {\r\n\r\n\r\n    // Add your code here\r\n    var grp = new GlideRecord('sys_user_grmember');  //Query to the group member table\r\n    grp.addQuery(\"group\", current.assignment_group);   //add a filter to query based on the current record's assignment group\r\n    grp.query();\r\n    while (grp.next()) {\r\n       email.addAddress('cc', grp.user.email, grp.user.name); //Passing email as name and 2nd and 3rd parameter\r\n    }\r\n\r\n\r\n\r\n\r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "grp.addQuery",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/cc all group members",
        "scriptFiles": [
          "cc all group members.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/cc%20all%20group%20members",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/cc%20all%20group%20members/cc%20all%20group%20members.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.370Z",
    "updatedAt": "2025-09-21T08:58:58.982Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 411,
    "type": "mail_script",
    "name": "Call UI Message or System Property in Notification Mail Script",
    "description": "Here is the syntax to call your UI Message or System property into Notification Mail script.",
    "script": "(function runMailScript(/* GlideRecord */ current, /* TemplatePrinter */ template,\r\n          /* Optional EmailOutbound */ email, /* Optional GlideRecord */ email_action,\r\n          /* Optional GlideRecord */ event) {\r\n   \r\n   //Call UI Message in Mail script\r\n  \r\n    var getUIMessage = gs.getMessage('World works with ServiceNow');\r\n    template.print(getUIMessage);\r\n  \r\n \r\n   //Call System Property in Mail script\r\n  \r\n    var getSysProperty = gs.getProperty('sys_property_name');\r\n    template.print(getSysProperty);\r\n  \r\n  })(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Call UI Message or System Property in Notification Mail Script",
        "scriptFiles": [
          "call_UIMessage_or_sysProperty.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Call%20UI%20Message%20or%20System%20Property%20in%20Notification%20Mail%20Script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Call%20UI%20Message%20or%20System%20Property%20in%20Notification%20Mail%20Script/call_UIMessage_or_sysProperty.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.367Z",
    "updatedAt": "2025-09-21T08:58:58.978Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 410,
    "type": "mail_script",
    "name": "Call Script Include in Notification Mail Script",
    "description": "Here is the syntax to call your Script Include from a Global or Scoped application into Notification Mail script.",
    "script": "(function runMailScript(/* GlideRecord */ current, /* TemplatePrinter */ template,\r\n          /* Optional EmailOutbound */ email, /* Optional GlideRecord */ email_action,\r\n          /* Optional GlideRecord */ event) {\r\n  \r\n   //Call Global Application - Script Include in Mail script\r\n    var getReturnfromGlobalSI = new global.ScriptIncludeName().functionName();\r\n    template.print(getReturnfromGlobalSI);\r\n          \r\n   //Call Scoped Application - Script Include in Mail script\r\n    var getReturnfromScopedSI = new x_scope_name.ScriptIncludeName().functionName();\r\n    template.print(getReturnfromScopedSI);\r\n   \r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "into",
      "table": "Unknown",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Call Script Include in Notification Mail Script",
        "scriptFiles": [
          "call_script_include.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Call%20Script%20Include%20in%20Notification%20Mail%20Script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Call%20Script%20Include%20in%20Notification%20Mail%20Script/call_script_include.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.363Z",
    "updatedAt": "2025-09-21T08:58:58.975Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 409,
    "type": "mail_script",
    "name": "Add HTML Table for Requested Item Variables",
    "description": "Use this snippet to create an HTML file of requested item variables.  Will exclude variables that are not needed (empty/undefined)",
    "script": "// Get Requested Item (this query can be modified depending on where you are calling from)\r\nvar reqitem = new GlideRecord('sc_req_item');\r\nreqitem.addQuery(\"sys_id\", current.request_item);\r\nreqitem.query();\r\n\r\n// Now loop through the items and build the table\r\nwhile(reqitem.next()) {\r\n\t// Get Owned Variables for Requested Item and sort by Order\r\n\tvar ownvar = new GlideRecord('sc_item_option_mtom');\r\n\townvar.addQuery('request_item.number', reqitem.number);\r\n\townvar.addQuery('sc_item_option.value','!=','');\r\n\townvar.orderBy('sc_item_option.order');\r\n\townvar.query();\r\n\t\r\n\ttemplate.print('<table>');\r\n\t\r\n\twhile(ownvar.next()) {\r\n\t\t// Add Question, Answer and Order into notification mail\r\n\t\t// Set variable v to variable name\r\n\t\tvar field = ownvar.sc_item_option.item_option_new;\r\n\t\tvar fieldValue = ownvar.sc_item_option.item_option_new.name;\r\n\t\t// skip if value empty\r\n\t\tif (reqitem.variables[fieldValue].getDisplayValue() == '') continue;\r\n\t\t// skip if value undefined\r\n\t\tif (reqitem.variables[fieldValue] == undefined) continue;\r\n\t\t// Print variable name\r\n\t\ttemplate.print( '<tr>');\r\n\t\ttemplate.print( '<td><strong>' + field.getDisplayValue() + '</td>');\r\n\t\t// Print Display Value for each variable in Requested Item\r\n\t\ttemplate.print( '<td>' + reqitem.variables[fieldValue].getDisplayValue() + '</td>');\r\n\t\ttemplate.print( '</tr>');\r\n\t}\r\n\t\r\n\ttemplate.print('</table>');\r\n}",
    "metadata": {
      "application": "Global",
      "table": "while",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Add HTML Table for Requested Item Variables",
        "scriptFiles": [
          "requested_items_detail.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Add%20HTML%20Table%20for%20Requested%20Item%20Variables",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Add%20HTML%20Table%20for%20Requested%20Item%20Variables/requested_items_detail.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.359Z",
    "updatedAt": "2025-09-21T08:58:58.971Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 408,
    "type": "mail_script",
    "name": "Add Checklist",
    "description": "Add Checklist If a checklist exists for the task, add it to the email notification.",
    "script": "(function runMailScript(current, template, email, email_action, event) {\r\n\r\n    var grTable = current.getValue('sys_class_name');\r\n    var grSysId = current.getValue('sys_id');\r\n    var grChecklist = new GlideRecord(\"checklist\");\r\n    grChecklist.addQuery(\"table\", grTable);\r\n    grChecklist.addQuery(\"document\", grSysId);\r\n    grChecklist.query();\r\n    if (grChecklist.next()) {\r\n        var grChecklistItem = new GlideRecord(\"checklist_item\");\r\n        grChecklistItem.addQuery(\"checklist\", grChecklist.getValue(\"sys_id\"));\r\n        grChecklistItem.orderBy(\"order\");\r\n        grChecklistItem.query();\r\n        if (grChecklistItem.hasNext()) {\r\n            template.print(\"<strong>Checklist:</strong>\");\r\n            while (grChecklistItem.next()) {\r\n                var checked = \"\";\r\n                if (grChecklistItem.getValue(\"complete\") == \"1\") {\r\n                    checked = \"checked\";\r\n                }\r\n                template.print(\"<br/>\");\r\n                template.print(gs.getMessage(\"<input type='checkbox' {0} disabled />\", [checked]));\r\n                template.print(\"&nbsp;\");\r\n                template.print(grChecklistItem.getValue(\"name\"));\r\n            }\r\n        }\r\n    }\r\n\r\n})(current, template, email, email_action, event);",
    "metadata": {
      "application": "Global",
      "table": "current.getValue",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Add Checklist",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Add%20Checklist",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Add%20Checklist/script.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.356Z",
    "updatedAt": "2025-09-21T08:58:58.967Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 407,
    "type": "mail_script",
    "name": "Add a link which opens ticket in Service Portal",
    "description": "Use this script to add a link in email notification which opens the ticket in Service Portal",
    "script": "var url = '<a href=\"' + gs.getProperty('glide.servlet.uri') + 'sp?id=ticket&table=' + current.sys_class_name + '&sys_id=' + current.sys_id + '\">Ticket Link</a>';  //Replace sp with your portal.\r\n  template.print(url);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Mail Scripts/Add a link which opens ticket in Service Portal",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Mail%20Scripts/Add%20a%20link%20which%20opens%20ticket%20in%20Service%20Portal",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Mail%20Scripts/Add%20a%20link%20which%20opens%20ticket%20in%20Service%20Portal/script.js"
      }
    },
    "createdAt": "2025-09-21T07:49:59.352Z",
    "updatedAt": "2025-09-21T08:58:58.963Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 406,
    "type": "service_portal_widget",
    "name": "Upload Files",
    "description": "Service Portal Widget - \"Add attachments\" form This widget is using the 'Attachment API - POST /now/attachment/file' to upload multiple files on form submit. The result will appear in the console or check directly the record.",
    "script": "// CSS from style.css\n#removeicon:hover{\r\n    cursor:pointer;\r\n    cursor:hand;\r\n  }\n\n---\n\n// CLIENT from client.js\nfunction($scope, $http) {\r\n\tvar c = this;\r\n\t// CODE FOR sn-record-picker\r\n\t$scope.tableName = {\r\n\t\tname: 'tableName'\r\n\t};\t\t\r\n\t$scope.$on(\"field.change\", function(evt, parms) {\r\n\t\tif (parms.field.name == 'tableName'){\r\n\t\t\tc.data.table = parms.newValue.toString();\r\n\t\t\tc.server.update();\r\n\t\t}\r\n\t});\r\n\r\n\t// CODE FOR input\trecord\r\n\t$scope.getID = function(rec) {\r\n\t\tc.data.record = rec.toString();\r\n\t\tc.server.update();\r\n\t}\t\r\n\r\n\t// CODE FOR fileupload\t\r\n\t$scope.files = [];\t\r\n\t$scope.setFiles = function(element) {\r\n\t\t$scope.$apply(function() {\r\n\t\t\tconsole.log('files:', element.files);\r\n\t\t\t// Turn the FileList object into an Array\r\n\t\t\tfor (var i = 0; i < element.files.length; i++) {\r\n\t\t\t\t$scope.files.push(element.files[i]);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t$scope.removeFiles = function(fname) {\r\n\t\tvar index = $scope.files.indexOf(fname);\r\n\t\tif(index>-1)\r\n\t\t\t$scope.files.splice(index,1);\r\n\t};\t\r\n\r\n\t$scope.uploadFiles = function() {\t\r\n\t\t$scope.fd = new FormData();\r\n\t\t$scope.files.forEach(function(file){\r\n\t\t\t$scope.fd.set('files', file);\r\n\t\t\tvar request = {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\turl: '/api/now/attachment/file?table_name='+c.data.table+'&table_sys_id='+c.data.rec_sysid+'&file_name='+file.name,\r\n\t\t\t\tdata: $scope.fd.get('files'),\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': file.type,\r\n\t\t\t\t\t'Accept':'application/json'\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t//console.log('HTTP request:',request);\r\n\r\n\t\t\t// SEND THE FILES.\r\n\t\t\t$http(request).then(function successCallback(response) {\r\n\t\t\t\t// this callback will be called asynchronously\r\n\t\t\t\t// when the response is available\r\n\t\t\t\tconsole.log(\"File was uploaded successfully!\")\r\n\t\t\t}, function errorCallback(response) {\r\n\t\t\t\t// called asynchronously if an error occurs\r\n\t\t\t\t// or server returns response with an error status.\r\n\t\t\t\tconsole.log(\"Uploaded failed!\")\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t}\r\n\r\n}\n\n---\n\n// SERVER from server.js\n(function() {\r\n\tdata.response = '';\r\n\tif(input.record){\r\n\t\tvar gr = new GlideRecord(input.table);\r\n\t\tgr.addQuery('number',input.record);\r\n\t\tgr.query();\r\n\t\tif(gr.next()){\r\n\t\t\tdata.rec_sysid = gr.sys_id.toString();\r\n\t\t\tdata.response = 'success';\r\n\t\t}\r\n\t}\r\n\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "Upload Files",
      "id": "upload-files",
      "active": true,
      "css": "#removeicon:hover{\r\n    cursor:pointer;\r\n    cursor:hand;\r\n  }",
      "client_script": "function($scope, $http) {\r\n\tvar c = this;\r\n\t// CODE FOR sn-record-picker\r\n\t$scope.tableName = {\r\n\t\tname: 'tableName'\r\n\t};\t\t\r\n\t$scope.$on(\"field.change\", function(evt, parms) {\r\n\t\tif (parms.field.name == 'tableName'){\r\n\t\t\tc.data.table = parms.newValue.toString();\r\n\t\t\tc.server.update();\r\n\t\t}\r\n\t});\r\n\r\n\t// CODE FOR input\trecord\r\n\t$scope.getID = function(rec) {\r\n\t\tc.data.record = rec.toString();\r\n\t\tc.server.update();\r\n\t}\t\r\n\r\n\t// CODE FOR fileupload\t\r\n\t$scope.files = [];\t\r\n\t$scope.setFiles = function(element) {\r\n\t\t$scope.$apply(function() {\r\n\t\t\tconsole.log('files:', element.files);\r\n\t\t\t// Turn the FileList object into an Array\r\n\t\t\tfor (var i = 0; i < element.files.length; i++) {\r\n\t\t\t\t$scope.files.push(element.files[i]);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t$scope.removeFiles = function(fname) {\r\n\t\tvar index = $scope.files.indexOf(fname);\r\n\t\tif(index>-1)\r\n\t\t\t$scope.files.splice(index,1);\r\n\t};\t\r\n\r\n\t$scope.uploadFiles = function() {\t\r\n\t\t$scope.fd = new FormData();\r\n\t\t$scope.files.forEach(function(file){\r\n\t\t\t$scope.fd.set('files', file);\r\n\t\t\tvar request = {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\turl: '/api/now/attachment/file?table_name='+c.data.table+'&table_sys_id='+c.data.rec_sysid+'&file_name='+file.name,\r\n\t\t\t\tdata: $scope.fd.get('files'),\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': file.type,\r\n\t\t\t\t\t'Accept':'application/json'\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t//console.log('HTTP request:',request);\r\n\r\n\t\t\t// SEND THE FILES.\r\n\t\t\t$http(request).then(function successCallback(response) {\r\n\t\t\t\t// this callback will be called asynchronously\r\n\t\t\t\t// when the response is available\r\n\t\t\t\tconsole.log(\"File was uploaded successfully!\")\r\n\t\t\t}, function errorCallback(response) {\r\n\t\t\t\t// called asynchronously if an error occurs\r\n\t\t\t\t// or server returns response with an error status.\r\n\t\t\t\tconsole.log(\"Uploaded failed!\")\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t}\r\n\r\n}",
      "server_script": "(function() {\r\n\tdata.response = '';\r\n\tif(input.record){\r\n\t\tvar gr = new GlideRecord(input.table);\r\n\t\tgr.addQuery('number',input.record);\r\n\t\tgr.query();\r\n\t\tif(gr.next()){\r\n\t\t\tdata.rec_sysid = gr.sys_id.toString();\r\n\t\t\tdata.response = 'success';\r\n\t\t}\r\n\t}\r\n\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Upload Files",
        "scriptFiles": [
          "style.css",
          "client.js",
          "server.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Upload%20Files"
      }
    },
    "createdAt": "2025-09-21T07:29:48.990Z",
    "updatedAt": "2025-09-21T08:58:58.959Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 405,
    "type": "service_portal_widget",
    "name": "Tab Panel Widget",
    "description": "Tab Panel Widget This widget can be used to show tab wise content. Tab 1",
    "script": "// HTML from HTML Template.html\n<div>\r\n  <ul class=\"nav nav-tabs\">\r\n    <li class=\"active\">\r\n      <a  href=\"#1\" data-toggle=\"tab\">{{::c.options.tab_heading_1}}</a>\r\n    </li>\r\n    <li><a href=\"#2\" data-toggle=\"tab\">{{::c.options.tab_heading_2}}</a>\r\n    </li>\r\n    <li><a href=\"#3\" data-toggle=\"tab\">{{::c.options.tab_heading_3}}</a>\r\n    </li>\r\n  </ul>\r\n\r\n  <div class=\"tab-content\">\r\n    <div class=\"tab-pane active\" id=\"1\">\r\n      <h3>{{::c.options.tab_content_1}}</h3>\r\n    </div>\r\n    <div class=\"tab-pane\" id=\"2\">\r\n      <h3>{{::c.options.tab_content_2}}</h3>\r\n    </div>\r\n    <div class=\"tab-pane\" id=\"3\">\r\n      <h3>{{::c.options.tab_content_3}}</h3>\r\n    </div>\r\n  </div>\r\n</div>\n\n---\n\n// CSS from CSS-SCSS.scss\n.tab-content{\r\n    background-color: #f0f0f0;\r\n    padding: 10px;\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Tab Panel Widget",
      "id": "tab-panel-widget",
      "active": true,
      "html_template": "<div>\r\n  <ul class=\"nav nav-tabs\">\r\n    <li class=\"active\">\r\n      <a  href=\"#1\" data-toggle=\"tab\">{{::c.options.tab_heading_1}}</a>\r\n    </li>\r\n    <li><a href=\"#2\" data-toggle=\"tab\">{{::c.options.tab_heading_2}}</a>\r\n    </li>\r\n    <li><a href=\"#3\" data-toggle=\"tab\">{{::c.options.tab_heading_3}}</a>\r\n    </li>\r\n  </ul>\r\n\r\n  <div class=\"tab-content\">\r\n    <div class=\"tab-pane active\" id=\"1\">\r\n      <h3>{{::c.options.tab_content_1}}</h3>\r\n    </div>\r\n    <div class=\"tab-pane\" id=\"2\">\r\n      <h3>{{::c.options.tab_content_2}}</h3>\r\n    </div>\r\n    <div class=\"tab-pane\" id=\"3\">\r\n      <h3>{{::c.options.tab_content_3}}</h3>\r\n    </div>\r\n  </div>\r\n</div>",
      "css": ".tab-content{\r\n    background-color: #f0f0f0;\r\n    padding: 10px;\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Tab Panel Widget",
        "scriptFiles": [
          "HTML Template.html",
          "CSS-SCSS.scss"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Tab%20Panel%20Widget"
      }
    },
    "createdAt": "2025-09-21T07:29:48.986Z",
    "updatedAt": "2025-09-21T08:58:58.955Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 404,
    "type": "service_portal_widget",
    "name": "Spiderman Animation",
    "description": "To use this widget, follow the below steps: 1. Create a new widget and copy the html, style and client script in the widget. 2. Upload the 2 images- Green goblin image and Spiderman Image, in the image table. Also, upload the audio in audio table.Use the same name given in the tables in the widget",
    "script": "// CSS from style.css\n.row {\r\n  display: flex;\r\n}\r\n\r\n/*animation for spiderman*/\r\n.web {\r\n  position: absolute;\r\n  top: -260px;\r\n  animation: webout 9s;\r\n  right: 0;\r\n}\r\n\r\n@-webkit-keyframes webout {\r\n  0% {\r\n    top: -260px;\r\n    animation-play-state: paused\r\n  }\r\n\r\n  100% {\r\n    top: -10px\r\n  }\r\n}\r\n\r\n.card-overlay {\r\n  background: black;\r\n  margin-left: -1px;\r\n  width: 100%;\r\n  /* Adjust width accordingly */\r\n  margin-top: -10px;\r\n  position: relative;\r\n}\r\n\r\n.goblin {\r\n\r\n  margin-left: 100px;\r\n  -webkit-filter: brightness(10);\r\n  filter: brightness(10);\r\n\r\n}\r\n\r\n/* animation for green goblin*/\r\n.flashit {\r\n  -webkit-animation: flash ease 8s infinite;\r\n  animation: flash ease 8s infinite;\r\n}\r\n\r\n@-webkit-keyframes flash {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n\r\n  92% {\r\n    opacity: 0;\r\n  }\r\n\r\n  93% {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  94% {\r\n    opacity: 0.2;\r\n  }\r\n\r\n  96% {\r\n    opacity: 0.9;\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n@keyframes flash {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n\r\n  92% {\r\n    opacity: 0;\r\n  }\r\n\r\n  93% {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  94% {\r\n    opacity: 0.2;\r\n  }\r\n\r\n  96% {\r\n    opacity: 1;\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n  }\r\n}\n\n---\n\n// CLIENT from client_script.js\napi.controller=function() {\r\n\t/* widget controller */\r\n\tvar c = this;\r\n\t  var sound=new Audio('spider.mp3');\r\n\t  sound.play();\r\n\t  setTimeout( function() {\r\n\t\t  var ele = document.querySelector('.spidey')\r\n\t\t  ele.style.animationPlayState = 'paused'\r\n\t  }, 8500);\r\n  };",
    "metadata": {
      "application": "Global",
      "name": "Spiderman Animation",
      "id": "spiderman-animation",
      "active": true,
      "css": ".row {\r\n  display: flex;\r\n}\r\n\r\n/*animation for spiderman*/\r\n.web {\r\n  position: absolute;\r\n  top: -260px;\r\n  animation: webout 9s;\r\n  right: 0;\r\n}\r\n\r\n@-webkit-keyframes webout {\r\n  0% {\r\n    top: -260px;\r\n    animation-play-state: paused\r\n  }\r\n\r\n  100% {\r\n    top: -10px\r\n  }\r\n}\r\n\r\n.card-overlay {\r\n  background: black;\r\n  margin-left: -1px;\r\n  width: 100%;\r\n  /* Adjust width accordingly */\r\n  margin-top: -10px;\r\n  position: relative;\r\n}\r\n\r\n.goblin {\r\n\r\n  margin-left: 100px;\r\n  -webkit-filter: brightness(10);\r\n  filter: brightness(10);\r\n\r\n}\r\n\r\n/* animation for green goblin*/\r\n.flashit {\r\n  -webkit-animation: flash ease 8s infinite;\r\n  animation: flash ease 8s infinite;\r\n}\r\n\r\n@-webkit-keyframes flash {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n\r\n  92% {\r\n    opacity: 0;\r\n  }\r\n\r\n  93% {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  94% {\r\n    opacity: 0.2;\r\n  }\r\n\r\n  96% {\r\n    opacity: 0.9;\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n@keyframes flash {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n\r\n  92% {\r\n    opacity: 0;\r\n  }\r\n\r\n  93% {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  94% {\r\n    opacity: 0.2;\r\n  }\r\n\r\n  96% {\r\n    opacity: 1;\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n  }\r\n}",
      "client_script": "api.controller=function() {\r\n\t/* widget controller */\r\n\tvar c = this;\r\n\t  var sound=new Audio('spider.mp3');\r\n\t  sound.play();\r\n\t  setTimeout( function() {\r\n\t\t  var ele = document.querySelector('.spidey')\r\n\t\t  ele.style.animationPlayState = 'paused'\r\n\t  }, 8500);\r\n  };",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Spiderman Animation",
        "scriptFiles": [
          "style.css",
          "client_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Spiderman%20Animation"
      }
    },
    "createdAt": "2025-09-21T07:29:48.981Z",
    "updatedAt": "2025-09-21T08:58:58.950Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 403,
    "type": "service_portal_widget",
    "name": "Set Variables By Url",
    "description": "Use case Sometimes you want to share a link to a catalog item on the portal and you want to pre-set some variables.  Like when you make documentation and you want to pre-categorize a ticket with information but you dont show all that. So you build your link https://{{instance}}/sp?id=sccatitem&sysid={{itemSysID}}&description=I'cant%20access%20ServiceNow",
    "script": "// CLIENT from client.js\nfunction($scope, $window) {\r\n    // This is the controller, we've included\r\n    // $scope in the function above because\r\n    // it's easy to work with\r\n    var c = this;\r\n    // We are going to simplify accessing \r\n    // g_form within the client script by\r\n    // setting it as a variable named g_form\r\n    var g_form = $scope.page.g_form;\r\n    //We are going to simplify accessing\r\n    // g_form within the HTML by setting\r\n    // it as a $scope attribute\r\n    $scope.g_form = $scope.page.g_form;\r\n    // from here you can just iterate over\r\n    // the url params;\r\n    var params = $window.location.href.split('?')[1];\r\n    console.log(params);\r\n    var paramsToString = params.toString();\r\n    var paramsArr = paramsToString.split('&');\r\n    paramsArr.map(function (keyValue) {\r\n        var key = keyValue.split('=')[0];\r\n        var value = keyValue.split(key + '=').join('');\r\n        value = decodeURIComponent(value);\r\n        try {\r\n            var message = 'Setting ' + key + ' to ';\r\n            message += value + ' from url parameter.';\r\n            //console.log(message);\r\n            $scope.g_form.setValue(key, value);\r\n        } catch (error) {\r\n            console.log('Error setting field', error);\r\n        }\r\n    });\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Set Variables By Url",
      "id": "set-variables-by-url",
      "active": true,
      "client_script": "function($scope, $window) {\r\n    // This is the controller, we've included\r\n    // $scope in the function above because\r\n    // it's easy to work with\r\n    var c = this;\r\n    // We are going to simplify accessing \r\n    // g_form within the client script by\r\n    // setting it as a variable named g_form\r\n    var g_form = $scope.page.g_form;\r\n    //We are going to simplify accessing\r\n    // g_form within the HTML by setting\r\n    // it as a $scope attribute\r\n    $scope.g_form = $scope.page.g_form;\r\n    // from here you can just iterate over\r\n    // the url params;\r\n    var params = $window.location.href.split('?')[1];\r\n    console.log(params);\r\n    var paramsToString = params.toString();\r\n    var paramsArr = paramsToString.split('&');\r\n    paramsArr.map(function (keyValue) {\r\n        var key = keyValue.split('=')[0];\r\n        var value = keyValue.split(key + '=').join('');\r\n        value = decodeURIComponent(value);\r\n        try {\r\n            var message = 'Setting ' + key + ' to ';\r\n            message += value + ' from url parameter.';\r\n            //console.log(message);\r\n            $scope.g_form.setValue(key, value);\r\n        } catch (error) {\r\n            console.log('Error setting field', error);\r\n        }\r\n    });\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Set Variables By Url",
        "scriptFiles": [
          "client.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Set%20Variables%20By%20Url",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/Set%20Variables%20By%20Url/client.js"
      }
    },
    "createdAt": "2025-09-21T07:29:48.977Z",
    "updatedAt": "2025-09-21T08:58:58.947Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 402,
    "type": "service_portal_widget",
    "name": "Record process flow",
    "description": "Creating Process flow in service portal Introduction In this snippet you will create a custom process flow with a custom page and populated with standard widgets.",
    "script": "// CSS from style.css\n.btn-circle {\r\n    width: 40px;\r\n    height: 40px;\r\n    text-align: center;\r\n    padding: 6% 0;\r\n    font-size: 6px;\r\n    line-height: 0.6;\r\n    border-radius: 100%;\r\n  }\r\n  \r\n  .process-row {\r\n      display: table-row;\r\n  }\r\n  \r\n  .process {\r\n      display: table;     \r\n      width: 100%;\r\n      position: relative;\r\n  }\r\n  \r\n  .process-step button[disabled] {\r\n      opacity: 1 !important;\r\n      filter: alpha(opacity=100) !important;\r\n  }\r\n  \r\n  .process-row:before {\r\n      top: 20px;\r\n      bottom: 0;\r\n      position: absolute;\r\n      content: \" \";\r\n      width: 100%;\r\n      height: 1px;\r\n      background-color: #ccc;\r\n      z-order: 0;\r\n      \r\n  }\r\n  \r\n  .process-step {    \r\n      display: table-cell;\r\n      text-align: center;\r\n      position: relative;\r\n      padding-left: 0%;\r\n      padding-right: 5%;\r\n  }\r\n  \r\n  .process-step p {\r\n      margin-top:10px;\r\n      \r\n  }\r\n  \r\n  .btn-circle.active {\r\n      border: 2px solid #cc0;\r\n  }\n\n---\n\n// SERVER from server.js\n(function() {\r\n    /* populate the 'data' object */\r\n    /* e.g., data.table = $sp.getValue('table'); */\r\n  \r\n      data.table  = $sp.getParameter(\"table\");\r\n      data.sys_id = $sp.getParameter(\"sys_id\");\r\n  \r\n      var gr = new GlideRecord(data.table);\r\n    gr.get(data.sys_id);\r\n    \r\n      var spUtils = new PortalUtils();\r\n    spUtils.getProcessFlows(data,data.table,(data.sys_id == -1),gr);",
    "metadata": {
      "application": "Global",
      "name": "Record process flow",
      "id": "record-process-flow",
      "active": true,
      "css": ".btn-circle {\r\n    width: 40px;\r\n    height: 40px;\r\n    text-align: center;\r\n    padding: 6% 0;\r\n    font-size: 6px;\r\n    line-height: 0.6;\r\n    border-radius: 100%;\r\n  }\r\n  \r\n  .process-row {\r\n      display: table-row;\r\n  }\r\n  \r\n  .process {\r\n      display: table;     \r\n      width: 100%;\r\n      position: relative;\r\n  }\r\n  \r\n  .process-step button[disabled] {\r\n      opacity: 1 !important;\r\n      filter: alpha(opacity=100) !important;\r\n  }\r\n  \r\n  .process-row:before {\r\n      top: 20px;\r\n      bottom: 0;\r\n      position: absolute;\r\n      content: \" \";\r\n      width: 100%;\r\n      height: 1px;\r\n      background-color: #ccc;\r\n      z-order: 0;\r\n      \r\n  }\r\n  \r\n  .process-step {    \r\n      display: table-cell;\r\n      text-align: center;\r\n      position: relative;\r\n      padding-left: 0%;\r\n      padding-right: 5%;\r\n  }\r\n  \r\n  .process-step p {\r\n      margin-top:10px;\r\n      \r\n  }\r\n  \r\n  .btn-circle.active {\r\n      border: 2px solid #cc0;\r\n  }",
      "server_script": "(function() {\r\n    /* populate the 'data' object */\r\n    /* e.g., data.table = $sp.getValue('table'); */\r\n  \r\n      data.table  = $sp.getParameter(\"table\");\r\n      data.sys_id = $sp.getParameter(\"sys_id\");\r\n  \r\n      var gr = new GlideRecord(data.table);\r\n    gr.get(data.sys_id);\r\n    \r\n      var spUtils = new PortalUtils();\r\n    spUtils.getProcessFlows(data,data.table,(data.sys_id == -1),gr);",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Record process flow",
        "scriptFiles": [
          "style.css",
          "server.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Record%20process%20flow"
      }
    },
    "createdAt": "2025-09-21T07:29:48.972Z",
    "updatedAt": "2025-09-21T08:58:58.943Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 401,
    "type": "service_portal_widget",
    "name": "Pagination widget with next and previous button",
    "description": "This widget displays a paginated table of incident records using Next and Previous buttons to navigate between pages. The widget is built with AngularJS and integrates with ServiceNow GlideRecordSecure to fetch active and In progress incident records. Features: Displays Incident Records: The widget retrieves and displays active and In progress incident records from the ServiceNow incident table...",
    "script": "// CSS from CSS.css\n.pageNum {\r\n  font-size: 16px;\r\n}\r\n.btngroupStyle {\r\n  margin-top: -0px;\r\n}\r\ntable {\r\n  width: 100%;\r\n  word-wrap: break-word;\r\n  table-layout: fixed;\r\n  border-collapse: separate;\r\n  border-spacing: 0;\r\n}\r\n\r\n.th {\r\n  font-size: 16px;\r\n  font-weight: 550;\r\n}\n\n---\n\n// SERVER from server_script.js\n(function () {\r\n  /* populate the 'data' object */\r\n  /* e.g., data.table = $sp.getValue('table'); */\r\n  /*PAGINATION*/\r\n  try {\r\n    data.tableRecord = [];\r\n    var getIncRec = new GlideRecordSecure(\"incident\");\r\n    getIncRec.addEncodedQuery(\"active=true^state=2\");\r\n    getIncRec.query();\r\n    while (getIncRec.next()) {\r\n      var obj = {};\r\n      obj.number = getIncRec.getDisplayValue(\"number\");\r\n      obj.short_description = getIncRec.getDisplayValue(\"short_description\");\r\n      obj.priority = getIncRec.getDisplayValue(\"priority\");\r\n      obj.state = getIncRec.getDisplayValue(\"state\");\r\n      obj.assignment_group = getIncRec.getDisplayValue(\"assignment_group\");\r\n      obj.assigned_to = getIncRec.getDisplayValue(\"assigned_to\");\r\n      obj.priority = getIncRec.getDisplayValue(\"priority\");\r\n      obj.link =\r\n        \"sp?id=form&table=incident&sys_id=\" + getIncRec.getUniqueValue();\r\n      data.tableRecord.push(obj);\r\n    }\r\n  } catch (e) {\r\n    gs.addErrorMessage(\"Error Catched\" + e);\r\n  }\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "Pagination widget with next and previous button",
      "id": "pagination-widget-with-next-and-previous-button",
      "active": true,
      "css": ".pageNum {\r\n  font-size: 16px;\r\n}\r\n.btngroupStyle {\r\n  margin-top: -0px;\r\n}\r\ntable {\r\n  width: 100%;\r\n  word-wrap: break-word;\r\n  table-layout: fixed;\r\n  border-collapse: separate;\r\n  border-spacing: 0;\r\n}\r\n\r\n.th {\r\n  font-size: 16px;\r\n  font-weight: 550;\r\n}",
      "server_script": "(function () {\r\n  /* populate the 'data' object */\r\n  /* e.g., data.table = $sp.getValue('table'); */\r\n  /*PAGINATION*/\r\n  try {\r\n    data.tableRecord = [];\r\n    var getIncRec = new GlideRecordSecure(\"incident\");\r\n    getIncRec.addEncodedQuery(\"active=true^state=2\");\r\n    getIncRec.query();\r\n    while (getIncRec.next()) {\r\n      var obj = {};\r\n      obj.number = getIncRec.getDisplayValue(\"number\");\r\n      obj.short_description = getIncRec.getDisplayValue(\"short_description\");\r\n      obj.priority = getIncRec.getDisplayValue(\"priority\");\r\n      obj.state = getIncRec.getDisplayValue(\"state\");\r\n      obj.assignment_group = getIncRec.getDisplayValue(\"assignment_group\");\r\n      obj.assigned_to = getIncRec.getDisplayValue(\"assigned_to\");\r\n      obj.priority = getIncRec.getDisplayValue(\"priority\");\r\n      obj.link =\r\n        \"sp?id=form&table=incident&sys_id=\" + getIncRec.getUniqueValue();\r\n      data.tableRecord.push(obj);\r\n    }\r\n  } catch (e) {\r\n    gs.addErrorMessage(\"Error Catched\" + e);\r\n  }\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Pagination widget with next and previous button",
        "scriptFiles": [
          "CSS.css",
          "server_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Pagination%20widget%20with%20next%20and%20previous%20button"
      }
    },
    "createdAt": "2025-09-21T07:29:48.968Z",
    "updatedAt": "2025-09-21T08:58:58.939Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 400,
    "type": "service_portal_widget",
    "name": "Open in Platform",
    "description": "Widget will create a button that will only be visable to users with the itil role that will take them to the same record in platform. will work with the form and standard ticket pages (or anywhere with the table and sysId in the url. see also https://developer.servicenow.com/connect.do!/share/contents/6592535openinplatformwidget?t=PRODUCTDETAILS",
    "script": "// SERVER from server.js\n(function() {\r\n\tdata.table = input.table || $sp.getParameter(\"table\");\r\n\tdata.sys_id = input.sys_id || $sp.getParameter(\"sys_id\");\r\n\t\r\n\tdata.url = \"/nav_to.do?uri=\"+data.table+\".do?sys_id=\"+data.sys_id;\r\n\t\r\n\tdata.role = false;\r\n\tif (gs.hasRole(\"itil\")){\r\n\t\tdata.role = true;\r\n\t}\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "Open in Platform",
      "id": "open-in-platform",
      "active": true,
      "server_script": "(function() {\r\n\tdata.table = input.table || $sp.getParameter(\"table\");\r\n\tdata.sys_id = input.sys_id || $sp.getParameter(\"sys_id\");\r\n\t\r\n\tdata.url = \"/nav_to.do?uri=\"+data.table+\".do?sys_id=\"+data.sys_id;\r\n\t\r\n\tdata.role = false;\r\n\tif (gs.hasRole(\"itil\")){\r\n\t\tdata.role = true;\r\n\t}\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Open in Platform",
        "scriptFiles": [
          "server.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Open%20in%20Platform",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/Open%20in%20Platform/server.js"
      }
    },
    "createdAt": "2025-09-21T07:29:48.964Z",
    "updatedAt": "2025-09-21T08:58:58.935Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 399,
    "type": "service_portal_widget",
    "name": "Mouse Effect",
    "description": "Cursor Light Ball Widget This ServiceNow Service Portal widget creates a light blue, glowing \"light ball\" that follows the cursor with a smooth trailing effect. The light ball is offset slightly from the cursor and has a soft glow, giving a visually appealing effect on the page. Widget Components",
    "script": "// CSS from style.css\n/* Light Ball Styling */\r\n.light-ball {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 60px;\r\n    height: 60px;\r\n    background-color: rgba(173, 216, 230, 0.8); /* Light blue with slight transparency */\r\n    border-radius: 50%;\r\n    filter: blur(25px); /* Creates a fuzzy glow effect */\r\n    pointer-events: none; /* Ensures it doesn't interfere with clicking */\r\n    transition: transform 0.5s ease; /* 500ms latency effect */\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Mouse Effect",
      "id": "mouse-effect",
      "active": true,
      "css": "/* Light Ball Styling */\r\n.light-ball {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 60px;\r\n    height: 60px;\r\n    background-color: rgba(173, 216, 230, 0.8); /* Light blue with slight transparency */\r\n    border-radius: 50%;\r\n    filter: blur(25px); /* Creates a fuzzy glow effect */\r\n    pointer-events: none; /* Ensures it doesn't interfere with clicking */\r\n    transition: transform 0.5s ease; /* 500ms latency effect */\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Mouse Effect",
        "scriptFiles": [
          "style.css"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Mouse%20Effect",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/Mouse%20Effect/style.css"
      }
    },
    "createdAt": "2025-09-21T07:29:48.960Z",
    "updatedAt": "2025-09-21T08:58:58.932Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 398,
    "type": "service_portal_widget",
    "name": "Location hierarchy",
    "description": "This widget allows you to hierarchically choose a location for the catalog item variable. With small additional setup you can adjust it to your own structure. You also need a variable (preferably multi line text) to save the output of this widget.",
    "script": "// HTML from html.html\n<h3>\r\n  Describe the new location\r\n</h3>\r\n<div class=\"form-group\">\r\n\t<div class=\"btn-group\" uib-dropdown>\r\n\t\t<button id=\"cityRef\" type=\"button\" class=\"btn btn-info\" uib-dropdown-toggle>\r\n\t\t\t{{locations.city.name}}&nbsp;<span class=\"caret\"></span>\r\n\t\t</button>\r\n\t\t<ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"cityRef\">\r\n\t\t\t<li ng-repeat=\"city in c.locations.available.city\" role=\"menuitem\" ng-click=\"c.changeCity(city.sys_id)\"><a href=\"#\">{{city.name}}</a></li>\r\n\t\t\t<li class=\"divider\"></li>\r\n\t\t\t<li role=\"menuitem\" ng-click=\"c.notListedModal('city')\"><a href=\"#\">City not listed</a></li>\r\n\t\t</ul>\r\n  </div>\r\n\t<div class=\"btn-group\" uib-dropdown>\r\n\t\t<button id=\"buildingRef\" type=\"button\" class=\"btn btn-info\" uib-dropdown-toggle ng-disabled=\"locations.city.sys_id === '-1'\">\r\n\t\t\t{{locations['building/structure'].name}}&nbsp;<span class=\"caret\"></span>\r\n\t\t</button>\r\n\t\t<ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"buildingRef\">\r\n      <li ng-repeat=\"building in c.locations.available['building/structure']\" role=\"menuitem\" ng-click=\"c.changeBuilding(building.sys_id)\"><a href=\"#\">{{building.name}}</a></li>\r\n\t\t\t<li class=\"divider\"></li>\r\n\t\t\t<li role=\"menuitem\" ng-click=\"c.notListedModal('building/structure')\"><a href=\"#\">Building not listed</a></li>\r\n\t\t</ul>\r\n  </div>\r\n \t<div class=\"btn-group\" uib-dropdown>\r\n\t\t<button id=\"floorRef\" type=\"button\" class=\"btn btn-info\" uib-dropdown-toggle ng-disabled=\"locations['building/structure'].sys_id === '-1'\">\r\n\t\t\t{{locations.floor.name}}&nbsp;<span class=\"caret\"></span>\r\n\t\t</button>\r\n\t\t<ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"floorRef\">\r\n      <li ng-repeat=\"floor in c.locations.available.floor\" role=\"menuitem\" ng-click=\"c.changeFloor(floor.sys_id)\"><a href=\"#\">{{floor.name}}</a></li>\r\n\t\t\t<li class=\"divider\"></li>\r\n\t\t\t<li role=\"menuitem\" ng-click=\"c.notListedModal('floor')\"><a href=\"#\">Floor not listed</a></li>\r\n\t\t</ul>\r\n  </div>\r\n\t<div class=\"btn-group\" uib-dropdown>\r\n\t\t<button id=\"zoneRef\" type=\"button\" class=\"btn btn-info\" uib-dropdown-toggle ng-disabled=\"locations.floor.sys_id === '-1'\">\r\n\t\t\t{{locations.zone.name}}&nbsp;<span class=\"caret\"></span>\r\n\t\t</button>\r\n\t\t<ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"zoneRef\">\r\n      <li ng-repeat=\"zone in c.locations.available.zone\" role=\"menuitem\" ng-click=\"c.changeZone(zone.sys_id)\"><a href=\"#\">{{zone.name}}</a></li>\r\n\t\t\t<li class=\"divider\"></li>\r\n\t\t\t<li role=\"menuitem\" ng-click=\"c.notListedModal('zone')\"><a href=\"#\">Corridor not listed</a></li>\r\n\t\t</ul>\r\n  </div>\r\n  <input id=\"roomRef\" class=\"location-picker-input\" type=\"text\" placeholder=\"Room name\" ng-disabled=\"!c.allSelected()\" ng-model=\"locations.room\" ng-blur=\"c.changeRoom()\"/>\r\n  <button type=\"button\" class=\"btn btn-success\" ng-click=\"c.addNewLocation()\" ng-disabled=\"locations.room === ''\">Add to the list</button>\r\n</div>\n\n---\n\n// CSS from css.css\n.location-picker-input {\r\n  padding: 6px 12px;\r\n  color: #555555;\r\n  border: 1px solid #939393;\r\n  border-radius: 4px;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n  -webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\r\n  -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\r\n  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\r\n}\n\n---\n\n// CLIENT from client controller.js\napi.controller=function($scope, spModal) {\r\n  \tvar c = this;\r\n\tc.newLocations = [];\r\n\t\r\n\tc.server.get({\r\n\t\taction: 'getChildren',\r\n\t\ttype: 'city',\r\n\t\tparent: null\r\n\t}).then((res) => {\r\n\t\tc.locations = res.data.locations;\r\n\t\t$scope.locations = res.data.locations.selected;\r\n\t\t$scope.locations.room = '';\r\n\t});\r\n\t\r\n\tc.changeCity = (newSysId) => {\r\n\t\t$scope.locations.city = c.locations.available.city.filter((city) => city.sys_id === newSysId)[0];\r\n\t\t$scope.locations['building/structure'] = c.locations.default['building/structure'];\r\n\t\t$scope.locations.floor = c.locations.default.floor;\r\n\t\t$scope.locations.zone = c.locations.default.zone;\r\n\t\t\r\n\t\tc.getChildren('building/structure', newSysId);\r\n\t}\r\n\t\r\n\tc.changeBuilding = (newSysId) => {\r\n\t\t$scope.locations['building/structure'] = c.locations.available['building/structure'].filter((building) => building.sys_id === newSysId)[0];\r\n\t\t$scope.locations.floor = c.locations.default.floor;\r\n\t\t$scope.locations.zone = c.locations.default.zone;\r\n\t\t\r\n\t\tc.getChildren('floor', newSysId);\r\n\t}\r\n\t\r\n\tc.changeFloor = (newSysId) => {\r\n\t\t$scope.locations.floor = c.locations.available.floor.filter((floor) => floor.sys_id === newSysId)[0];\r\n\t\t$scope.locations.zone = c.locations.default.zone;\r\n\t\t\r\n\t\tc.getChildren('zone', newSysId);\r\n\t}\r\n\t\r\n\tc.changeZone = (newSysId) => {\r\n\t\t$scope.locations.zone = c.locations.available.zone.filter((zone) => zone.sys_id === newSysId)[0];\r\n\t}\r\n\t\r\n\tc.changeRoom = () => {\r\n\t\t//c.newLocations.push($scope.locations.zone.name + $scope.locations.room);\r\n\t}\r\n\t\r\n\tc.addNewLocation = () => {\r\n\t\tc.newLocations.push('City: ' + $scope.locations.city.name + ', building: ' + $scope.locations['building/structure'].name + ', floor: ' + $scope.locations.floor.name + ', corridor: ' + $scope.locations.zone.name + ', room: * ' + $scope.locations.room);\r\n\t\tif ($scope.page.g_form) {\r\n\t\t\t$scope.page.g_form.setValue('locks_locations_new_locations_added', c.newLocations.join('\\n'));\r\n\t\t}\r\n\t\t$scope.locations.room = '';\r\n\t}\r\n\t\r\n\tc.notListedModal = (type) => {\r\n\t\tspModal.prompt('Please enter missing value for the ' + type)\r\n\t\t\t.then(value => {\r\n\t\t\t\t$scope.locations[type] = {name: '* ' + value, sys_id: '-2'};\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tc.getChildren = (type, parent) => {\r\n\t\tc.server.get({\r\n\t\t\taction: 'getChildren',\r\n\t\t\ttype: type,\r\n\t\t\tparent: parent\r\n\t\t}).then((res) => {\r\n\t\t\tc.locations.available[type] = res.data.locations.available[type];\r\n\t\t});\r\n\t}\r\n\t\r\n\tc.allSelected = () => {\r\n\t\treturn $scope.locations && \r\n\t\t\t\t\t\t$scope.locations.city.sys_id !== '-1' && \r\n\t\t\t\t\t\t$scope.locations['building/structure'].sys_id !== '-1' &&\r\n\t\t\t\t\t\t$scope.locations.floor.sys_id !== '-1' && \r\n\t\t\t\t\t\t$scope.locations.zone.sys_id !== '-1'\r\n\t}\r\n};\n\n---\n\n// SERVER from server script.js\n(function() {\r\n\tdata.locations = {\r\n\t\tavailable: {\r\n\t\t\tcity: [],\r\n\t\t\t'building/structure': [],\r\n\t\t\tfloor: [],\r\n\t\t\tzone: []\r\n\t\t},\r\n\t\tdefault: {\r\n\t\t\tcity: {name: 'Pick a city', sys_id: '-1'},\r\n\t\t\t'building/structure': {name: 'Pick a building', sys_id: '-1'},\r\n\t\t\tfloor: {name: 'Pick a floor', sys_id: '-1'},\r\n\t\t\tzone: {name: 'Pick a corridor', sys_id: '-1'}\r\n\t\t}\r\n\t};\r\n\t\r\n\tdata.locations.selected = data.locations.default;\r\n\t\r\n\tif (input && input.action === 'getChildren' && input.type) {\r\n\t\tdata.locations.available[input.type] = getData(input.type, input.parent);\r\n\t}\r\n\t\r\n\tfunction getData(locationType, parent) {\r\n\t\tlet ret = [];\r\n\t\tlet gq = new global.GlideQuery('cmn_location').where('cmn_location_type', locationType);\r\n\t\t\r\n\t\tif (!gs.nil(parent))\r\n\t\t\tgq = gq.where('parent', parent);\r\n\t\t\r\n\t\tgq\r\n\t\t\t.orderBy('name')\r\n\t\t\t.select('name')\r\n\t\t\t.forEach(function(childLocation){\r\n\t\t\t\tret.push({\r\n\t\t\t\t\tsys_id: childLocation.sys_id,\r\n\t\t\t\t\tname: childLocation.name\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\treturn ret;\r\n\t}\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "Location hierarchy",
      "id": "location-hierarchy",
      "active": true,
      "html_template": "<h3>\r\n  Describe the new location\r\n</h3>\r\n<div class=\"form-group\">\r\n\t<div class=\"btn-group\" uib-dropdown>\r\n\t\t<button id=\"cityRef\" type=\"button\" class=\"btn btn-info\" uib-dropdown-toggle>\r\n\t\t\t{{locations.city.name}}&nbsp;<span class=\"caret\"></span>\r\n\t\t</button>\r\n\t\t<ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"cityRef\">\r\n\t\t\t<li ng-repeat=\"city in c.locations.available.city\" role=\"menuitem\" ng-click=\"c.changeCity(city.sys_id)\"><a href=\"#\">{{city.name}}</a></li>\r\n\t\t\t<li class=\"divider\"></li>\r\n\t\t\t<li role=\"menuitem\" ng-click=\"c.notListedModal('city')\"><a href=\"#\">City not listed</a></li>\r\n\t\t</ul>\r\n  </div>\r\n\t<div class=\"btn-group\" uib-dropdown>\r\n\t\t<button id=\"buildingRef\" type=\"button\" class=\"btn btn-info\" uib-dropdown-toggle ng-disabled=\"locations.city.sys_id === '-1'\">\r\n\t\t\t{{locations['building/structure'].name}}&nbsp;<span class=\"caret\"></span>\r\n\t\t</button>\r\n\t\t<ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"buildingRef\">\r\n      <li ng-repeat=\"building in c.locations.available['building/structure']\" role=\"menuitem\" ng-click=\"c.changeBuilding(building.sys_id)\"><a href=\"#\">{{building.name}}</a></li>\r\n\t\t\t<li class=\"divider\"></li>\r\n\t\t\t<li role=\"menuitem\" ng-click=\"c.notListedModal('building/structure')\"><a href=\"#\">Building not listed</a></li>\r\n\t\t</ul>\r\n  </div>\r\n \t<div class=\"btn-group\" uib-dropdown>\r\n\t\t<button id=\"floorRef\" type=\"button\" class=\"btn btn-info\" uib-dropdown-toggle ng-disabled=\"locations['building/structure'].sys_id === '-1'\">\r\n\t\t\t{{locations.floor.name}}&nbsp;<span class=\"caret\"></span>\r\n\t\t</button>\r\n\t\t<ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"floorRef\">\r\n      <li ng-repeat=\"floor in c.locations.available.floor\" role=\"menuitem\" ng-click=\"c.changeFloor(floor.sys_id)\"><a href=\"#\">{{floor.name}}</a></li>\r\n\t\t\t<li class=\"divider\"></li>\r\n\t\t\t<li role=\"menuitem\" ng-click=\"c.notListedModal('floor')\"><a href=\"#\">Floor not listed</a></li>\r\n\t\t</ul>\r\n  </div>\r\n\t<div class=\"btn-group\" uib-dropdown>\r\n\t\t<button id=\"zoneRef\" type=\"button\" class=\"btn btn-info\" uib-dropdown-toggle ng-disabled=\"locations.floor.sys_id === '-1'\">\r\n\t\t\t{{locations.zone.name}}&nbsp;<span class=\"caret\"></span>\r\n\t\t</button>\r\n\t\t<ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"zoneRef\">\r\n      <li ng-repeat=\"zone in c.locations.available.zone\" role=\"menuitem\" ng-click=\"c.changeZone(zone.sys_id)\"><a href=\"#\">{{zone.name}}</a></li>\r\n\t\t\t<li class=\"divider\"></li>\r\n\t\t\t<li role=\"menuitem\" ng-click=\"c.notListedModal('zone')\"><a href=\"#\">Corridor not listed</a></li>\r\n\t\t</ul>\r\n  </div>\r\n  <input id=\"roomRef\" class=\"location-picker-input\" type=\"text\" placeholder=\"Room name\" ng-disabled=\"!c.allSelected()\" ng-model=\"locations.room\" ng-blur=\"c.changeRoom()\"/>\r\n  <button type=\"button\" class=\"btn btn-success\" ng-click=\"c.addNewLocation()\" ng-disabled=\"locations.room === ''\">Add to the list</button>\r\n</div>",
      "css": ".location-picker-input {\r\n  padding: 6px 12px;\r\n  color: #555555;\r\n  border: 1px solid #939393;\r\n  border-radius: 4px;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n  -webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\r\n  -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\r\n  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\r\n}",
      "client_script": "api.controller=function($scope, spModal) {\r\n  \tvar c = this;\r\n\tc.newLocations = [];\r\n\t\r\n\tc.server.get({\r\n\t\taction: 'getChildren',\r\n\t\ttype: 'city',\r\n\t\tparent: null\r\n\t}).then((res) => {\r\n\t\tc.locations = res.data.locations;\r\n\t\t$scope.locations = res.data.locations.selected;\r\n\t\t$scope.locations.room = '';\r\n\t});\r\n\t\r\n\tc.changeCity = (newSysId) => {\r\n\t\t$scope.locations.city = c.locations.available.city.filter((city) => city.sys_id === newSysId)[0];\r\n\t\t$scope.locations['building/structure'] = c.locations.default['building/structure'];\r\n\t\t$scope.locations.floor = c.locations.default.floor;\r\n\t\t$scope.locations.zone = c.locations.default.zone;\r\n\t\t\r\n\t\tc.getChildren('building/structure', newSysId);\r\n\t}\r\n\t\r\n\tc.changeBuilding = (newSysId) => {\r\n\t\t$scope.locations['building/structure'] = c.locations.available['building/structure'].filter((building) => building.sys_id === newSysId)[0];\r\n\t\t$scope.locations.floor = c.locations.default.floor;\r\n\t\t$scope.locations.zone = c.locations.default.zone;\r\n\t\t\r\n\t\tc.getChildren('floor', newSysId);\r\n\t}\r\n\t\r\n\tc.changeFloor = (newSysId) => {\r\n\t\t$scope.locations.floor = c.locations.available.floor.filter((floor) => floor.sys_id === newSysId)[0];\r\n\t\t$scope.locations.zone = c.locations.default.zone;\r\n\t\t\r\n\t\tc.getChildren('zone', newSysId);\r\n\t}\r\n\t\r\n\tc.changeZone = (newSysId) => {\r\n\t\t$scope.locations.zone = c.locations.available.zone.filter((zone) => zone.sys_id === newSysId)[0];\r\n\t}\r\n\t\r\n\tc.changeRoom = () => {\r\n\t\t//c.newLocations.push($scope.locations.zone.name + $scope.locations.room);\r\n\t}\r\n\t\r\n\tc.addNewLocation = () => {\r\n\t\tc.newLocations.push('City: ' + $scope.locations.city.name + ', building: ' + $scope.locations['building/structure'].name + ', floor: ' + $scope.locations.floor.name + ', corridor: ' + $scope.locations.zone.name + ', room: * ' + $scope.locations.room);\r\n\t\tif ($scope.page.g_form) {\r\n\t\t\t$scope.page.g_form.setValue('locks_locations_new_locations_added', c.newLocations.join('\\n'));\r\n\t\t}\r\n\t\t$scope.locations.room = '';\r\n\t}\r\n\t\r\n\tc.notListedModal = (type) => {\r\n\t\tspModal.prompt('Please enter missing value for the ' + type)\r\n\t\t\t.then(value => {\r\n\t\t\t\t$scope.locations[type] = {name: '* ' + value, sys_id: '-2'};\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tc.getChildren = (type, parent) => {\r\n\t\tc.server.get({\r\n\t\t\taction: 'getChildren',\r\n\t\t\ttype: type,\r\n\t\t\tparent: parent\r\n\t\t}).then((res) => {\r\n\t\t\tc.locations.available[type] = res.data.locations.available[type];\r\n\t\t});\r\n\t}\r\n\t\r\n\tc.allSelected = () => {\r\n\t\treturn $scope.locations && \r\n\t\t\t\t\t\t$scope.locations.city.sys_id !== '-1' && \r\n\t\t\t\t\t\t$scope.locations['building/structure'].sys_id !== '-1' &&\r\n\t\t\t\t\t\t$scope.locations.floor.sys_id !== '-1' && \r\n\t\t\t\t\t\t$scope.locations.zone.sys_id !== '-1'\r\n\t}\r\n};",
      "server_script": "(function() {\r\n\tdata.locations = {\r\n\t\tavailable: {\r\n\t\t\tcity: [],\r\n\t\t\t'building/structure': [],\r\n\t\t\tfloor: [],\r\n\t\t\tzone: []\r\n\t\t},\r\n\t\tdefault: {\r\n\t\t\tcity: {name: 'Pick a city', sys_id: '-1'},\r\n\t\t\t'building/structure': {name: 'Pick a building', sys_id: '-1'},\r\n\t\t\tfloor: {name: 'Pick a floor', sys_id: '-1'},\r\n\t\t\tzone: {name: 'Pick a corridor', sys_id: '-1'}\r\n\t\t}\r\n\t};\r\n\t\r\n\tdata.locations.selected = data.locations.default;\r\n\t\r\n\tif (input && input.action === 'getChildren' && input.type) {\r\n\t\tdata.locations.available[input.type] = getData(input.type, input.parent);\r\n\t}\r\n\t\r\n\tfunction getData(locationType, parent) {\r\n\t\tlet ret = [];\r\n\t\tlet gq = new global.GlideQuery('cmn_location').where('cmn_location_type', locationType);\r\n\t\t\r\n\t\tif (!gs.nil(parent))\r\n\t\t\tgq = gq.where('parent', parent);\r\n\t\t\r\n\t\tgq\r\n\t\t\t.orderBy('name')\r\n\t\t\t.select('name')\r\n\t\t\t.forEach(function(childLocation){\r\n\t\t\t\tret.push({\r\n\t\t\t\t\tsys_id: childLocation.sys_id,\r\n\t\t\t\t\tname: childLocation.name\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\treturn ret;\r\n\t}\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Location hierarchy",
        "scriptFiles": [
          "html.html",
          "css.css",
          "client controller.js",
          "server script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Location%20hierarchy"
      }
    },
    "createdAt": "2025-09-21T07:29:48.956Z",
    "updatedAt": "2025-09-21T08:58:58.928Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 397,
    "type": "service_portal_widget",
    "name": "iFrame",
    "description": "iFrame Widget A flexible and reusable widget to display content in an iFrame. Configurable Instance Options",
    "script": "// HTML from template.html\n<div style=\"padding: 5px\">\r\n    <div ng-if=\"showError\" class=\"padding\">\r\n      <div class=\"alert alert-warning\" role=\"alert\">\r\n        Provide a URL as a widget option or as a parameter, 'url'\r\n      </div>\r\n    </div>\r\n    <div class=\"external-content\" ng-class=\"contentClass\">\r\n      <iframe title=\"{{label}}\" aria-label=\"{{label}}\" ng-src=\"{{frameSource}}\" frameborder=\"0\" scrolling=\"yes\" sandbox=\"allow-same-origin allow-forms allow-modals allow-popups allow-scripts\" allow=\"fullscreen\"\r\n        >${Browser does not allow iFrames}\r\n      </iframe>\r\n    </div>\r\n  </div>\n\n---\n\n// CLIENT from client.js\napi.controller = function ($scope, $rootScope, $location, $sce) {\r\n    var c = this;\r\n    var params = $location.search();\r\n    var url = params.url || c.options.url;\r\n    var size = params.size || c.options.size;\r\n      var label = params.label || c.options.label;\r\n      var setPageTitle = params.set_page_title || c.options.set_page_title;\r\n  \r\n    if (!url) $scope.showError = true;\r\n    else {\r\n      $scope.frameSource = $sce.trustAsResourceUrl(url);\r\n      $scope.contentClass = \"external-content-\" + size;\r\n          $scope.label = label;\r\n    }\r\n  \r\n      $rootScope.$emit('sp.update.breadcrumbs', [{label:label}]);\r\n      if(setPageTitle)\r\n          $('head title').text(label);\r\n  };\n\n---\n\n// SERVER from server.js\n(function() {\r\n\toptions.size = options.size || \"large\";\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "iFrame",
      "id": "iframe",
      "active": true,
      "html_template": "<div style=\"padding: 5px\">\r\n    <div ng-if=\"showError\" class=\"padding\">\r\n      <div class=\"alert alert-warning\" role=\"alert\">\r\n        Provide a URL as a widget option or as a parameter, 'url'\r\n      </div>\r\n    </div>\r\n    <div class=\"external-content\" ng-class=\"contentClass\">\r\n      <iframe title=\"{{label}}\" aria-label=\"{{label}}\" ng-src=\"{{frameSource}}\" frameborder=\"0\" scrolling=\"yes\" sandbox=\"allow-same-origin allow-forms allow-modals allow-popups allow-scripts\" allow=\"fullscreen\"\r\n        >${Browser does not allow iFrames}\r\n      </iframe>\r\n    </div>\r\n  </div>",
      "client_script": "api.controller = function ($scope, $rootScope, $location, $sce) {\r\n    var c = this;\r\n    var params = $location.search();\r\n    var url = params.url || c.options.url;\r\n    var size = params.size || c.options.size;\r\n      var label = params.label || c.options.label;\r\n      var setPageTitle = params.set_page_title || c.options.set_page_title;\r\n  \r\n    if (!url) $scope.showError = true;\r\n    else {\r\n      $scope.frameSource = $sce.trustAsResourceUrl(url);\r\n      $scope.contentClass = \"external-content-\" + size;\r\n          $scope.label = label;\r\n    }\r\n  \r\n      $rootScope.$emit('sp.update.breadcrumbs', [{label:label}]);\r\n      if(setPageTitle)\r\n          $('head title').text(label);\r\n  };",
      "server_script": "(function() {\r\n\toptions.size = options.size || \"large\";\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/iFrame",
        "scriptFiles": [
          "template.html",
          "client.js",
          "server.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/iFrame"
      }
    },
    "createdAt": "2025-09-21T07:29:48.951Z",
    "updatedAt": "2025-09-21T08:58:58.922Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 396,
    "type": "service_portal_widget",
    "name": "HTML List Table from GlideRecord with JSon",
    "description": "A simple code snippet to get data using GlideRecord in server script and Display in HTML Table using JSON. In order to use the widget, follow the below steps: Create a new widget and copy the html and server script in the widget.",
    "script": "// HTML from html.html\n<div>\r\n<!-- your widget template -->\r\n  <h1>Simple List</h1>\r\n \r\n  <table>\r\n    <tr>\r\n      <th>Number</th>\r\n      <th>Short Desc</th>\r\n      <th>Assignment Group</th>\r\n      <th>State</th>\r\n      <th>Action</th>\r\n    </tr>\r\n    <tr ng-repeat=\"key in data.inc\">\r\n      <td>{{key.number}}</td>\r\n      <td>{{key.short_desc}}</td>\r\n      <td>{{key.assign_gr}}</td>\r\n      <td>{{key.state}}</td>\r\n    </tr>\r\n  </table>\r\n  \r\n</div>",
    "metadata": {
      "application": "Global",
      "name": "HTML List Table from GlideRecord with JSon",
      "id": "html-list-table-from-gliderecord-with-json",
      "active": true,
      "html_template": "<div>\r\n<!-- your widget template -->\r\n  <h1>Simple List</h1>\r\n \r\n  <table>\r\n    <tr>\r\n      <th>Number</th>\r\n      <th>Short Desc</th>\r\n      <th>Assignment Group</th>\r\n      <th>State</th>\r\n      <th>Action</th>\r\n    </tr>\r\n    <tr ng-repeat=\"key in data.inc\">\r\n      <td>{{key.number}}</td>\r\n      <td>{{key.short_desc}}</td>\r\n      <td>{{key.assign_gr}}</td>\r\n      <td>{{key.state}}</td>\r\n    </tr>\r\n  </table>\r\n  \r\n</div>",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/HTML List Table from GlideRecord with JSon",
        "scriptFiles": [
          "html.html"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/HTML%20List%20Table%20from%20GlideRecord%20with%20JSon",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/HTML%20List%20Table%20from%20GlideRecord%20with%20JSon/html.html"
      }
    },
    "createdAt": "2025-09-21T07:29:48.947Z",
    "updatedAt": "2025-09-21T08:58:58.917Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 395,
    "type": "service_portal_widget",
    "name": "Guest Login Modal",
    "description": "Guest Login Modal Widget This widget provides a modal dialog prompting guest users to either login or continue browsing as a guest.  This is intended to be used on public facing Service Portal pages, and as such the widget should also be made public. Example of Widget",
    "script": "// CLIENT from client.js\napi.controller=function($scope, $uibModal) {\r\n  /* widget controller */\r\n  var c = this;\r\n\tc.authenticated = c.data.authenticated;\r\n\tc.continueAsGuest = sessionStorage.continueAsGuest;\r\n\t\r\n\tc.login_button_text = c.data.login_button_text;\r\n\t\r\n\tif (!c.authenticated) {\r\n\t\tif (!c.continueAsGuest) { // if user hasn't already clicked Continue as Guest\r\n\t\t\tc.modalInstance = $uibModal.open({\r\n\t\t\t\ttemplateUrl: 'guest-login-content',\r\n\t\t\t\tscope: $scope,\r\n\t\t\t\tbackdrop: 'static',\r\n\t\t\t\twindowTopClass: 'modal-center-override',\r\n\t\t\t\tariaLabelledBy: 'title'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t$scope.openLogin = function () {\r\n\t\twindow.location = '/sp';\r\n\t};\r\n\t\r\n\t// When Guest button is clicked, store in sessionStorage and close modal\r\n\t$scope.continueAsGuest = function () {\r\n\t\tsessionStorage.continueAsGuest = true;\r\n\t\tc.modalInstance.close();\r\n\t}\r\n};\n\n---\n\n// SERVER from server.js\n(function() {\r\n  /* populate the 'data' object */\r\n  /* e.g., data.table = $sp.getValue('table'); */\r\n\r\n\tdata.authenticated = gs.isLoggedIn();\t\t\r\n\t\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "Guest Login Modal",
      "id": "guest-login-modal",
      "active": true,
      "client_script": "api.controller=function($scope, $uibModal) {\r\n  /* widget controller */\r\n  var c = this;\r\n\tc.authenticated = c.data.authenticated;\r\n\tc.continueAsGuest = sessionStorage.continueAsGuest;\r\n\t\r\n\tc.login_button_text = c.data.login_button_text;\r\n\t\r\n\tif (!c.authenticated) {\r\n\t\tif (!c.continueAsGuest) { // if user hasn't already clicked Continue as Guest\r\n\t\t\tc.modalInstance = $uibModal.open({\r\n\t\t\t\ttemplateUrl: 'guest-login-content',\r\n\t\t\t\tscope: $scope,\r\n\t\t\t\tbackdrop: 'static',\r\n\t\t\t\twindowTopClass: 'modal-center-override',\r\n\t\t\t\tariaLabelledBy: 'title'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t$scope.openLogin = function () {\r\n\t\twindow.location = '/sp';\r\n\t};\r\n\t\r\n\t// When Guest button is clicked, store in sessionStorage and close modal\r\n\t$scope.continueAsGuest = function () {\r\n\t\tsessionStorage.continueAsGuest = true;\r\n\t\tc.modalInstance.close();\r\n\t}\r\n};",
      "server_script": "(function() {\r\n  /* populate the 'data' object */\r\n  /* e.g., data.table = $sp.getValue('table'); */\r\n\r\n\tdata.authenticated = gs.isLoggedIn();\t\t\r\n\t\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Guest Login Modal",
        "scriptFiles": [
          "client.js",
          "server.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Guest%20Login%20Modal"
      }
    },
    "createdAt": "2025-09-21T07:29:48.943Z",
    "updatedAt": "2025-09-21T08:58:58.914Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 394,
    "type": "service_portal_widget",
    "name": "Dropdown Widget",
    "description": "FAQ Dropdown Widget This is a simple FAQ dropdown widget for ServiceNow Portal that allows users to click on questions to reveal their answers. The widget is designed to enhance user experience by providing easy access to frequently asked questions. Features",
    "script": "// CSS from style.css\n.faq-widget {\r\n    max-width: 600px;\r\n    margin: auto;\r\n    font-family: Arial, sans-serif;\r\n}\r\n\r\nh2 {\r\n    text-align: center;\r\n    color: #333;\r\n}\r\n\r\n.faq-item {\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    margin-bottom: 10px;\r\n    overflow: hidden;\r\n    transition: box-shadow 0.2s ease;\r\n}\r\n\r\n.faq-item:hover {\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.faq-question {\r\n    background-color: #007bff; /* Header background color */\r\n    color: white;\r\n    padding: 15px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: space-between; /* Align question and arrow */\r\n    align-items: center; /* Center vertically */\r\n}\r\n\r\n.faq-question h3 {\r\n    margin: 0; /* Remove default margin */\r\n}\r\n\r\n.faq-answer {\r\n    padding: 15px;\r\n    background-color: #f9f9f9; /* Answer background color */\r\n    color: #333;\r\n}\r\n    \r\n.arrow-up {\r\n    border: solid white;\r\n    border-width: 0 4px 4px 0;\r\n    display: inline-block;\r\n    padding: 3px;\r\n    transform: rotate(-135deg);\r\n}\r\n\r\n.arrow-down {\r\n    border: solid white;\r\n    border-width: 0 4px 4px 0;\r\n    display: inline-block;\r\n    padding: 3px;\r\n    transform: rotate(45deg);\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Dropdown Widget",
      "id": "dropdown-widget",
      "active": true,
      "css": ".faq-widget {\r\n    max-width: 600px;\r\n    margin: auto;\r\n    font-family: Arial, sans-serif;\r\n}\r\n\r\nh2 {\r\n    text-align: center;\r\n    color: #333;\r\n}\r\n\r\n.faq-item {\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    margin-bottom: 10px;\r\n    overflow: hidden;\r\n    transition: box-shadow 0.2s ease;\r\n}\r\n\r\n.faq-item:hover {\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.faq-question {\r\n    background-color: #007bff; /* Header background color */\r\n    color: white;\r\n    padding: 15px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: space-between; /* Align question and arrow */\r\n    align-items: center; /* Center vertically */\r\n}\r\n\r\n.faq-question h3 {\r\n    margin: 0; /* Remove default margin */\r\n}\r\n\r\n.faq-answer {\r\n    padding: 15px;\r\n    background-color: #f9f9f9; /* Answer background color */\r\n    color: #333;\r\n}\r\n    \r\n.arrow-up {\r\n    border: solid white;\r\n    border-width: 0 4px 4px 0;\r\n    display: inline-block;\r\n    padding: 3px;\r\n    transform: rotate(-135deg);\r\n}\r\n\r\n.arrow-down {\r\n    border: solid white;\r\n    border-width: 0 4px 4px 0;\r\n    display: inline-block;\r\n    padding: 3px;\r\n    transform: rotate(45deg);\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Dropdown Widget",
        "scriptFiles": [
          "style.css"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Dropdown%20Widget",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/Dropdown%20Widget/style.css"
      }
    },
    "createdAt": "2025-09-21T07:29:48.937Z",
    "updatedAt": "2025-09-21T08:58:58.909Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 393,
    "type": "service_portal_widget",
    "name": "Drawer Buttons",
    "description": "To use this widget, follow the below steps: 1. Create a new widget and copy the html, style in the widget. 2. Add the widget on the homepage .",
    "script": "// CSS from style.css\n//css for styling of all the buttons\r\n#escButtons a {\r\n  position: absolute;\r\n  right: -90px;\r\n  transition: 0.3s;\r\n  border:2px solid white;\r\n  border-radius: 20px;\r\n  padding: 12px;\r\n  width: 140px;\r\n  font-size: 20px;\r\n  color: white;\r\n  \r\n}\r\n//css for hover on the buttons\r\n#escButtons a:hover {\r\n  right: 0;\r\n  border:3px solid #fc0366;\r\n  color:#fc0366;\r\n}\r\n//css for button policies\r\n#policies {\r\n  top: 20px;\r\n  background-color: #9bf542;\r\n}\r\n//css for button divisions\r\n#divisions {\r\n  top: 80px;\r\n  background-color: #2577db;\r\n}\r\n//css for button contact\r\n#contact {\r\n  top: 140px;\r\n  background-color:#fcdb03;\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Drawer Buttons",
      "id": "drawer-buttons",
      "active": true,
      "css": "//css for styling of all the buttons\r\n#escButtons a {\r\n  position: absolute;\r\n  right: -90px;\r\n  transition: 0.3s;\r\n  border:2px solid white;\r\n  border-radius: 20px;\r\n  padding: 12px;\r\n  width: 140px;\r\n  font-size: 20px;\r\n  color: white;\r\n  \r\n}\r\n//css for hover on the buttons\r\n#escButtons a:hover {\r\n  right: 0;\r\n  border:3px solid #fc0366;\r\n  color:#fc0366;\r\n}\r\n//css for button policies\r\n#policies {\r\n  top: 20px;\r\n  background-color: #9bf542;\r\n}\r\n//css for button divisions\r\n#divisions {\r\n  top: 80px;\r\n  background-color: #2577db;\r\n}\r\n//css for button contact\r\n#contact {\r\n  top: 140px;\r\n  background-color:#fcdb03;\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Drawer Buttons",
        "scriptFiles": [
          "style.css"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Drawer%20Buttons",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/Drawer%20Buttons/style.css"
      }
    },
    "createdAt": "2025-09-21T07:29:48.933Z",
    "updatedAt": "2025-09-21T08:58:58.906Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 392,
    "type": "service_portal_widget",
    "name": "Drag & drop Widget",
    "description": "Drag and Drop Widget Description This widget allows users to interactively move objects from a side to another within Service Portal.",
    "script": "// HTML from html.html\n<div class=\"panel-heading\" ng-init=\"onLoad()\">\r\n   <h3 class=\"h4 panel-title\">\r\n      <span>\r\n         <fa name=\"{{::c.options.glyph}}\"></fa>\r\n      </span>\r\n   </h3>\r\n</div>\r\n<div id=\"drag-n-drop\">\r\n   <script>\r\n      function getScope() {\r\n          return angular.element('#drag-n-drop').scope().c;\r\n      }\r\n   </script>\r\n   <div id=\"taskboard-container\">\r\n      <div class=\"taskboard-header\">\r\n         <h1>Drag and drop widget</h1>\r\n      </div>\r\n      <div class=\"task-col right-border\" id=\"todo\">\r\n         <div class=\"task-col-header\">\r\n            Side 1\r\n         </div>\r\n         <div class=\"task-col-content\">\r\n            <div class=\"task\" ng-repeat=\"task in c.data.tasks\" id=\"{{task.id}}\"\r\n               draggable=\"true\" ondragstart=\"getScope().dragStart(event)\" ondragend=\"getScope().dragEnd(event)\">\r\n               <div class=\"task-header\">\r\n                  {{task.title}}\r\n                  <div ng-if=\"task.type=='reference'\" style=\"display: inline;\">\r\n                     <button id=\"{{task.id}}\" onmouseover=\"getScope().getReferenceFields(event)\" class=\"ref-btn\">></button>\r\n                  </div>\r\n               </div>\r\n               <div id=\"container-{{task.id}}\" class=\"dropdown-container\" >\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      <div class=\"task-col right-border\">\r\n         <div class=\"task-col-header\">\r\n            Side 2\r\n         </div>\r\n         <div class=\"form-row\">\r\n            <div class=\"form-group\">\r\n               <div ng-repeat=\"x in data.arrfields\">\r\n                  <div class=\"task-col right-border\" id=\"{{x.label_field}}\">\r\n                     <div id=\"{{x.label_field}}\" class=\"task-col-content droppable\" ondragenter=\"getScope().dragEnter(event)\" \r\n                        ondragleave=\"getScope().dragLeave(event)\" \r\n                        ondragover=\"getScope().dragOver(event)\" \r\n                        ondrop=\"getScope().drop(event)\" >\r\n                        {{x.label_field}}\r\n                     </div>\r\n                     <div class=\"task-pdf\" ng-repeat=\"task in c.data.tasks\" ng-if=\"task.state.indexOf(x.label_field) > -1\" id=\"{{task.id}}\"\r\n                        ondragstart=\"getScope().dragStart(event)\" ondragend=\"getScope().dragEnd(event)\">\r\n                        <div class=\"task-header\">\r\n                           {{task.title}} <a class=\"x-btn\" id=\"{{task.id}}\" onclick=\"getScope().removeElement(event)\">x</a>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</div>\n\n---\n\n// CLIENT from client.js\nfunction($scope) {\r\n    var c = this;\r\n    $scope.onLoad = function() {\r\n        c.server.update().then(function(response) {\r\n            $scope.showhide = {\r\n                value: \"block\",\r\n                name: 'showhide'\r\n            };\r\n        });\r\n    }\r\n\r\n    c.dragStart = function(event) {\r\n\r\n        event.target.style.opacity = '0.7';\r\n        event.target.style.cursor = 'grabbing';\r\n        event.dataTransfer.effectAllowed = 'move';\r\n        event.dataTransfer.setData('text/html', event.target.innerHTML);\r\n        c.draggedNode = event.target.id;\r\n\r\n        document.querySelectorAll('.task').forEach(function(cur) {\r\n            if (cur.id !== event.target.id) {\r\n                cur.classList.add('disabled');\r\n            }\r\n        })\r\n    };\r\n\r\n    c.dragEnd = function(event) {\r\n        event.target.style.opacity = '1';\r\n        event.target.style.cursor = 'grab';\r\n        var cols = document.querySelectorAll('.task-col-content');\r\n        cols.forEach(function(cur) {\r\n            cur.classList.remove('over')\r\n        });\r\n        document.querySelectorAll('.task').forEach(function(cur) {\r\n            cur.classList.remove('disabled');\r\n        })\r\n    };\r\n\r\n    c.dragEnter = function(event) {\r\n        if (event.target && event.target.classList) {\r\n            event.target.classList.add('over');\r\n        }\r\n    };\r\n\r\n    c.dragLeave = function(event) {\r\n        if (event.target && event.target.classList) {\r\n            event.target.classList.remove('over');\r\n        }\r\n    };\r\n\r\n    c.dragOver = function(event) {\r\n        if (event.preventDefault) {\r\n            event.preventDefault();\r\n        }\r\n        event.dataTransfer.dropEffect = 'move';\r\n        return false;\r\n    };\r\n\r\n    function findColType(element) {\r\n        var maxLevels = 4;\r\n        return checkElement(element, 1);\r\n\r\n        function checkElement(element, level) {\r\n            if (!element) {\r\n                return null;\r\n            }\r\n            if (level >= maxLevels) {\r\n                return null;\r\n            }\r\n            if (element.classList && element.classList.contains('task-col')) {\r\n                return element.id;\r\n            }\r\n            return checkElement(element.parentElement, level++);\r\n        }\r\n    }\r\n\r\n    c.drop = function(event) {\r\n\t\t\t\r\n        if (event.stopPropagation) {\r\n            event.stopPropagation();\r\n        }\r\n        c.taskid = event.target.id;\r\n        c.data.isPushable = true;\r\n\t\t\t\r\n        var colType = findColType(event.target);\r\n        var tasksarr = c.data.tasks;\r\n        var states;\r\n\t\t\t\r\n        for (var k = 0; k < tasksarr.length; k++) {\r\n            states = c.data.tasks[parseInt(k)].state;\r\n            var index_element = states.indexOf(colType);\r\n            if (index_element > -1) {\r\n                c.data.isPushable = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (c.data.isPushable) {\r\n            c.data.tasks[parseInt(c.draggedNode)].state.push(colType);\r\n        }\r\n\r\n        $scope.$apply();\r\n    };\r\n\r\n\r\n    c.removeElement = function(ev) {\r\n\r\n        c.taskid = ev.target.id;\r\n        var colType = findColType(ev.target);\r\n        var states = c.data.tasks[parseInt(c.taskid)].state;\r\n        var index_element = states.indexOf(colType);\r\n        states.splice(index_element, 1);\r\n        c.data.tasks[parseInt(c.taskid)].state = states;\r\n        $scope.$apply();\r\n    };\r\n\r\n    c.data.savebtn = false;\r\n\r\n}\n\n---\n\n// SERVER from server.js\n(function() {\r\n    if (input) {\r\n\t\t\t\r\n        var arrfields = [];\r\n        arrfields.push({\r\n            \"label_field\": \"Field A\",\r\n            \"internal_name\": \"field_a\"\r\n        }, {\r\n            \"label_field\": \"Field B\",\r\n            \"internal_name\": \"field_b\"\r\n        }, {\r\n            \"label_field\": \"Field C\",\r\n            \"internal_name\": \"field_c\"\r\n        }, {\r\n            \"label_field\": \"Field D\",\r\n            \"internal_name\": \"field_d\"\r\n        }, {\r\n            \"label_field\": \"Field E\",\r\n            \"internal_name\": \"field_e\"\r\n        }, {\r\n            \"label_field\": \"Field F\",\r\n            \"internal_name\": \"field_f\"\r\n        }, {\r\n            \"label_field\": \"Field G\",\r\n            \"internal_name\": \"field_g\"\r\n        });\r\n\r\n        data.arrfields = arrfields;\r\n        var arr_fields = [];\r\n\r\n        arr_fields = [];\r\n\t\t\t\r\n        arr_fields.push({\r\n            \"label\": \"Field1\",\r\n            \"name\": \"field_1\"\r\n        }, {\r\n            \"label\": \"Field2\",\r\n            \"name\": \"field_2\"\r\n        }, {\r\n            \"label\": \"Field3\",\r\n            \"name\": \"field_3\"\r\n        }, {\r\n            \"label\": \"Field4\",\r\n            \"name\": \"field_4\"\r\n        }, {\r\n            \"label\": \"Field5\",\r\n            \"name\": \"field_5\"\r\n        });\r\n\r\n        var tasks = [];\r\n        var arrs = [];\r\n        var i;\r\n        var h;\r\n        arrs[0] = \"todo\";\r\n\t\t\t\r\n        for (i = 0; i < arr_fields.length; i++) {\r\n            tasks.push({\r\n                \"id\": i,\r\n                \"name\": arr_fields[i].name,\r\n                \"title\": arr_fields[i].label,\r\n                \"state\": arrs\r\n            });\r\n        }\r\n\t\t\t\r\n        data.tasks = tasks;\r\n    }\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "Drag & drop Widget",
      "id": "drag--drop-widget",
      "active": true,
      "html_template": "<div class=\"panel-heading\" ng-init=\"onLoad()\">\r\n   <h3 class=\"h4 panel-title\">\r\n      <span>\r\n         <fa name=\"{{::c.options.glyph}}\"></fa>\r\n      </span>\r\n   </h3>\r\n</div>\r\n<div id=\"drag-n-drop\">\r\n   <script>\r\n      function getScope() {\r\n          return angular.element('#drag-n-drop').scope().c;\r\n      }\r\n   </script>\r\n   <div id=\"taskboard-container\">\r\n      <div class=\"taskboard-header\">\r\n         <h1>Drag and drop widget</h1>\r\n      </div>\r\n      <div class=\"task-col right-border\" id=\"todo\">\r\n         <div class=\"task-col-header\">\r\n            Side 1\r\n         </div>\r\n         <div class=\"task-col-content\">\r\n            <div class=\"task\" ng-repeat=\"task in c.data.tasks\" id=\"{{task.id}}\"\r\n               draggable=\"true\" ondragstart=\"getScope().dragStart(event)\" ondragend=\"getScope().dragEnd(event)\">\r\n               <div class=\"task-header\">\r\n                  {{task.title}}\r\n                  <div ng-if=\"task.type=='reference'\" style=\"display: inline;\">\r\n                     <button id=\"{{task.id}}\" onmouseover=\"getScope().getReferenceFields(event)\" class=\"ref-btn\">></button>\r\n                  </div>\r\n               </div>\r\n               <div id=\"container-{{task.id}}\" class=\"dropdown-container\" >\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      <div class=\"task-col right-border\">\r\n         <div class=\"task-col-header\">\r\n            Side 2\r\n         </div>\r\n         <div class=\"form-row\">\r\n            <div class=\"form-group\">\r\n               <div ng-repeat=\"x in data.arrfields\">\r\n                  <div class=\"task-col right-border\" id=\"{{x.label_field}}\">\r\n                     <div id=\"{{x.label_field}}\" class=\"task-col-content droppable\" ondragenter=\"getScope().dragEnter(event)\" \r\n                        ondragleave=\"getScope().dragLeave(event)\" \r\n                        ondragover=\"getScope().dragOver(event)\" \r\n                        ondrop=\"getScope().drop(event)\" >\r\n                        {{x.label_field}}\r\n                     </div>\r\n                     <div class=\"task-pdf\" ng-repeat=\"task in c.data.tasks\" ng-if=\"task.state.indexOf(x.label_field) > -1\" id=\"{{task.id}}\"\r\n                        ondragstart=\"getScope().dragStart(event)\" ondragend=\"getScope().dragEnd(event)\">\r\n                        <div class=\"task-header\">\r\n                           {{task.title}} <a class=\"x-btn\" id=\"{{task.id}}\" onclick=\"getScope().removeElement(event)\">x</a>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</div>",
      "client_script": "function($scope) {\r\n    var c = this;\r\n    $scope.onLoad = function() {\r\n        c.server.update().then(function(response) {\r\n            $scope.showhide = {\r\n                value: \"block\",\r\n                name: 'showhide'\r\n            };\r\n        });\r\n    }\r\n\r\n    c.dragStart = function(event) {\r\n\r\n        event.target.style.opacity = '0.7';\r\n        event.target.style.cursor = 'grabbing';\r\n        event.dataTransfer.effectAllowed = 'move';\r\n        event.dataTransfer.setData('text/html', event.target.innerHTML);\r\n        c.draggedNode = event.target.id;\r\n\r\n        document.querySelectorAll('.task').forEach(function(cur) {\r\n            if (cur.id !== event.target.id) {\r\n                cur.classList.add('disabled');\r\n            }\r\n        })\r\n    };\r\n\r\n    c.dragEnd = function(event) {\r\n        event.target.style.opacity = '1';\r\n        event.target.style.cursor = 'grab';\r\n        var cols = document.querySelectorAll('.task-col-content');\r\n        cols.forEach(function(cur) {\r\n            cur.classList.remove('over')\r\n        });\r\n        document.querySelectorAll('.task').forEach(function(cur) {\r\n            cur.classList.remove('disabled');\r\n        })\r\n    };\r\n\r\n    c.dragEnter = function(event) {\r\n        if (event.target && event.target.classList) {\r\n            event.target.classList.add('over');\r\n        }\r\n    };\r\n\r\n    c.dragLeave = function(event) {\r\n        if (event.target && event.target.classList) {\r\n            event.target.classList.remove('over');\r\n        }\r\n    };\r\n\r\n    c.dragOver = function(event) {\r\n        if (event.preventDefault) {\r\n            event.preventDefault();\r\n        }\r\n        event.dataTransfer.dropEffect = 'move';\r\n        return false;\r\n    };\r\n\r\n    function findColType(element) {\r\n        var maxLevels = 4;\r\n        return checkElement(element, 1);\r\n\r\n        function checkElement(element, level) {\r\n            if (!element) {\r\n                return null;\r\n            }\r\n            if (level >= maxLevels) {\r\n                return null;\r\n            }\r\n            if (element.classList && element.classList.contains('task-col')) {\r\n                return element.id;\r\n            }\r\n            return checkElement(element.parentElement, level++);\r\n        }\r\n    }\r\n\r\n    c.drop = function(event) {\r\n\t\t\t\r\n        if (event.stopPropagation) {\r\n            event.stopPropagation();\r\n        }\r\n        c.taskid = event.target.id;\r\n        c.data.isPushable = true;\r\n\t\t\t\r\n        var colType = findColType(event.target);\r\n        var tasksarr = c.data.tasks;\r\n        var states;\r\n\t\t\t\r\n        for (var k = 0; k < tasksarr.length; k++) {\r\n            states = c.data.tasks[parseInt(k)].state;\r\n            var index_element = states.indexOf(colType);\r\n            if (index_element > -1) {\r\n                c.data.isPushable = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (c.data.isPushable) {\r\n            c.data.tasks[parseInt(c.draggedNode)].state.push(colType);\r\n        }\r\n\r\n        $scope.$apply();\r\n    };\r\n\r\n\r\n    c.removeElement = function(ev) {\r\n\r\n        c.taskid = ev.target.id;\r\n        var colType = findColType(ev.target);\r\n        var states = c.data.tasks[parseInt(c.taskid)].state;\r\n        var index_element = states.indexOf(colType);\r\n        states.splice(index_element, 1);\r\n        c.data.tasks[parseInt(c.taskid)].state = states;\r\n        $scope.$apply();\r\n    };\r\n\r\n    c.data.savebtn = false;\r\n\r\n}",
      "server_script": "(function() {\r\n    if (input) {\r\n\t\t\t\r\n        var arrfields = [];\r\n        arrfields.push({\r\n            \"label_field\": \"Field A\",\r\n            \"internal_name\": \"field_a\"\r\n        }, {\r\n            \"label_field\": \"Field B\",\r\n            \"internal_name\": \"field_b\"\r\n        }, {\r\n            \"label_field\": \"Field C\",\r\n            \"internal_name\": \"field_c\"\r\n        }, {\r\n            \"label_field\": \"Field D\",\r\n            \"internal_name\": \"field_d\"\r\n        }, {\r\n            \"label_field\": \"Field E\",\r\n            \"internal_name\": \"field_e\"\r\n        }, {\r\n            \"label_field\": \"Field F\",\r\n            \"internal_name\": \"field_f\"\r\n        }, {\r\n            \"label_field\": \"Field G\",\r\n            \"internal_name\": \"field_g\"\r\n        });\r\n\r\n        data.arrfields = arrfields;\r\n        var arr_fields = [];\r\n\r\n        arr_fields = [];\r\n\t\t\t\r\n        arr_fields.push({\r\n            \"label\": \"Field1\",\r\n            \"name\": \"field_1\"\r\n        }, {\r\n            \"label\": \"Field2\",\r\n            \"name\": \"field_2\"\r\n        }, {\r\n            \"label\": \"Field3\",\r\n            \"name\": \"field_3\"\r\n        }, {\r\n            \"label\": \"Field4\",\r\n            \"name\": \"field_4\"\r\n        }, {\r\n            \"label\": \"Field5\",\r\n            \"name\": \"field_5\"\r\n        });\r\n\r\n        var tasks = [];\r\n        var arrs = [];\r\n        var i;\r\n        var h;\r\n        arrs[0] = \"todo\";\r\n\t\t\t\r\n        for (i = 0; i < arr_fields.length; i++) {\r\n            tasks.push({\r\n                \"id\": i,\r\n                \"name\": arr_fields[i].name,\r\n                \"title\": arr_fields[i].label,\r\n                \"state\": arrs\r\n            });\r\n        }\r\n\t\t\t\r\n        data.tasks = tasks;\r\n    }\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Drag & drop Widget",
        "scriptFiles": [
          "html.html",
          "client.js",
          "server.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Drag%20%26%20drop%20Widget"
      }
    },
    "createdAt": "2025-09-21T07:29:48.928Z",
    "updatedAt": "2025-09-21T08:58:58.902Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 391,
    "type": "service_portal_widget",
    "name": "Digital Clock",
    "description": "Digital Clock Widget for ServiceNow Portal This widget displays a simple digital clock with a black background and white text. It shows the current time in hours, minutes, and seconds and updates every second. Features",
    "script": "// CSS from style.css\n.digital-clock {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100px;\r\n    width: 200px;\r\n    margin: auto;\r\n    background-color: #000;\r\n    color: #fff;\r\n    font-family: 'Courier New', Courier, monospace;\r\n    font-size: 2em;\r\n    border-radius: 5px;\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Digital Clock",
      "id": "digital-clock",
      "active": true,
      "css": ".digital-clock {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100px;\r\n    width: 200px;\r\n    margin: auto;\r\n    background-color: #000;\r\n    color: #fff;\r\n    font-family: 'Courier New', Courier, monospace;\r\n    font-size: 2em;\r\n    border-radius: 5px;\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Digital Clock",
        "scriptFiles": [
          "style.css"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Digital%20Clock",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/Digital%20Clock/style.css"
      }
    },
    "createdAt": "2025-09-21T07:29:48.924Z",
    "updatedAt": "2025-09-21T08:58:58.898Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 390,
    "type": "service_portal_widget",
    "name": "Create diagram using Highcharts library",
    "description": "Creating spider web using Highcharts Introduction In this snippet you will create a custom spider web using a custom page and populating data using Highcharts native library",
    "script": "// CLIENT from client.js\napi.controller=function($rootScope, $scope, $window, $interval, spUtil) {\r\n  /* widget controller */\r\n\tvar c = this;\r\n\r\n\t/** Chart source: https://www.highcharts.com/demo/polar-spider*/\r\n\tvar options = {\r\n        credits: {\r\n            enabled: false\r\n        },\r\n\r\n        chart: {\r\n            renderTo: 'container', // change chart_id if needed\r\n            polar: true,\r\n            type: 'line'\r\n        },\r\n\r\n    accessibility: {\r\n        description: 'A spiderweb chart compares the allocated budget against actual spending within an organization. The spider chart has six spokes. Each spoke represents one of the 6 departments within the organization: sales, marketing, development, customer support, information technology and administration. The chart is interactive, and each data point is displayed upon hovering. The chart clearly shows that 4 of the 6 departments have overspent their budget with Marketing responsible for the greatest overspend of $20,000. The allocated budget and actual spending data points for each department are as follows: Sales. Budget equals $43,000; spending equals $50,000. Marketing. Budget equals $19,000; spending equals $39,000. Development. Budget equals $60,000; spending equals $42,000. Customer support. Budget equals $35,000; spending equals $31,000. Information technology. Budget equals $17,000; spending equals $26,000. Administration. Budget equals $10,000; spending equals $14,000.'\r\n    },\r\n\r\n    title: {\r\n        text: 'Budget vs spending',\r\n        x: -80\r\n    },\r\n\r\n    pane: {\r\n        size: '80%'\r\n    },\r\n\r\n    xAxis: {\r\n        categories: ['Sales', 'Marketing', 'Development', 'Customer Support',\r\n            'Information Technology', 'Administration'],\r\n        tickmarkPlacement: 'on',\r\n        lineWidth: 0\r\n    },\r\n\r\n    yAxis: {\r\n        gridLineInterpolation: 'polygon',\r\n        lineWidth: 0,\r\n        min: 0\r\n    },\r\n\r\n    tooltip: {\r\n        shared: true,\r\n        pointFormat: '<span style=\"color:{series.color}\">{series.name}: <b>${point.y:,.0f}</b><br/>'\r\n    },\r\n\r\n    legend: {\r\n        align: 'right',\r\n        verticalAlign: 'middle',\r\n        layout: 'vertical'\r\n    },\r\n\r\n    series: [{\r\n        name: 'Allocated Budget',\r\n        data: [43000, 19000, 60000, 35000, 17000, 10000],\r\n        pointPlacement: 'on'\r\n    }, {\r\n        name: 'Actual Spending',\r\n        data: [50000, 39000, 42000, 31000, 26000, 14000],\r\n        pointPlacement: 'on'\r\n    }],\r\n\r\n    responsive: {\r\n        rules: [{\r\n            condition: {\r\n                maxWidth: 500\r\n            },\r\n            chartOptions: {\r\n                legend: {\r\n                    align: 'center',\r\n                    verticalAlign: 'bottom',\r\n                    layout: 'horizontal'\r\n                },\r\n                pane: {\r\n                    size: '70%'\r\n                }\r\n            }\r\n        }]\r\n    }\r\n};\r\n\t\r\n  /*Generate chart*/\r\n\tvar chart = new Highcharts.Chart(options);\r\n  \r\n  /* improvements: next step would be to have a ng-selector in HTML and use record watcher to keep data up do date */\r\n\t\r\n};",
    "metadata": {
      "application": "Global",
      "name": "Create diagram using Highcharts library",
      "id": "create-diagram-using-highcharts-library",
      "active": true,
      "client_script": "api.controller=function($rootScope, $scope, $window, $interval, spUtil) {\r\n  /* widget controller */\r\n\tvar c = this;\r\n\r\n\t/** Chart source: https://www.highcharts.com/demo/polar-spider*/\r\n\tvar options = {\r\n        credits: {\r\n            enabled: false\r\n        },\r\n\r\n        chart: {\r\n            renderTo: 'container', // change chart_id if needed\r\n            polar: true,\r\n            type: 'line'\r\n        },\r\n\r\n    accessibility: {\r\n        description: 'A spiderweb chart compares the allocated budget against actual spending within an organization. The spider chart has six spokes. Each spoke represents one of the 6 departments within the organization: sales, marketing, development, customer support, information technology and administration. The chart is interactive, and each data point is displayed upon hovering. The chart clearly shows that 4 of the 6 departments have overspent their budget with Marketing responsible for the greatest overspend of $20,000. The allocated budget and actual spending data points for each department are as follows: Sales. Budget equals $43,000; spending equals $50,000. Marketing. Budget equals $19,000; spending equals $39,000. Development. Budget equals $60,000; spending equals $42,000. Customer support. Budget equals $35,000; spending equals $31,000. Information technology. Budget equals $17,000; spending equals $26,000. Administration. Budget equals $10,000; spending equals $14,000.'\r\n    },\r\n\r\n    title: {\r\n        text: 'Budget vs spending',\r\n        x: -80\r\n    },\r\n\r\n    pane: {\r\n        size: '80%'\r\n    },\r\n\r\n    xAxis: {\r\n        categories: ['Sales', 'Marketing', 'Development', 'Customer Support',\r\n            'Information Technology', 'Administration'],\r\n        tickmarkPlacement: 'on',\r\n        lineWidth: 0\r\n    },\r\n\r\n    yAxis: {\r\n        gridLineInterpolation: 'polygon',\r\n        lineWidth: 0,\r\n        min: 0\r\n    },\r\n\r\n    tooltip: {\r\n        shared: true,\r\n        pointFormat: '<span style=\"color:{series.color}\">{series.name}: <b>${point.y:,.0f}</b><br/>'\r\n    },\r\n\r\n    legend: {\r\n        align: 'right',\r\n        verticalAlign: 'middle',\r\n        layout: 'vertical'\r\n    },\r\n\r\n    series: [{\r\n        name: 'Allocated Budget',\r\n        data: [43000, 19000, 60000, 35000, 17000, 10000],\r\n        pointPlacement: 'on'\r\n    }, {\r\n        name: 'Actual Spending',\r\n        data: [50000, 39000, 42000, 31000, 26000, 14000],\r\n        pointPlacement: 'on'\r\n    }],\r\n\r\n    responsive: {\r\n        rules: [{\r\n            condition: {\r\n                maxWidth: 500\r\n            },\r\n            chartOptions: {\r\n                legend: {\r\n                    align: 'center',\r\n                    verticalAlign: 'bottom',\r\n                    layout: 'horizontal'\r\n                },\r\n                pane: {\r\n                    size: '70%'\r\n                }\r\n            }\r\n        }]\r\n    }\r\n};\r\n\t\r\n  /*Generate chart*/\r\n\tvar chart = new Highcharts.Chart(options);\r\n  \r\n  /* improvements: next step would be to have a ng-selector in HTML and use record watcher to keep data up do date */\r\n\t\r\n};",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Create diagram using Highcharts library",
        "scriptFiles": [
          "client.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Create%20diagram%20using%20Highcharts%20library",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/Create%20diagram%20using%20Highcharts%20library/client.js"
      }
    },
    "createdAt": "2025-09-21T07:29:48.920Z",
    "updatedAt": "2025-09-21T08:58:58.894Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 389,
    "type": "service_portal_widget",
    "name": "Create diagram using GoJS library",
    "description": "Creating productionProcess using gojs Introduction In this snippet you will create a custom process using a custom page and populating data using GoJS native library",
    "script": "// CSS from style.css\n#infobox {\r\n  width: 256px;\r\n  background: #757575;\r\n  color: #FFF;\r\n  padding: 20px;\r\n}\r\n\r\n#myDiagramDiv * {\r\n  outline: none;\r\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0); /* mobile webkit */\r\n}\n\n---\n\n// CLIENT from client.js\n// build GraphObject\r\nvar $ = go.GraphObject.make;  // for conciseness in defining templates\r\nmyDiagram = $(go.Diagram, \"myDiagramDiv\",  // create a Diagram for the DIV HTML element\r\n  {\r\n    maxSelectionCount: 1, // users can select only one part at a time\r\n    \"toolManager.hoverDelay\": 10,  // how quickly tooltips are shown\r\n    initialAutoScale: go.Diagram.Uniform,  // scale to show all of the contents\r\n    \"ChangedSelection\": onSelectionChanged, // view additional information\r\n  });\r\n\r\nfunction infoString(obj) {\r\n  var part = obj.part;\r\n  if (part instanceof go.Adornment) part = part.adornedPart;\r\n  var msg = \"\";\r\n  if (part instanceof go.Link) {\r\n    msg = \"\";\r\n  } else if (part instanceof go.Node) {\r\n    msg = part.data.text + \":\\n\\n\" + part.data.description;\r\n  }\r\n  return msg;\r\n}\r\n\r\nvar colors = {\r\n  \"red\": \"#be4b15\",\r\n  \"green\": \"#52ce60\",\r\n  \"blue\": \"#6ea5f8\",\r\n  \"lightred\": \"#fd8852\",\r\n  \"lightblue\": \"#afd4fe\",\r\n  \"lightgreen\": \"#b9e986\",\r\n  \"pink\": \"#faadc1\",\r\n  \"purple\": \"#d689ff\",\r\n  \"orange\": \"#fdb400\",\r\n};\r\n\r\n// A data binding conversion function. Given an name, return the Geometry.\r\n// If there is only a string, replace it with a Geometry object, which can be shared by multiple Shapes.\r\nfunction geoFunc(geoname) {\r\n  var geo = icons[geoname];\r\n  if (typeof geo === \"string\") {\r\n    geo = icons[geoname] = go.Geometry.parse(geo, true);\r\n  }\r\n  return geo;\r\n}\r\n\r\nmyDiagram.nodeTemplate =\r\n  $(go.Node, \"Spot\",\r\n    {\r\n      locationObjectName: 'main',\r\n      locationSpot: go.Spot.Center,\r\n      toolTip:\r\n        $(go.Adornment, \"Auto\",\r\n          $(go.Shape, { fill: \"#CCFFCC\" }),\r\n          $(go.TextBlock, { margin: 4, width: 140 }, //https://gojs.net/latest/intro/toolTips.html\r\n            new go.Binding(\"text\", \"\", infoString).ofObject()))\r\n      /*toolTip:\r\n        $(\"ToolTip\",\r\n          $(go.TextBlock, { margin: 4, width: 140 }, //https://gojs.net/latest/intro/toolTips.html\r\n            new go.Binding(\"text\", \"\", infoString).ofObject())\r\n        )*/\r\n    },\r\n    new go.Binding(\"location\", \"pos\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n    // The main element of the Spot panel is a vertical panel housing an optional icon,\r\n    // plus a rectangle that acts as the port\r\n    $(go.Panel, \"Vertical\",\r\n      $(go.Shape, {\r\n        name: 'icon',\r\n        width: 1, height: 1,\r\n        stroke: null, strokeWidth: 0,\r\n        fill: colors.blue\r\n      },\r\n        new go.Binding(\"fill\", \"color\", function (c) { return colors[c]; }),\r\n        new go.Binding(\"width\", \"iconWidth\"),\r\n        new go.Binding(\"height\", \"iconHeight\"),\r\n        new go.Binding(\"geometry\", \"icon\", geoFunc)),\r\n      $(go.Shape, {\r\n        name: 'main',\r\n        width: 40, height: 40,\r\n        margin: new go.Margin(-1, 0, 0, 0),\r\n        portId: \"\",\r\n        stroke: null, strokeWidth: 0,\r\n        fill: colors.blue\r\n      },\r\n        new go.Binding(\"fill\", \"color\", function (c) { return colors[c]; }),\r\n        new go.Binding(\"width\", \"portWidth\"),\r\n        new go.Binding(\"height\", \"portHeight\"))\r\n    ),\r\n\r\n    $(go.TextBlock, {\r\n      font: \"Bold 14px Lato, sans-serif\",\r\n      textAlign: \"center\",\r\n      margin: 3,\r\n      maxSize: new go.Size(100, NaN),\r\n      alignment: go.Spot.TopCenter,\r\n      alignmentFocus: go.Spot.BottomCenter\r\n    },\r\n      new go.Binding(\"text\"))\r\n\r\n  );\r\n\r\n// Some links need a custom to or from spot\r\nfunction spotConverter(dir) {\r\n  if (dir === \"left\") return go.Spot.LeftSide;\r\n  if (dir === \"right\") return go.Spot.RightSide;\r\n  if (dir === \"top\") return go.Spot.TopSide;\r\n  if (dir === \"bottom\") return go.Spot.BottomSide;\r\n  if (dir === \"rightsingle\") return go.Spot.Right;\r\n}\r\n\r\nmyDiagram.linkTemplate =\r\n  $(go.Link, {\r\n    toShortLength: -2,\r\n    fromShortLength: -2,\r\n    layerName: \"Background\",\r\n    routing: go.Link.Orthogonal,\r\n    corner: 15,\r\n    fromSpot: go.Spot.RightSide,\r\n    toSpot: go.Spot.LeftSide\r\n  },\r\n    // make sure links come in from the proper direction and go out appropriately\r\n    new go.Binding(\"fromSpot\", \"fromSpot\", function (d) { return spotConverter(d); }),\r\n    new go.Binding(\"toSpot\", \"toSpot\", function (d) { return spotConverter(d); }),\r\n\r\n    new go.Binding(\"points\").makeTwoWay(),\r\n    // mark each Shape to get the link geometry with isPanelMain: true\r\n    $(go.Shape, { isPanelMain: true, stroke: colors.lightblue, strokeWidth: 10 },\r\n      new go.Binding(\"stroke\", \"color\", function (c) { return colors[c]; })),\r\n    $(go.Shape, { isPanelMain: true, stroke: \"white\", strokeWidth: 3, name: \"PIPE\", strokeDashArray: [20, 40] })\r\n  );\r\n\r\n\r\n// build model\r\nvar model = $(go.GraphLinksModel);\r\n\r\nmodel.nodeDataArray =\r\n  [\r\n    {\r\n      key: 1,\r\n      pos: '-180 -57',\r\n      icon: 'natgas',\r\n      iconWidth: 30,\r\n      iconHeight: 60,\r\n      portHeight: 20,\r\n      text: 'Gas\\nCompanies',\r\n      description: 'Provides natural gas liquids (NGLs).',\r\n      caption: 'Gas Drilling Well',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/BarnettShaleDrilling-9323.jpg/256px-BarnettShaleDrilling-9323.jpg'\r\n    },\r\n    {\r\n      key: 2,\r\n      pos: '-180 100',\r\n      icon: 'oil',\r\n      iconWidth: 40,\r\n      iconHeight: 60,\r\n      portHeight: 20,\r\n      text: 'Oil\\nCompanies',\r\n      description: 'Provides associated petroleum gas (APG). This type of gas used to be released as waste from oil drilling, but is now commonly captured for processing.',\r\n      caption: 'Offshore oil well',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Oil_platform_P-51_%28Brazil%29.jpg/512px-Oil_platform_P-51_%28Brazil%29.jpg'\r\n    },\r\n    {\r\n      key: 3,\r\n      pos: '-80 100',\r\n      icon: 'gasprocessing',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      text: 'Gas Processing',\r\n      description: 'APG processing turns associated petrolium gas into natural gas liquids (NGLs) and stable natural gas (SGN).',\r\n      caption: 'Natural gas plant',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Solohiv_natural_gas_plant_-_fragment.jpg/256px-Solohiv_natural_gas_plant_-_fragment.jpg'\r\n    },\r\n    {\r\n      key: 4,\r\n      pos: '30 -50',\r\n      icon: 'fractionation',\r\n      iconWidth: 40,\r\n      iconHeight: 60,\r\n      text: 'Gas Fractionation',\r\n      description: 'Natural gas liquids are separated into individual hydrocarbons like propane and butanes, hydrocarbon mixtures (naphtha) and liquefied petroleum gases (LPGs).',\r\n      caption: 'Gas Plant',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/Gasblok.jpg/256px-Gasblok.jpg'\r\n    },\r\n    {\r\n      key: 5,\r\n      pos: '130 -50',\r\n      icon: 'pyrolysis',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      color: 'orange',\r\n      text: 'Pyrolysis (Cracking)',\r\n      description: 'Liquefied petroleum gases (LPGs) are transformed into Ethylene, propylene, benzene, and other by-products.',\r\n      caption: 'Pyrolysis plant',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/6/6c/Guelph.jpg'\r\n    },\r\n    {\r\n      key: 6,\r\n      pos: '330 -140',\r\n      icon: 'polymerization',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      portHeight: 12,\r\n      color: 'red',\r\n      text: 'Basic Polymers',\r\n      description: 'Ethylene and propylene (monomers) are processed into end products using various methods (polymerization).',\r\n      caption: 'Plastics engineering-Polymer products',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Plastics_engineering-Polymer_products.jpg/256px-Plastics_engineering-Polymer_products.jpg'\r\n    },\r\n    {\r\n      key: 7,\r\n      pos: '330 -55',\r\n      icon: 'polymerization',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      portHeight: 12,\r\n      color: 'green',\r\n      text: 'Plastics',\r\n      description: 'Polymerization produces PET, glycols, alcohols, expandable polystyrene, acrylates, BOPP-films and geosynthetics.',\r\n      caption: 'Lego Color Bricks',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Lego_Color_Bricks.jpg/256px-Lego_Color_Bricks.jpg'\r\n    },\r\n    {\r\n      key: 8,\r\n      pos: '330 40',\r\n      icon: 'polymerization',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      portHeight: 12,\r\n      color: 'lightgreen',\r\n      text: 'Synthetic Rubbers',\r\n      description: 'Polymerization produces commodity and specialty rubbers and thermoplastic elastomers.',\r\n      caption: 'Sheet of synthetic rubber coming off the rolling mill at the plant of Goodrich',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Sheet_of_synthetic_rubber_coming_off_the_rolling_mill_at_the_plant_of_Goodrich.jpg/512px-Sheet_of_synthetic_rubber_coming_off_the_rolling_mill_at_the_plant_of_Goodrich.jpg'\r\n    },\r\n    {\r\n      key: 9,\r\n      pos: '330 115',\r\n      color: 'orange',\r\n      portHeight: 22,\r\n      text: 'Intermediates',\r\n      description: 'Produced Ethylene, Propylene, Butenes, Benzene, and other by-products.',\r\n      caption: 'Propylene Containers',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/XVJ-12_Propylene_%288662385917%29.jpg/256px-XVJ-12_Propylene_%288662385917%29.jpg'\r\n    },\r\n    {\r\n      key: 10,\r\n      pos: '330 205',\r\n      icon: 'finishedgas',\r\n      iconWidth: 30,\r\n      iconHeight: 30,\r\n      portHeight: 15,\r\n      text: 'LPG, Naphtha,\\nMTBE',\r\n      description: 'Propane, butane, and other general purpose fuels and byproducts.',\r\n      caption: 'Liquid Petroleum Gas Truck',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/LPG_Truck.jpg/256px-LPG_Truck.jpg'\r\n    },\r\n    {\r\n      key: 11,\r\n      pos: '330 280',\r\n      icon: 'finishedgas',\r\n      iconWidth: 30,\r\n      iconHeight: 30,\r\n      portHeight: 15,\r\n      text: 'Natural Gas, NGLs',\r\n      description: 'Used for heating, cooking, and electricity generation',\r\n      caption: 'Natural Gas Flame',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/03/%22LPG_flame%22.JPG/512px-%22LPG_flame%22.JPG'\r\n    }\r\n  ];\r\n\r\nmodel.linkDataArray = [\r\n  {\r\n    from: 1,\r\n    to: 4\r\n  },\r\n  {\r\n    from: 2,\r\n    to: 3,\r\n    label: 'APG'\r\n  },\r\n  {\r\n    from: 3,\r\n    to: 4\r\n  },\r\n  {\r\n    from: 3,\r\n    to: 5,\r\n    toSpot: 'bottom'\r\n  },\r\n  {\r\n    from: 4,\r\n    to: 5\r\n  },\r\n  {\r\n    from: 4,\r\n    to: 5\r\n  },\r\n  {\r\n    from: 3,\r\n    to: 11,\r\n    fromSpot: 'bottom'\r\n  },\r\n  {\r\n    from: 4,\r\n    to: 10,\r\n    fromSpot: 'bottom'\r\n  },\r\n  {\r\n    from: 5,\r\n    to: 6,\r\n    fromSpot: 'rightsingle',\r\n    color: 'orange'\r\n  },\r\n  {\r\n    from: 5,\r\n    to: 7,\r\n    fromSpot: 'rightsingle',\r\n    color: 'orange'\r\n  },\r\n  {\r\n    from: 5,\r\n    to: 8,\r\n    fromSpot: 'rightsingle',\r\n    color: 'orange'\r\n  },\r\n  {\r\n    from: 5,\r\n    to: 9,\r\n    fromSpot: 'rightsingle',\r\n    color: 'orange'\r\n  }\r\n];\r\n\r\nmyDiagram.model = model;\r\n\r\nloop();  // animate some flow through the pipes\r\n\r\nvar opacity = 1;\r\nvar down = true;\r\nfunction loop() {\r\n  var diagram = myDiagram;\r\n  setTimeout(function () {\r\n    var oldskips = diagram.skipsUndoManager;\r\n    diagram.skipsUndoManager = true;\r\n    diagram.links.each(function (link) {\r\n      var shape = link.findObject(\"PIPE\");\r\n      var off = shape.strokeDashOffset - 3;\r\n      // animate (move) the stroke dash\r\n      shape.strokeDashOffset = (off <= 0) ? 60 : off;\r\n      // animte (strobe) the opacity:\r\n      if (down) opacity = opacity - 0.01;\r\n      else opacity = opacity + 0.003;\r\n      if (opacity <= 0) { down = !down; opacity = 0; }\r\n      if (opacity > 1) { down = !down; opacity = 1; }\r\n      shape.opacity = opacity;\r\n    });\r\n    diagram.skipsUndoManager = oldskips;\r\n    loop();\r\n  }, 60);\r\n}\r\n\r\nfunction onSelectionChanged(e) {\r\n  var node = e.diagram.selection.first();\r\n  if (!(node instanceof go.Node)) return;\r\n  var data = node.data;\r\n  var image = document.getElementById('Image');\r\n  var title = document.getElementById('Title');\r\n  var description = document.getElementById('Description');\r\n\r\n  if (data.imgsrc) {\r\n    image.src = data.imgsrc;\r\n    image.alt = data.caption;\r\n  } else {\r\n    image.src = \"\";\r\n    image.alt = \"\";\r\n  }\r\n  title.textContent = data.text;\r\n  description.textContent = data.description;\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Create diagram using GoJS library",
      "id": "create-diagram-using-gojs-library",
      "active": true,
      "css": "#infobox {\r\n  width: 256px;\r\n  background: #757575;\r\n  color: #FFF;\r\n  padding: 20px;\r\n}\r\n\r\n#myDiagramDiv * {\r\n  outline: none;\r\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0); /* mobile webkit */\r\n}",
      "client_script": "// build GraphObject\r\nvar $ = go.GraphObject.make;  // for conciseness in defining templates\r\nmyDiagram = $(go.Diagram, \"myDiagramDiv\",  // create a Diagram for the DIV HTML element\r\n  {\r\n    maxSelectionCount: 1, // users can select only one part at a time\r\n    \"toolManager.hoverDelay\": 10,  // how quickly tooltips are shown\r\n    initialAutoScale: go.Diagram.Uniform,  // scale to show all of the contents\r\n    \"ChangedSelection\": onSelectionChanged, // view additional information\r\n  });\r\n\r\nfunction infoString(obj) {\r\n  var part = obj.part;\r\n  if (part instanceof go.Adornment) part = part.adornedPart;\r\n  var msg = \"\";\r\n  if (part instanceof go.Link) {\r\n    msg = \"\";\r\n  } else if (part instanceof go.Node) {\r\n    msg = part.data.text + \":\\n\\n\" + part.data.description;\r\n  }\r\n  return msg;\r\n}\r\n\r\nvar colors = {\r\n  \"red\": \"#be4b15\",\r\n  \"green\": \"#52ce60\",\r\n  \"blue\": \"#6ea5f8\",\r\n  \"lightred\": \"#fd8852\",\r\n  \"lightblue\": \"#afd4fe\",\r\n  \"lightgreen\": \"#b9e986\",\r\n  \"pink\": \"#faadc1\",\r\n  \"purple\": \"#d689ff\",\r\n  \"orange\": \"#fdb400\",\r\n};\r\n\r\n// A data binding conversion function. Given an name, return the Geometry.\r\n// If there is only a string, replace it with a Geometry object, which can be shared by multiple Shapes.\r\nfunction geoFunc(geoname) {\r\n  var geo = icons[geoname];\r\n  if (typeof geo === \"string\") {\r\n    geo = icons[geoname] = go.Geometry.parse(geo, true);\r\n  }\r\n  return geo;\r\n}\r\n\r\nmyDiagram.nodeTemplate =\r\n  $(go.Node, \"Spot\",\r\n    {\r\n      locationObjectName: 'main',\r\n      locationSpot: go.Spot.Center,\r\n      toolTip:\r\n        $(go.Adornment, \"Auto\",\r\n          $(go.Shape, { fill: \"#CCFFCC\" }),\r\n          $(go.TextBlock, { margin: 4, width: 140 }, //https://gojs.net/latest/intro/toolTips.html\r\n            new go.Binding(\"text\", \"\", infoString).ofObject()))\r\n      /*toolTip:\r\n        $(\"ToolTip\",\r\n          $(go.TextBlock, { margin: 4, width: 140 }, //https://gojs.net/latest/intro/toolTips.html\r\n            new go.Binding(\"text\", \"\", infoString).ofObject())\r\n        )*/\r\n    },\r\n    new go.Binding(\"location\", \"pos\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n    // The main element of the Spot panel is a vertical panel housing an optional icon,\r\n    // plus a rectangle that acts as the port\r\n    $(go.Panel, \"Vertical\",\r\n      $(go.Shape, {\r\n        name: 'icon',\r\n        width: 1, height: 1,\r\n        stroke: null, strokeWidth: 0,\r\n        fill: colors.blue\r\n      },\r\n        new go.Binding(\"fill\", \"color\", function (c) { return colors[c]; }),\r\n        new go.Binding(\"width\", \"iconWidth\"),\r\n        new go.Binding(\"height\", \"iconHeight\"),\r\n        new go.Binding(\"geometry\", \"icon\", geoFunc)),\r\n      $(go.Shape, {\r\n        name: 'main',\r\n        width: 40, height: 40,\r\n        margin: new go.Margin(-1, 0, 0, 0),\r\n        portId: \"\",\r\n        stroke: null, strokeWidth: 0,\r\n        fill: colors.blue\r\n      },\r\n        new go.Binding(\"fill\", \"color\", function (c) { return colors[c]; }),\r\n        new go.Binding(\"width\", \"portWidth\"),\r\n        new go.Binding(\"height\", \"portHeight\"))\r\n    ),\r\n\r\n    $(go.TextBlock, {\r\n      font: \"Bold 14px Lato, sans-serif\",\r\n      textAlign: \"center\",\r\n      margin: 3,\r\n      maxSize: new go.Size(100, NaN),\r\n      alignment: go.Spot.TopCenter,\r\n      alignmentFocus: go.Spot.BottomCenter\r\n    },\r\n      new go.Binding(\"text\"))\r\n\r\n  );\r\n\r\n// Some links need a custom to or from spot\r\nfunction spotConverter(dir) {\r\n  if (dir === \"left\") return go.Spot.LeftSide;\r\n  if (dir === \"right\") return go.Spot.RightSide;\r\n  if (dir === \"top\") return go.Spot.TopSide;\r\n  if (dir === \"bottom\") return go.Spot.BottomSide;\r\n  if (dir === \"rightsingle\") return go.Spot.Right;\r\n}\r\n\r\nmyDiagram.linkTemplate =\r\n  $(go.Link, {\r\n    toShortLength: -2,\r\n    fromShortLength: -2,\r\n    layerName: \"Background\",\r\n    routing: go.Link.Orthogonal,\r\n    corner: 15,\r\n    fromSpot: go.Spot.RightSide,\r\n    toSpot: go.Spot.LeftSide\r\n  },\r\n    // make sure links come in from the proper direction and go out appropriately\r\n    new go.Binding(\"fromSpot\", \"fromSpot\", function (d) { return spotConverter(d); }),\r\n    new go.Binding(\"toSpot\", \"toSpot\", function (d) { return spotConverter(d); }),\r\n\r\n    new go.Binding(\"points\").makeTwoWay(),\r\n    // mark each Shape to get the link geometry with isPanelMain: true\r\n    $(go.Shape, { isPanelMain: true, stroke: colors.lightblue, strokeWidth: 10 },\r\n      new go.Binding(\"stroke\", \"color\", function (c) { return colors[c]; })),\r\n    $(go.Shape, { isPanelMain: true, stroke: \"white\", strokeWidth: 3, name: \"PIPE\", strokeDashArray: [20, 40] })\r\n  );\r\n\r\n\r\n// build model\r\nvar model = $(go.GraphLinksModel);\r\n\r\nmodel.nodeDataArray =\r\n  [\r\n    {\r\n      key: 1,\r\n      pos: '-180 -57',\r\n      icon: 'natgas',\r\n      iconWidth: 30,\r\n      iconHeight: 60,\r\n      portHeight: 20,\r\n      text: 'Gas\\nCompanies',\r\n      description: 'Provides natural gas liquids (NGLs).',\r\n      caption: 'Gas Drilling Well',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/BarnettShaleDrilling-9323.jpg/256px-BarnettShaleDrilling-9323.jpg'\r\n    },\r\n    {\r\n      key: 2,\r\n      pos: '-180 100',\r\n      icon: 'oil',\r\n      iconWidth: 40,\r\n      iconHeight: 60,\r\n      portHeight: 20,\r\n      text: 'Oil\\nCompanies',\r\n      description: 'Provides associated petroleum gas (APG). This type of gas used to be released as waste from oil drilling, but is now commonly captured for processing.',\r\n      caption: 'Offshore oil well',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Oil_platform_P-51_%28Brazil%29.jpg/512px-Oil_platform_P-51_%28Brazil%29.jpg'\r\n    },\r\n    {\r\n      key: 3,\r\n      pos: '-80 100',\r\n      icon: 'gasprocessing',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      text: 'Gas Processing',\r\n      description: 'APG processing turns associated petrolium gas into natural gas liquids (NGLs) and stable natural gas (SGN).',\r\n      caption: 'Natural gas plant',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Solohiv_natural_gas_plant_-_fragment.jpg/256px-Solohiv_natural_gas_plant_-_fragment.jpg'\r\n    },\r\n    {\r\n      key: 4,\r\n      pos: '30 -50',\r\n      icon: 'fractionation',\r\n      iconWidth: 40,\r\n      iconHeight: 60,\r\n      text: 'Gas Fractionation',\r\n      description: 'Natural gas liquids are separated into individual hydrocarbons like propane and butanes, hydrocarbon mixtures (naphtha) and liquefied petroleum gases (LPGs).',\r\n      caption: 'Gas Plant',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/Gasblok.jpg/256px-Gasblok.jpg'\r\n    },\r\n    {\r\n      key: 5,\r\n      pos: '130 -50',\r\n      icon: 'pyrolysis',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      color: 'orange',\r\n      text: 'Pyrolysis (Cracking)',\r\n      description: 'Liquefied petroleum gases (LPGs) are transformed into Ethylene, propylene, benzene, and other by-products.',\r\n      caption: 'Pyrolysis plant',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/6/6c/Guelph.jpg'\r\n    },\r\n    {\r\n      key: 6,\r\n      pos: '330 -140',\r\n      icon: 'polymerization',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      portHeight: 12,\r\n      color: 'red',\r\n      text: 'Basic Polymers',\r\n      description: 'Ethylene and propylene (monomers) are processed into end products using various methods (polymerization).',\r\n      caption: 'Plastics engineering-Polymer products',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Plastics_engineering-Polymer_products.jpg/256px-Plastics_engineering-Polymer_products.jpg'\r\n    },\r\n    {\r\n      key: 7,\r\n      pos: '330 -55',\r\n      icon: 'polymerization',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      portHeight: 12,\r\n      color: 'green',\r\n      text: 'Plastics',\r\n      description: 'Polymerization produces PET, glycols, alcohols, expandable polystyrene, acrylates, BOPP-films and geosynthetics.',\r\n      caption: 'Lego Color Bricks',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Lego_Color_Bricks.jpg/256px-Lego_Color_Bricks.jpg'\r\n    },\r\n    {\r\n      key: 8,\r\n      pos: '330 40',\r\n      icon: 'polymerization',\r\n      iconWidth: 40,\r\n      iconHeight: 40,\r\n      portHeight: 12,\r\n      color: 'lightgreen',\r\n      text: 'Synthetic Rubbers',\r\n      description: 'Polymerization produces commodity and specialty rubbers and thermoplastic elastomers.',\r\n      caption: 'Sheet of synthetic rubber coming off the rolling mill at the plant of Goodrich',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Sheet_of_synthetic_rubber_coming_off_the_rolling_mill_at_the_plant_of_Goodrich.jpg/512px-Sheet_of_synthetic_rubber_coming_off_the_rolling_mill_at_the_plant_of_Goodrich.jpg'\r\n    },\r\n    {\r\n      key: 9,\r\n      pos: '330 115',\r\n      color: 'orange',\r\n      portHeight: 22,\r\n      text: 'Intermediates',\r\n      description: 'Produced Ethylene, Propylene, Butenes, Benzene, and other by-products.',\r\n      caption: 'Propylene Containers',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/XVJ-12_Propylene_%288662385917%29.jpg/256px-XVJ-12_Propylene_%288662385917%29.jpg'\r\n    },\r\n    {\r\n      key: 10,\r\n      pos: '330 205',\r\n      icon: 'finishedgas',\r\n      iconWidth: 30,\r\n      iconHeight: 30,\r\n      portHeight: 15,\r\n      text: 'LPG, Naphtha,\\nMTBE',\r\n      description: 'Propane, butane, and other general purpose fuels and byproducts.',\r\n      caption: 'Liquid Petroleum Gas Truck',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/LPG_Truck.jpg/256px-LPG_Truck.jpg'\r\n    },\r\n    {\r\n      key: 11,\r\n      pos: '330 280',\r\n      icon: 'finishedgas',\r\n      iconWidth: 30,\r\n      iconHeight: 30,\r\n      portHeight: 15,\r\n      text: 'Natural Gas, NGLs',\r\n      description: 'Used for heating, cooking, and electricity generation',\r\n      caption: 'Natural Gas Flame',\r\n      imgsrc: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/03/%22LPG_flame%22.JPG/512px-%22LPG_flame%22.JPG'\r\n    }\r\n  ];\r\n\r\nmodel.linkDataArray = [\r\n  {\r\n    from: 1,\r\n    to: 4\r\n  },\r\n  {\r\n    from: 2,\r\n    to: 3,\r\n    label: 'APG'\r\n  },\r\n  {\r\n    from: 3,\r\n    to: 4\r\n  },\r\n  {\r\n    from: 3,\r\n    to: 5,\r\n    toSpot: 'bottom'\r\n  },\r\n  {\r\n    from: 4,\r\n    to: 5\r\n  },\r\n  {\r\n    from: 4,\r\n    to: 5\r\n  },\r\n  {\r\n    from: 3,\r\n    to: 11,\r\n    fromSpot: 'bottom'\r\n  },\r\n  {\r\n    from: 4,\r\n    to: 10,\r\n    fromSpot: 'bottom'\r\n  },\r\n  {\r\n    from: 5,\r\n    to: 6,\r\n    fromSpot: 'rightsingle',\r\n    color: 'orange'\r\n  },\r\n  {\r\n    from: 5,\r\n    to: 7,\r\n    fromSpot: 'rightsingle',\r\n    color: 'orange'\r\n  },\r\n  {\r\n    from: 5,\r\n    to: 8,\r\n    fromSpot: 'rightsingle',\r\n    color: 'orange'\r\n  },\r\n  {\r\n    from: 5,\r\n    to: 9,\r\n    fromSpot: 'rightsingle',\r\n    color: 'orange'\r\n  }\r\n];\r\n\r\nmyDiagram.model = model;\r\n\r\nloop();  // animate some flow through the pipes\r\n\r\nvar opacity = 1;\r\nvar down = true;\r\nfunction loop() {\r\n  var diagram = myDiagram;\r\n  setTimeout(function () {\r\n    var oldskips = diagram.skipsUndoManager;\r\n    diagram.skipsUndoManager = true;\r\n    diagram.links.each(function (link) {\r\n      var shape = link.findObject(\"PIPE\");\r\n      var off = shape.strokeDashOffset - 3;\r\n      // animate (move) the stroke dash\r\n      shape.strokeDashOffset = (off <= 0) ? 60 : off;\r\n      // animte (strobe) the opacity:\r\n      if (down) opacity = opacity - 0.01;\r\n      else opacity = opacity + 0.003;\r\n      if (opacity <= 0) { down = !down; opacity = 0; }\r\n      if (opacity > 1) { down = !down; opacity = 1; }\r\n      shape.opacity = opacity;\r\n    });\r\n    diagram.skipsUndoManager = oldskips;\r\n    loop();\r\n  }, 60);\r\n}\r\n\r\nfunction onSelectionChanged(e) {\r\n  var node = e.diagram.selection.first();\r\n  if (!(node instanceof go.Node)) return;\r\n  var data = node.data;\r\n  var image = document.getElementById('Image');\r\n  var title = document.getElementById('Title');\r\n  var description = document.getElementById('Description');\r\n\r\n  if (data.imgsrc) {\r\n    image.src = data.imgsrc;\r\n    image.alt = data.caption;\r\n  } else {\r\n    image.src = \"\";\r\n    image.alt = \"\";\r\n  }\r\n  title.textContent = data.text;\r\n  description.textContent = data.description;\r\n\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Create diagram using GoJS library",
        "scriptFiles": [
          "style.css",
          "client.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Create%20diagram%20using%20GoJS%20library"
      }
    },
    "createdAt": "2025-09-21T07:29:48.915Z",
    "updatedAt": "2025-09-21T08:58:58.890Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 388,
    "type": "service_portal_widget",
    "name": "Configurable Card Widget",
    "description": "Configurable Card Widget This widget can be used to show card-based pieces of information and can  easily be modified in its content and style using widget options.",
    "script": "// HTML from HTML Template.html\n<div class=\"card\" ng-style=\"{'background': c.options.background_color}\">\r\n  <span ng-if=\"::c.options.feature\" class=\"tag\" ng-style=\"{'background-color': c.options.feature_color}\" ng-class=\"{'position-absolute': c.options.background_image && c.options.background_image != ''}\">{{::c.options.feature}}</span>\r\n  <div ng-if=\"::c.options.background_image\" class=\"bg\" ng-style=\"{'background-image': c.image}\"></div>\r\n  <h2 class=\"heading\">\r\n   {{c.options.heading}}\r\n  </h2>\r\n  <p class=\"description\">\r\n    {{c.options.description}}\r\n  </p>\r\n  <div>\r\n    <a ng-href=\"{{c.options.redirect_url}}\" class=\"button\" ng-style=\"{'border-color': c.options.feature_color, 'background-color': c.options.feature_color}\">\r\n      Learn More &nbsp;&nbsp;<span class=\"glyphicon glyphicon-menu-right\" aria-hidden=\"true\"></span>\r\n    </a>\r\n  </div>\r\n</div>\n\n---\n\n// CSS from CSS-SCSS.scss\n$secondary-color: #000000;\r\n$text-color;\r\n$text-muted;\r\n\r\n.card{\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  box-shadow: 0 0 1rem #e5e5e5;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.tag{  \r\n  background-color: $secondary-color;\r\n  color: #ffffff;\r\n  padding: 2px 8px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.heading{\r\n  margin-top: 1.1rem;\r\n  margin-bottom: 1.1rem;\r\n  color:$text-color;\r\n}\r\n\r\n.description{\r\n  color: $text-muted;\r\n}\r\n\r\n.button{\r\n  color: #ffffff;\r\n  background-color: #ffffff;\r\n  padding: 0.5em 1em;\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  border: 2px solid $secondary-color;\r\n  margin-top: 10px;\r\n  box-shadow: inset 0 0 0 0 #ffffff;\r\n  transition: ease-out 0.4s;\r\n  cursor: pointer;\r\n\r\n  &:hover{\r\n    background-color: #ffffff !important;\r\n    color: #000000;\r\n    box-shadow: inset 400px 0 0 0 #ffffff;\r\n  }\r\n}\r\n\r\n.w-100{\r\n  width: 100%;\r\n}\r\n\r\n.bg{\r\n  height: 20rem;\r\n  background: #ffffff;\r\n  border-radius: 10px;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.position-absolute{\r\n position: absolute;\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Configurable Card Widget",
      "id": "configurable-card-widget",
      "active": true,
      "html_template": "<div class=\"card\" ng-style=\"{'background': c.options.background_color}\">\r\n  <span ng-if=\"::c.options.feature\" class=\"tag\" ng-style=\"{'background-color': c.options.feature_color}\" ng-class=\"{'position-absolute': c.options.background_image && c.options.background_image != ''}\">{{::c.options.feature}}</span>\r\n  <div ng-if=\"::c.options.background_image\" class=\"bg\" ng-style=\"{'background-image': c.image}\"></div>\r\n  <h2 class=\"heading\">\r\n   {{c.options.heading}}\r\n  </h2>\r\n  <p class=\"description\">\r\n    {{c.options.description}}\r\n  </p>\r\n  <div>\r\n    <a ng-href=\"{{c.options.redirect_url}}\" class=\"button\" ng-style=\"{'border-color': c.options.feature_color, 'background-color': c.options.feature_color}\">\r\n      Learn More &nbsp;&nbsp;<span class=\"glyphicon glyphicon-menu-right\" aria-hidden=\"true\"></span>\r\n    </a>\r\n  </div>\r\n</div>",
      "css": "$secondary-color: #000000;\r\n$text-color;\r\n$text-muted;\r\n\r\n.card{\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  box-shadow: 0 0 1rem #e5e5e5;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.tag{  \r\n  background-color: $secondary-color;\r\n  color: #ffffff;\r\n  padding: 2px 8px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.heading{\r\n  margin-top: 1.1rem;\r\n  margin-bottom: 1.1rem;\r\n  color:$text-color;\r\n}\r\n\r\n.description{\r\n  color: $text-muted;\r\n}\r\n\r\n.button{\r\n  color: #ffffff;\r\n  background-color: #ffffff;\r\n  padding: 0.5em 1em;\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  border: 2px solid $secondary-color;\r\n  margin-top: 10px;\r\n  box-shadow: inset 0 0 0 0 #ffffff;\r\n  transition: ease-out 0.4s;\r\n  cursor: pointer;\r\n\r\n  &:hover{\r\n    background-color: #ffffff !important;\r\n    color: #000000;\r\n    box-shadow: inset 400px 0 0 0 #ffffff;\r\n  }\r\n}\r\n\r\n.w-100{\r\n  width: 100%;\r\n}\r\n\r\n.bg{\r\n  height: 20rem;\r\n  background: #ffffff;\r\n  border-radius: 10px;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.position-absolute{\r\n position: absolute;\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Configurable Card Widget",
        "scriptFiles": [
          "HTML Template.html",
          "CSS-SCSS.scss"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Configurable%20Card%20Widget"
      }
    },
    "createdAt": "2025-09-21T07:29:48.910Z",
    "updatedAt": "2025-09-21T08:58:58.885Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 387,
    "type": "service_portal_widget",
    "name": "Clickable SVG Image",
    "description": "Can clickable svg image main used echarts.js step1",
    "script": "// HTML from html.html\n<div style=\"width:100%;margin:0 auto;\">\r\n    <!-- your widget template -->\r\n    <div id=\"main\" style=\"width:100%;height:90vh;\"></div>\r\n</div>\n\n---\n\n// CLIENT from client.js\napi.controller = function() {\r\n\t/* widget controller */\r\n\tvar c = this;\r\n\r\n\tvar chartDom = document.getElementById('main');\r\n\tvar myChart = echarts.init(chartDom);\r\n\tvar option = {};\r\n\r\n\r\n\t$.get('example.svg', function(svg) {\r\n\r\n\t\techarts.registerMap('demo', {\r\n\t\t\tsvg: svg\r\n\t\t});\r\n\r\n\t\tvar takenSeatNames = ['B2-001','B2-020','B2-003','B2-009','B2-031'];\r\n\r\n\t\toption = {\r\n\t\t\ttooltip: {},\r\n\t\t\tgeo: {\r\n\t\t\t\tmap: 'demo',\r\n\t\t\t\troam: true,\r\n\t\t\t\tselectedMode: 'single',\r\n\t\t\t\tlayoutCenter: ['50%', '50%'],\r\n\t\t\t\tlayoutSize: '95%',\r\n\t\t\t\ttooltip: {\r\n\t\t\t\t\tshow: true\r\n\t\t\t\t},\r\n\t\t\t\titemStyle: {\r\n\t\t\t\t\tcolor: '#fff'\r\n\t\t\t\t},\r\n\t\t\t\temphasis: {\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\tcolor: null,\r\n\t\t\t\t\t\tborderColor: 'green',\r\n\t\t\t\t\t\tborderWidth: 2\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\tshow: false\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tselect: {\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t//color: '#fff'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\tshow: false,\r\n\t\t\t\t\t\ttextBorderColor: '#fff',\r\n\t\t\t\t\t\ttextBorderWidth: 2\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tregions: makeTakenRegions(takenSeatNames)\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction makeTakenRegions(takenSeatNames) {\r\n\t\t\tvar regions = [];\r\n\t\t\tfor (var i = 0; i < takenSeatNames.length; i++) {\r\n\t\t\t\tregions.push({\r\n\t\t\t\t\tname: takenSeatNames[i],\r\n\t\t\t\t\tsilent: true,\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\tcolor: '#bf0e08'\r\n\t\t\t\t\t},\r\n\t\t\t\t\temphasis: {\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tborderColor: '#aaa',\r\n\t\t\t\t\t\t\tborderWidth: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tselect: {\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\t//color: '#bf0e08'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn regions;\r\n\t\t}\r\n\r\n\t\tmyChart.setOption(option);\r\n\r\n\t\t// Get selected\r\n\t\tmyChart.on('geoselectchanged', function(params) {\r\n\t\t\tvar selectedNames = params.allSelected[0].name.slice();\r\n\r\n\t\t\t//Remove taken\r\n\t\t\tfor (var i = selectedNames.length - 1; i >= 0; i--) {\r\n\t\t\t\tif (takenSeatNames.indexOf(selectedNames[i]) >= 0) {\r\n\t\t\t\t\tselectedNames.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t});\r\n};",
    "metadata": {
      "application": "Global",
      "name": "Clickable SVG Image",
      "id": "clickable-svg-image",
      "active": true,
      "html_template": "<div style=\"width:100%;margin:0 auto;\">\r\n    <!-- your widget template -->\r\n    <div id=\"main\" style=\"width:100%;height:90vh;\"></div>\r\n</div>",
      "client_script": "api.controller = function() {\r\n\t/* widget controller */\r\n\tvar c = this;\r\n\r\n\tvar chartDom = document.getElementById('main');\r\n\tvar myChart = echarts.init(chartDom);\r\n\tvar option = {};\r\n\r\n\r\n\t$.get('example.svg', function(svg) {\r\n\r\n\t\techarts.registerMap('demo', {\r\n\t\t\tsvg: svg\r\n\t\t});\r\n\r\n\t\tvar takenSeatNames = ['B2-001','B2-020','B2-003','B2-009','B2-031'];\r\n\r\n\t\toption = {\r\n\t\t\ttooltip: {},\r\n\t\t\tgeo: {\r\n\t\t\t\tmap: 'demo',\r\n\t\t\t\troam: true,\r\n\t\t\t\tselectedMode: 'single',\r\n\t\t\t\tlayoutCenter: ['50%', '50%'],\r\n\t\t\t\tlayoutSize: '95%',\r\n\t\t\t\ttooltip: {\r\n\t\t\t\t\tshow: true\r\n\t\t\t\t},\r\n\t\t\t\titemStyle: {\r\n\t\t\t\t\tcolor: '#fff'\r\n\t\t\t\t},\r\n\t\t\t\temphasis: {\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\tcolor: null,\r\n\t\t\t\t\t\tborderColor: 'green',\r\n\t\t\t\t\t\tborderWidth: 2\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\tshow: false\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tselect: {\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t//color: '#fff'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\tshow: false,\r\n\t\t\t\t\t\ttextBorderColor: '#fff',\r\n\t\t\t\t\t\ttextBorderWidth: 2\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tregions: makeTakenRegions(takenSeatNames)\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction makeTakenRegions(takenSeatNames) {\r\n\t\t\tvar regions = [];\r\n\t\t\tfor (var i = 0; i < takenSeatNames.length; i++) {\r\n\t\t\t\tregions.push({\r\n\t\t\t\t\tname: takenSeatNames[i],\r\n\t\t\t\t\tsilent: true,\r\n\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\tcolor: '#bf0e08'\r\n\t\t\t\t\t},\r\n\t\t\t\t\temphasis: {\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\tborderColor: '#aaa',\r\n\t\t\t\t\t\t\tborderWidth: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tselect: {\r\n\t\t\t\t\t\titemStyle: {\r\n\t\t\t\t\t\t\t//color: '#bf0e08'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn regions;\r\n\t\t}\r\n\r\n\t\tmyChart.setOption(option);\r\n\r\n\t\t// Get selected\r\n\t\tmyChart.on('geoselectchanged', function(params) {\r\n\t\t\tvar selectedNames = params.allSelected[0].name.slice();\r\n\r\n\t\t\t//Remove taken\r\n\t\t\tfor (var i = selectedNames.length - 1; i >= 0; i--) {\r\n\t\t\t\tif (takenSeatNames.indexOf(selectedNames[i]) >= 0) {\r\n\t\t\t\t\tselectedNames.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t});\r\n};",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Clickable SVG Image",
        "scriptFiles": [
          "html.html",
          "client.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Clickable%20SVG%20Image"
      }
    },
    "createdAt": "2025-09-21T07:29:48.906Z",
    "updatedAt": "2025-09-21T08:58:58.881Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 386,
    "type": "service_portal_widget",
    "name": "Change Notification Preferences",
    "description": "Notification Preference by Category widget Portal Widget that shows user notification preferences for a certain category (changed within the options). User can switch his notification on or off. The notification description gets displayed under the notification name.",
    "script": "// HTML from html.html\n<div class=\"notification-content\">\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h2 class=\"panel-title\">\r\n          <i class=\"fa fa-envelope-o m-r-sm\"></i>${Notifications}\r\n        </h2>\r\n      </div>\r\n      <div class=\"body padder-xs\">\r\n        <div class=\"list-group\">\r\n          <div class=\"list-group-item\" ng-repeat='notification in c.notificationArray'>\r\n            <label><strong>{{notification.name}}</strong></label>\r\n            <div class=\"input-switch\">\r\n              <input aria-labelledby=\"switch_label_{{notification.notification.sys_id}}\" \r\n                 id=\"switch{{notification.notification.sys_id}}\" \r\n                 type=\"checkbox\" \r\n                 name=\"switch{{notification.notification.sys_id}}\" \r\n                 data-ng-model=\"notification.records[0].logical_active\" \r\n                 data-ng-change=\"c.toggleNotification(notification.records[0].logical_active,notification.records[0].channel.sys_id,notification.notification.sys_id,notification.records[0].sys_id,notification.records[0].table)\" \r\n                 data-ng-disabled=\"notification.records[0].readonly\" >\r\n          <label aria-hidden=\"true\" class=\"switch\" for=\"switch{{notification.notification.sys_id}}\">&#8203;</label>\r\n            </div>\r\n            <div class='description' ng-bind-html='::notification.description'>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\n\n---\n\n// CSS from css.css\n.list-group-item {\r\n\tborder: none;\r\n  \r\n\t.btn-link {\r\n\t  padding-left: 0;\r\n\t  padding-right: 0;\r\n\t}\r\n  }\r\n  .input-switch{\r\n\tdisplay: inline-block;\r\n\tfloat: right;\n\n---\n\n// CLIENT from client.js\napi.controller = function($http) {\r\n    /* widget controller */\r\n    var c = this;\r\n    var baseApiUrl = '/api/now/v1/notification/preference';\r\n    c.enableNotifications = true;\r\n    // initial call to get all the notifications\r\n    $http.get(baseApiUrl + '?category=' + c.data.category + '&sysparm_limit=100&sysparm_offset=0')\r\n        .then(function(response) {\r\n            if (response.data && response.statusText == 'OK') {\r\n              var tempNotificationArray = response.data.result.preferences;\r\n\t\t\t\t\t\t\tc.notificationArray = tempNotificationArray.map(function(obj){\r\n\t\t\t\t\t\t\t\t$http.get('/api/now/table/sysevent_email_action?sysparm_query=sys_id='+obj.notification.sys_id.toString()+'&sysparm_fields=description&sysparm_limit=1')\r\n\t\t\t\t\t\t\t\t.then(function(resp){\r\n\t\t\t\t\t\t\t\t\tobj.description = resp.data.result[0].description;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\treturn obj;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n            }\r\n        });\r\n    c.toggleNotification = function(active, channel_id, notification_id, sys_id, table) {\r\n        var data = {};\r\n        data.active = active;\r\n        data.channel_id = channel_id;\r\n        data.notification_id = notification_id;\r\n        data.sys_id = (sys_id != '') ? sys_id : null;\r\n        data.table = table;\r\n        $http.post(baseApiUrl, {\r\n                preference: data\r\n            })\r\n            .then(function(response) {\r\n            });\r\n    };\r\n};\n\n---\n\n// SERVER from server.js\n(function() {\r\n\tdata.category = options.categoryid || 'b69d02137f232200ee2e108c3ffa9142'; // sys id of the category\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "Change Notification Preferences",
      "id": "change-notification-preferences",
      "active": true,
      "html_template": "<div class=\"notification-content\">\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h2 class=\"panel-title\">\r\n          <i class=\"fa fa-envelope-o m-r-sm\"></i>${Notifications}\r\n        </h2>\r\n      </div>\r\n      <div class=\"body padder-xs\">\r\n        <div class=\"list-group\">\r\n          <div class=\"list-group-item\" ng-repeat='notification in c.notificationArray'>\r\n            <label><strong>{{notification.name}}</strong></label>\r\n            <div class=\"input-switch\">\r\n              <input aria-labelledby=\"switch_label_{{notification.notification.sys_id}}\" \r\n                 id=\"switch{{notification.notification.sys_id}}\" \r\n                 type=\"checkbox\" \r\n                 name=\"switch{{notification.notification.sys_id}}\" \r\n                 data-ng-model=\"notification.records[0].logical_active\" \r\n                 data-ng-change=\"c.toggleNotification(notification.records[0].logical_active,notification.records[0].channel.sys_id,notification.notification.sys_id,notification.records[0].sys_id,notification.records[0].table)\" \r\n                 data-ng-disabled=\"notification.records[0].readonly\" >\r\n          <label aria-hidden=\"true\" class=\"switch\" for=\"switch{{notification.notification.sys_id}}\">&#8203;</label>\r\n            </div>\r\n            <div class='description' ng-bind-html='::notification.description'>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>",
      "css": ".list-group-item {\r\n\tborder: none;\r\n  \r\n\t.btn-link {\r\n\t  padding-left: 0;\r\n\t  padding-right: 0;\r\n\t}\r\n  }\r\n  .input-switch{\r\n\tdisplay: inline-block;\r\n\tfloat: right;",
      "client_script": "api.controller = function($http) {\r\n    /* widget controller */\r\n    var c = this;\r\n    var baseApiUrl = '/api/now/v1/notification/preference';\r\n    c.enableNotifications = true;\r\n    // initial call to get all the notifications\r\n    $http.get(baseApiUrl + '?category=' + c.data.category + '&sysparm_limit=100&sysparm_offset=0')\r\n        .then(function(response) {\r\n            if (response.data && response.statusText == 'OK') {\r\n              var tempNotificationArray = response.data.result.preferences;\r\n\t\t\t\t\t\t\tc.notificationArray = tempNotificationArray.map(function(obj){\r\n\t\t\t\t\t\t\t\t$http.get('/api/now/table/sysevent_email_action?sysparm_query=sys_id='+obj.notification.sys_id.toString()+'&sysparm_fields=description&sysparm_limit=1')\r\n\t\t\t\t\t\t\t\t.then(function(resp){\r\n\t\t\t\t\t\t\t\t\tobj.description = resp.data.result[0].description;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\treturn obj;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n            }\r\n        });\r\n    c.toggleNotification = function(active, channel_id, notification_id, sys_id, table) {\r\n        var data = {};\r\n        data.active = active;\r\n        data.channel_id = channel_id;\r\n        data.notification_id = notification_id;\r\n        data.sys_id = (sys_id != '') ? sys_id : null;\r\n        data.table = table;\r\n        $http.post(baseApiUrl, {\r\n                preference: data\r\n            })\r\n            .then(function(response) {\r\n            });\r\n    };\r\n};",
      "server_script": "(function() {\r\n\tdata.category = options.categoryid || 'b69d02137f232200ee2e108c3ffa9142'; // sys id of the category\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Change Notification Preferences",
        "scriptFiles": [
          "html.html",
          "css.css",
          "client.js",
          "server.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Change%20Notification%20Preferences"
      }
    },
    "createdAt": "2025-09-21T07:29:48.902Z",
    "updatedAt": "2025-09-21T08:58:58.877Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 385,
    "type": "service_portal_widget",
    "name": "Catalog Item Explorer",
    "description": "Catalog Item Explorer Catalog Item Explorer is a powerful ServiceNow widget designed to enhance the catalog browsing experience within your Service Portal. It provides users with a convenient way to navigate and explore catalog items alphabetically, making it easier than ever to locate and access items in your ServiceNow catalog. Main Idea - Learning Resource",
    "script": "// HTML from template.html\n<div class=\"panel panel-default b\">\r\n    <!-- Panel Heading -->\r\n    <div class=\"panel-heading\">\r\n        <div><h2 class=\"panel-title\">{{::c.data.widgetTitle}}</h2></div>\r\n        <div><button ng-if=\"c.filteredCatalogItems.length > 0\" type=\"button\"\r\n            class=\"btn btn-primary btn-xs\" ng-click=\"c.showAllItems()\">{{::c.data.showAllMsg}}</button>\r\n            <button ng-if=\"c.displayItems.length > 0\" type=\"button\"\r\n                class=\"btn btn-danger btn-xs hidden-xs\" ng-click=\"c.resetState()\">Reset</button></div>\r\n    </div>\r\n    <!-- Panel Body -->\r\n    <div class=\"panels-container\">\r\n        <div class=\"row category-header fit-content\">\r\n            <!-- Catalog Category Letters -->\r\n            <div class=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                <ul class=\"list-inline text-center\">\r\n                    <li class=\"list-inline-item\" ng-repeat=\"category in c.data.catalogCategories\">\r\n                        <div class=\"category-letter\" item=\"category\" ng-class=\"{'selected' : category.selected}\"\r\n                            ng-click=\"c.selectCategory(category)\"><span\r\n                                class=\"catalog-category\">{{category.letter}}</span>\r\n                        </div>\r\n                    </li>                    \r\n                </ul>\r\n            </div>\r\n            <!-- Quick Search Section -->\r\n            <div class=\"xiva-quick-search-container col-lg-4 col-md-4 hidden-sm hidden-xs\">\r\n                <span class=\"fa fa-search\"></span><input class=\"form-control\" type=\"text\"\r\n                    ng-model=\"searchText\" ng-change=\"c.quickSearch()\"\r\n                    placeholder=\"{{c.data.msgQuickSearchPlaceholder}}\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!-- Item List -->\r\n    <ul role=\"rowgroup\" class=\"list-group padder-l-none padder-r-none\">\r\n        <li class=\"list-group-item\" ng-repeat=\"item in c.displayItems | limitTo:c.data.itemsPerPage\" style=\"margin:0;\"\r\n            ng-click=\"c.openUrl(item.itemId)\">\r\n            <div role=\"cell\" class=\"padder-l-none padder-r-none main-column\">\r\n                <div class=\"primary-display\">\r\n                    {{item.name}}\r\n                </div>\r\n                <small class=\"text-muted\">\r\n                    <div class=\"secondary-display\">\r\n                        <span>{{item.description}}</span>\r\n                    </div>\r\n                </small>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n    <!-- Pagination -->\r\n    <div class=\"panels-container\" ng-if=\"c.isMultiplePage\" style=\"display: flex; justify-content: center;\">\r\n        <uib-pagination total-items=\"c.filteredCatalogItems.length\" ng-model=\"c.data.currentPage\"\r\n            ng-change=\"c.pageChanged()\" items-per-page=\"c.data.itemsPerPage\" max-size=\"c.data.maxPagesInPaginator\"\r\n            boundary-links=\"c.data.showBoundaryLinks\">\r\n        </uib-pagination>\r\n    </div>\r\n    <!-- Panel Footer -->\r\n    <div class=\"panel-footer\">Total items found:\r\n        {{c.filteredCatalogItems.length}}<span class=\"copyright\" ng-show=\"c.data.showCopyright\">&copy; 2023 Ivan Betev</span></div>\r\n</div>\n\n---\n\n// CLIENT from client_script.js\napi.controller = function ($scope, $window) {\r\n  /* widget controller */\r\n  var c = this;\r\n\r\n  /* Variable and Service Initizalization */\r\n  setWidgetState(\"initial\", c.data.catalogCategories);\r\n\r\n  /* Function to be called when \"Show All Items\" has been clicked */\r\n  c.showAllItems = function () {\r\n    setWidgetState(\"initial\", c.data.catalogCategories);\r\n    c.filteredCatalogItems = c.displayItems = c.data.catalogItems;\r\n    c.isShowAllSelected = true;\r\n    c.data.currentPage = resetCurrentPage();\r\n    c.isMultiplePage = checkMultiPage(c.filteredCatalogItems.length, c.data.itemsPerPage);\r\n  };\r\n\r\n  /* Function to be called when \"Quick Search\" is active */\r\n  c.quickSearch = function () {\r\n    if ($scope.searchText.length == 0) {\r\n      setWidgetState(\"initial\", c.data.catalogCategories);\r\n      return;\r\n    }\r\n\r\n    setWidgetState(\"default-selected\", c.data.catalogCategories);\r\n    c.data.currentPage = resetCurrentPage();\r\n    c.filteredCatalogItems = c.displayItems = $scope.searchText.length > 0 ? quickSearch(c.data.catalogItems, $scope.searchText) : [];\r\n    c.isMultiplePage = checkMultiPage(c.filteredCatalogItems.length, c.data.itemsPerPage);\r\n  };\r\n\r\n  /* Function to be called when category letter has been clicked */\r\n  c.selectCategory = function (category) {\r\n    setWidgetState(\"default\", c.data.catalogCategories);\r\n    category.selected = true;\r\n    c.data.currentPage = resetCurrentPage();\r\n    c.filteredCatalogItems = selectCategory(c.data.catalogItems, category);\r\n    c.isMultiplePage = checkMultiPage(c.filteredCatalogItems.length, c.data.itemsPerPage);\r\n    c.displayItems = calculateDisplayCatalogItems(c.filteredCatalogItems, c.data.currentPage, c.data.itemsPerPage);\r\n  };\r\n\r\n  /* Function to be called when reset button has been pressed*/\r\n  c.resetState = function () {\r\n    setWidgetState(\"initial\", c.data.catalogCategories);\r\n  };\r\n\r\n  /* Function to make the whole row clickable */\r\n  c.openUrl = function (itemId, externalUrl) {\r\n\r\n    var fullLink = \"\";\r\n    fullLink = c.data.defaultCatalogLink + itemId;\r\n    \r\n    /* If external URL provided then replace the output with it */\r\n    if (externalUrl) { fullLink = externalUrl };\r\n\r\n    $window.open(fullLink, \"_blank\");\r\n  };\r\n\r\n  /* Pagination */\r\n\r\n  /* Function to be called by the form element when another page has been selected */\r\n  c.pageChanged = function () {\r\n    c.displayItems = calculateDisplayCatalogItems(c.filteredCatalogItems, c.data.currentPage, c.data.itemsPerPage);\r\n  };\r\n\r\n  /* Functions */\r\n\r\n  /* If it is a quick seach then we are giving filtered array based on the condition */\r\n  function quickSearch(items, searchText) {\r\n    return items.filter(function (item) {\r\n      try {\r\n        /* First we need to check that values are not null, otherwise assign them with empty space to avoid app crash */\r\n        var itemName = item.name != null ? item.name.toLowerCase() : \"\";\r\n        var itemDescription = item.description != null ? item.description.toLowerCase() : \"\";\r\n\r\n        /* Return item if quick search text we placed in our input field is contained in the item name or description */\r\n        return (itemName).indexOf(searchText.toLowerCase()) != -1 || (itemDescription).indexOf(searchText.toLowerCase()) != -1;\r\n      } catch (error) {\r\n        console.log(\"Something went wrong while filtering searching by item name or description\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /* If it is a quick seach then we are giving filtered array based on the condition */\r\n  function selectCategory(items, category) {\r\n    return items.filter(function (item) {\r\n      return (item.name.toLowerCase()).substring(0, 1) == category.letter.toLowerCase();\r\n    });\r\n  }\r\n\r\n  /* Function to reset the category selection to default state (all are non-selected) */\r\n  function resetSelected(items) {\r\n    for (var i = 0; i < items.length; i++) {\r\n      items[i].selected = false;\r\n    }\r\n    c.isShowAllSelected = false;\r\n  }\r\n\r\n  /* Function to reset quick search text in the input field */\r\n  function resetQuickSearchText() {\r\n    $scope.searchText = \"\";\r\n  }\r\n\r\n  /* Function that accumulates reset of selected category and quick search text */\r\n  function setWidgetState(state, items) {\r\n    /* Default state is intended to clear quick search text and reset category selection only */\r\n    if (state == \"default\") {\r\n      resetSelected(items);\r\n      resetQuickSearchText();\r\n\r\n      return c.data.msgDefaultState;\r\n    }\r\n\r\n    /* Default-Selected is intended to reset the category selection state only e.g. for All items category selection */\r\n    if (state == \"default-selected\") {\r\n      resetSelected(items);\r\n\r\n      return c.data.msgCategoryReset;\r\n    }\r\n\r\n    /* Initial is intended to bring the widget to the initial state same as after pager reload */\r\n    if (state == \"initial\") {\r\n      resetQuickSearchText();\r\n      resetSelected(items);\r\n      c.filteredCatalogItems = c.data.catalogItems;\r\n      c.displayItems = [];\r\n      c.isShowAllSelected = false;\r\n      c.isMultiplePage = false;\r\n\r\n      return \"Initialization has completed\";\r\n    }\r\n  }\r\n\r\n  /* Function to flag multipaging which is used by pagination to display page selector */\r\n  function checkMultiPage(itemsToDisplay, numOfPages) {\r\n    return Math.ceil(itemsToDisplay / numOfPages) > 1 ? true : false;\r\n  }\r\n\r\n  /* Function to reset the current page to 1 everytime the category changes */\r\n  function resetCurrentPage() {\r\n    return 1;\r\n  }\r\n\r\n  /* Function to prepare the list of items to display based on the selected page */\r\n  function calculateDisplayCatalogItems(filteredItemsArray, currentPage, itemsPerPage) {\r\n    return filteredItemsArray.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\r\n  }\r\n\r\n  /* Debug - Logs */\r\n  if (c.data.isDebugEnabled) {\r\n    console.log(c);\r\n  }\r\n};",
    "metadata": {
      "application": "Global",
      "name": "Catalog Item Explorer",
      "id": "catalog-item-explorer",
      "active": true,
      "html_template": "<div class=\"panel panel-default b\">\r\n    <!-- Panel Heading -->\r\n    <div class=\"panel-heading\">\r\n        <div><h2 class=\"panel-title\">{{::c.data.widgetTitle}}</h2></div>\r\n        <div><button ng-if=\"c.filteredCatalogItems.length > 0\" type=\"button\"\r\n            class=\"btn btn-primary btn-xs\" ng-click=\"c.showAllItems()\">{{::c.data.showAllMsg}}</button>\r\n            <button ng-if=\"c.displayItems.length > 0\" type=\"button\"\r\n                class=\"btn btn-danger btn-xs hidden-xs\" ng-click=\"c.resetState()\">Reset</button></div>\r\n    </div>\r\n    <!-- Panel Body -->\r\n    <div class=\"panels-container\">\r\n        <div class=\"row category-header fit-content\">\r\n            <!-- Catalog Category Letters -->\r\n            <div class=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                <ul class=\"list-inline text-center\">\r\n                    <li class=\"list-inline-item\" ng-repeat=\"category in c.data.catalogCategories\">\r\n                        <div class=\"category-letter\" item=\"category\" ng-class=\"{'selected' : category.selected}\"\r\n                            ng-click=\"c.selectCategory(category)\"><span\r\n                                class=\"catalog-category\">{{category.letter}}</span>\r\n                        </div>\r\n                    </li>                    \r\n                </ul>\r\n            </div>\r\n            <!-- Quick Search Section -->\r\n            <div class=\"xiva-quick-search-container col-lg-4 col-md-4 hidden-sm hidden-xs\">\r\n                <span class=\"fa fa-search\"></span><input class=\"form-control\" type=\"text\"\r\n                    ng-model=\"searchText\" ng-change=\"c.quickSearch()\"\r\n                    placeholder=\"{{c.data.msgQuickSearchPlaceholder}}\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!-- Item List -->\r\n    <ul role=\"rowgroup\" class=\"list-group padder-l-none padder-r-none\">\r\n        <li class=\"list-group-item\" ng-repeat=\"item in c.displayItems | limitTo:c.data.itemsPerPage\" style=\"margin:0;\"\r\n            ng-click=\"c.openUrl(item.itemId)\">\r\n            <div role=\"cell\" class=\"padder-l-none padder-r-none main-column\">\r\n                <div class=\"primary-display\">\r\n                    {{item.name}}\r\n                </div>\r\n                <small class=\"text-muted\">\r\n                    <div class=\"secondary-display\">\r\n                        <span>{{item.description}}</span>\r\n                    </div>\r\n                </small>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n    <!-- Pagination -->\r\n    <div class=\"panels-container\" ng-if=\"c.isMultiplePage\" style=\"display: flex; justify-content: center;\">\r\n        <uib-pagination total-items=\"c.filteredCatalogItems.length\" ng-model=\"c.data.currentPage\"\r\n            ng-change=\"c.pageChanged()\" items-per-page=\"c.data.itemsPerPage\" max-size=\"c.data.maxPagesInPaginator\"\r\n            boundary-links=\"c.data.showBoundaryLinks\">\r\n        </uib-pagination>\r\n    </div>\r\n    <!-- Panel Footer -->\r\n    <div class=\"panel-footer\">Total items found:\r\n        {{c.filteredCatalogItems.length}}<span class=\"copyright\" ng-show=\"c.data.showCopyright\">&copy; 2023 Ivan Betev</span></div>\r\n</div>",
      "client_script": "api.controller = function ($scope, $window) {\r\n  /* widget controller */\r\n  var c = this;\r\n\r\n  /* Variable and Service Initizalization */\r\n  setWidgetState(\"initial\", c.data.catalogCategories);\r\n\r\n  /* Function to be called when \"Show All Items\" has been clicked */\r\n  c.showAllItems = function () {\r\n    setWidgetState(\"initial\", c.data.catalogCategories);\r\n    c.filteredCatalogItems = c.displayItems = c.data.catalogItems;\r\n    c.isShowAllSelected = true;\r\n    c.data.currentPage = resetCurrentPage();\r\n    c.isMultiplePage = checkMultiPage(c.filteredCatalogItems.length, c.data.itemsPerPage);\r\n  };\r\n\r\n  /* Function to be called when \"Quick Search\" is active */\r\n  c.quickSearch = function () {\r\n    if ($scope.searchText.length == 0) {\r\n      setWidgetState(\"initial\", c.data.catalogCategories);\r\n      return;\r\n    }\r\n\r\n    setWidgetState(\"default-selected\", c.data.catalogCategories);\r\n    c.data.currentPage = resetCurrentPage();\r\n    c.filteredCatalogItems = c.displayItems = $scope.searchText.length > 0 ? quickSearch(c.data.catalogItems, $scope.searchText) : [];\r\n    c.isMultiplePage = checkMultiPage(c.filteredCatalogItems.length, c.data.itemsPerPage);\r\n  };\r\n\r\n  /* Function to be called when category letter has been clicked */\r\n  c.selectCategory = function (category) {\r\n    setWidgetState(\"default\", c.data.catalogCategories);\r\n    category.selected = true;\r\n    c.data.currentPage = resetCurrentPage();\r\n    c.filteredCatalogItems = selectCategory(c.data.catalogItems, category);\r\n    c.isMultiplePage = checkMultiPage(c.filteredCatalogItems.length, c.data.itemsPerPage);\r\n    c.displayItems = calculateDisplayCatalogItems(c.filteredCatalogItems, c.data.currentPage, c.data.itemsPerPage);\r\n  };\r\n\r\n  /* Function to be called when reset button has been pressed*/\r\n  c.resetState = function () {\r\n    setWidgetState(\"initial\", c.data.catalogCategories);\r\n  };\r\n\r\n  /* Function to make the whole row clickable */\r\n  c.openUrl = function (itemId, externalUrl) {\r\n\r\n    var fullLink = \"\";\r\n    fullLink = c.data.defaultCatalogLink + itemId;\r\n    \r\n    /* If external URL provided then replace the output with it */\r\n    if (externalUrl) { fullLink = externalUrl };\r\n\r\n    $window.open(fullLink, \"_blank\");\r\n  };\r\n\r\n  /* Pagination */\r\n\r\n  /* Function to be called by the form element when another page has been selected */\r\n  c.pageChanged = function () {\r\n    c.displayItems = calculateDisplayCatalogItems(c.filteredCatalogItems, c.data.currentPage, c.data.itemsPerPage);\r\n  };\r\n\r\n  /* Functions */\r\n\r\n  /* If it is a quick seach then we are giving filtered array based on the condition */\r\n  function quickSearch(items, searchText) {\r\n    return items.filter(function (item) {\r\n      try {\r\n        /* First we need to check that values are not null, otherwise assign them with empty space to avoid app crash */\r\n        var itemName = item.name != null ? item.name.toLowerCase() : \"\";\r\n        var itemDescription = item.description != null ? item.description.toLowerCase() : \"\";\r\n\r\n        /* Return item if quick search text we placed in our input field is contained in the item name or description */\r\n        return (itemName).indexOf(searchText.toLowerCase()) != -1 || (itemDescription).indexOf(searchText.toLowerCase()) != -1;\r\n      } catch (error) {\r\n        console.log(\"Something went wrong while filtering searching by item name or description\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /* If it is a quick seach then we are giving filtered array based on the condition */\r\n  function selectCategory(items, category) {\r\n    return items.filter(function (item) {\r\n      return (item.name.toLowerCase()).substring(0, 1) == category.letter.toLowerCase();\r\n    });\r\n  }\r\n\r\n  /* Function to reset the category selection to default state (all are non-selected) */\r\n  function resetSelected(items) {\r\n    for (var i = 0; i < items.length; i++) {\r\n      items[i].selected = false;\r\n    }\r\n    c.isShowAllSelected = false;\r\n  }\r\n\r\n  /* Function to reset quick search text in the input field */\r\n  function resetQuickSearchText() {\r\n    $scope.searchText = \"\";\r\n  }\r\n\r\n  /* Function that accumulates reset of selected category and quick search text */\r\n  function setWidgetState(state, items) {\r\n    /* Default state is intended to clear quick search text and reset category selection only */\r\n    if (state == \"default\") {\r\n      resetSelected(items);\r\n      resetQuickSearchText();\r\n\r\n      return c.data.msgDefaultState;\r\n    }\r\n\r\n    /* Default-Selected is intended to reset the category selection state only e.g. for All items category selection */\r\n    if (state == \"default-selected\") {\r\n      resetSelected(items);\r\n\r\n      return c.data.msgCategoryReset;\r\n    }\r\n\r\n    /* Initial is intended to bring the widget to the initial state same as after pager reload */\r\n    if (state == \"initial\") {\r\n      resetQuickSearchText();\r\n      resetSelected(items);\r\n      c.filteredCatalogItems = c.data.catalogItems;\r\n      c.displayItems = [];\r\n      c.isShowAllSelected = false;\r\n      c.isMultiplePage = false;\r\n\r\n      return \"Initialization has completed\";\r\n    }\r\n  }\r\n\r\n  /* Function to flag multipaging which is used by pagination to display page selector */\r\n  function checkMultiPage(itemsToDisplay, numOfPages) {\r\n    return Math.ceil(itemsToDisplay / numOfPages) > 1 ? true : false;\r\n  }\r\n\r\n  /* Function to reset the current page to 1 everytime the category changes */\r\n  function resetCurrentPage() {\r\n    return 1;\r\n  }\r\n\r\n  /* Function to prepare the list of items to display based on the selected page */\r\n  function calculateDisplayCatalogItems(filteredItemsArray, currentPage, itemsPerPage) {\r\n    return filteredItemsArray.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\r\n  }\r\n\r\n  /* Debug - Logs */\r\n  if (c.data.isDebugEnabled) {\r\n    console.log(c);\r\n  }\r\n};",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Catalog Item Explorer",
        "scriptFiles": [
          "template.html",
          "client_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Catalog%20Item%20Explorer"
      }
    },
    "createdAt": "2025-09-21T07:29:48.897Z",
    "updatedAt": "2025-09-21T08:58:58.872Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 384,
    "type": "service_portal_widget",
    "name": "Calendar widget",
    "description": "Calendar Widget for ServiceNow Portal This widget creates a simple, interactive calendar for the ServiceNow portal, allowing users to navigate through months and view the current day highlighted. It displays the days of the month in a grid layout. Features",
    "script": "// CSS from style.css\n.calendar-widget {\r\n    width: 100%;\r\n    max-width: 300px;\r\n    margin: auto;\r\n    font-family: Arial, sans-serif;\r\n    border: 1px solid #ddd;\r\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.calendar-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    background-color: #f4f4f4;\r\n    font-weight: bold;\r\n}\r\n\r\n.calendar-header button {\r\n    background: none;\r\n    border: none;\r\n    font-size: 1.2em;\r\n    cursor: pointer;\r\n}\r\n\r\n.calendar-days {\r\n    display: grid;\r\n    grid-template-columns: repeat(7, 1fr);\r\n    text-align: center;\r\n}\r\n\r\n.day-name {\r\n    font-weight: bold;\r\n    padding: 5px 0;\r\n    color: #555;\r\n}\r\n\r\n.day {\r\n    padding: 10px 0;\r\n    border: 1px solid #f0f0f0;\r\n}\r\n\r\n.current-day {\r\n    background-color: #d3e9ff;\r\n    font-weight: bold;\r\n    color: #333;\r\n    border-radius: 50%;\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Calendar widget",
      "id": "calendar-widget",
      "active": true,
      "css": ".calendar-widget {\r\n    width: 100%;\r\n    max-width: 300px;\r\n    margin: auto;\r\n    font-family: Arial, sans-serif;\r\n    border: 1px solid #ddd;\r\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.calendar-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    background-color: #f4f4f4;\r\n    font-weight: bold;\r\n}\r\n\r\n.calendar-header button {\r\n    background: none;\r\n    border: none;\r\n    font-size: 1.2em;\r\n    cursor: pointer;\r\n}\r\n\r\n.calendar-days {\r\n    display: grid;\r\n    grid-template-columns: repeat(7, 1fr);\r\n    text-align: center;\r\n}\r\n\r\n.day-name {\r\n    font-weight: bold;\r\n    padding: 5px 0;\r\n    color: #555;\r\n}\r\n\r\n.day {\r\n    padding: 10px 0;\r\n    border: 1px solid #f0f0f0;\r\n}\r\n\r\n.current-day {\r\n    background-color: #d3e9ff;\r\n    font-weight: bold;\r\n    color: #333;\r\n    border-radius: 50%;\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Calendar widget",
        "scriptFiles": [
          "style.css"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Calendar%20widget",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Service%20Portal%20Widgets/Calendar%20widget/style.css"
      }
    },
    "createdAt": "2025-09-21T07:29:48.893Z",
    "updatedAt": "2025-09-21T08:58:58.868Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 383,
    "type": "service_portal_widget",
    "name": "Batman Animation",
    "description": "In order to use the widget, follow the below steps: 1.Create a new widget and copy the html, style and client script in the widget. 2.Upload the 2 images (Batman logo and Batman Background Image) in the image table.",
    "script": "// CSS from style.css\n.container {\r\n  width:100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  left: 220px;\r\n  top: 120px;\r\n  position: absolute;\r\n}\r\n\r\n.innercontainer {\r\n  height:150px;\r\n  width:250px;\r\n  position:relative;\r\n  overflow:hidden;\r\n  transform: rotate(67deg);\r\n}\r\n\r\n.outer-circle {\r\n  position:absolute;\r\n  height:130px;\r\n  width:230px;\r\n  top:3px;\r\n  left:4px;\r\n  overflow:hidden;\r\n}\r\n\r\n.bat {\r\n  background: #36474e;\r\n  position: absolute;\r\n  height: 111px;\r\n  width: 189px;\r\n  border-radius: 50%;\r\n  box-shadow: 0px -3px 11px #fff;\r\n  top: 17px;\r\n  left: 17px;\r\n}\r\n.batlogo{\r\n  z-index: 9000;\r\n  height: 90px;\r\n  width: 181px;\r\n  box-shadow: 0 0 -3px greenyellow;\r\n  position: fixed;\r\n  top: 48px;\r\n  opacity: 0.75;\r\n  left: 23px;\r\n}\n\n---\n\n// CLIENT from client_script.js\napi.controller=function($scope) {\r\n\t/* widget controller */\r\n\tvar c = this;\r\n\tsetTimeout(function(){ $scope.togglelightray = true; }, 2000);\r\n};",
    "metadata": {
      "application": "Global",
      "name": "Batman Animation",
      "id": "batman-animation",
      "active": true,
      "css": ".container {\r\n  width:100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  left: 220px;\r\n  top: 120px;\r\n  position: absolute;\r\n}\r\n\r\n.innercontainer {\r\n  height:150px;\r\n  width:250px;\r\n  position:relative;\r\n  overflow:hidden;\r\n  transform: rotate(67deg);\r\n}\r\n\r\n.outer-circle {\r\n  position:absolute;\r\n  height:130px;\r\n  width:230px;\r\n  top:3px;\r\n  left:4px;\r\n  overflow:hidden;\r\n}\r\n\r\n.bat {\r\n  background: #36474e;\r\n  position: absolute;\r\n  height: 111px;\r\n  width: 189px;\r\n  border-radius: 50%;\r\n  box-shadow: 0px -3px 11px #fff;\r\n  top: 17px;\r\n  left: 17px;\r\n}\r\n.batlogo{\r\n  z-index: 9000;\r\n  height: 90px;\r\n  width: 181px;\r\n  box-shadow: 0 0 -3px greenyellow;\r\n  position: fixed;\r\n  top: 48px;\r\n  opacity: 0.75;\r\n  left: 23px;\r\n}",
      "client_script": "api.controller=function($scope) {\r\n\t/* widget controller */\r\n\tvar c = this;\r\n\tsetTimeout(function(){ $scope.togglelightray = true; }, 2000);\r\n};",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Batman Animation",
        "scriptFiles": [
          "style.css",
          "client_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Batman%20Animation"
      }
    },
    "createdAt": "2025-09-21T07:29:48.889Z",
    "updatedAt": "2025-09-21T08:58:58.864Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 382,
    "type": "service_portal_widget",
    "name": "AngularJS Directives and Filters",
    "description": "<h2AngularJS Directives and Filters</h2 This widget demonstrates useful AngularJS Directives and Filters. <h3Usage:</h3",
    "script": "// HTML from html.html\n<div id=\"\" style=\"overflow:scroll; height:400px;\">\r\n<!-- your widget template -->\r\n <h4>Data</h4>\r\n <p class=\"mydata\">\r\n  <b>record:</b>{{data.record}}</p>\r\n <p class=\"mydata\">  \r\n  <b>record1:</b>{{data.record1}}</p><br>\r\n  \r\n <h4>NG-CLICK</h4>\r\n <p>Run Function on Click</p>  \r\n <button ng-click=\"myButton()\">Click me!!!</button>\r\n\r\n <h4>NG-MODEL</h4>  \r\n <p>2-Way data variable</p>\r\n <b>myText:</b> {{myText}}<br>   \r\n <input type=\"text\" ng-model=\"myText\"><br>\r\n\r\n <h4>NG-KEYUP</h4>  \r\n <p>Use Enter to Run Function</p>\r\n <input type=\"text\" placeholder=\"Press Enter key here\" ng-keyup=\"$event.keyCode == 13 ? myKey() : null\"/><br><br>\r\n\r\n <h4>NG-REPEAT</h4>  \r\n <p>Looping through data</p>\r\n <p ng-repeat=\"x in data.record\">{{x}} - Index {{$index}}</p><br>\r\n\r\n <h4>NG-IF</h4>    \r\n <p>Show only where condition in passed<br>\r\n    Other Variables are not available</p>  \r\n <p ng-repeat=\"x in data.record\" ng-if=\"x == 3\">{{x}}</p>  \r\n\r\n  \r\n <h4>NG-SHOW</h4>    \r\n <p>Show only where condition in passed<br>\r\n    Other Variables are available but hidden</p>\r\n <p ng-repeat=\"x in data.record\" ng-show=\"x == 3\">{{x}}</p> \r\n  \r\n\r\n <h4>NG-HIDE</h4>    \r\n <p>Hide where condition in passed<br>\r\n    Variable is available but hidden</p>\r\n <p ng-repeat=\"x in data.record\" ng-hide=\"x == 3\">{{x}}</p>    \r\n\r\n  \r\n <h4>NG-BIND</h4>    \r\n TEXT-BINDING\r\n <p ng-bind=\"mytext\"></p><br>\r\n\r\n <h4>NG-BIND-HTML</h4>    \r\n <p>BIND with HTML Formatting</p>\r\n <p ng-bind-html=\"htmlText\"></p> \r\n  \r\n  \r\n <h4>$INDEX</h4>\r\n <p ng-repeat=\"x in data.record\">{{x}} - Index {{$index}}</p>\r\n\r\n <h4>$INDEX IN IF CONDITION</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$index == 3\">{{x}} - Index {{$index}}</p>\r\n\r\n <h4>$EVEN</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$even\">{{x}} - Index {{$index}}</p>    \r\n\r\n <h4>$ODD</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$odd\">{{x}} - Index {{$index}}</p>  \r\n\r\n <h4>$FIRST</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$first\">{{x}} - Index {{$index}}</p> \r\n\r\n <h4>$LAST</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$last\">{{x}} - Index {{$index}}</p>   \r\n\r\n <h4>$MIDDLE</h4>\r\n Leave 1st and Last\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$middle\">{{x}} - Index {{$index}}</p>   \r\n\r\n <h4>LIMIT TO</h4>\r\n <p ng-repeat=\"x in data.record | limitTo:3\">{{x}} - Index {{$index}}</p>  \r\n\r\n <h4>LIMIT TO BEGIN</h4>\r\n Start Index:<input type=\"number\" ng-model=\"startIndex\"> <br>   \r\n <p ng-repeat=\"x in data.record | limitTo:3:startIndex\">{{x}} - Index {{$index}}</p>  \r\n\r\n <h4>UPPERCASE</h4>    \r\n {{data.record1}}<br>  \r\n <p ng-repeat=\"x in data.record1\">{{x | uppercase}} - Index {{$index}}</p>    \r\n\r\n <h4>lowercase</h4>\r\n <p ng-repeat=\"x in data.record1\">{{x | lowercase}} - Index {{$index}}</p>    \r\n\r\n <h4>ORDER BY</h4>\r\n <p ng-repeat=\"x in data.record1 | orderBy:x\">{{x}} - Index {{$index}}</p>    \r\n\r\n <h4>ORDER BY DESCENDING</h4>\r\n <p ng-repeat=\"x in data.record1 | orderBy:x:true\">{{x}} - Index {{$index}}</p>  \r\n\r\n  \r\n <h4>FILTER</h4>\r\n Filter:<input type=\"text\" placeholder=\"Enter filter here\" ng-model=\"myFilter\">\r\n <p ng-repeat=\"x in data.record1 | filter:myFilter\">{{x}} - Index {{$index}}</p>   \r\n  \r\n  \r\n</div>\n\n---\n\n// CSS from css.css\nh4 {\r\n   font-weight: bolder;\r\n   margin-top: 30px; \r\n   color: green;\r\n}  \r\n\r\n.mydata {\r\n   font-weight: bolder;\r\n   color: blue;\r\n}\n\n---\n\n// CLIENT from client_script.js\napi.controller=function($scope, spModal ) {\r\n  /* widget controller */\r\n  var c = this;\r\n\t\r\n\t// Variables from client script\r\n  $scope.myText = \"Type in textbox.\";\t\r\n\t$scope.htmlText = \"<p><b>AnglurJS:</b> Directives and Filters\"\r\n  $scope.startIndex = 0;\r\n  $scope.myFilter = \"\";\r\n\r\n\t//On-Click Function\r\n  $scope.myButton = function(){\r\n\t\tspModal.alert(\"Run a function on Click\");\r\n\t}\t\r\n\r\n\t//Function on Enter Press\r\n  $scope.myKey = function() {\r\n\t\tspModal.alert(\"Run a function on Enter Key\");\t\t\r\n  }\t\r\n\t\r\n};\n\n---\n\n// SERVER from server_script.js\n(function() {\r\n  /* populate the 'data' object */\r\n  /* e.g., data.table = $sp.getValue('table'); */\r\n\r\n\t//Variables from Server Script\r\n\tdata.record = [1,2,3,4,5,6];\t\r\n\tdata.record1 = [\"abc\",\"xyz\",\"Abc\",\"Xyz\",\"ABC\",\"XYZ\"];\r\n\r\n})();",
    "metadata": {
      "application": "Global",
      "name": "AngularJS Directives and Filters",
      "id": "angularjs-directives-and-filters",
      "active": true,
      "html_template": "<div id=\"\" style=\"overflow:scroll; height:400px;\">\r\n<!-- your widget template -->\r\n <h4>Data</h4>\r\n <p class=\"mydata\">\r\n  <b>record:</b>{{data.record}}</p>\r\n <p class=\"mydata\">  \r\n  <b>record1:</b>{{data.record1}}</p><br>\r\n  \r\n <h4>NG-CLICK</h4>\r\n <p>Run Function on Click</p>  \r\n <button ng-click=\"myButton()\">Click me!!!</button>\r\n\r\n <h4>NG-MODEL</h4>  \r\n <p>2-Way data variable</p>\r\n <b>myText:</b> {{myText}}<br>   \r\n <input type=\"text\" ng-model=\"myText\"><br>\r\n\r\n <h4>NG-KEYUP</h4>  \r\n <p>Use Enter to Run Function</p>\r\n <input type=\"text\" placeholder=\"Press Enter key here\" ng-keyup=\"$event.keyCode == 13 ? myKey() : null\"/><br><br>\r\n\r\n <h4>NG-REPEAT</h4>  \r\n <p>Looping through data</p>\r\n <p ng-repeat=\"x in data.record\">{{x}} - Index {{$index}}</p><br>\r\n\r\n <h4>NG-IF</h4>    \r\n <p>Show only where condition in passed<br>\r\n    Other Variables are not available</p>  \r\n <p ng-repeat=\"x in data.record\" ng-if=\"x == 3\">{{x}}</p>  \r\n\r\n  \r\n <h4>NG-SHOW</h4>    \r\n <p>Show only where condition in passed<br>\r\n    Other Variables are available but hidden</p>\r\n <p ng-repeat=\"x in data.record\" ng-show=\"x == 3\">{{x}}</p> \r\n  \r\n\r\n <h4>NG-HIDE</h4>    \r\n <p>Hide where condition in passed<br>\r\n    Variable is available but hidden</p>\r\n <p ng-repeat=\"x in data.record\" ng-hide=\"x == 3\">{{x}}</p>    \r\n\r\n  \r\n <h4>NG-BIND</h4>    \r\n TEXT-BINDING\r\n <p ng-bind=\"mytext\"></p><br>\r\n\r\n <h4>NG-BIND-HTML</h4>    \r\n <p>BIND with HTML Formatting</p>\r\n <p ng-bind-html=\"htmlText\"></p> \r\n  \r\n  \r\n <h4>$INDEX</h4>\r\n <p ng-repeat=\"x in data.record\">{{x}} - Index {{$index}}</p>\r\n\r\n <h4>$INDEX IN IF CONDITION</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$index == 3\">{{x}} - Index {{$index}}</p>\r\n\r\n <h4>$EVEN</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$even\">{{x}} - Index {{$index}}</p>    \r\n\r\n <h4>$ODD</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$odd\">{{x}} - Index {{$index}}</p>  \r\n\r\n <h4>$FIRST</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$first\">{{x}} - Index {{$index}}</p> \r\n\r\n <h4>$LAST</h4>\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$last\">{{x}} - Index {{$index}}</p>   \r\n\r\n <h4>$MIDDLE</h4>\r\n Leave 1st and Last\r\n <p ng-repeat=\"x in data.record\" ng-if=\"$middle\">{{x}} - Index {{$index}}</p>   \r\n\r\n <h4>LIMIT TO</h4>\r\n <p ng-repeat=\"x in data.record | limitTo:3\">{{x}} - Index {{$index}}</p>  \r\n\r\n <h4>LIMIT TO BEGIN</h4>\r\n Start Index:<input type=\"number\" ng-model=\"startIndex\"> <br>   \r\n <p ng-repeat=\"x in data.record | limitTo:3:startIndex\">{{x}} - Index {{$index}}</p>  \r\n\r\n <h4>UPPERCASE</h4>    \r\n {{data.record1}}<br>  \r\n <p ng-repeat=\"x in data.record1\">{{x | uppercase}} - Index {{$index}}</p>    \r\n\r\n <h4>lowercase</h4>\r\n <p ng-repeat=\"x in data.record1\">{{x | lowercase}} - Index {{$index}}</p>    \r\n\r\n <h4>ORDER BY</h4>\r\n <p ng-repeat=\"x in data.record1 | orderBy:x\">{{x}} - Index {{$index}}</p>    \r\n\r\n <h4>ORDER BY DESCENDING</h4>\r\n <p ng-repeat=\"x in data.record1 | orderBy:x:true\">{{x}} - Index {{$index}}</p>  \r\n\r\n  \r\n <h4>FILTER</h4>\r\n Filter:<input type=\"text\" placeholder=\"Enter filter here\" ng-model=\"myFilter\">\r\n <p ng-repeat=\"x in data.record1 | filter:myFilter\">{{x}} - Index {{$index}}</p>   \r\n  \r\n  \r\n</div>",
      "css": "h4 {\r\n   font-weight: bolder;\r\n   margin-top: 30px; \r\n   color: green;\r\n}  \r\n\r\n.mydata {\r\n   font-weight: bolder;\r\n   color: blue;\r\n}",
      "client_script": "api.controller=function($scope, spModal ) {\r\n  /* widget controller */\r\n  var c = this;\r\n\t\r\n\t// Variables from client script\r\n  $scope.myText = \"Type in textbox.\";\t\r\n\t$scope.htmlText = \"<p><b>AnglurJS:</b> Directives and Filters\"\r\n  $scope.startIndex = 0;\r\n  $scope.myFilter = \"\";\r\n\r\n\t//On-Click Function\r\n  $scope.myButton = function(){\r\n\t\tspModal.alert(\"Run a function on Click\");\r\n\t}\t\r\n\r\n\t//Function on Enter Press\r\n  $scope.myKey = function() {\r\n\t\tspModal.alert(\"Run a function on Enter Key\");\t\t\r\n  }\t\r\n\t\r\n};",
      "server_script": "(function() {\r\n  /* populate the 'data' object */\r\n  /* e.g., data.table = $sp.getValue('table'); */\r\n\r\n\t//Variables from Server Script\r\n\tdata.record = [1,2,3,4,5,6];\t\r\n\tdata.record1 = [\"abc\",\"xyz\",\"Abc\",\"Xyz\",\"ABC\",\"XYZ\"];\r\n\r\n})();",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/AngularJS Directives and Filters",
        "scriptFiles": [
          "html.html",
          "css.css",
          "client_script.js",
          "server_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/AngularJS%20Directives%20and%20Filters"
      }
    },
    "createdAt": "2025-09-21T07:29:48.884Z",
    "updatedAt": "2025-09-21T08:58:58.860Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 381,
    "type": "service_portal_widget",
    "name": "Accordion Widget",
    "description": "Accordion Widget",
    "script": "// HTML from HTML Template.html\n<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-9 mx-auto\">\r\n      <div id=\"accordionExample\" class=\"accordion shadow\">\r\n        <div class=\"card\">\r\n          <div id=\"headingOne\" class=\"\">\r\n            <h2 class=\"margin-bottom-0\">\r\n              <button type=\"button\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"false\"\r\n                      aria-controls=\"collapseOne\"\r\n                      class=\"btn text-dark font-weight-bold text-uppercase toggler\">Accordion Header #1</button>\r\n            </h2>\r\n          </div>\r\n          <div id=\"collapseOne\" aria-labelledby=\"headingOne\" data-parent=\"#accordionExample\" class=\"collapse\">\r\n            <div class=\"card-body border-1\">\r\n              <p class=\"font-weight-light padding-5\">This is the inner text of the accordion. This is the inner text of the accordion. This is the inner text of the accordion. This is the inner text of the accordion. This is the inner text of the accordion. This is the inner text of the accordion.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\n\n---\n\n// CSS from CSS-SCSS.scss\n.toggler {\r\n  width: 100%;\r\n  position: relative;\r\n  text-align: left;\r\n}\r\n\r\n.toggler::before {\r\n  content: \"\\f107\";\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.8rem;\r\n  transform: translateY(-50%);\r\n  display: block;\r\n  font-family: \"FontAwesome\";\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.toggler[aria-expanded=\"true\"]::before {\r\n  content: \"\\f106\";\r\n}\r\n.border-1{\r\n\tborder: 1px solid #d7d7d7;\r\n}\r\n.margin-bottom-0{\r\n\tmargin-bottom: 0px;\r\n}\r\n.padding-5{\r\n\tpadding: 10px;\r\n}",
    "metadata": {
      "application": "Global",
      "name": "Accordion Widget",
      "id": "accordion-widget",
      "active": true,
      "html_template": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-9 mx-auto\">\r\n      <div id=\"accordionExample\" class=\"accordion shadow\">\r\n        <div class=\"card\">\r\n          <div id=\"headingOne\" class=\"\">\r\n            <h2 class=\"margin-bottom-0\">\r\n              <button type=\"button\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"false\"\r\n                      aria-controls=\"collapseOne\"\r\n                      class=\"btn text-dark font-weight-bold text-uppercase toggler\">Accordion Header #1</button>\r\n            </h2>\r\n          </div>\r\n          <div id=\"collapseOne\" aria-labelledby=\"headingOne\" data-parent=\"#accordionExample\" class=\"collapse\">\r\n            <div class=\"card-body border-1\">\r\n              <p class=\"font-weight-light padding-5\">This is the inner text of the accordion. This is the inner text of the accordion. This is the inner text of the accordion. This is the inner text of the accordion. This is the inner text of the accordion. This is the inner text of the accordion.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
      "css": ".toggler {\r\n  width: 100%;\r\n  position: relative;\r\n  text-align: left;\r\n}\r\n\r\n.toggler::before {\r\n  content: \"\\f107\";\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 0.8rem;\r\n  transform: translateY(-50%);\r\n  display: block;\r\n  font-family: \"FontAwesome\";\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.toggler[aria-expanded=\"true\"]::before {\r\n  content: \"\\f106\";\r\n}\r\n.border-1{\r\n\tborder: 1px solid #d7d7d7;\r\n}\r\n.margin-bottom-0{\r\n\tmargin-bottom: 0px;\r\n}\r\n.padding-5{\r\n\tpadding: 10px;\r\n}",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Service Portal Widgets/Accordion Widget",
        "scriptFiles": [
          "HTML Template.html",
          "CSS-SCSS.scss"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Service%20Portal%20Widgets/Accordion%20Widget"
      }
    },
    "createdAt": "2025-09-21T07:29:48.877Z",
    "updatedAt": "2025-09-21T08:58:58.856Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 380,
    "type": "fix_script",
    "name": "Updateset checker",
    "description": "Check all Work in Progress update-sets for Cross Application Scopes If an update-set has more than one application scope it will cause issues when you are previewing the update-set in the target instance. Therefore, it is the best to check the update-sets before closing and retrieving them to the target instance. This sample script, checks all the WIP update-sets and find the update-sets that h...",
    "script": "/*\r\n    Find all the update-sets that are WIP and the customer updates contains more than one applications\r\n*/\r\n\r\n//-------------------------------------------------------------------------------------------------------------\r\n// If we want specific users e.g. if there are multiple partners and we want only our techs then add them to\r\n// the list below else clear the list!\r\n//-------------------------------------------------------------------------------------------------------------\r\nvar createdByUsers = [\r\n    // TODO: Add your specific user user_name based on sys_user table\r\n    ];\r\n    \r\n    //-------------------------------------------------------------------------------------------------------------\r\n    // Go though all the Update-sets that are WIP or alternatively add the filter to grab for specific users\r\n    // Ignore the Default update-sets\r\n    //-------------------------------------------------------------------------------------------------------------\r\n    var grSysUpdateSet = new GlideRecord('sys_update_set');\r\n    grSysUpdateSet.addQuery('state', 'in progress');\r\n    grSysUpdateSet.addQuery('name', '!=', 'Default');\r\n    \r\n    //-------------------------------------------------------------------------------------------------------------\r\n    // If users list exist then add it to the query\r\n    //-------------------------------------------------------------------------------------------------------------\r\n    if(createdByUsers && createdByUsers.length > 0){\r\n        var createdByUsersQuery = createdByUsers.join(',').trim(',');\r\n        grSysUpdateSet.addQuery('sys_created_by', 'IN', createdByUsersQuery);\r\n    }\r\n    \r\n    grSysUpdateSet.query();\r\n    \r\n    // Distinct Update-set names\r\n    var distinctXMLList = [];\r\n    \r\n    while (grSysUpdateSet.next()) {\r\n    \r\n        //-------------------------------------------------------------------------------------------------------------\r\n        // Find all the customer updates belongs to this update-set and are different than the update-set application\r\n        //-------------------------------------------------------------------------------------------------------------\r\n        var grCustomerUpdates = new GlideRecord('sys_update_xml');\r\n        grCustomerUpdates.addQuery(\"update_set.sys_id\", grSysUpdateSet.getUniqueValue());\r\n        grCustomerUpdates.addQuery(\"application\", '!=', grSysUpdateSet.getValue('application'));\r\n        grCustomerUpdates.query();\r\n    \r\n    \r\n        while (grCustomerUpdates.next()) {\r\n            \r\n            // Don't report the same update-set name more than once, as long as it is reported once is enough!!\r\n            if(distinctXMLList.indexOf(grSysUpdateSet.getValue('name')) == -1){\r\n                gs.debug('-------------------------------------------------------------------------------------------------------------');\r\n                gs.debug('Found an update-set that its customer updates has more than one applications (at least)!');\r\n                gs.debug('-------------------------------------------------------------------------------------------------------------');\r\n                gs.debug('Update-set name (sys_update_set): ' + grSysUpdateSet.getValue('name'));\r\n                gs.debug('Update-set application: ' + grSysUpdateSet.getDisplayValue('application'));\r\n                gs.debug('Customer updates application (sys_update_xml.application): ' + grCustomerUpdates.getDisplayValue('application'));\r\n                gs.debug('-------------------------------------------------------------------------------------------------------------');\r\n            \r\n                distinctXMLList.push(grSysUpdateSet.getValue('name'));\r\n            }\r\n        }\r\n        \r\n    }",
    "metadata": {
      "application": "Global",
      "notes": "Check all Work in Progress update-sets for Cross Application Scopes If an update-set has more than one application scope it will cause issues when you are previewing the update-set in the target instance. Therefore, it is the best to check the update-sets before closing and retrieving them to the target instance. This sample script, checks all the WIP update-sets and find the update-sets that h...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Updateset checker",
        "scriptFiles": [
          "Updateset_checker.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Updateset%20checker",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Updateset%20checker/Updateset_checker.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.210Z",
    "updatedAt": "2025-09-21T08:58:58.852Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 379,
    "type": "fix_script",
    "name": "update variable role",
    "description": "Fix script to update varialbes write roles - we use variables in catalog items for that we have to provide roles who can access the variable - we tend to forget adding roles after creating many varialbes",
    "script": "// Fix script to update varialbes write roles \r\nfunction updateItemOptionRoles() {\r\n    var query = 'sys_scope=5f414691db10a4101b2733f3b9961961'; // sys_id of application\r\n    var varGr = new GlideRecord('item_option_new');\r\n    varGr.addEncodedQuery(query);\r\n    varGr.query();\r\n\r\n    gs.info('Starting update for ' + varGr.getRowCount() + ' records.');\r\n\r\n    varGr.setValue('write_roles', 'role1, role2, role3'); // \r\n    varGr.updateMultiple();\r\n\r\n    gs.info('Updated ' + varGr.getRowCount() + ' records.');\r\n}\r\n\r\nupdateItemOptionRoles();",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Fix script to update varialbes write roles - we use variables in catalog items for that we have to provide roles who can access the variable - we tend to forget adding roles after creating many varialbes",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/update variable role",
        "scriptFiles": [
          "updateWriteRolesOfVariables.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/update%20variable%20role",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/update%20variable%20role/updateWriteRolesOfVariables.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.206Z",
    "updatedAt": "2025-09-21T08:58:58.848Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 378,
    "type": "fix_script",
    "name": "Update field with value in sys_audit",
    "description": "Hopefully this is something you never need to use.   It will udpate with either the newest or oldest entry from sysaudit. Example",
    "script": "function validateQuery(grToCheck) {\r\n    return grToCheck.isEncodedQueryValid(grToCheck.getEncodedQuery());\r\n}\r\n\r\nfunction isNullOrEmpty(val) {\r\n\r\n    return val == null || val == '' || val == undefined;\r\n}\r\n\r\nfunction validateArgs() {\r\n    for (var i = 0; i < arguments.length; i++) {\r\n        if (isNullOrEmpty(arguments[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction updateRecords(args) {\r\n    var tbl = args['table'];\r\n    var qry = args['encodedQuery'];\r\n    var updateField = args['updateField'];\r\n    var auditField = args['auditField'];\r\n    var sort = args['sort'];\r\n    \r\n    if (!validateArgs(tbl, qry, updateField, auditField)) {\r\n        throw new Error(\"UpdateRecords: Missing or invalid arguments\");\r\n    }\r\n\r\n    var grTicket = new GlideRecord(tbl);\r\n    grTicket.addEncodedQuery(qry);\r\n    if (!validateQuery(grTicket)) {\r\n        throw new Error(\"function requires valid encoded query\");\r\n    }\r\n    if (!grTicket.isValid()) {\r\n        throw new Error(\"Invalid table name\");\r\n    }\r\n\r\n    grTicket.query();\r\n\r\n    var auditVal;\r\n    var asdf = [];\r\n\r\n    while (grTicket.next()) {\r\n\r\n        auditVal = getAuditValue(tbl, grTicket.getUniqueValue(), auditField,sort);\r\n\r\n        if (!isNullOrEmpty(auditVal)) {\r\n            asdf.push(grTicket.getValue('number') + \":\" + auditVal);\r\n            grTicket.setValue(updateField, auditVal);\r\n            grTicket.update();\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return asdf;\r\n}\r\n\r\nfunction getAuditValue(tbl, sysid, field, sort) {\r\n\r\n    sort == sort || 'ASC';\r\n    if (isNullOrEmpty(tbl) || isNullOrEmpty(sysid) || isNullOrEmpty(field)) {\r\n        throw new Error(\"all arguments are required\");\r\n    }\r\n    var grAudit = new GlideRecord('sys_audit');\r\n    grAudit.addQuery('documentkey', sysid);\r\n    grAudit.addQuery('fieldname', field);\r\n    grAudit.addNotNullQuery('newvalue');\r\n\r\n    if (sort == 'DESC') {\r\n        grAudit.orderByDesc('sys_created_on');\r\n    } else {\r\n        grAudit.orderBy('sys_created_on');\r\n    }\r\n\r\n    grAudit.setLimit(1)\r\n    grAudit.query();\r\n    if (grAudit.next()) {\r\n        return grAudit.getValue('newvalue');\r\n\r\n    }\r\n\r\n    return;\r\n\r\n}\r\n\r\n/*  ##################################################################\r\n############ EXAMPLE:  CHANGE THE BELOW CODE!!!!! #################\r\n######################################################################\r\n*/\r\n\r\nvar updateArgs = {\r\n    encodedQuery: 'u_some_cool_field=blahblahblahL',\r\n    table: 'my_cool_table',\r\n    updateField: 'field to update in target table',\r\n    auditField: 'field name in sys_audit',\r\n    sort: 'DESC\r\n}\r\n\r\n\r\ntry {\r\n\r\n    gs.print(updateRecords(updateArgs).join('\\n'));\r\n} catch (ex) {\r\n    gs.error(ex.message || ex);\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Hopefully this is something you never need to use.   It will udpate with either the newest or oldest entry from sysaudit. Example",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Update field with value in sys_audit",
        "scriptFiles": [
          "updateFromAudit.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Update%20field%20with%20value%20in%20sys_audit",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Update%20field%20with%20value%20in%20sys_audit/updateFromAudit.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.202Z",
    "updatedAt": "2025-09-21T08:58:58.845Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 377,
    "type": "fix_script",
    "name": "Syslog_top10Contributors",
    "description": "Log[syslog] table Optimization Script ( Server Side) - This fix script will execute on syslog table to identify top '10' contributors in last '15 minutes'. - This can be altered as per requirement to idenitfy daily top contributors to take action on unnecessary log contibutors",
    "script": "/* Create a GlideAggregate on the Syslog table to identify the Top 10 contributors by 'Source name' and 'Number of occurrences on 'Daily' or'any specific interval'.\r\n\r\nThis could be vital to maintain the instance performance by regualar optimizing the Syslog table by identifying the top contributors. Based on this syslog table \r\nCould it be reviewed by owners to make the correct decisions on whether logging is required for these tables?\r\n\r\n*/\r\n\r\ntopN('syslog', 'source', 10);          //Create a function to identify top 'N' number of records by source. Eg. 10 \r\n\r\nfunction topN(pTable, pColumn, pCount) {\r\n    var ga = new GlideAggregate(pTable);    // query on table required\r\n    ga.addAggregate('COUNT', pColumn);      // Count the number of records by source to record how many times it generated log\r\n    ga.orderByAggregate('COUNT', pColumn);  \r\n    ga.addEncodedQuery('sys_created_onONLast 15 minutes@javascript:gs.beginningOfLast15Minutes()@javascript:gs.endOfLast15Minutes()'); //query for last 15min data\r\n    ga.query();\r\n    var i = 0;\r\n    var stdout = [];\r\n    stdout.push('\\nTop ' + pCount + ' ' + pColumn + ' values from ' + pTable + '\\n');\r\n    while (ga.next() && (i++ < pCount)) {\r\n        stdout.push(ga.getValue(pColumn) + ' ' + ga.getAggregate('COUNT', pColumn));\r\n    }\r\n    gs.print(stdout.join(\"\\n\"));         // display data by 'Sourve' and Number of occurance count \r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Log[syslog] table Optimization Script ( Server Side) - This fix script will execute on syslog table to identify top '10' contributors in last '15 minutes'. - This can be altered as per requirement to idenitfy daily top contributors to take action on unnecessary log contibutors",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Syslog_top10Contributors",
        "scriptFiles": [
          "syslog_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Syslog_top10Contributors",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Syslog_top10Contributors/syslog_script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.198Z",
    "updatedAt": "2025-09-21T08:58:58.842Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 376,
    "type": "fix_script",
    "name": "Sync Data Between Instances",
    "description": "The script leverages the ServiceNow REST API to retrieve records from a specified table on the source instance, then transmits them to the target instance for insertion. As an example, it is set up to sync active user records, but it can be easily modified for any other table and filter criteria. Usage:",
    "script": "//Add below Details\r\nvar table = \"sys_user\";\r\nvar query = \"active=true\";\r\nvar targetInstance = \"dev1234\";\r\nvar user, password;\r\n\r\nsendData(table, targetInstance, query, user, password);\r\n\r\nfunction sendData(table, targetInstance, query) {\r\n    var pload = {};\r\n    var tableGR = new GlideRecord(table);\r\n    if (query) {\r\n        tableGR.addQuery(query);\r\n    }\r\n    tableGR.query();\r\n    while (tableGR.next()) {\r\n        var dictionaryGR = new GlideRecord('sys_dictionary');\r\n        dictionaryGR.addQuery('name=' + table);\r\n        dictionaryGR.query();\r\n        while (dictionaryGR.next()) {\r\n            var element = dictionaryGR.element.toString();\r\n            pload[dictionaryGR.element] = tableGR.getValue(element);\r\n        }\r\n        var requestBody = JSON.stringify(pload);\r\n        //gs.info(requestBody);\r\n        var request = new sn_ws.RESTMessageV2();\r\n        request.setEndpoint('https://' + targetInstance + '.service-now.com/api/now/table/' + table);\r\n        request.setHttpMethod('POST');\r\n        request.setBasicAuth(user, password);\r\n        request.setRequestHeader(\"Accept\", \"application/json\");\r\n        request.setRequestBody(requestBody);\r\n        var response = request.execute();\r\n        gs.log(response.getBody());\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "The script leverages the ServiceNow REST API to retrieve records from a specified table on the source instance, then transmits them to the target instance for insertion. As an example, it is set up to sync active user records, but it can be easily modified for any other table and filter criteria. Usage:",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Sync Data Between Instances",
        "scriptFiles": [
          "SyncData.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Sync%20Data%20Between%20Instances",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Sync%20Data%20Between%20Instances/SyncData.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.194Z",
    "updatedAt": "2025-09-21T08:58:58.838Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 375,
    "type": "fix_script",
    "name": "Swiss German Language Update",
    "description": "Swiss German Language Update This Fix Script replaces all \"ÃŸ\" special characters generated by the German language plugin (com.snc.i18n.german). In Swiss German, this character does not exist and must be replaced with \"ss\". Currently, unfortunately, there is no dedicated Swiss German language plugin available.",
    "script": "//edit all labels in sys_translated table\r\nvar sys_translated = new GlideRecord(\"sys_translated\");\r\nsys_translated.addQuery(\"language\", \"de\");\r\nsys_translated.addQuery(\"label\", \"CONTAINS\", \"ÃŸ\");\r\nsys_translated.query();\r\nif (sys_translated.hasNext()) {\r\n    var counter1 = 0;\r\n    while (sys_translated.next()) {\r\n        var old_label = sys_translated.label;\r\n        if (old_label.indexOf('ÃŸ') > -1) { //additional check is needed, since GlideRecord query does not uniquely recognize ÃŸ character\r\n            var new_label = old_label.replaceAll(\"ÃŸ\", \"ss\");\r\n            sys_translated.label.setDisplayValue(new_label);\r\n            sys_translated.update();\r\n            counter1++;\r\n        }\r\n    }\r\n    gs.log(\"in table sys_translated \" + counter1 + \" records were updated\");\r\n}\r\n\r\n//edit all labels in sys_ui_message table\r\nvar sys_ui_message = new GlideRecord(\"sys_ui_message\");\r\nsys_ui_message.addQuery(\"language\", \"de\");\r\nsys_ui_message.addQuery(\"message\", \"CONTAINS\", \"ÃŸ\");\r\nsys_ui_message.query();\r\nif (sys_ui_message.hasNext()) {\r\n    var counter2 = 0;\r\n    while (sys_ui_message.next()) {\r\n        var old_message = sys_ui_message.message;\r\n        if (old_message.indexOf('ÃŸ') > -1) { //additional check is needed, since GlideRecord query does not uniquely recognize ÃŸ character\r\n            var new_message = old_message.replaceAll(\"ÃŸ\", \"ss\");\r\n            sys_ui_message.message.setDisplayValue(new_message);\r\n            sys_ui_message.update();\r\n            counter2++;\r\n        }\r\n    }\r\n    gs.log(\"in table sys_ui_message \" + counter2 + \" records were updated\");\r\n}\r\n\r\n//edit all labels in sys_documentation table\r\nvar sys_documentation = new GlideRecord(\"sys_documentation\");\r\nsys_documentation.addQuery(\"language\", \"de\");\r\nsys_documentation.addQuery(\"label\", \"CONTAINS\", \"ÃŸ\").addOrCondition(\"plural\", \"CONTAINS\", \"ÃŸ\")\r\nsys_documentation.query();\r\nif (sys_documentation.hasNext()) {\r\n    var counter3 = 0;\r\n    while (sys_documentation.next()) {\r\n        var old_label = sys_documentation.label;\r\n        var old_plural = sys_documentation.plural;\r\n        if ((old_label.indexOf('ÃŸ') > -1) || (old_label.indexOf('ÃŸ') > -1)) { //additional check is needed, since GlideRecord query does not uniquely recognize ÃŸ character\r\n            var new_label = old_label.replaceAll(\"ÃŸ\", \"ss\");\r\n            var new_plural = old_plural.replaceAll(\"ÃŸ\", \"ss\");\r\n            sys_documentation.label.setDisplayValue(new_label);\r\n            sys_documentation.plural.setDisplayValue(new_plural);\r\n            sys_documentation.update();\r\n            counter3++;\r\n\t\t\tgs.log(new_value);\r\n\t\t\tgs.log(new_plural);\r\n        }\r\n    }\r\n    gs.log(\"in table sys_documentation \" + counter3 + \" records were updated\");\r\n}\r\n\r\n//edit all labels in sys_choice table\r\nvar sys_choice = new GlideRecord(\"sys_choice\");\r\nsys_choice.addQuery(\"language\", \"de\");\r\nsys_choice.addQuery(\"label\", \"CONTAINS\", \"ÃŸ\");\r\nsys_choice.query();\r\nif (sys_choice.hasNext()) {\r\n    var counter4 = 0;\r\n    while (sys_choice.next()) {\r\n        var old_label = sys_choice.label;\r\n        if (old_label.indexOf('ÃŸ') > -1) { //additional check is needed, since GlideRecord query does not uniquely recognize ÃŸ character\r\n            var new_label = old_label.replaceAll(\"ÃŸ\", \"ss\");\r\n            sys_choice.label.setDisplayValue(new_label);\r\n            sys_choice.update();\r\n            counter4++;\r\n        }\r\n    }\r\n    gs.log(\"in table sys_choice \" + counter4 + \" records were updated\");\r\n}\r\n\r\n//edit all values in sys_translated_text table\r\nvar sys_translated_text = new GlideRecord(\"sys_translated_text\");\r\nsys_translated_text.addQuery(\"language\", \"de\");\r\nsys_translated_text.addQuery(\"value\", \"CONTAINS\", \"ÃŸ\");\r\nsys_translated_text.query();\r\nif (sys_translated_text.hasNext()) {\r\n    var counter5 = 0;\r\n    while (sys_translated_text.next()) { //additional check is needed, since GlideRecord query does not uniquely recognize ÃŸ character\r\n        var old_value = sys_translated_text.value;\r\n        if (old_value.indexOf('ÃŸ') > -1) {\r\n            var new_value = old_value.replaceAll(\"ÃŸ\", \"ss\");\r\n            sys_translated_text.value.setDisplayValue(new_value);\r\n            sys_translated_text.update();\r\n            counter5++;\r\n        }\r\n    }\r\n    gs.log(\"in table sys_translated_text \" + counter5 + \" records were updated\");\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Swiss German Language Update This Fix Script replaces all \"ÃŸ\" special characters generated by the German language plugin (com.snc.i18n.german). In Swiss German, this character does not exist and must be replaced with \"ss\". Currently, unfortunately, there is no dedicated Swiss German language plugin available.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Swiss German Language Update",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Swiss%20German%20Language%20Update",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Swiss%20German%20Language%20Update/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.190Z",
    "updatedAt": "2025-09-21T08:58:58.835Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 374,
    "type": "fix_script",
    "name": "Search Results Weight",
    "description": "Find the weight of Search Results The order in which search results are returned is based on the weight of the object against the searched value.  This script can be run as a background script to determine what results are returned for specific search results and what their weight is in the search. This can be used to determine why one item might returned in front of another item.",
    "script": "var qSet = \"leave,maternity\"; //Search values\r\n\r\n\r\nvar q = qSet.split(\",\");\r\nvar message = \"\";\r\nq.sort();\r\n\r\nfor (var i=0;i<q.length;i++)\r\n{\r\n\t\r\n\tmessage =  message + \"\\n~~\" + q[i];\r\n\t\r\n\tvar sc = new GlideRecord('sc_cat_item');\r\n\tsc.addQuery('123TEXTQUERY321', q[i]);\r\n\tsc.addQuery('active',true);\r\n\tsc.addQuery('sys_class_name', 'NOT IN', 'sc_cat_item_wizard,sc_cat_item_content');\r\n\tsc.query();\r\n\tmessage =  message + \"\\n~~~~ FORMS RESULTS \" + q[i] + \"(\"+ sc.getRowCount() +\")\";\r\n\twhile (sc.next()) \r\n\t{\r\n\t\tmessage = message + \"\\n~~~~~~~~ \" +  sc.ir_query_score   + \" \" + sc.name;\t\r\n\t}\r\n\t\r\n\tvar kb = new GlideRecord('kb_knowledge');\r\n\tkb.addQuery('123TEXTQUERY321', q[i]);\r\n\tkb.addQuery('workflow_state', 'published');\r\n\tkb.addNotNullQuery('text');\t// tier 0 ans\r\n\tkb.setLimit(20);\r\n\t//kb.addQuery(getAgencyName(), true);\r\n\tkb.query();\r\n\tmessage =  message + \"\\n~~~~ KNOWLEDGE RESULTS \" + q[i] + \"(\"+ kb.getRowCount() +\")\";\r\n\twhile (kb.next()) \r\n\t{\r\n\t\tmessage = message + \"\\n~~~~~~~~ \" +  kb.ir_query_score   + \" \" + kb.number + \" \" + kb.short_description;\t\r\n\t}\t\r\n}\r\n\r\n\r\ngs.log(message,\"Search Results\");",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Find the weight of Search Results The order in which search results are returned is based on the weight of the object against the searched value.  This script can be run as a background script to determine what results are returned for specific search results and what their weight is in the search. This can be used to determine why one item might returned in front of another item.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Search Results Weight",
        "scriptFiles": [
          "sr_weight.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Search%20Results%20Weight",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Search%20Results%20Weight/sr_weight.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.186Z",
    "updatedAt": "2025-09-21T08:58:58.831Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 373,
    "type": "fix_script",
    "name": "SchemaGenerator",
    "description": "The mentioned script provides a schema for any table in ServiceNow.",
    "script": "var table = '<name_of_the_table_for_schema_generation>';    // Ex: incident,cmdb_ci_server,etc.\r\nvar fields = getTableColumns(table);\r\nvar fieldGr = new GlideRecord('sys_dictionary');\r\nfieldGr.addEncodedQuery(fields);\r\nfieldGr.query();\r\nvar schema = {};\r\nvar data = new GlideRecord(table);\r\ndata.setLimit(1);\r\ndata.query();\r\nif (data.next()) {\r\n    while (fieldGr.next()) {\r\n        var obj = {};\r\n        var choices = GlideChoiceList.getChoiceList(table, fieldGr.element);\r\n        var check = false;\r\n        if (choices.getSize() > 1) {\r\n            check = true;\r\n        }\r\n        obj['label'] = fieldGr.getValue('column_label');\r\n        // if custom label is present\r\n        var customLabel = new GlideRecord('sys_documentation');\r\n        customLabel.addEncodedQuery('name=' + table + '^element=' + fieldGr.element.toString());\r\n        customLabel.query();\r\n        if (customLabel.next()) {\r\n            obj['label'] = customLabel.label.toString();\r\n        }\r\n        obj['max_length'] = (fieldGr.internal_type == 'reference' || fieldGr.internal_type == 'domain_id') ? 32 : fieldGr.getValue('max_length');\r\n        obj['choice_list'] = check;\r\n        obj['internal_type'] = fieldGr.getValue('internal_type');\r\n        obj['active_status'] = fieldGr.getValue('active');\r\n        if (check == true) {\r\n            var obj2 = {};\r\n            for (var i = 0; i < choices.getSize(); i++) {\r\n                obj2[choices.getChoice(i).getLabel().toString()] = choices.getChoice(i).getValue().toString();\r\n            }\r\n            obj['choice_list_values'] = obj2;\r\n        }\r\n        if (fieldGr.internal_type == 'reference' || fieldGr.internal_type == 'domain_id') {\r\n            obj['reference_table'] = fieldGr.getValue('reference');\r\n            obj['reference_field_max_length'] = fieldGr.getValue('max_length');\r\n        }\r\n        schema[fieldGr.element] = obj;\r\n    }\r\n}\r\ngs.print(JSON.stringify(schema));\r\n\r\n\r\nfunction getTableColumns(table) {\r\n    // Get the ancestors of the given table using the SNC.TableEditor.getTableAncestors function\r\n    var tableAncestors = SNC.TableEditor.getTableAncestors(table);\r\n    // Create a new GlideRecord for the 'sys_dictionary' table\r\n    var gr = new GlideRecord('sys_dictionary');\r\n    // Add a query to find all records where the 'name' field is one of the ancestors of the given table\r\n    gr.addQuery('name', 'ONE IN', tableAncestors);\r\n    // Add a query to exclude any records where the 'element' field is NULL\r\n    gr.addQuery('element', '!=', 'NULL');\r\n    // Execute the query\r\n    gr.query();\r\n    // Create an empty array called 'sysIds'\r\n    var sysIds = []; //Changed the variable name 'array' to a more descriptive name 'sysIds'.\r\n    //Changed the 'new Array()' syntax to an array literal syntax '[]' for consistency and readability.\r\n    // Loop through each record in the GlideRecord\r\n    while (gr.next()) {\r\n        // Add the sys_id of the current record to the 'sysIds' array as a string\r\n        sysIds.push(gr.sys_id.toString());\r\n    }\r\n    // Return a string that consists of 'sys_idIN' followed by a comma-separated list of the sys_id values in the 'sysIds' array\r\n    //Changed the return statement to explicitly concatenate the string 'sys_idIN' and the sys_id values in the 'sysIds' array using the 'join' method instead of relying on implicit type conversion.\r\n    return 'sys_idIN' + sysIds.join(',');\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "The mentioned script provides a schema for any table in ServiceNow.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/SchemaGenerator",
        "scriptFiles": [
          "schemaGenerator.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/SchemaGenerator",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/SchemaGenerator/schemaGenerator.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.183Z",
    "updatedAt": "2025-09-21T08:58:58.828Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 372,
    "type": "fix_script",
    "name": "Run Subscription Job On Demand",
    "description": "Usage If you wish to update/re-calculate your allocated entitlements on the subscription management dashboard, execute the following two lines of code. You can run this server script either in the background script or maintain it as a fix script and run it on-demand.",
    "script": "var summarizer = new SNC.SubscriptionSummarizer();\r\nsummarizer.runSummary();",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Usage If you wish to update/re-calculate your allocated entitlements on the subscription management dashboard, execute the following two lines of code. You can run this server script either in the background script or maintain it as a fix script and run it on-demand.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Run Subscription Job On Demand",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Run%20Subscription%20Job%20On%20Demand",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Run%20Subscription%20Job%20On%20Demand/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.179Z",
    "updatedAt": "2025-09-21T08:58:58.824Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 371,
    "type": "fix_script",
    "name": "Restore From Audit History",
    "description": "This script retrieves the most recent old value of a specified field from the audit history of a given record in ServiceNow. It queries the sysaudit table, filtering by the table name, field name, and document key (record ID). The results are ordered by the creation date in descending order, and only the latest entry is returned.",
    "script": "/*************\r\nPre-requisite\r\nMake Sure columns of sys_audit table - (tablename, fieldname & documentkey) are indexed for better query result.\r\n**************/\r\nfunction getAuditHistoryData(id, field, table) {\r\n    // Create a new GlideRecord object for the 'sys_audit' table\r\n    var grSysAudit = new GlideRecord('sys_audit');\r\n    \r\n    // Add query conditions to filter by table name, field name, and document key (record ID)\r\n    grSysAudit.addEncodedQuery(\"tablename=\" + table + \"^fieldname=\" + field + \"^documentkey=\" + id);\r\n    \r\n    // Order the results by the creation date in descending order\r\n    grSysAudit.orderByDesc('sys_created_on');\r\n    \r\n    // Limit the results to the most recent entry\r\n    grSysAudit.setLimit(1);\r\n    \r\n    // Execute the query\r\n    grSysAudit.query();\r\n    \r\n    // Iterate through the results (should only be one due to limit)\r\n    while (grSysAudit.next()) {\r\n        // Return the old value of the field from the audit record\r\n        return grSysAudit.getValue('oldvalue');\r\n    }\r\n}\r\n\r\n/*************\r\nExample Script to Invoke the Function and Update the Record\r\nScenario: Revert the incident state to its previous value after it was mistakenly marked as canceled.\r\n**************/\r\n\r\nvar grIncident = new GlideRecord('incident');\r\nif (grIncident.get('<incident_sys_id>')) {\r\n  grIncident.state = getAuditHistoryData('incident_sys_id', 'state', 'incident');\r\n}\r\n\r\n/****************\r\nGeneric Script\r\n****************/\r\nvar tableName= '<your_table_name>';\r\nvar recordSysId = '<record_sys_id>';\r\nvar field = 'field_name';\r\nvar grIncident = new GlideRecord(tableName);\r\nif (grIncident.get(recordSysId)) {\r\n  grIncident[field] = getAuditHistoryData(recordSysId, field, tableName);\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "This script retrieves the most recent old value of a specified field from the audit history of a given record in ServiceNow. It queries the sysaudit table, filtering by the table name, field name, and document key (record ID). The results are ordered by the creation date in descending order, and only the latest entry is returned.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Restore From Audit History",
        "scriptFiles": [
          "restore_from_audit_fix.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Restore%20From%20Audit%20History",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Restore%20From%20Audit%20History/restore_from_audit_fix.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.175Z",
    "updatedAt": "2025-09-21T08:58:58.820Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 370,
    "type": "fix_script",
    "name": "Restart Flow (CatalogItem)",
    "description": "Restart a Catalog Item Flow To be used as a fix script or background script to restart a flow for a catalog item or selection of catalog items.  Typically this might be used in a scenarion in which you've modified a Flow and need to ensure that existing items are running the current version of the flow. Note: This will RESTART your flows from the beginning.  So if your item is in progress you m...",
    "script": "var ritm = new GlideRecord('sc_req_item');\r\nvar enc = '';\r\nritm.addEncodedQuery(enc);\r\nritm.query();\r\nwhile (ritm.next()){\r\n\tritm.state = '1';\r\n\tritm.approval = 'requested';\r\n\tritm.setWorkflow(false);\r\n\tritm.autoSysFields(false);\r\n\tritm.update();\r\n\r\n\t// Execute the global flow called test_flow \r\n\tsn_flow_trigger.FlowTriggerAPI.fireCatalogTrigger('flow_name', ritm);\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Restart a Catalog Item Flow To be used as a fix script or background script to restart a flow for a catalog item or selection of catalog items.  Typically this might be used in a scenarion in which you've modified a Flow and need to ensure that existing items are running the current version of the flow. Note: This will RESTART your flows from the beginning.  So if your item is in progress you m...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Restart Flow (CatalogItem)",
        "scriptFiles": [
          "restart_flow.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Restart%20Flow%20(CatalogItem)",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Restart%20Flow%20(CatalogItem)/restart_flow.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.171Z",
    "updatedAt": "2025-09-21T08:58:58.817Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 369,
    "type": "fix_script",
    "name": "Remove leading and trailing spaces",
    "description": "Fix script to remove leading and trailing spaces from a field in bulk - we often encounter in a situation that a field has leading or trailing spaces and we want to remove it - This fix script helps to remove leading and trailing spaces from a field in bulk number.",
    "script": "var page = 1;\r\nvar count = 0;\r\nvar infoMsg = 'Fix Script to remove leading or trailing spaces from short_description. \\n';\r\nvar sd = '';  //sd inshort for shortdescription \r\n\r\n\r\nvar regExSpacecheck = /^\\s+|\\s+$/g;  //regular expression to check if a sentence has leading and trailing spaces.\r\n\r\nvar grInc = new GlideRecord('incident');\r\ngrInc.addEncodedQuery('short_descriptionISNOTEMPTY');\r\ngrInc.query();\r\nwhile (grInc.next()) {\r\n\r\n    if (regExSpacecheck.test(grInc.short_description)) {\r\n\r\n        infoMsg += 'incident record found with leading or trailing space for short_description: ' + grInc.sys_id + '\\n';\r\n        infoMsg += 'Sd ' + grInc.short_description + 'Contains leading or trailing spaces \\n';\r\n        sd = grInc.short_description;\r\n        sd = sd.trim();    //trimmed value of short description\r\n        infoMsg += 'sd is ' + sd + '\\n';\r\n\r\n        if (regExSpacecheck.test(sd)) {\r\n            infoMsg += 'sd: ' + sd + ' still has a trailing space\\n';\r\n        } else {\r\n            infoMsg += 'sd: ' + sd + ' no longer contains trailing space \\n';\r\n        }\r\n        //Replace the value for u_location_svid with the trimmed version\r\n        grInc.setValue('short_description', sd);\r\n        grInc.setWorkflow(false);\r\n        grInc.update();\r\n\r\n        count++;\r\n\r\n        if (count == 50) {\r\n            gs.info(infoMsg);\r\n            page++;\r\n            count = 0;\r\n            infoMsg = 'Fix Script to remove leading or trailing spaces from short_description  (' + page + ')\\n';\r\n        }\r\n\r\n    }\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Fix script to remove leading and trailing spaces from a field in bulk - we often encounter in a situation that a field has leading or trailing spaces and we want to remove it - This fix script helps to remove leading and trailing spaces from a field in bulk number.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Remove leading and trailing spaces",
        "scriptFiles": [
          "RemoveLeadingTrailingSpaces.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Remove%20leading%20and%20trailing%20spaces",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Remove%20leading%20and%20trailing%20spaces/RemoveLeadingTrailingSpaces.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.168Z",
    "updatedAt": "2025-09-21T08:58:58.813Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 368,
    "type": "fix_script",
    "name": "Reject RITM via fix script",
    "description": "This fix script helps to reject the RITM in a scenario where workflow not triggered properly, so we can use this script manually to reject the RITM. Recently I also landed up into the same situation where workflow not able to the reject the RITM so at that point of time this script was a life saver to without having any business impact.",
    "script": "var item = new GlideRecord(\"sc_req_item\");\r\nitem.addQuery(\"sys_id\",\"31cd7552db252200a6a2b31be0b8f55c\"); // sys_id of the RITM\r\nitem.query();\r\nif(item.next()){\r\n  var approval = new GlideRecord(\"sysapproval_approver\");\r\n  approval.addQuery(\"document_id\",item.getUniqueValue()); // Get the sys_Id of document Id field on approval table\r\n  approval.query();\r\n  if(approval.next()){\r\n    approval.state=\"Rejected\";\r\n    item.apprpval=\"Rejected\";\r\n  }\r\n  item.setWorkflow(false);\r\n  item.update();\r\n  approval.update(); // Update the record on approval table.\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "This fix script helps to reject the RITM in a scenario where workflow not triggered properly, so we can use this script manually to reject the RITM. Recently I also landed up into the same situation where workflow not able to the reject the RITM so at that point of time this script was a life saver to without having any business impact.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Reject RITM via fix script",
        "scriptFiles": [
          "Reject RITM.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Reject%20RITM%20via%20fix%20script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Reject%20RITM%20via%20fix%20script/Reject%20RITM.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.164Z",
    "updatedAt": "2025-09-21T08:58:58.810Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 367,
    "type": "fix_script",
    "name": "Post-clone Set Instance Banner",
    "description": "Set a unique banner to your non-production instance to help users realise where they are :) Can be used as clean-up script on a clone profile, or run as fix script, background script etc. manually on the target instance after cloning. Prerequisites:",
    "script": "/**\r\n* You can add this as clean-up script to a clone profile or run as fix script, background script etc. manually on the target instance after cloning.\r\n*\r\n*\r\n* Prerequisites:\r\n*\r\n* 1) You need to have the target instance's banner image attached to a record on the source system,  \r\n* e.g. have a knowledge article in production with the banner attached to it.\r\n*\r\n* 2) Make sure the table above mentioned table and record and included in your clone!\r\n*\r\n* 3) Set the source table name and the source record's sys_id as values for srcTbl and srcRec variables in the below section!\r\n**/\r\n\r\n/** MAKE SURE TO SET THESE 2 VARIABLES **/\r\nvar srcTbl = ''; // TABLE NAME, e.g. kb_knowledge\r\nvar srcRec = ''; // SYS ID of the record that you have attached the target instance's banner\r\n\r\n// Copy attachment from KBA\r\nGlideSysAttachment.copy(srcTbl,srcRec,'sys_properties','3458de2aff7102007729ffffffffff7c'); // glide.product.image.light\r\nGlideSysAttachment.copy(srcTbl,srcRec,'sys_properties','71e1b8dac0a8016a01ea6a1ca634c46d'); // glide.product.image\r\n\r\n// Get attachment sys_ids\r\nvar lightIMG = new GlideRecord('sys_attachment');\r\nlightIMG.addQuery('table_sys_id','3458de2aff7102007729ffffffffff7c');\r\nlightIMG.setLimit(1);\r\nlightIMG.query();\r\nvar lightIMGID = '';\r\nwhile(lightIMG.next()){\r\n  lightIMGID = lightIMG.sys_id;\r\n}\r\n\r\nvar IMG = new GlideRecord('sys_attachment');\r\nIMG.addQuery('table_sys_id','71e1b8dac0a8016a01ea6a1ca634c46d ');\r\nIMG.setLimit(1);\r\nIMG.query();\r\nvar IMGID = '';\r\nwhile(IMG.next()){\r\n  IMGID = IMG.sys_id;\r\n}\r\n\r\n// Set attachment sys_id in respective properties\r\nvar propLightIMG = new GlideRecord('sys_properties');\r\npropLightIMG.get('3458de2aff7102007729ffffffffff7c');\r\npropLightIMG.setValue('value',lightIMGID + '.iix');\r\npropLightIMG.update();\r\n\r\nvar propIMG = new GlideRecord('sys_properties');\r\npropIMG.get('71e1b8dac0a8016a01ea6a1ca634c46d');\r\npropIMG.setValue('value',IMGID + '.iix');\r\npropIMG.update();",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Set a unique banner to your non-production instance to help users realise where they are :) Can be used as clean-up script on a clone profile, or run as fix script, background script etc. manually on the target instance after cloning. Prerequisites:",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Post-clone Set Instance Banner",
        "scriptFiles": [
          "set_instance_banner.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Post-clone%20Set%20Instance%20Banner",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Post-clone%20Set%20Instance%20Banner/set_instance_banner.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.160Z",
    "updatedAt": "2025-09-21T08:58:58.807Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 366,
    "type": "fix_script",
    "name": "Post-clone Set Banner Name",
    "description": "Post-clone script for email properties To be used as a fix script or background script, meant to help with small adjustments needed per-environment after a clone. Notes: Make sure you fill in all of the instance names up top, with anything in your instance name before the [.service-now.com]",
    "script": "//define the email redirect here, just in case any emails get through...\r\nvar emailRedirect = \"\";\r\n//define the instance names here\r\nvar devInstance = \"\";\r\nvar testInstance = \"\";\r\nvar learnInstance = \"\";\r\nvar prodInstance = \"\";\r\nvar extraInstance = \"\"\r\n\r\n//get this instance's name\r\nvar thisInstance = gs.getProperty(\"instance_name\");\r\n\r\nswitch (thisInstance) {\r\n    case devInstance:\r\n        setConfig();\r\n        break;\r\n    case extraInstance:\r\n        setConfig();\r\n        break;\r\n    case testInstance:\r\n        setConfig();\r\n        break;\r\n    case learnInstance:\r\n        setConfig();\r\n        break;\r\n    case prodInstance:\r\n        gs.print(\"**** You're running this script in production, are you asking for trouble?\");\r\n        break;\r\n    default:\r\n        gs.print(\"**** I don't understand what this instance is for: \" + thisInstance);\r\n}\r\n\r\nfunction setConfig() {\r\n    setHeaderName();\r\n\r\n    gs.print(\"Applied \" + thisInstance + \" Configurations\");\r\n\r\n}\r\n\r\nfunction setHeaderName() {\r\n    //set header name\r\n\r\n    //get the current date\r\n    var glideDate = GlideDate();\r\n    gs.info(glideDate.getByFormat(\"dd-MM-yyyy\"));\r\n    var instance = gs.getProperty(\"instance_name\");\r\n    //set the \"glide.product.description\" property based on the instance suffix and current date to display in the banner frame\r\n    gs.setProperty(\"glide.product.description\", \"ServiceNow Environment (Cloned on \" + glideDate.getDisplayValue().replace(\" \", \" @ \") + \")\");\r\n\r\n    var finalHeader = gs.getProperty(\"glide.product.description\");\r\n    gs.print(\"Header set to \" + finalHeader + \".\");\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Post-clone",
      "notes": "Post-clone script for email properties To be used as a fix script or background script, meant to help with small adjustments needed per-environment after a clone. Notes: Make sure you fill in all of the instance names up top, with anything in your instance name before the [.service-now.com]",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Post-clone Set Banner Name",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Post-clone%20Set%20Banner%20Name",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Post-clone%20Set%20Banner%20Name/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.156Z",
    "updatedAt": "2025-09-21T08:58:58.803Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 365,
    "type": "fix_script",
    "name": "Post-clone Email Properties Script",
    "description": "Post-clone script for email properties To be used as a fix script or background script, meant to help with small adjustments needed per-environment after a clone. Notes: Make sure you fill in all of the instance names up top, with anything in your instance name before the [.service-now.com]",
    "script": "//define the email redirect here, just in case any emails get through...\r\nvar emailRedirect = \"\";\r\n//define the instance names here\r\nvar devInstance = \"\";\r\nvar testInstance = \"\";\r\nvar learnInstance = \"\";\r\nvar prodInstance = \"\";\r\nvar extraInstance = \"\"\r\n\r\n//get this instance's name\r\nvar thisInstance = gs.getProperty(\"instance_name\");\r\n\r\nswitch (thisInstance) {\r\n    case devInstance:\r\n        setConfig();\r\n        break;\r\n    case extraInstance:\r\n        setConfig();\r\n        break;\r\n    case testInstance:\r\n        setConfig();\r\n        break;\r\n    case learnInstance:\r\n        setConfig();\r\n        break;\r\n    case prodInstance:\r\n        gs.print(\"**** You're running this script in production, are you asking for trouble?\");\r\n        break;\r\n    default:\r\n        gs.print(\"**** I don't understand what this instance is for: \" + thisInstance);\r\n}\r\n\r\nfunction setConfig() {\r\n    setEmailProperties();\r\n\r\n    gs.print(\"Applied \" + thisInstance + \" Configurations\");\r\n\r\n}\r\n\r\nfunction setEmailProperties() {\r\n    //disable email notifications\r\n    gs.setProperty(\"glide.email.read.active\", true);\r\n    gs.setProperty(\"glide.email.smtp.active\", false);\r\n\r\n    //Sets outbound email to test inbox\r\n    gs.setProperty(\"glide.email.test.user\", emailRedirect);\r\n\r\n    var afterEmailProperty = gs.getProperty(\"glide.email.test.user\");\r\n    gs.print(\"The test email account has been set to \" + afterEmailProperty + \".\");\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Post-clone",
      "notes": "Post-clone script for email properties To be used as a fix script or background script, meant to help with small adjustments needed per-environment after a clone. Notes: Make sure you fill in all of the instance names up top, with anything in your instance name before the [.service-now.com]",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Post-clone Email Properties Script",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Post-clone%20Email%20Properties%20Script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Post-clone%20Email%20Properties%20Script/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.152Z",
    "updatedAt": "2025-09-21T08:58:58.800Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 364,
    "type": "fix_script",
    "name": "Post-clone Clear Email Queue",
    "description": "Post-clone script for email properties To be used as a fix script or background script, meant to help with small adjustments needed per-environment after a clone. Notes: Make sure you fill in all of the instance names up top, with anything in your instance name before the [.service-now.com]",
    "script": "//define the email redirect here, just in case any emails get through...\r\nvar emailRedirect = \"\";\r\n//define the instance names here\r\nvar devInstance = \"\";\r\nvar testInstance = \"\";\r\nvar learnInstance = \"\";\r\nvar prodInstance = \"\";\r\nvar extraInstance = \"\"\r\n\r\n//get this instance's name\r\nvar thisInstance = gs.getProperty(\"instance_name\");\r\n\r\nswitch (thisInstance) {\r\n    case devInstance:\r\n        setConfig();\r\n        break;\r\n    case extraInstance:\r\n        setConfig();\r\n        break;\r\n    case testInstance:\r\n        setConfig();\r\n        break;\r\n    case learnInstance:\r\n        setConfig();\r\n        break;\r\n    case prodInstance:\r\n        gs.print(\"**** You're running this script in production, are you asking for trouble?\");\r\n        break;\r\n    default:\r\n        gs.print(\"**** I don't understand what this instance is for: \" + thisInstance);\r\n}\r\n\r\nfunction setConfig() {\r\n    clearEmailQueue();\r\n\r\n    gs.print(\"Applied \" + thisInstance + \" Configurations\");\r\n\r\n}\r\n\r\nfunction clearEmailQueue() {\r\n    // Clear out the email queue\r\n    var ignoreEmail = new GlideRecord('sys_email');\r\n    ignoreEmail.addQuery('type', 'send-ready');\r\n    ignoreEmail.query();\r\n    while (ignoreEmail.next()) {\r\n        ignoreEmail.type = 'send-ignored';\r\n        gs.print('Email ' + ignoreEmail.subject + ' ignored');\r\n        ignoreEmail.update();\r\n    }\r\n    gs.print(\"Email queue cleared!\");\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Post-clone",
      "notes": "Post-clone script for email properties To be used as a fix script or background script, meant to help with small adjustments needed per-environment after a clone. Notes: Make sure you fill in all of the instance names up top, with anything in your instance name before the [.service-now.com]",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Post-clone Clear Email Queue",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Post-clone%20Clear%20Email%20Queue",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Post-clone%20Clear%20Email%20Queue/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.148Z",
    "updatedAt": "2025-09-21T08:58:58.796Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 363,
    "type": "fix_script",
    "name": "Multiply records from filer breadcrumbs",
    "description": "Multiply records from filer breadcrumbs Using this script you can multiply records (such as Story, Incident, SCTASK, ...), while assigning them to a different user. The script will also copy the attachments to the duplicate record.",
    "script": "//Enter the table name\r\nvar table = 'rm_story';\r\n\r\n//Enter filer breadcrumbs, the script will multiply the records that match the conditions\r\nvar breadcrumbs = \"short_descriptionSTARTSWITHexample\";\r\n\r\n//The script will create as many duplicates of the filtered records as many user SysIds you add to the \"assignedToUsers\" array\r\n//Make sure that the user is a member of the Assignment group, or the record will be created without an assignee\r\n\r\nvar assignedToUsers = [\"d2dd13ea1b2e919039f811739b4bcbe4\", \"dedd13ea1b2e919039f811739b4bcbdc\"];\r\n\r\nvar gr = new GlideRecord(table);\r\ngr.addEncodedQuery(breadcrumbs);\r\ngr.query();\r\nwhile (gr.next()) {\r\n    //clone the old sysID for copying the attachments later\r\n    var oldSysId = gr.sys_id.toString();\r\n\r\n    for (var i = 0; i < assignedToUsers.length; i++) {\r\n        //assign a the next available number on the table to the record\r\n        gr.number = new NumberManager(table).getNextObjNumberPadded();\r\n        //modify the Assign to value to the one in the array\r\n        gr.assigned_to = assignedToUsers[i];\r\n        //create the duplicate, and save the new record's sys_id\r\n        var newSysId = gr.insert();\r\n        //copy the attachments from the original record to the duplicated one\r\n        new GlideSysAttachment().copy(table, oldSysId, table, newSysId);\r\n        gr.update();\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Multiply records from filer breadcrumbs Using this script you can multiply records (such as Story, Incident, SCTASK, ...), while assigning them to a different user. The script will also copy the attachments to the duplicate record.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Multiply records from filer breadcrumbs",
        "scriptFiles": [
          "Multiply records.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Multiply%20records%20from%20filer%20breadcrumbs",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Multiply%20records%20from%20filer%20breadcrumbs/Multiply%20records.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.145Z",
    "updatedAt": "2025-09-21T08:58:58.793Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 362,
    "type": "fix_script",
    "name": "Migrate data from one table to another",
    "description": "Migrate data from one table to another Sometimes we have to migrate data from one table to another but there has been a lot of customizations on the existing table including the custom columns. In order to ensure there is no data loss while migrating data, we must have one backup table sndatafixbackup where we push data before starting migration and there will be no data loss even in the case o...",
    "script": "var BACKUP_TABLE_NAME = \"sn_data_fix_backup\";\r\nvar UNPROCESSED_BACKUP_STATE = 0;\r\nvar PROCESSED_BACKUP_STATE = 1;\r\n\r\nvar sourceTable = \"\";\r\nvar targetTable = \"\";\r\nvar alternateMapping = { external_id: \"model_number\" };\r\nvar excludeColumns = [\"external_id\", \"source\"];\r\n\r\n// migrate(sourceTable, targetTable, alternateMapping, excludeColumns);\r\n\r\nfunction migrate(sourceTable, targetTable, alternateMapping, excludeColumns) {\r\n  gs.info(\"Upgrade: Migrating '{0}' data.\", sourceTable);\r\n\r\n  if (updateDictionaryReferences(sourceTable, targetTable)) {\r\n    migrateData(sourceTable, targetTable, alternateMapping, excludeColumns);\r\n\r\n    if (validateMigration(sourceTable)) deprecateTable(sourceTable);\r\n    else gs.error(\"Upgrade: Migration of '{0}' was not successful so not deprecating the table.\", sourceTable);\r\n  }\r\n\r\n  gs.info(\"Upgrade: '{0}' migration completed.\", sourceTable);\r\n}\r\n\r\nfunction validateMigration(sourceTable) {\r\n  gs.info(\"Upgrade: Validating migration for '{0}'.\", sourceTable);\r\n\r\n  try {\r\n    var sourceGr = new GlideRecord(sourceTable);\r\n    sourceGr.query();\r\n\r\n    if (sourceGr.getRowCount() != 0) {\r\n      gs.info(\"Upgrade: Found {0} records in the old '{1}' table.\", sourceGr.getRowCount(), sourceTable);\r\n      return false;\r\n    }\r\n\r\n    gs.info(\"Upgrade: Successfully validated migration of '{0}'.\", sourceTable);\r\n    return true;\r\n  } catch (ex) {\r\n    gs.error(\"Upgrade: Exception occurred while validating migration for '{0}'.\", sourceTable);\r\n  }\r\n}\r\n\r\nfunction updateDictionaryReferences(sourceTableName, targetTableName) {\r\n  gs.info(\"Upgrade: Starting Dictionary update where '{0}' is being referenced.\", sourceTableName);\r\n\r\n  try {\r\n    // Creating GlideRecord object to access records from sys_dictionary\r\n    var dictionaryGr = new GlideRecord(\"sys_dictionary\");\r\n\r\n    // Using addEncodedQuery to filter the required records\r\n    dictionaryGr.addEncodedQuery(\"reference=\" + sourceTableName);\r\n    dictionaryGr.query();\r\n\r\n    // Looping through each record and updating 'reference' field\r\n    while (dictionaryGr.next()) {\r\n      dictionaryGr.setValue(\"reference\", targetTableName);\r\n      dictionaryGr.update();\r\n    }\r\n\r\n    gs.info(\"Upgrade: Completed Dictionary update where '{0}' is being referenced.\", sourceTableName);\r\n\r\n    return true;\r\n  } catch (ex) {\r\n    gs.error(\r\n      \"Upgrade: Exception occurred during Dictionary update where '{0}' is being referenced: {1}\",\r\n      sourceTableName,\r\n      ex\r\n    );\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction deprecateTable(tableName) {\r\n  gs.info(\"Upgrade: starting deprecating '{0}'.\", tableName);\r\n\r\n  var deprecationLabel = \" (deprecated)\";\r\n  var dictGr = new GlideRecord(\"sys_documentation\");\r\n  dictGr.addQuery(\"name\", tableName);\r\n  dictGr.addQuery(\"element\", \"\");\r\n  dictGr.addEncodedQuery(\"labelNOT LIKE(deprecated)\");\r\n  dictGr.query();\r\n\r\n  if (dictGr.next()) {\r\n    dictGr.setValue(\"label\", dictGr.label + deprecationLabel);\r\n    dictGr.setValue(\"plural\", dictGr.plural + deprecationLabel);\r\n    dictGr.setValue(\"hint\", dictGr.hint + deprecationLabel);\r\n    dictGr.update();\r\n    gs.info(\"Upgrade: Successfully deprecated '{0}'\", tableName);\r\n  } else {\r\n    gs.info(\"Upgrade: No table '{0}' found to deprecate\", tableName);\r\n  }\r\n}\r\n\r\nfunction cloneColumn(sourceTableName, targetTableName, columnName) {\r\n  // Get the source column's record\r\n  var sourceColumnGR = new GlideRecord(\"sys_dictionary\");\r\n  sourceColumnGR.addQuery(\"name\", sourceTableName);\r\n  sourceColumnGR.addQuery(\"element\", columnName);\r\n  sourceColumnGR.query();\r\n\r\n  if (sourceColumnGR.next()) {\r\n    // Create a new sys_dictionary record\r\n    var colLabel = sourceColumnGR.getValue(\"column_label\");\r\n    var colName = sourceColumnGR.getValue(\"element\");\r\n    var colType = sourceColumnGR.getValue(\"internal_type\");\r\n    var colMaxLength = sourceColumnGR.getValue(\"max_length\");\r\n    var colReference = sourceColumnGR.getValue(\"reference\");\r\n    var colDefaultValue = sourceColumnGR.getValue(\"default_value\");\r\n    var colScopeID = sourceColumnGR.getValue(\"sys_scope\");\r\n    SncTableEditor.createElement(\r\n      targetTableName,\r\n      colLabel,\r\n      colName,\r\n      colType,\r\n      colMaxLength,\r\n      colReference,\r\n      colDefaultValue,\r\n      colScopeID\r\n    );\r\n\r\n    var newDictionaryGR = new GlideRecord(\"sys_dictionary\");\r\n    newDictionaryGR.addQuery(\"element\", colName);\r\n    newDictionaryGR.addQuery(\"name\", targetTableName);\r\n    newDictionaryGR.query();\r\n\r\n    var excludeFields = [\r\n      \"name\",\r\n      \"column_label\",\r\n      \"element\",\r\n      \"internal_type\",\r\n      \"max_length\",\r\n      \"reference\",\r\n      \"default_value\",\r\n      \"sys_scope\",\r\n      \"sys_update_name\",\r\n    ];\r\n\r\n    if (newDictionaryGR.next()) {\r\n      newDictionaryGR.setWorkflow(false);\r\n      // Loop through all attributes of the source column\r\n      var all_fields = sourceColumnGR.getFields();\r\n\r\n      for (var i = 0; i < all_fields.size(); i++) {\r\n        var fieldName = all_fields.get(i).getName();\r\n\r\n        if (excludeFields.indexOf(fieldName) != -1) {\r\n          continue;\r\n        }\r\n\r\n        var fieldValue = sourceColumnGR.getValue(fieldName);\r\n        // Set the attribute value in the new sys_dictionary record\r\n        newDictionaryGR.setValue(fieldName, fieldValue);\r\n      }\r\n\r\n      // Insert the new sys_dictionary record\r\n      newDictionaryGR.update();\r\n\r\n      gs.info(\"Upgrade: sys_dictionary record updated with sys_id '{0}'.\", newDictionaryGR.getUniqueValue());\r\n    }\r\n  } else {\r\n    gs.error(\"Upgrade: Source column not found with name '{0}' on table '{1}'.\", columnName, sourceTableName);\r\n  }\r\n}\r\n\r\nfunction getListOfColumnNames(table) {\r\n  var columnGR = new GlideRecord(table);\r\n  columnGR.query();\r\n\r\n  var fields = columnGR.getFields();\r\n  var columns = [];\r\n\r\n  for (var i = 0; i < fields.size(); i++) {\r\n    var fieldName = fields.get(i).getName();\r\n    columns.push(fieldName);\r\n  }\r\n\r\n  return columns;\r\n}\r\n\r\n// function to save the backup of the table records as json string.\r\nfunction backupRecord(sourceGr, sourceColumns) {\r\n  try {\r\n    var values = {};\r\n\r\n    for (var i = 0; i < sourceColumns.length; i++) {\r\n      values[sourceColumns[i]] = sourceGr.getValue(sourceColumns[i]);\r\n    }\r\n\r\n    var backupTableGr = new GlideRecord(BACKUP_TABLE_NAME);\r\n    backupTableGr.initialize();\r\n    backupTableGr.setValue(\"record_id\", sourceGr.getUniqueValue());\r\n    backupTableGr.setValue(\"table_name\", sourceGr.getValue(\"sys_class_name\"));\r\n    backupTableGr.setValue(\"state\", UNPROCESSED_BACKUP_STATE);\r\n    backupTableGr.setValue(\"values\", JSON.stringify(values));\r\n    backupTableGr.insert();\r\n    gs.info(\r\n      \"Upgrade: Successfully created backup record of '{0}' table with sys_id '{1}'\",\r\n      sourceGr.getValue(\"sys_class_name\"),\r\n      sourceGr.getUniqueValue()\r\n    );\r\n\r\n    return backupTableGr;\r\n  } catch (ex) {\r\n    gs.error(\"Upgrade: Exception occurred while creating backup record: {0}\", ex);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction backupTable(sourceTableName) {\r\n  gs.info(\"Upgrade: Starting backing up records of '{0}' table\", sourceTableName);\r\n\r\n  try {\r\n    var sourceColumns = getListOfColumnNames(sourceTableName);\r\n    var backupGr = new GlideRecord(sourceTableName);\r\n    backupGr.query();\r\n\r\n    while (backupGr.next()) {\r\n      backupRecord(backupGr, sourceColumns);\r\n    }\r\n\r\n    gs.info(\"Upgrade: Successfully backup records of '{0}' table.\", sourceTableName);\r\n\r\n    return true;\r\n  } catch (ex) {\r\n    gs.error(\"Upgrade: Exception occurred while backing up data for '{0}' table\", sourceTableName);\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction migrateData(sourceTableName, targetTableName, alternateMapping, skipColumns) {\r\n  try {\r\n    if (!backupTable(sourceTableName)) return;\r\n\r\n    var sourceColumns = getListOfColumnNames(sourceTableName);\r\n    var targetColumns = getListOfColumnNames(targetTableName);\r\n    var excludeColumns = skipColumns.concat([\"sys_class_name\", \"sys_update_name\"]);\r\n\r\n    for (var i = 0; i < sourceColumns.length; i++) {\r\n      if (excludeColumns.indexOf(sourceColumns[i]) != -1) {\r\n        continue;\r\n      }\r\n\r\n      if (targetColumns.indexOf(sourceColumns[i]) == -1) {\r\n        var targetColumnMapping = alternateMapping[sourceColumns[i]];\r\n        if (targetColumnMapping != undefined && targetColumns.indexOf(targetColumnMapping) != -1) {\r\n          continue;\r\n        }\r\n\r\n        try {\r\n          cloneColumn(sourceTableName, targetTableName, sourceColumns[i]);\r\n        } catch (ex) {\r\n          gs.error(\r\n            \"Upgrade: Exception occurred while creating column '{0}' in table '{1}'.\",\r\n            sourceColumns[i],\r\n            targetTableName\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    var backupRecordGr = new GlideRecord(BACKUP_TABLE_NAME);\r\n    backupRecordGr.addQuery(\"table_name\", sourceTableName);\r\n    backupRecordGr.query();\r\n\r\n    while (backupRecordGr.next()) {\r\n      var recordId = backupRecordGr.getValue(\"record_id\");\r\n      var modelGr = new GlideRecord(sourceTableName);\r\n      modelGr.get(recordId);\r\n\r\n      if (gs.nil(modelGr.next())) {\r\n        continue;\r\n      }\r\n\r\n      var colValues = {};\r\n\r\n      for (var j = 0; j < sourceColumns.length; j++) {\r\n        colValues[sourceColumns[j]] = modelGr.getValue(sourceColumns[j]);\r\n      }\r\n\r\n      // Using GlideRecordClassSwitcher to migrate data from source to the target table\r\n      var switcher = new GlideRecordClassSwitcher(modelGr, sourceTableName, false);\r\n      var isSwitchingSuccessful = switcher.switchClass(\r\n        targetTableName,\r\n        sourceTableName + \" to \" + targetTableName + \" migration. \"\r\n      );\r\n\r\n      if (gs.nil(isSwitchingSuccessful)) {\r\n        continue;\r\n      }\r\n\r\n      modelGr = new GlideRecord(targetTableName);\r\n      modelGr.get(recordId);\r\n\r\n      try {\r\n        modelGr.setWorkflow(false);\r\n\r\n        for (var k = 0; k < sourceColumns.length; k++) {\r\n          var fieldName = sourceColumns[k];\r\n\r\n          // exclude populating column if it is excludeColumns list\r\n          if (excludeColumns.indexOf(fieldName) != -1) {\r\n            continue;\r\n          }\r\n\r\n          // checking if alternate mapping exists then skip for now\r\n          if (!gs.nil(alternateMapping[fieldName])) {\r\n            continue;\r\n          }\r\n\r\n          var fieldValue = colValues[fieldName];\r\n          modelGr.setValue(fieldName, fieldValue);\r\n        }\r\n\r\n        // setting alternateMapping in different loop to get it prioritize over the existing value\r\n        for (alternateMappingKey in alternateMapping) {\r\n          try {\r\n            modelGr.setValue(alternateMapping[alternateMappingKey], colValues[alternateMappingKey]);\r\n          } catch (ex) {\r\n            gs.error(\r\n              \"Upgrade: Exception occurrred while setting column '{0}' in table '{1}' for sys_id '{2}': {3}\",\r\n              alternateMappingKey,\r\n              targetTableName,\r\n              modelGr.getUniqueValue(),\r\n              ex\r\n            );\r\n          }\r\n        }\r\n\r\n        modelGr.update();\r\n        backupRecordGr.setValue(\"state\", PROCESSED_BACKUP_STATE);\r\n        backupRecordGr.update();\r\n      } catch (ex) {\r\n        gs.error(\r\n          \"Upgrade: Exception occurred while inserting data in '{0}' with sys_id '{1}': {2}\",\r\n          targetTableName,\r\n          modelGr.getUniquevalue(),\r\n          ex\r\n        );\r\n      }\r\n    }\r\n  } catch (ex) {\r\n    gs.error(\r\n      \"Upgrade: Exception occurred while migrating data from '{0}' to '{1}': {2}\",\r\n      sourceTableName,\r\n      targetTableName,\r\n      ex\r\n    );\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Migrate data from one table to another Sometimes we have to migrate data from one table to another but there has been a lot of customizations on the existing table including the custom columns. In order to ensure there is no data loss while migrating data, we must have one backup table sndatafixbackup where we push data before starting migration and there will be no data loss even in the case o...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Migrate data from one table to another",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Migrate%20data%20from%20one%20table%20to%20another",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Migrate%20data%20from%20one%20table%20to%20another/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.141Z",
    "updatedAt": "2025-09-21T08:58:58.788Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 361,
    "type": "fix_script",
    "name": "Merge stages or choice",
    "description": "Merge Stages/choices into one choice Sometimes we start with flow/process where we have multiple stages for a particular document. After the document is in production and we merge multiple stages into one to refine process we may need to modify stale data to keep it in sync with new process.",
    "script": "var old_values = ['new', 'open', 'draft'];  // old values to be merged\r\nvar new_value = 'initiate';  // new Value of your stage\r\nvar grObj = new GlideRecord('table_name');  // replace table name here\r\ngrObj.addEncodedQuery('field_nameIN' + old_values.toString());  // add additional query as per your configuration\r\ngrObj.query();\r\nwhile (grObj.next()) {\r\n    grObj.field_name = new_value;   // field_name is your choice field name eg. stage, state etc\r\n    grObj.setWorkflow(false);  // optional, can be used if you want to avoid running BRs, notifications etc\r\n    grObj.update();\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Merge Stages/choices into one choice Sometimes we start with flow/process where we have multiple stages for a particular document. After the document is in production and we merge multiple stages into one to refine process we may need to modify stale data to keep it in sync with new process.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Merge stages or choice",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Merge%20stages%20or%20choice",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Merge%20stages%20or%20choice/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.137Z",
    "updatedAt": "2025-09-21T08:58:58.784Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 360,
    "type": "fix_script",
    "name": "Measure code time execution",
    "description": "Fix Script Script which is showing how to measure time execution of specific part of code. You can use it to check performance of code or track time execution of part of code in Fix Scripts. You can add any amount of measuring parts, based of your needs. Example configuration of Fix Script",
    "script": "//Script which shows how to measure time execution of specific parts of code - for example for performance check\r\n\r\n//Start time of Fix Script execution\r\nvar startTime = new Date().getTime();\r\n\r\n//First method to get number of users in sys_user table\r\nvar counter = 0;\r\nvar userQuery = new GlideRecord('sys_user');\r\nuserQuery.query();\r\nwhile (userQuery.next()) {\r\n    counter++;\r\n}\r\ngs.info('[Fix-Script] - There are ' + counter + ' users in sys_user table.');\r\n\r\nvar part1 = new Date().getTime();\r\n\r\n//Second method to get number of users in sys_user table\r\nvar counterSecond = 0;\r\nvar userQuerySecond = new GlideRecord('sys_user');\r\nuserQuerySecond.query();\r\ncounterSecond = userQuerySecond.getRowCount();\r\ngs.info('[Fix-Script] - There are ' + counterSecond + ' users in sys_user table.');\r\n\r\n//End time of Fix Script execution\r\nvar endTime = new Date().getTime();\r\n\r\nvar time1 = part1 - startTime;\r\nvar time2 = endTime - part1;\r\n\r\ngs.info('[Fix-Script] - Execution time of startTime->part1: ' + time1 + 'ms');\r\ngs.info('[Fix-Script] - Execution time of part1->endTime: ' + time2 + 'ms');",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Fix Script Script which is showing how to measure time execution of specific part of code. You can use it to check performance of code or track time execution of part of code in Fix Scripts. You can add any amount of measuring parts, based of your needs. Example configuration of Fix Script",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Measure code time execution",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Measure%20code%20time%20execution",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Measure%20code%20time%20execution/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.133Z",
    "updatedAt": "2025-09-21T08:58:58.781Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 359,
    "type": "fix_script",
    "name": "Mass Update RITM Variable",
    "description": "Use this Fix Script to update a variable value on one or more RITM records",
    "script": "//use this script to update a variable value on one or more RITM records\r\nvar ritm = new GlideRecord('sc_req_item');\r\n//ritm.addQuery... to return one or a subset of records\r\nritm.query();\r\nwhile(ritm.next()){\r\n\tvar mtom = new GlideRecord('sc_item_option_mtom');\r\n\tmtom.addQuery('request_item', ritm.sys_id.toString());\r\n\tmtom.addQuery('sc_item_option.item_option_new', '92bdf4be97857d189d0372e11153af08'); //sys_id of a specific variable to update\r\n\tmtom.query();\r\n\tif(mtom.next()){\r\n\t\tvar item = new GlideRecord('sc_item_option');\r\n\t\titem.addQuery('sys_id', mtom.sc_item_option.toString());\r\n\t\titem.query();\r\n\t\tif(item.next()){\t\t\r\n\t\t\titem.value = '83d36f44974d71909d0372e11153af5f'; //new value to be assigned, depending on variable type (reference type used here)\r\n\t\t\titem.update();\t\r\n\t\t}\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Use this Fix Script to update a variable value on one or more RITM records",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Mass Update RITM Variable",
        "scriptFiles": [
          "Update RITM Variable.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Mass%20Update%20RITM%20Variable",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Mass%20Update%20RITM%20Variable/Update%20RITM%20Variable.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.129Z",
    "updatedAt": "2025-09-21T08:58:58.777Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 358,
    "type": "fix_script",
    "name": "Log out active User sessions",
    "description": "Log out active User sessions across all nodes Usage Can be run as a fix or background script.",
    "script": "function logOutActiveUserSessions(live_run) {\r\n    var usernames_to_logout = getUniqueUsernamesWithActiveSessions();\r\n    logoutSessionsForEachUsername(usernames_to_logout, live_run);\r\n    gs.info(\r\n        'Live run: {0}: Logged out sessions for the following users:\\n{1}',\r\n        live_run,\r\n        JSON.stringify(usernames_to_logout, null, 2)\r\n    );\r\n}\r\nfunction getUniqueUsernamesWithActiveSessions() {\r\n    /**\r\n     * We use an aggregate so we can groupBy username to return\r\n     * a unique list of usernames. A user could have multiple active \r\n     * sessions, but the method to end user sessions locks out all \r\n     * sessions for that user, so there is no need to run it for \r\n     * each session they have.\r\n     */\r\n    var active_sessions_agg = new GlideAggregate('sys_user_session');\r\n    // Filter to currently valid sessions\r\n    active_sessions_agg.addQuery('invalidated', 'NULL');\r\n    // Filter out non-user sessions eg a non-interactive system/guest session\r\n    active_sessions_agg.addQuery('name', '!=', 'NULL');\r\n    // Filter out sessions of current user. You could also exlude any \r\n    // users you wanted to this way.\r\n    applyExcludedUsersFilter(active_sessions_agg);\r\n    active_sessions_agg.groupBy('name');\r\n    active_sessions_agg.query();\r\n    var unique_usernames = [];\r\n    while (active_sessions_agg.next()) {\r\n        unique_usernames.push(active_sessions_agg.name.toString());\r\n    }\r\n    return unique_usernames;\r\n}\r\nfunction applyExcludedUsersFilter(user_sessions_gr) {\r\n    var current_user_user_id = gs.getUserName();\r\n    var excluded_users = [\r\n        current_user_user_id,\r\n        'Special.Person.1',\r\n        'Special.Person.2'\r\n    ];\r\n    user_sessions_gr.addQuery(\r\n        'name',\r\n        'NOT IN',\r\n        excluded_users\r\n    );\r\n}\r\nfunction logoutSessionsForEachUsername(usernames, live_run) {\r\n    for (var i = 0; i < usernames.length; i++) {\r\n        logoutSessionsForUsername(usernames[i], live_run);\r\n    }\r\n}\r\nfunction logoutSessionsForUsername(username, live_run) {\r\n    if (live_run === true) {\r\n        GlideSessions.lockOutSessionsInAllNodes(username);\r\n        return;\r\n    }\r\n    gs.info(\r\n        'Live run: {0}: would logout sessions for {1}',\r\n        JSON.stringify(live_run), // Differentiate strings from booleans\r\n        username\r\n    );\r\n}\r\n\r\nvar live_run = false;\r\nlogOutActiveUserSessions(live_run);",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Log out active User sessions across all nodes Usage Can be run as a fix or background script.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Log out active User sessions",
        "scriptFiles": [
          "log_out_active_user_sessions.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Log%20out%20active%20User%20sessions",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Log%20out%20active%20User%20sessions/log_out_active_user_sessions.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.125Z",
    "updatedAt": "2025-09-21T08:58:58.773Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 357,
    "type": "fix_script",
    "name": "Install Demo Data",
    "description": "Add demo data to a list of installed plugins. I use this to add demo data for the OOTB ATF tests to work in sub-prod instances. It is expected that the corresponding ATF Test plugins are installed on the production instance already, and we are only adding the demo data.",
    "script": "//List of plugins to install\r\nvar plugins = ['com.snc.sdlc.agile.2.0.atf', 'com.snc.change_management.atf', 'com.snc.cmdb.atf', 'com.snc.incident.atf', 'com.snc.financial_planning_pmo.atf', 'com.snc.problem.atf', 'com.glideapp.servicecatalog.atf.test', ' com.snc.sla.atf', 'com.snc.test_management.2.0.atf'];\r\n\r\n//Other ATF plugins that are not installed but here for reference if we want to easily add them in the future\r\nvar not_installed = ['com.sn_cim_atf', ' com.snc.innovation_management.atf', 'com.snc.investment_planning.atf', 'com.snc.sdlc.scrum_program.atf'];\r\n\r\n\r\nvar now_GR = new GlideRecord('sys_plugins');\r\nnow_GR.addQuery('source', 'IN', plugins);\r\nnow_GR.query();\r\n\r\n\r\nvar pMgr = new GlidePluginManager();\r\n\r\nwhile (now_GR.next()) {\r\n    var pName = now_GR.getValue('name');\r\n    var pID = now_GR.getValue('source');\r\n    var isActive = pMgr.isActive(pID);\r\n\r\n    //ensure the plugin is active before loading Demo Data\r\n    if (isActive) {\r\n        gs.info('The plugin ' + pName + ' is active');\r\n        pMgr.loadDemoData(pID);\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Add demo data to a list of installed plugins. I use this to add demo data for the OOTB ATF tests to work in sub-prod instances. It is expected that the corresponding ATF Test plugins are installed on the production instance already, and we are only adding the demo data.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Install Demo Data",
        "scriptFiles": [
          "InstallDemoData.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Install%20Demo%20Data",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Install%20Demo%20Data/InstallDemoData.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.121Z",
    "updatedAt": "2025-09-21T08:58:58.770Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 356,
    "type": "fix_script",
    "name": "Install Base PDI Plugins",
    "description": "Install Base PDI Plugins Fix Script to speed up installation of multiple plugins on a fresh PDI (even with demo data). Options: (modify script as needed)",
    "script": "// Change to \"true\" to install demo data with the plugins\r\nvar include_demo_data = false;\r\n\r\nvar plugins = [];\r\n\r\n// Add or remove plugins by adding or removing plugins.push lines to the code below:\r\n\r\n// Service Portfolio Management SLA Commitments\r\n//   Service Portfolio Management Foundation\r\n//   Service level management\r\nplugins.push('com.snc.service_portfolio.sla_commitment');\r\n// Service Catalog Manager\r\nplugins.push('com.snc.sc_catalog_manager');\r\n// PPM Standard (Project Portfolio Suite with Financials)\r\n//   Performance Analytics - Content Pack - PPM Standard\r\n//   Project Portfolio Suite\r\n//   Release Management\r\n//   Ideation with PPM\r\nplugins.push('com.snc.financial_planning_pmo');\r\n// Agile Development 2.0\r\nplugins.push('com.snc.sdlc.agile.2.0');\r\n// Agile Development - Unified Backlog\r\nplugins.push('com.snc.sdlc.agile.multi_task');\r\n// I18N: Internationalization\r\n//   System Import Sets\r\n//   I18N: Knowledge Management Internationalization Plugin v2\r\nplugins.push('com.glide.i18n');\r\n// Test Management 2.0\r\nplugins.push('com.snc.test_management.2.0');\r\n// Incident Management - Major Incident Management\r\n//   Incident Communications Management\r\n//   Incident Updates\r\n//   Task-Outage Relationship\r\n//   WebKit HTML to PDF\r\nplugins.push('com.snc.incident.mim');\r\n// Change Management - Risk Assessment\r\n//   Assessment Designer\r\n//   Assessment\r\n//   Best Practice - Change Risk Calculator\r\nplugins.push('com.snc.change_management.risk_assessment');\r\n\r\nvar main = new GlideMultiPluginManagerWorker();\r\nmain.setPluginIds(plugins);\r\nmain.setIncludeDemoData(include_demo_data);\r\n//main.setLoadDemoDataOnly(true); // Can be used to install demo data after installation of plugins.\r\nmain.setProgressName(\"Plugin Installer\");\r\nmain.setBackground(true);\r\nmain.start();\r\n\r\ngs.info(\"Plugin installation has been initiated, please note that installation runs in the background and can take some time.\");\r\ngs.info(\"Please visit the following URLs to monitor the state of the installed plugins.\");\r\ngs.info(\"The installation has finished when all the following plugins have reached State=Active.\");\r\ngs.info(\"https://\" + gs.getProperty(\"instance_name\") + \".service-now.com/nav_to.do?uri=%2Fv_plugin_list.do%3Fsysparm_query%3DidIN\" + plugins.join(\",\"));\r\ngs.info(\"A more detailed installation progress can also be seen in the Upgrade History log:\");\r\ngs.info(\"https://\" + gs.getProperty(\"instance_name\") + \".service-now.com/nav_to.do?uri=sys_upgrade_history_list.do\");",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Install Base PDI Plugins Fix Script to speed up installation of multiple plugins on a fresh PDI (even with demo data). Options: (modify script as needed)",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Install Base PDI Plugins",
        "scriptFiles": [
          "install_plugins.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Install%20Base%20PDI%20Plugins",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Install%20Base%20PDI%20Plugins/install_plugins.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.116Z",
    "updatedAt": "2025-09-21T08:58:58.766Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 355,
    "type": "fix_script",
    "name": "Ignore outbound emails",
    "description": "Used to ignore all emails in the system so they are not sent on outbox activation. Run this script prior to enabling email sending to ensure no testing emails are sent upon email activation",
    "script": "var emailGR = new GlideRecord('sys_email');\r\n\r\nemailGR.addQuery('type','send-ready');\r\nemailGR.query();\r\n\r\nwhile (emailGR.next()) {\r\n  emailGR.type = 'send-ignored';\r\n  emailGR.update();\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Used to ignore all emails in the system so they are not sent on outbox activation. Run this script prior to enabling email sending to ensure no testing emails are sent upon email activation",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Ignore outbound emails",
        "scriptFiles": [
          "ignoremail.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Ignore%20outbound%20emails",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Ignore%20outbound%20emails/ignoremail.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.113Z",
    "updatedAt": "2025-09-21T08:58:58.762Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 354,
    "type": "fix_script",
    "name": "get Groups without Member",
    "description": "Use this fix script to get the list of groups having no members or group without active members in it. Such gruups can be deactivated if not required.",
    "script": "gs.info('Below groups have no memebers');\r\nvar groupArr = [];\r\nvar groupGr = new GlideRecord('sys_user_group');\r\ngroupGr.addActiveQuery();\r\ngroupGr.query();\r\nwhile(groupGr.next()){\r\n\tvar grMem = new GlideRecord('sys_user_grmember');\r\n\tgrMem.addQuery('group',groupGr.getUniqueValue());\r\n\tgrMem.addQuery('user.active',true);\r\n\tgrMem.query();\r\n\tif(!grMem.hasNext()){\r\n\t\tgroupArr.push(groupGr.getUniqueValue());\r\n\t\tgs.info('Name: '+groupGr.getValue('name')+' , Sys ID: '+groupGr.getUniqueValue())\r\n\t}\r\n}\r\ngs.info('Group SysID: '+groupArr.toString());",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Use this fix script to get the list of groups having no members or group without active members in it. Such gruups can be deactivated if not required.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/get Groups without Member",
        "scriptFiles": [
          "getGroupsWithoutMember.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/get%20Groups%20without%20Member",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/get%20Groups%20without%20Member/getGroupsWithoutMember.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.109Z",
    "updatedAt": "2025-09-21T08:58:58.758Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 353,
    "type": "fix_script",
    "name": "Get Catalog Items not used in last few months",
    "description": "Use this fix script to get the list of Catalog items that are not used in few months. This information is used by stackholders to identify unused cat items and the can start deactivating it.",
    "script": "/* Below script can be used to find unused and Used catalog items (Including record producers) in last 15 Months\r\n\r\ngs.info(\"------Used Catalog Items --------\");\r\n\r\nvar usedItems = [];\r\nvar unusedItems = [];\r\nvar ritm = new GlideAggregate('sc_req_item');\r\nritm.addEncodedQuery('sys_created_onRELATIVEGT@month@ago@15');\r\nritm.groupBy('cat_item');\r\nritm.query();\r\nwhile (ritm.next()) {\r\n    usedItems.push(ritm.getValue('cat_item'));\r\n    gs.info(ritm.getDisplayValue('cat_item'));\r\n}\r\n\r\nvar recGr = new GlideAggregate('sc_item_produced_record');\r\nrecGr.addEncodedQuery('sys_created_onRELATIVEGT@month@ago@15');\r\nrecGr.groupBy('producer');\r\nrecGr.query();\r\nwhile (recGr.next()) {\r\n    usedItems.push(recGr.getValue('producer'));\r\n    gs.info(recGr.getDisplayValue('producer'));\r\n}\r\ngs.info(\"------Unused Catalog Items --------\");\r\nvar unusedCatalogItems = new GlideRecord('sc_cat_item');\r\nunusedCatalogItems.addQuery('sys_id', 'NOT IN', usedItems.toString());\r\nunusedCatalogItems.query();\r\nwhile (unusedCatalogItems.next()) {\r\n    gs.info(unusedCatalogItems.name);\r\n    unusedItems.push(unusedCatalogItems.getUniqueValue());\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Use this fix script to get the list of Catalog items that are not used in few months. This information is used by stackholders to identify unused cat items and the can start deactivating it.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Get Catalog Items not used in last few months",
        "scriptFiles": [
          "getUnusedCatItems.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Get%20Catalog%20Items%20not%20used%20in%20last%20few%20months",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Get%20Catalog%20Items%20not%20used%20in%20last%20few%20months/getUnusedCatItems.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.105Z",
    "updatedAt": "2025-09-21T08:58:58.749Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 352,
    "type": "fix_script",
    "name": "Fix teams token",
    "description": "This script helps to fix the MS teams integration token for a specific user. Once the script has been executed, the user can try to reinitiate the teams from the task to retrieve a new token.",
    "script": "var userId = ''; // Place the userID of the user to whom you want to restart the teams token\r\nvar azureGr = new GlideRecord(\"sn_now_azure_user\");\r\nazureGr.addQuery('user.user_name',userId);\r\nazureGr.query();\r\nif(azureGr.next()){\r\n\t// gs.print(azureGr.upn);\tCheck if the record is valid one or not\r\n    azureGr.deleteRecord();\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "This script helps to fix the MS teams integration token for a specific user. Once the script has been executed, the user can try to reinitiate the teams from the task to retrieve a new token.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Fix teams token",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Fix%20teams%20token",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Fix%20teams%20token/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.102Z",
    "updatedAt": "2025-09-21T08:58:58.746Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 351,
    "type": "fix_script",
    "name": "Fix model names after enabling glide.cmdb_model.display_name.shorten",
    "description": "There is a property that enables de-duplication of Manufacturer/Publisher Names from Model records (property name: https://docs.servicenow.com/bundle/rome-it-service-management/page/product/asset-management/concept/cInstalledWithModelManagement.htmlrModelManagementProperties \"glide.cmdbmodel.displayname.shorten\"). If this property is not active and users enter the Manufacturer/Publisher name in...",
    "script": "fixModelNames();\r\n\r\nfunction fixModelNames() {\r\n\tvar modelGR = new GlideRecord(\"cmdb_model\");\r\n\tmodelGR.orderBy(\"display_name\");\r\n\tmodelGR.query();\r\n\twhile (modelGR.next()) {\r\n\t\tvar modelName = modelGR.name;\r\n\t\tif (modelGR.sys_class_name == \"cmdb_software_product_model\") {\r\n\t\t\tvar swModelGR = new GlideRecord(\"cmdb_software_product_model\");\r\n\t\t\tif (swModelGR.get(modelGR.sys_id)) {\r\n\t\t\t\tmodelName = swModelGR.product.getDisplayValue();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar platform = '';\r\n\t\tif(!gs.nil(modelGR.platform) && modelGR.platform != 'anything'){\r\n\t\t\tplatform  = modelGR.getDisplayValue(\"platform\");\r\n\t\t}\r\n\t\t\r\n\t\tvar language = '';\r\n\t\tif(!gs.nil(modelGR.language) && modelGR.language != '832bec5493212200caef14f1b47ffb56'){\r\n\t\t\tlanguage =  modelGR.getDisplayValue(\"language\");\r\n\t\t}\r\n\t\t\t\t\r\n\t\tvar values = [modelGR.manufacturer.getDisplayValue(), modelName, modelGR.version, modelGR.edition, platform,language];\r\n\t\tvar displayName = '';\r\n\t\t\r\n\t\tif (values[1].toLowerCase().indexOf(values[0].toLowerCase()) != -1 && 'true'.equals(gs.getProperty('glide.cmdb_model.display_name.shorten')))\r\n\t\t\tvalues[0] = '';\r\n\t\t\r\n\t\tfor (var i = 0; i < values.length; i++){\r\n\t\t\tif (values[i] != undefined && values[i] != '')\r\n\t\t\t\tdisplayName += ' ' + values[i];\r\n\t\t}\r\n\t\t\r\n\t\tmodelGR.display_name = displayName.trim();\r\n\t\tmodelGR.update();\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "There is a property that enables de-duplication of Manufacturer/Publisher Names from Model records (property name: https://docs.servicenow.com/bundle/rome-it-service-management/page/product/asset-management/concept/cInstalledWithModelManagement.htmlrModelManagementProperties \"glide.cmdbmodel.displayname.shorten\"). If this property is not active and users enter the Manufacturer/Publisher name in...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Fix model names after enabling glide.cmdb_model.display_name.shorten",
        "scriptFiles": [
          "fixModelNames.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Fix%20model%20names%20after%20enabling%20glide.cmdb_model.display_name.shorten",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Fix%20model%20names%20after%20enabling%20glide.cmdb_model.display_name.shorten/fixModelNames.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.098Z",
    "updatedAt": "2025-09-21T08:58:58.742Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 350,
    "type": "fix_script",
    "name": "Fiscal period renamer",
    "description": "OOTB the Fiscal periods are named as such - \"FY21: M01\". This naming convention relies on each and every user knowing what M01 is (i.e. does the fiscal year start in January or does it start in March). This renaming script will append a descriptor to the end of each fiscal period name to increase usability and to preserve numeric sorting. Assuming M01 is January, the renamed fiscal period might...",
    "script": "updateFiscalPeriods();\r\n\t\r\n\r\n\tfunction updateFiscalPeriods() {\r\n\t\r\n\r\n\t    try {\r\n\t\r\n\r\n\t        // endoded query that defines the fiscal year/s to update, as generated in each instance sys_id will always be different\r\n\t        var fpQuery = 'fiscal_year=91dbfea31bdf3010dddda82c274bcbd6';\r\n\t        \r\n\t        // the short month names to append to the end of the month period names, should be ordered from first month in fiscal year to last\r\n\t        var orderedMonth = [\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"];\r\n\t        \r\n\t        // the first end year in the set of fiscal periods being updated (e.g if fy23 created then this should be set to 24) set to 0 if not wanting to augment the year value included in the name\r\n\t        var startAdditionalYear = 22;\r\n\t        \r\n\t        // number of fiscal period records generated per fiscal year plus one - used to increment the year\r\n\t        var fiscalPeriodRecordsPerYear = 18;\r\n\t        \r\n\t        \r\n\t        var monthIncrementer = 0,\r\n\t            yearIncrementer  = 0,\r\n\t            monthPrefix      = \"M0\";\r\n\t        var formattedMonth, currName, newName;\r\n\t        \r\n\r\n\t        var fpGR = new GlideRecord('fiscal_period');\r\n\t        fpGR.addEncodedQuery(fpQuery);\r\n\t        fpGR.orderBy('name');\r\n\t        fpGR.query();\r\n\t        while (fpGR.next()) {\r\n\t            // reset/increment variables for each fiscal period record iterated through\r\n\t            var newMonth = \"\";\r\n\t            newName = \"\";\r\n\t            yearIncrementer++;\r\n\t\r\n\r\n\t            // if there are 18 fiscal periods per year then this resets variables to iterate through new year\r\n\t            if (yearIncrementer == fiscalPeriodRecordsPerYear) {\r\n\t                if (startAdditionalYear > 0) {\r\n\t                    startAdditionalYear++;\r\n\t                }\r\n\t                yearIncrementer = 0;\r\n\t                monthIncrementer = 0;\r\n\t            }\r\n            \r\n\t\r\n\t            // get the current period name\r\n\t            currName = fpGR.getValue('name');\r\n            \r\n\t\t\t\t\r\n\t\t          // if we are trying to add a string that already exists in current fiscal period, abort, abort\r\n\t            if (currName.indexOf(orderedMonth[monthIncrementer]) >= 0 && orderedMonth.length > 0 || currName.indexOf(startAdditionalYear) >= 0 && startAdditionalYear > 0) {\r\n\t\t\t            gs.info('ERROR - Current name already includes month short name OR additional start year');\r\n\t\t\t            return;\r\n\t            }\r\n\t\r\n\r\n\t            // if a month then add the corresponding short month name to newMonth variable and the string being added doesn't already exist in the current name\r\n\t            if (fpGR.getValue('fiscal_type') == 'month' && orderedMonth.length > 0) {\r\n\t                newMonth = \" \" + orderedMonth[monthIncrementer];\r\n\t                monthIncrementer++;\r\n\t\t          }\r\n\t\r\n\r\n\t\r\n\r\n\t            // if adding year values to name then add the year value and additional year doesn't already exist in current value, if not just set the new name to the current name\r\n\t            if (startAdditionalYear > 0) {\r\n\t\t\t\t\t        newName = currName.slice(0, 2) + startAdditionalYear + \"-\" + currName.slice(2, 4) + currName.slice(4);\r\n\t            } else newName = currName;\r\n\t\r\n\r\n\r\n\t            // if adding month short names AND adding year then just append the month to the already built new name from above\r\n\t            // if not adding year then add month to the current name\r\n\t            if (newMonth) {\r\n\t                if (startAdditionalYear > 0) {\r\n\t                    newName += newMonth;\r\n\t                } else newName = currName + newMonth;\r\n\t            }\r\n\t\r\n\r\n\r\n\t            // commit and save the new name to the database\r\n\t            fpGR.setValue('name', newName);\r\n\t            gs.info('If newName correct uncomment update code - ' + newName);\r\n\t            //fpGR.update();\r\n\t        }\r\n\t\r\n\r\n\t    } catch (e) {\r\n\t        gs.error(e.message);\r\n\t    }\r\n\t}",
    "metadata": {
      "application": "Global",
      "notes": "OOTB the Fiscal periods are named as such - \"FY21: M01\". This naming convention relies on each and every user knowing what M01 is (i.e. does the fiscal year start in January or does it start in March). This renaming script will append a descriptor to the end of each fiscal period name to increase usability and to preserve numeric sorting. Assuming M01 is January, the renamed fiscal period might...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Fiscal period renamer",
        "scriptFiles": [
          "fiscal period renamer.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Fiscal%20period%20renamer",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Fiscal%20period%20renamer/fiscal%20period%20renamer.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.094Z",
    "updatedAt": "2025-09-21T08:58:58.738Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 349,
    "type": "fix_script",
    "name": "Find the reports assigned to Inactive Users",
    "description": "This Fix script will get you the reports assigned to inactive Users so that you can do the cleanup of reports Required role: itiladmin",
    "script": "var report = new GlideRecord(\"sys_report_users_groups\");\r\nreport.addEncodedQuery('user_id.active=false');\r\nreport.query();\r\nwhile (report.next()){\r\n\tgs.print(\"record found: \"+report.sys_id);\r\n\treport.user_id = \"\";\t\r\n\treport.setWorkflow(false);\r\n\treport.autoSysFields(false);\r\n\treport.update();\r\n}\r\nignore = 'true';",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "This Fix script will get you the reports assigned to inactive Users so that you can do the cleanup of reports Required role: itiladmin",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Find the reports assigned to Inactive Users",
        "scriptFiles": [
          "reportsassignedtoinactiveusers.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Find%20the%20reports%20assigned%20to%20Inactive%20Users",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Find%20the%20reports%20assigned%20to%20Inactive%20Users/reportsassignedtoinactiveusers.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.091Z",
    "updatedAt": "2025-09-21T08:58:58.735Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 348,
    "type": "fix_script",
    "name": "Find Reports Assigned to inactive Groups",
    "description": "This Fix script will get you the reports assigned to inactive groups so that you can do the cleanup of reports Required role: itiladmin",
    "script": "var report = new GlideRecord(\"sys_report_users_groups\");\r\nreport.addEncodedQuery('group_id.active=false');\r\nreport.query();\r\nwhile (report.next())\r\n{\r\n\tgs.print(\"record found: \"+report.sys_id);\r\n\treport.group_id = \"\";\t\r\n\treport.setWorkflow(false);\r\n\treport.autoSysFields(false);\r\n\treport.update();\r\n}\r\nignore = 'true';",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "This Fix script will get you the reports assigned to inactive groups so that you can do the cleanup of reports Required role: itiladmin",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Find Reports Assigned to inactive Groups",
        "scriptFiles": [
          "reportAssignedToInactiveGroups.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Find%20Reports%20Assigned%20to%20inactive%20Groups",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Find%20Reports%20Assigned%20to%20inactive%20Groups/reportAssignedToInactiveGroups.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.087Z",
    "updatedAt": "2025-09-21T08:58:58.731Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 347,
    "type": "fix_script",
    "name": "Find duplicate records",
    "description": "Find duplicate records Run the script to find duplicate records in a table. It is using GlideAggregate to find duplicate records. Replace the TABLETOFINDDUPLICATEIN and FIELDTOGROUPBY constants with your table and field and it will spit the records.",
    "script": "// File: Find duplicate records.js\n// Find duplicate records in a table e.g. cmdb_ci_vmware_instance based on a field e.g. name\r\n\r\nvar TABLE_TO_FIND_DUPLICATE_IN = \"cmdb_ci_vmware_instance\"; // Replace with your table\r\nvar FIELD_TO_GROUP_BY = \"name\"; // replace with your field\r\n\r\nvar dupRecords = []; \r\nvar gaDupCheck1 = new GlideAggregate(TABLE_TO_FIND_DUPLICATE_IN); \r\ngaDupCheck1.addAggregate('COUNT', FIELD_TO_GROUP_BY); \r\ngaDupCheck1.groupBy(FIELD_TO_GROUP_BY); \r\ngaDupCheck1.addHaving('COUNT', '>', 1); \r\ngaDupCheck1.query(); \r\n\r\nwhile (gaDupCheck1.next()) { \r\n   dupRecords.push(gaDupCheck1.name.toString() + '\\n'); \r\n} \r\n\r\ngs.print(dupRecords);\n\n// File: TechTrekwithAJ_FindDuplicateonCMDB_CI.JS\n(function() {\r\n\r\n    var TABLE_TO_FIND_DUPLICATE_IN = 'cmdb_ci';\r\n    var FIELD_TO_GROUP_BY = 'name';\r\n\r\n    // GlideAggregate instance\r\n    var ga = new GlideAggregate(TABLE_TO_FIND_DUPLICATE_IN);\r\n    \r\n    // Group by the specified field\r\n    ga.addAggregate('COUNT', FIELD_TO_GROUP_BY);\r\n    ga.groupBy(FIELD_TO_GROUP_BY);\r\n    \r\n    // Query for records with duplicates (count > 1)\r\n    ga.addHaving('COUNT', '>', '1');\r\n    ga.query();\r\n    \r\n    // Log the duplicate records\r\n    while (ga.next()) {\r\n        var fieldValue = ga.getValue(FIELD_TO_GROUP_BY);\r\n        var count = ga.getAggregate('COUNT', FIELD_TO_GROUP_BY);\r\n        gs.info('Duplicate Record: ' + fieldValue + ' - Count: ' + count);\r\n    }\r\n})();",
    "metadata": {
      "application": "Global",
      "notes": "Find duplicate records Run the script to find duplicate records in a table. It is using GlideAggregate to find duplicate records. Replace the TABLETOFINDDUPLICATEIN and FIELDTOGROUPBY constants with your table and field and it will spit the records.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Find duplicate records",
        "scriptFiles": [
          "Find duplicate records.js",
          "TechTrekwithAJ_FindDuplicateonCMDB_CI.JS"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Find%20duplicate%20records"
      }
    },
    "createdAt": "2025-09-20T08:42:19.083Z",
    "updatedAt": "2025-09-21T08:58:58.727Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 346,
    "type": "fix_script",
    "name": "Employee document management",
    "description": "",
    "script": "var gr = new GlideRecord('VALID_TABLE_NAME');\r\ngr.addEncodedQuery('PASS_VALID_QUERY_To_TARGET_RECORDS_WHICH_HAVE_DOCUMENTS_THAT_NEEDS_TO_BE_REGENERATED');\r\ngr.query();\r\nwhile (gr.next()) {\r\n\r\n    if (new hr_PdfUtils().isValidPdfTemplateForPreFill(gr.pdf_template.sys_id)) { //Check if it is a pre-filled type of document or editable pdf document\r\n        var pdfDraftSysId = new hr_PdfUtils().prefillPdfTemplate(gr.pdf_template.sys_id, false, gr.sys_id, gr.sys_class_name, gr.sys_id);\r\n        if (gs.nil(pdfDraftSysId))\r\n            gs.info('Error occurred while generating pdf for ' + gr.sys_id);\r\n    } else {\r\n        new GeneralHRForm().inactivateRelatedDrafts(gr.sys_class_name, gr.sys_id);\r\n        var caseAjax = new hr_CaseAjax();\r\n        var document = caseAjax.documentBody(gr.sys_class_name, gr.sys_id, gr.sys_class_name, gr.sys_id, 'true');\r\n        caseAjax.setDocumentBody(document.body, gr.sys_class_name, gr.sys_id, gr.sys_class_name, gr.sys_id);\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Employee document management",
        "scriptFiles": [
          "regenerate_document.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Employee%20document%20management",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Employee%20document%20management/regenerate_document.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.079Z",
    "updatedAt": "2025-09-21T08:58:58.722Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 345,
    "type": "fix_script",
    "name": "deleteMultiple",
    "description": "This script is recommended to be used (with caution) when it's necessary to delete multiple records from a table. deleteMultiple is considerably faster than deleteRecord As stated in the script, it's important to limit the amount of records being processed by this script at a time and never test this on Production without doing so on Development first",
    "script": "var gr = new GlideRecord('table_name'); //replace table_name with actual table name\r\ngr.addQuery('field', 'value'); //recommended to add queries to help filter out unrelated records\r\ngr.setLimit(100); //recommended to start with a small batch of records first to check performance and function -- this sets the limit to only 100 records returned\r\ngr.query();\r\ngr.setWorkflow(false); //recommended to keep this line as this will help prevent business rules from running on this table -- keep in mind this doesn't stop business rules from related records from running\r\ngr.deleteMultiple(); //this will delete multiple records quicker than using deleteRecord()",
    "metadata": {
      "application": "Global",
      "notes": "This script is recommended to be used (with caution) when it's necessary to delete multiple records from a table. deleteMultiple is considerably faster than deleteRecord As stated in the script, it's important to limit the amount of records being processed by this script at a time and never test this on Production without doing so on Development first",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/deleteMultiple",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/deleteMultiple",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/deleteMultiple/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.075Z",
    "updatedAt": "2025-09-21T08:58:58.719Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 344,
    "type": "fix_script",
    "name": "Delete Duplicate Mobile records",
    "description": "Below script is a Fix script used to delete duplicate mobile assets and Cis in your CMDB. In this script we keep recently created assets and its related CI and delete other duplicate assets and related Cis if any. Note : In this script I have used ualmmobile as the table and ucmdbcimobile, this are my tables but you can use your own table where you have stored your mobile devices.",
    "script": "var grMob = new GlideAggregate('u_alm_mobile');\r\ngrMob.addAggregate('COUNT', 'serial_number');\r\ngrMob.groupBy('serial_number');\r\ngrMob.addHaving('COUNT', '>', 1);\r\ngrMob.query();\r\nwhile (grMob.next())\r\n\t{\t\r\n\tgs.log(\"Numb of Duplicates: \" + grMob.getAggregate('COUNT', 'serial_number') + \" => \" + grMob.serial_number, 'DuplicateSerailNumber');\r\n\tvar dup = new GlideRecord('u_alm_mobile');\r\n\tdup.addQuery('serial_number',grMob.serial_number);\r\n\tdup.orderByDesc('sys_created_on');\r\n\tdup.query();\r\n\tif(dup.next())\r\n\t\t{\r\n\t\tvar del = new GlideRecord('u_alm_mobile');\r\n\t\tdel.addQuery('sys_id','!=',dup.sys_id);\r\n\t\tdel.addQuery('serial_number',dup.serial_number);\r\n\t\tdel.query();\r\n\t\twhile(del.next())\r\n\t\t\t{\r\n\t\t\tvar ci = new GlideRecord('u_cmdb_ci_mobile');\r\n\t\t\tci.addQuery('sys_id',del.ci);\r\n\t\t\tci.query();\r\n\t\t\tif(ci.next())\r\n\t\t\t\t{\r\n\t\t\t\tci.deleteRecord();\t\t\t\t\r\n\t\t\t}\r\n\t\t\tdel.deleteRecord();\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Below script is a Fix script used to delete duplicate mobile assets and Cis in your CMDB. In this script we keep recently created assets and its related CI and delete other duplicate assets and related Cis if any. Note : In this script I have used ualmmobile as the table and ucmdbcimobile, this are my tables but you can use your own table where you have stored your mobile devices.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Delete Duplicate Mobile records",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Delete%20Duplicate%20Mobile%20records",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Delete%20Duplicate%20Mobile%20records/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.071Z",
    "updatedAt": "2025-09-21T08:58:58.714Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 343,
    "type": "fix_script",
    "name": "Delete Change Conflict",
    "description": "Use this script to delete change Conflicts and set conflict status as 'No Conflict' using fix script.",
    "script": "// delete conflicts for any change and update conflict status to 'No Conflict'\r\nvar changeRec = new GlideRecord('change_request');\r\nchangeRec.addQuery('conflict_status', 'Conflict');\r\nchangeRec.addQuery('number', 'CHG0000014');  // replace your change number\r\n//changeRec.addQuery('sys_id', 'sys_id of change request record');  // can be used if query is based on sys_id of Change\r\nchangeRec.query();\r\nif (changeRec.next()) {\r\n    var chg = new ChangeConflictHandler();\r\n    // delete conflict records for the change from Conflict table\r\n    var output = chg.deleteConflictsByChangeId(changeRec.getUniqueValue()); // or pass any change Record sys_id\r\n    changeRec.conflict_status = 'No Conflict';  //optional \r\n    changeRec.update(); // optional\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Use this script to delete change Conflicts and set conflict status as 'No Conflict' using fix script.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Delete Change Conflict",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Delete%20Change%20Conflict",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Delete%20Change%20Conflict/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.068Z",
    "updatedAt": "2025-09-21T08:58:58.711Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 342,
    "type": "fix_script",
    "name": "De-Provision Admin user (configurable)",
    "description": "Objective: The purpose of this standalone fix script is to routinize the common sysadmin task of stripping admin access from an account. The de-provisioning process is going to be different for every organization, but it is often useful to have a repeatable, predictable technical solution for literally stripping an account of its rights in the event of an organizational change or security incid...",
    "script": "var target = 'this_iser_id'; // User ID (not sys_id) of account to be deprovisioned\r\nvar admin_roles = ['admin', 'security_admin']; //Will be used if deprov_level = 2\r\nvar deprov_level = 0;\r\n// 0 = take no action but list admin roles and active status (prints to console)\r\n// 1 = simply make account not active and locked out \r\n// 2 = strip all admin roles as defined above and de-activate / lockout\r\n// 3 = strip all roles and group memberships and de-activate / lockout\r\n// 4 = do all of the above plus clear PW and email fields\r\n\r\nif (this.hasRoleExactly('security_admin') && gs.getUser().getName() != target) {\r\n    deprovisionAdminAccount(target, admin_roles, deprov_level);\r\n} else {\r\n    gs.info('Please ensure that you have the security_admin role prior to using this tool. Also note that you may not run this tool against your own account.');\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction deprovisionAdminAccount() {\r\n    try {\r\n        var deprov_result_msg = \"\";\r\n        switch (deprov_level) {\r\n            case 0:\r\n                deprov_result_msg = this.returnAccountProfile(target);\r\n                break;\r\n            case 1:\r\n                deprov_result_msg = this.closeAccount(target);\r\n                break;\r\n            case 2:\r\n                this.closeAccount(target);\r\n                deprov_result_msg = this.stripAdminRoles(target, admin_roles);\r\n                break;\r\n            case 3:\r\n                deprov_result_msg = this.closeAccount(target);\r\n                deprov_result_msg += '\\n';\r\n                deprov_result_msg += this.stripAllRolesAndGroups(target);\r\n                break;\r\n            default:\r\n                deprov_result_msg = this.returnAccountProfile(target);\r\n                break;\r\n        }\r\n        gs.info(deprov_result_msg);\r\n    } catch (error) {\r\n        gs.error('Error in Fix Script (function deprovisionAdminAccount()): ' + error);\r\n    }\r\n\r\n} //deprovisionAdminAccount()\r\n\r\nfunction returnAccountProfile(target) {\r\n    //\r\n    //Uniquely identify the user account specified in the target variable\r\n    //\r\n    var grTargetUser = new GlideRecordSecure('sys_user');\r\n    grTargetUser.addQuery('user_name', target);\r\n    grTargetUser.query();\r\n    if (grTargetUser.getRowCount() < 0) {\r\n        deprov_result_msg = \"No account with user name \" + target + \" was found.\";\r\n    }\r\n    var targetSYSID = '';\r\n    while (grTargetUser.next()) {\r\n        targetSYSID = grTargetUser.getUniqueValue();\r\n    }\r\n\r\n\r\n    var returnObj = {\r\n        roles: [],\r\n        groups: []\r\n    };\r\n\r\n    var outputMsg = '';\r\n    var grRoleMembership = new GlideRecordSecure('sys_user_has_role');\r\n    grRoleMembership.addQuery('user', targetSYSID);\r\n    grRoleMembership.query();\r\n    if (grRoleMembership.getRowCount() > 0) {\r\n        outputMsg += 'Account ' + target + ' has been assigned the following roles: \\n';\r\n        while (grRoleMembership.next()) {\r\n            returnObj.roles.push(grRoleMembership.getDisplayValue('role'));\r\n            outputMsg += grRoleMembership.getDisplayValue('role') + '\\n';\r\n        }\r\n    }\r\n\r\n    var grGroupMembership = new GlideRecordSecure('sys_user_grmember');\r\n    grGroupMembership.addQuery('user', targetSYSID);\r\n    grGroupMembership.query();\r\n    if (grGroupMembership.getRowCount() > 0) {\r\n        outputMsg += '\\nAccount ' + target + ' belongs to the following groups: \\n';\r\n        while (grGroupMembership.next()) {\r\n            returnObj.groups.push(grGroupMembership.getDisplayValue('group'));\r\n            outputMsg += grGroupMembership.getDisplayValue('group') + '\\n';\r\n        }\r\n    }\r\n    outputMsg += '\\nNo changes have been made to account ' + target;\r\n    return outputMsg;\r\n}\r\n\r\nfunction closeAccount(target) {\r\n    var outputMsg = '';\r\n    var grTargetUser = new GlideRecordSecure('sys_user');\r\n    grTargetUser.addQuery('user_name', target);\r\n    grTargetUser.query();\r\n    if (grTargetUser.getRowCount() < 0) {\r\n        outputMsg = \"No account with user name \" + target + \" was found.\";\r\n    }\r\n    while (grTargetUser.next()) {\r\n\t\tgrTargetUser.setWorkflow(false);\r\n        grTargetUser.setValue('active', false);\r\n        grTargetUser.setValue('locked_out', true);\r\n        grTargetUser.update();\r\n    }\r\n\r\n    outputMsg = 'Account ' + target + ' has been made not active and has been locked out.';\r\n    return outputMsg;\r\n}\r\n\r\nfunction stripAdminRoles(target, admin_roles) {\r\n    var outputMsg = '';\r\n    //\r\n    //Uniquely identify the roles specified in the admin_rolse variable\r\n    //\r\n    var admin_roles_SYSID = [];\r\n    admin_roles.forEach(function(admin_role) {\r\n        admin_roles_SYSID.push(this.getRoleID(admin_role));\r\n    });\r\n    //\r\n    //Uniquely identify the user\r\n    //\r\n    var grTargetUser = new GlideRecordSecure('sys_user');\r\n    grTargetUser.addQuery('user_name', target);\r\n    grTargetUser.query();\r\n    if (grTargetUser.getRowCount() < 0) {\r\n        outputMsg = \"No account with user name \" + target + \" was found.\";\r\n    }\r\n    var targetSYSID = '';\r\n    while (grTargetUser.next()) {\r\n        targetSYSID = grTargetUser.getUniqueValue();\r\n    }\r\n\r\n    var grRoleMembershipsToStrip = new GlideRecordSecure('sys_user_has_role');\r\n    grRoleMembershipsToStrip.addQuery('user', targetSYSID);\r\n    grRoleMembershipsToStrip.query();\r\n    if (admin_roles.length == 0) {\r\n        outputMsg = 'No admin roles to strip from ' + target + '. No action on roles taken.';\r\n        return;\r\n    }\r\n    var delete_count = 0;\r\n    while (grRoleMembershipsToStrip.next()) {\r\n        if (admin_roles_SYSID.indexOf(grRoleMembershipsToStrip.getValue('role')) > -1) {\r\n\t\t\tgrRoleMembershipsToStrip.setWorkflow(false);\r\n            grRoleMembershipsToStrip.deleteRecord();\r\n            delete_count++;\r\n        }\r\n    }\r\n    outputMsg = 'Removed ' + delete_count + ' roles from account ' + target;\r\n    return outputMsg;\r\n}\r\n\r\nfunction stripAllRolesAndGroups(target) {\r\n    var outputMsg = '';\r\n    var grTargetUser = new GlideRecordSecure('sys_user');\r\n    grTargetUser.addQuery('user_name', target);\r\n    grTargetUser.query();\r\n    if (grTargetUser.getRowCount() < 0) {\r\n        outputMsg = \"No account with user name \" + this.target + \" was found.\";\r\n    }\r\n    var targetSYSID = '';\r\n    while (grTargetUser.next()) {\r\n        targetSYSID = grTargetUser.getUniqueValue();\r\n    }\r\n\r\n    var role_delete_count = 0;\r\n    var group_delete_count = 0;\r\n    var grRoleMembership = new GlideRecordSecure('sys_user_has_role');\r\n    grRoleMembership.addQuery('user', targetSYSID);\r\n    grRoleMembership.query();\r\n    if (grRoleMembership.getRowCount() > 0) {\r\n        while (grRoleMembership.next()) {\r\n\t\t\tgrRoleMembership.setWorkflow(false);\r\n            grRoleMembership.deleteRecord();\r\n            role_delete_count++;\r\n        }\r\n    }\r\n\r\n    var grGroupMembership = new GlideRecordSecure('sys_user_grmember');\r\n    grGroupMembership.addQuery('user', targetSYSID);\r\n    grGroupMembership.query();\r\n    if (grGroupMembership.getRowCount() > 0) {\r\n        while (grGroupMembership.next()) {\r\n\t\t\tgrGroupMembership.setWorkflow(false);\r\n            grGroupMembership.deleteRecord();\r\n            group_delete_count++;\r\n        }\r\n    }\r\n    outputMsg = 'Removed ' + role_delete_count + ' roles and ' +\r\n        group_delete_count + ' groups from account ' + target;\r\n    return outputMsg;\r\n}\r\n\r\nfunction getRoleID(roleName) {\r\n    var returnValue = '';\r\n    var grRole = new GlideRecord('sys_user_role');\r\n    grRole.addQuery('name', roleName);\r\n    grRole.query();\r\n    while (grRole.next()) {\r\n        returnValue = grRole.getUniqueValue();\r\n    }\r\n    return returnValue;\r\n}\r\n\r\nfunction hasRoleExactly(role) {\r\n    var arrayUtility = new ArrayUtil();\r\n    var roles = gs.getSession().getRoles() + '';\r\n    var roleArray = roles.split(\",\");\r\n    var isAuthorized = arrayUtility.contains(roleArray, role);\r\n    return isAuthorized;\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Objective: The purpose of this standalone fix script is to routinize the common sysadmin task of stripping admin access from an account. The de-provisioning process is going to be different for every organization, but it is often useful to have a repeatable, predictable technical solution for literally stripping an account of its rights in the event of an organizational change or security incid...",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/De-Provision Admin user (configurable)",
        "scriptFiles": [
          "deprovisionAdmin.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/De-Provision%20Admin%20user%20(configurable)",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/De-Provision%20Admin%20user%20(configurable)/deprovisionAdmin.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.064Z",
    "updatedAt": "2025-09-21T08:58:58.707Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 341,
    "type": "fix_script",
    "name": "Copy favourite to other users",
    "description": "You can use this script to take an existing favaourite from the sysuibookmark table and create a copy of it for any number of users. Can be useful when onboarding new staff, doing testing, etc. You will need two things to get started:",
    "script": "var srcFav = \"\"; // Add the sys_id of the favourite to copy, from sys_ui_bookmark table\r\nvar userCriteria = \"\"; // Add an encoded query of users from sys_user table\r\n\r\nvar fav = new GlideRecord(\"sys_ui_bookmark\");\r\nfav.get(srcFav);\r\n\r\nvar users = new GlideRecord(\"sys_user\");\r\nusers.addEncodedQuery(userCriteria);\r\nusers.query();\r\nwhile(users.next()) {\r\n  var newFav = new GlideRecord(\"sys_ui_bookmark\");\r\n  newFav.initialize();\r\n  newFav.setValue(\"color\",fav.color);\r\n  newFav.setValue(\"icon\",fav.icon);\r\n  newFav.setValue(\"order\",999999999); //this might need to be changed per individual requirements, otherwise this value should probably put it to the bottom of the list\r\n  newFav.setValue(\"pinned\",true);\r\n  newFav.setValue(\"title\",fav.title);\r\n  newFav.setValue(\"url\",fav.url);\r\n  newFav.setValue(\"user\",users.sys_id);\r\n  newFav.insert();\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "You can use this script to take an existing favaourite from the sysuibookmark table and create a copy of it for any number of users. Can be useful when onboarding new staff, doing testing, etc. You will need two things to get started:",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Copy favourite to other users",
        "scriptFiles": [
          "favCopy.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Copy%20favourite%20to%20other%20users",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Copy%20favourite%20to%20other%20users/favCopy.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.060Z",
    "updatedAt": "2025-09-21T08:58:58.703Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 340,
    "type": "fix_script",
    "name": "Clean update set",
    "description": "Fix script Fix Script for cleaning update set from customer updates made by a selected developer. Script can be adjusted to match different query for cleaning which fits your needs. Cleaning customer updates from update set is not removing updates made in system on direct records! It is just removing customer updates from update set to not move it to forward environments.",
    "script": "//Fix Script for cleaning an update set of customer updates made by a selected developer\r\n\r\n//Sys_id value of the selected update set\r\nvar UPDATE_SET_ID = '3f8ee93a45553010c0a05206e0e0f800';\r\n\r\n//Value of the selected developer (sys_user)\r\nvar DEVELOPER = 'datacenterautomation@snc.maint';\r\n\r\n//Query to get list of all updates in the selected update set made by the selected developer\r\nvar grCustomerUpdates = new GlideRecord('sys_update_xml');\r\ngrCustomerUpdates.addQuery('update_set', UPDATE_SET_ID);\r\ngrCustomerUpdates.addQuery('sys_created_by', DEVELOPER);\r\ngrCustomerUpdates.query();\r\n\r\n//Logging details of Fix Script cleaning\r\ngs.info('[Fix Script] - Removing: ' + grCustomerUpdates.getRowCount() + ' customer updates made by: ' + DEVELOPER + ' in update set: ' + UPDATE_SET_ID + '.');\r\n\r\n//Remove all updates made by developer\r\ngrCustomerUpdates.deleteMultiple();",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Fix script Fix Script for cleaning update set from customer updates made by a selected developer. Script can be adjusted to match different query for cleaning which fits your needs. Cleaning customer updates from update set is not removing updates made in system on direct records! It is just removing customer updates from update set to not move it to forward environments.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Clean update set",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Clean%20update%20set",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Clean%20update%20set/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.057Z",
    "updatedAt": "2025-09-21T08:58:58.699Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 339,
    "type": "fix_script",
    "name": "Cancel Workflow",
    "description": "Script to Cancel the workflow context attached to a record",
    "script": "/**\r\n* Description : Cancel the workflow context attached to a record\r\n* @RecordSysId : SysId of the record for which workflow needs to be cancelled\r\n* @RecordTable : Class of the record for which workflow need to be cancelled\r\n* @WorkflowVersion : Workflow version\r\n**/\r\n\r\nvar recordSysId = '<RecordSysId>'; // Change request Sys_id\r\n\r\nvar grRecord = new GlideRecord('<RecordTable>');\r\ngrRecord.get(recordSysId);\r\n\r\nvar grWorkflowContext = new GlideRecord('wf_context'); //Get the context of the workflow for given change request\r\ngrWorkflowContext.addQuery('id',grRecord.getUniqueValue());\r\ngrWorkflowContext.addQuery('workflow_version','<WorkflowVersion>'); //Query with the active workflow version\r\ngrWorkflowContext.query();\r\nif (grWorkflowContext.next()) {\r\n\r\n\tvar workflow = new workflow(); // Initiate the Workflow API\r\n\tworkflow.cancelContext(grWorkflowContext); // Call function to cancel the current workflow context\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Script to Cancel the workflow context attached to a record",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Cancel Workflow",
        "scriptFiles": [
          "Cancel Workflow Context.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Cancel%20Workflow",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Cancel%20Workflow/Cancel%20Workflow%20Context.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.054Z",
    "updatedAt": "2025-09-21T08:58:58.695Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 338,
    "type": "fix_script",
    "name": "Cancel in progress flow executions using flow name",
    "description": "The script in Fix scripts  Cancel in progress flow executions using flow name  script.js can be used to cancel the dlow executions using the name of the flow you have provided. This can be used to cancel huge amount of flow executions created for testing. This can also be used to cancel all the defective flow executions in one go.",
    "script": "var gr = new GlideRecord(\"sys_flow_context\"); \r\ngr.addQuery(\"name\", \"NAME OF FLOW TO CANCEL HERE\"); //Replace \"NAME OF FLOW TO CANCEL HERE\" with the name of the flow which you need to cancel\r\ngr.query(); \r\nwhile (gr.next()) { \r\nsn_fd.FlowAPI.cancel(gr.getUniqueValue(), 'Canceling In progress Flows'); \r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "The script in Fix scripts  Cancel in progress flow executions using flow name  script.js can be used to cancel the dlow executions using the name of the flow you have provided. This can be used to cancel huge amount of flow executions created for testing. This can also be used to cancel all the defective flow executions in one go.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Cancel in progress flow executions using flow name",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Cancel%20in%20progress%20flow%20executions%20using%20flow%20name",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Cancel%20in%20progress%20flow%20executions%20using%20flow%20name/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.050Z",
    "updatedAt": "2025-09-21T08:58:58.691Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 337,
    "type": "fix_script",
    "name": "Calculate Business Duration",
    "description": "Calculate Business Duration Use this script to update the business duration field for records. Description",
    "script": "// This script will retrospectively calculate the business duration of records and update the business_duration field with the correct value.\r\n\r\nvar selectedSchedule = ''; // Set the sys_id of the schedule you'd like to use to calculate duration\r\ntable = 'sc_req_item'; // Change this to set a different table such as incident\r\n\r\nvar gr = new GlideRecord(table);\r\ngr.addEncodedQuery(\"stateIN3,4^sys_created_on>javascript:gs.dateGenerate('2022-01-01','00:00:01')\"); // Set your encoded query to whatever you would like\r\ngr.query();\r\nvar count = 0;\r\nwhile (gr.next()) {\r\n    var startDate = new GlideDateTime(gr.sys_created_on);\r\n    var endDate = new GlideDateTime(gr.closed_at);\r\n    var schedule = new GlideSchedule();\r\n    schedule.load(selectedSchedule); \r\n    var duration = schedule.duration(startDate, endDate);\r\n    gr.setValue('business_duration', duration);\r\n    var opened = gr.sys_created_on.getDisplayValue();\r\n    var resolved = gr.closed_at.getDisplayValue();\r\n    gr.setValue('calendar_duration', gs.dateDiff(opened, resolved, false));\r\n    gr.setWorkflow('false'); // Set to true if you want workflows to run\r\n    gr.autoSysFields('false'); // Set to true if you want system fields to be updated\r\n    gr.update();\r\n    count = count + 1;\r\n}\r\ngs.info(count + \" records updated with new business duration value\");",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Calculate Business Duration Use this script to update the business duration field for records. Description",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Calculate Business Duration",
        "scriptFiles": [
          "calculate-business-duration.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Calculate%20Business%20Duration",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Calculate%20Business%20Duration/calculate-business-duration.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.046Z",
    "updatedAt": "2025-09-21T08:58:58.688Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 336,
    "type": "fix_script",
    "name": "Bulk Update Catalog Item Images",
    "description": "Bulk Catalog Item Image Change Updates the image(s) associated with catalog items or record producers Description",
    "script": "var table = 'sc_cat_item';\r\nvar iconSysId = 'f1dd1def1ba9fd1086a098e7b04bcb81'; // sys_id of icon file\r\nvar pictureSysId = 'f1dd1def1ba9fd1086a098e7b04bcb81'; // sys_id of picture file\r\nvar query = 'category=6a6ab100dbd5cc10ee115d87f49619fb^active!=true'; // query used to identify items\r\n\r\nvar grItem = new GlideRecord(table);\r\ngrItem.addEncodedQuery(query);\r\ngrItem.query();\r\nwhile (grItem.next()) {\r\n    createImage(pictureSysId, 'picture', table, grItem.sys_id);\r\n    createImage(iconSysId, 'icon', table, grItem.sys_id);\r\n}\r\n\r\nfunction createImage(attachmentID, fieldName, tableName, tableID) {\r\n\r\n    var attachmentGR = new GlideRecord('sys_attachment');\r\n    attachmentGR.get(attachmentID);\r\n    var fields = attachmentGR.getFields();\r\n    var imageGR = new GlideRecord('sys_attachment');\r\n    imageGR.initialize();\r\n    imageGR.compressed = attachmentGR.compressed;\r\n    imageGR.content_type = 'image/png';\r\n    imageGR.size_bites = attachmentGR.size_bites;\r\n    imageGR.size_compressed = attachmentGR.size_compressed;\r\n    imageGR.file_name = fieldName;\r\n    imageGR.table_name = 'ZZ_YY' + tableName;\r\n    imageGR.table_sys_id = tableID;\r\n    imageGR.state = '2';\r\n    var imageID = imageGR.insert();\r\n\r\n    copyAttachmentContent(attachmentID, imageID);\r\n\r\n}\r\n\r\n/*\r\n oldID: sys_id of existing attachment\r\n newID: sys_id of newly created attachment\r\n */\r\nfunction copyAttachmentContent(oldID, newID) {\r\n    var oldGR = new GlideRecord('sys_attachment_doc');\r\n    oldGR.addQuery('sys_attachment', oldID);\r\n    oldGR.query();\r\n    while (oldGR.next()) {\r\n        var newGR = new GlideRecord('sys_attachment_doc');\r\n        newGR.initialize();\r\n        newGR.data = oldGR.data;\r\n        newGR.length = oldGR.length;\r\n        newGR.position = oldGR.position;\r\n        newGR.sys_attachment = newID;\r\n        newGR.insert();\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Background script",
      "notes": "Bulk Catalog Item Image Change Updates the image(s) associated with catalog items or record producers Description",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Bulk Update Catalog Item Images",
        "scriptFiles": [
          "bulk-cat-item-image-update.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Bulk%20Update%20Catalog%20Item%20Images",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Bulk%20Update%20Catalog%20Item%20Images/bulk-cat-item-image-update.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.043Z",
    "updatedAt": "2025-09-21T08:58:58.684Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 335,
    "type": "fix_script",
    "name": "AutoNumberIssueFix",
    "description": "The Script is for correcting auto number issues This Script should be run in global scope using scripts background Ensure you update the required tableName per your requirement",
    "script": "# Fixscript for autonumbering issues\r\n# This script will be run in global using scripts Background\r\n# Update the tableName per requirement\r\n\r\nvar nm = new NumberManager(tableName);\r\n\r\nvar query = ''; //add query string\r\n\r\nvar grTableName = new GlideRecord(tableName); // glideRecord Table Name ex. Incident\r\n\r\ngrTableName.addQuery(query);\r\n\r\ngrTableName.orderBy('sys_created_on');\r\n\r\ngrTableName.query();\r\n\r\nwhile (grTableName.next()) {\r\n\t\r\ngrTableName.number = \r\nnm.getNextObjNumberPadded();\r\n\t\r\ngrTableName.update();",
    "metadata": {
      "application": "Global",
      "notes": "The Script is for correcting auto number issues This Script should be run in global scope using scripts background Ensure you update the required tableName per your requirement",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/AutoNumberIssueFix",
        "scriptFiles": [
          "autonumberingcode.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/AutoNumberIssueFix",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/AutoNumberIssueFix/autonumberingcode.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.039Z",
    "updatedAt": "2025-09-21T08:58:58.680Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 334,
    "type": "fix_script",
    "name": "Authenticate using ScriptedRESTAPI",
    "description": "This fix script is created to make a post call using scripted REST API when header type is 'application/x-www-form-urlencoded' to get the token and authenticate",
    "script": "/*\r\nThis fix script is created to make a post call using scripted REST API when header type is 'application/x-www-form-urlencoded' to get the token and authenticate\r\n*/\r\n\r\n(function execute(inputs, outputs) {\r\nvar body = \"grant_type=credentials&username=<UserName>-snow&password=<Password>\";\r\n\r\ntry {Â \r\nvar r = new sn_ws.RESTMessageV2();\r\nr.setEndpoint(\"http:<API Endpoint Details>/api/jwt/login\");Â \r\n//r.setRequestHeader(\"Accept\", \"application/json\");\r\nr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\nr.setRequestBody(body);\r\nr.setMIDServer('<Mid Server Link>'); // Enter your Mid Server\r\nr.setHttpMethod('POST');\r\n\r\nvar response = r.execute();\r\nr.setHttpTimeout(30000); // Set Time Out \r\nvar responseBody = response.getBody();\r\nvar httpStatus = response.getStatusCode(); // Get Status code to determine success or Faliure\r\nÂ Â Â  gs.info(\"Status >>>>\"+httpStatus);\r\nÂ Â Â  gs.info(\"responseBody >>>>\"+responseBody);\r\n    outputs.token_value = responseBody;\r\n  outputs.status = httpStatus;\r\n}\r\ncatch(ex) {\r\nvar message = ex.message;\r\n}\r\n})(inputs, outputs);",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "This fix script is created to make a post call using scripted REST API when header type is 'application/x-www-form-urlencoded' to get the token and authenticate",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Authenticate using ScriptedRESTAPI",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Authenticate%20using%20ScriptedRESTAPI",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Authenticate%20using%20ScriptedRESTAPI/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.036Z",
    "updatedAt": "2025-09-21T08:58:58.677Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 333,
    "type": "fix_script",
    "name": "Assign user list to a specific group",
    "description": "Fix Script Script to automatically assign a list of users to a specific group; you can change the user query to prepare a correct list of users according to your needs. To assign a different group, change the value of the GROUPID variable to the sysid of the group which you would like to assign. Example configuration of Fix Script",
    "script": "//Fix script to automatically assign a list of users to a specific group\r\n\r\n    //Sys_id value of the selected group to be assigned to users (in this example it is the 'help desk' group)\r\n    var GROUP_ID = '679434f053231300e321ddeeff7b12d8';\r\n\r\n    //Array to store a list of all updated users for logging purposes\r\n    var updatedUserList = [];\r\n\r\n    //Query to get the list of all users getting the new group\r\n    var grUserList = new GlideRecord('sys_user');\r\n    grUserList.addQuery('department', '5d7f17f03710200044e0bfc8bcbe5d43'); //Customer support department \r\n    grUserList.addActiveQuery();\r\n    grUserList.query();\r\n\r\n    while (grUserList.next()) {\r\n\r\n        //Assigning group to user\r\n        var grGroup = new GlideRecord('sys_user_grmember');\r\n        grGroup.initialize();\r\n        grGroup.user = grUserList.sys_id;\r\n        grGroup.group = GROUP_ID;\r\n        grGroup.insert();\r\n\r\n        //Pushing user sys_id to array\r\n        updatedUserList.push(grUserList.sys_id.toString());\r\n    }\r\n\r\n    //Logging details of Fix Script execution\r\n    gs.info('[Fix Script] - Assigned group: ' + GROUP_ID + ' to ' + grUserList.getRowCount() + ' users.');\r\n    gs.info('[Fix Script] - Users list: ' + updatedUserList.join(', '));",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Fix Script Script to automatically assign a list of users to a specific group; you can change the user query to prepare a correct list of users according to your needs. To assign a different group, change the value of the GROUPID variable to the sysid of the group which you would like to assign. Example configuration of Fix Script",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Assign user list to a specific group",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Assign%20user%20list%20to%20a%20specific%20group",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Assign%20user%20list%20to%20a%20specific%20group/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.032Z",
    "updatedAt": "2025-09-21T08:58:58.673Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 332,
    "type": "fix_script",
    "name": "Anonymise Data",
    "description": "Script Include Script for anonymising data in specified table and chosen fields. You can pass an additional query to limit records which will be cleared. It can be used for example to remove GDPR data from development instances or anonymise old records. It can be used for example in fix script or scheduled job for long-term cleaning. How to execute",
    "script": "var AnonymiseData = Class.create();\r\nAnonymiseData.prototype = {\r\n    initialize: function() {},\r\n\r\n    //Generate UUID which will be placed instead of real data\r\n    generateUUID: function() {\r\n        return gs.generateGUID();\r\n    },\r\n\r\n    //Function to anonymise data of one record and specified field list\r\n    //record - Gliderecord object of record to be cleared\r\n    //fieldList - Array of fields name, which should be cleared ex. ['first_name', 'last_name']\r\n    anonymiseRecord: function(record, fieldList) {\r\n        for (index in fieldList) {\r\n            if (!gs.nil(record.getValue(fieldList[index]))) {\r\n                record.setValue(fieldList[index], this.generateUUID());\r\n            }\r\n        }\r\n        record.update();\r\n    },\r\n\r\n    //Function to anonymise table with specified additional query and list of fields\r\n    //tablename - Name of table to be cleared ex. 'sys_user'\r\n    //fieldList - Array of fields name, which should be cleared ex. ['first_name', 'last_name']\r\n    //additionalQuery - Additional encoded query to limit list of records (if you would like to clear whole table just pass empty string)\r\n    //logging - True/False value to determine if logging should be executed during execution\r\n    anonymiseTable: function(tablename, fieldList, additionalQuery, logging) {\r\n\r\n        if (logging)\r\n            gs.info('[AnonymiseData] - Starting clearing data on table: ' + tablename + ' for fields: ' + fieldList + ' and addiotonal query: ' + additionalQuery);\r\n\r\n        var gr = new GlideRecord(tablename);\r\n        if (!gs.nil(additionalQuery)) {\r\n            gr.addEncodedQuery(additionalQuery);\r\n        }\r\n        gr.query();\r\n\r\n        while (gr.next()) {\r\n            this.anonymiseRecord(gr, fieldList);\r\n        }\r\n\r\n        if (logging)\r\n            gs.info('[AnonymiseData] - Execution finished, cleared: ' + gr.getRowCount() + ' records.');\r\n    },\r\n\r\n    type: 'AnonymiseData'\r\n};",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Script Include Script for anonymising data in specified table and chosen fields. You can pass an additional query to limit records which will be cleared. It can be used for example to remove GDPR data from development instances or anonymise old records. It can be used for example in fix script or scheduled job for long-term cleaning. How to execute",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Anonymise Data",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Anonymise%20Data",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Anonymise%20Data/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.029Z",
    "updatedAt": "2025-09-21T08:58:58.669Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 331,
    "type": "fix_script",
    "name": "Adjust Variable Order on Catalog Item",
    "description": "Adjust Variable Order on Catalog Item This Fix Script helps developers to automatically re-order all variables of a given Catalog Item or Variable Set. We all know the struggle, that initially we set up variables with fixed order steps such as: 100, 200, 300, 400",
    "script": "//set the following variables before running the script\r\nvar sys_id = \"e0ecd03947e29110d3c0c789826d4332\"; //provide a catalog item or variable set sys id\r\nvar step_size = 100; //provide the step size for the new order\r\n\r\n\r\nif (sys_id) { //avoid updating all records with empty fields for catalog item or variable set\r\n    var variables = new GlideRecord(\"item_option_new\");\r\n\tvariables.addQuery(\"cat_item\", sys_id).addOrCondition('variable_set', sys_id);\r\n    variables.orderBy(\"order\");\r\n    variables.query();\r\n\r\n    if (variables.hasNext()) {\r\n\t\tvar i =0;\r\n        while (variables.next()) {\r\n            variables.order.setValue(i*step_size);\r\n            variables.update();\r\n\t\t\ti++;\r\n        }\r\n\t\tgs.log(\"The order of \" + i + \" variables has been changed, ranging now from 0 to \" + (i-1)*step_size);\r\n    }\r\n\telse{\r\n\t\tgs.log(\"No Variables were found for the provided catalog item or variable set sys id\");\r\n\t}\r\n\r\n} else {\r\n    gs.log(\"Please provide a catalog item or variable set sys id in line 1\");\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Adjust Variable Order on Catalog Item This Fix Script helps developers to automatically re-order all variables of a given Catalog Item or Variable Set. We all know the struggle, that initially we set up variables with fixed order steps such as: 100, 200, 300, 400",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Adjust Variable Order on Catalog Item",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Adjust%20Variable%20Order%20on%20Catalog%20Item",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Adjust%20Variable%20Order%20on%20Catalog%20Item/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.025Z",
    "updatedAt": "2025-09-21T08:58:58.666Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 330,
    "type": "fix_script",
    "name": "Add Variable set to multiple catalog items",
    "description": "Add variable set to multiple catalog items through script Use this fix script to associate new variable set to few/all catalog items through script. Use sysids of all catalog items and Variable set in the script.",
    "script": "var itemIds = ['sys_id1','sys_id2','sys_id3']; // comma separated sys_id's of catalog items\r\nfor(var i=0; i<itemIds.length; i++){\r\n  addDefaultVariableSet(itemIds[i],'sys_id of Variable set here');\r\n}\r\nfunction addDefaultVariableSet(catItemSysId,VarSetID) {\r\nvar varset = new sn_sc.CatalogItemVariableSetM2M();\r\n//prepare object of columns name to Value of table io_set_item\r\nvar attr = {\r\n\"variable_set\": VarSetID, //mandatory attribute\r\n\"sc_cat_item\": catItemSysId, //mandatory attribute\r\n\"order\": 100 // optional\r\n};\r\nvarset.setAttributes(attr); // user setAttributes\r\nvar m2mRec = varset.create(true);\r\n}",
    "metadata": {
      "application": "Global",
      "runContext": "Fix script",
      "notes": "Add variable set to multiple catalog items through script Use this fix script to associate new variable set to few/all catalog items through script. Use sysids of all catalog items and Variable set in the script.",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Add Variable set to multiple catalog items",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Add%20Variable%20set%20to%20multiple%20catalog%20items",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Add%20Variable%20set%20to%20multiple%20catalog%20items/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.021Z",
    "updatedAt": "2025-09-21T08:58:58.662Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 329,
    "type": "fix_script",
    "name": "Add Fields On All List Views",
    "description": "Add Fields On All List Views This will add Updated On, Updated By, Created on, and Created by to every list view for the current user. You can add or remove fields to fieldsToAdd if you want others added as well",
    "script": "var fieldsToAdd = ['sys_updated_on', 'sys_updated_by', 'sys_created_on', 'sys_created_by'];\r\nvar userID = gs.getUserID();\r\nvar defaultLists = getDefaultLists();\r\n\r\nfor(var i = 0; i < defaultLists.length; i++){\r\n    var personalList = getPersonalList(defaultLists[i].name);\r\n    if(personalList){\r\n        deleteElements(personalList.getUniqueValue(), fieldsToAdd);\r\n        var position = getPosition(personalList.getUniqueValue());\r\n        addElements(personalList.getUniqueValue(), position, fieldsToAdd);   \r\n    }else{\r\n        personalList = createPersonalList(defaultLists[i].name);\r\n        addElements(personalList, 0, defaultLists[i].elements);\r\n        addElements(personalList, defaultLists[i].elements.length + 1, fieldsToAdd);\r\n    }\r\n}\r\n\r\nfunction getDefaultLists(){\r\n    var lists = [];\r\n    var listGR = new GlideRecord('sys_ui_list');\r\n    listGR.addQuery('view', 'Default view');\r\n    listGR.addNullQuery('parent');\r\n    listGR.query();\r\n    while(listGR.next()){\r\n        var list = {};\r\n        list.sys_id = listGR.getUniqueValue();\r\n        list.name = listGR.getValue('name');\r\n        list.elements = getElements(listGR.getUniqueValue(), fieldsToAdd);\r\n        lists.push(list);\r\n    }\r\n    return lists;\r\n}\r\n\r\nfunction getElements(listID, fields){\r\n    var elements = [];\r\n    var elementGR = new GlideRecord('sys_ui_list_element');\r\n    elementGR.addQuery('list_id', listID);\r\n\telementGR.addQuery('element', 'NOT IN', fields);\r\n    elementGR.orderBy('position');\r\n    elementGR.query();\r\n    while(elementGR.next()){\r\n        if(fieldsToAdd.indexOf(elementGR.getValue('element') == -1)){\r\n            elements.push(elementGR.getValue('element'));\r\n        }\r\n    }\r\n    return elements;\r\n}\r\n\r\nfunction getPersonalList(name){\r\n    var listGR = new GlideRecord('sys_ui_list');\r\n    listGR.addQuery('name', name);\r\n    listGR.addQuery('sys_user', userID);\r\n    listGR.addQuery('view', 'Default view');\r\n    listGR.query();\r\n    if(listGR.next()){\r\n        return listGR;\r\n    }\r\n    else{return null;}\r\n}\r\n\r\nfunction deleteElements(listID, elementsToDelete){\r\n    var elementGR = new GlideRecord('sys_ui_list_element');\r\n    elementGR.addQuery('list_id', listID);\r\n    elementGR.addQuery('element', 'IN', elementsToDelete);\r\n    elementGR.query();\r\n    while(elementGR.next()){\r\n        elementGR.deleteRecord();\r\n    }\r\n}\r\n\r\nfunction getPosition(listID){\r\n    var elementGR = new GlideRecord('sys_ui_list_element');\r\n    elementGR.addQuery('list_id', listID);\r\n    elementGR.orderByDesc('position');\r\n    elementGR.query();\r\n    if(elementGR.next()){\r\n        return elementGR.getValue('position');\r\n    }\r\n}\r\n\r\nfunction addElements(listID, position, elements){\r\n    var elementGR = new GlideRecord('sys_ui_list_element');\r\n    for(var i = 0; i < elements.length; i++){\r\n        elementGR.initialize();\r\n        elementGR.setValue('position', position);\r\n        elementGR.setValue('list_id', listID);\r\n        elementGR.setValue('element', elements[i]);\r\n        elementGR.insert();\r\n        position++;\r\n    }\r\n}\r\n\r\nfunction createPersonalList(listName){\r\n    var listGR = new GlideRecord('sys_ui_list');\r\n    listGR.initialize();\r\n    listGR.setValue('name', listName);\r\n    listGR.setValue('sys_user', userID);\r\n    listGR.setValue('view', 'Default view');\r\n    var list = listGR.insert();\r\n    return list;\r\n}",
    "metadata": {
      "application": "Global",
      "notes": "Add Fields On All List Views This will add Updated On, Updated By, Created on, and Created by to every list view for the current user. You can add or remove fields to fieldsToAdd if you want others added as well",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Fix scripts/Add Fields On All List Views",
        "scriptFiles": [
          "AddFieldsToLists.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Fix%20scripts/Add%20Fields%20On%20All%20List%20Views",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Fix%20scripts/Add%20Fields%20On%20All%20List%20Views/AddFieldsToLists.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.017Z",
    "updatedAt": "2025-09-21T08:58:58.658Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 328,
    "type": "inbound_action",
    "name": "Incident Creation from Email with Attachments Handling",
    "description": "Description The Incident Creation from Email with Attachments Handling functionality in ServiceNow allows users to create incident records directly from incoming emails. This automation streamlines the incident management process, enabling users to report issues efficiently without the need to log",
    "script": "// Email Inbound Action: Create Incident from Email\r\n(function() {\r\n    var incidentGR = new GlideRecord('incident');\r\n    incidentGR.initialize();\r\n    \r\n    // Set the incident details from the email\r\n    incidentGR.short_description = email.subject; // Use email subject as short description\r\n    incidentGR.description = email.body; // Use email body as description\r\n    incidentGR.caller_id = email.from; // Set caller from the email sender\r\n\r\n    // Insert the new incident and capture the sys_id\r\n    var incidentID = incidentGR.insert();\r\n\r\n    // Handle attachments\r\n    var attachments = email.attachments;\r\n    if (attachments) {\r\n        for (var i = 0; i < attachments.length; i++) {\r\n            var attachmentGR = new GlideRecord('sys_attachment');\r\n            attachmentGR.initialize();\r\n            attachmentGR.table_name = 'incident'; // Link to the incident table\r\n            attachmentGR.table_sys_id = incidentID; // Link to the newly created incident\r\n            attachmentGR.file_name = attachments[i].file_name; // Attach the file name\r\n            attachmentGR.content_type = attachments[i].content_type; // Attach the content type\r\n            attachmentGR.insert(); // Save the attachment\r\n        }\r\n    }\r\n})();",
    "metadata": {
      "application": "Global",
      "targetTable": "Unknown",
      "type": "Unspecified",
      "stopProcessing": false,
      "active": true,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Inbound Actions/Incident Creation from Email with Attachments Handling",
        "scriptFiles": [
          "Script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Inbound%20Actions/Incident%20Creation%20from%20Email%20with%20Attachments%20Handling",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Inbound%20Actions/Incident%20Creation%20from%20Email%20with%20Attachments%20Handling/Script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.013Z",
    "updatedAt": "2025-09-21T08:58:58.654Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 327,
    "type": "inbound_action",
    "name": "Email Text as Attachment",
    "description": "Save Email Text as Attachment Steps: Navigate to System Definition \\ Script Includes and click New.",
    "script": "/**********************************************************************************************************************\r\nCreate a Script Include:\r\nName: emailAsAttachmentUtil\r\nAccessible from: All application Scopes = this will allow it to be called by all applications\r\nActive: checked\r\nDescription: You may want to set the description to something like the following to document what this script includes does and how to call it\r\n\r\n\r\nThis utility script will take contents from an inbound email and create an attachment on the created record from the inbound email action.  To utilize this script, add the following lines at the end of the inbound email action script:\r\nvar emailAsAttachment = new global.emailAsAttachmentUtil();\r\nemailAsAttachment.createAttachment(email, current);\r\n***********************************************************************************************************************/\r\n\r\nvar emailAsAttachmentUtil = Class.create();\r\nemailAsAttachmentUtil.prototype = {\r\n    initialize: function() {\r\n\t\tthis.newLineChar = \"\\r\\n\";  // Microsoft Windows expects \\r and \\n for return and new line\r\n\t\tthis.contentType = \"text/plain\";\r\n    },\r\n\t\r\n\tcreateAttachment: function (emailRec, currentRec) {\r\n\t\tvar fileName = emailRec.subject + '.eml';\r\n\t\t\r\n\t\t// Setup array to push email values into.  Add additional as needed/\r\n\t\tvar emailData = [];\r\n\t\temailData.push(\"To: \" + emailRec.to);\r\n\t\temailData.push(\"Subject: \" + emailRec.subject);\r\n\t\temailData.push(\"From: \" + emailRec.origemail);\r\n\t\temailData.push(emailRec.body_text);\r\n\t\t\r\n\t\t// Convert emailData to a string separated by new line character.\r\n\t\tvar emailString = emailData.join(this.newLineChar);\r\n\t\t\r\n\t\t// Create attachment with email string and attach it to the record creatd by the email.\r\n\t\tvar sysAttachment = new GlideSysAttachment();\r\n\t\tsysAttachment.write(currentRec, fileName, this.contentType, emailString);\r\n\t},\r\n\r\n    type: 'emailAsAttachmentUtil'\r\n};\r\n\r\n\r\n/**********************************************************************************************************************\r\nNavigate to System Policy \\ Email \\ Inbound Actions and open the one that you want to capture the contents of the email as an attachment.\r\nGo to the Actions Tab and scroll to the bottom of the script and paste in the following:\r\n***********************************************************************************************************************/\r\n\r\nvar emailAttachment = new global.emailAsAttachmentUtil();\r\nemailAttachment.createAttachment(email, current);",
    "metadata": {
      "application": "Global",
      "targetTable": "Unknown",
      "type": "Unspecified",
      "stopProcessing": false,
      "active": true,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Inbound Actions/Email Text as Attachment",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Inbound%20Actions/Email%20Text%20as%20Attachment",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Inbound%20Actions/Email%20Text%20as%20Attachment/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.009Z",
    "updatedAt": "2025-09-21T08:58:58.651Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 326,
    "type": "inbound_action",
    "name": "Automate creation of incidents through inbound actions",
    "description": "This is a simple code to automate creation of incidents for the alerts receiving to ServiceNow instance. This code has functionality of adding receipients (excluding service-now instance emails) of email to watchlist of incident.",
    "script": "var recipients= email.recipients;   //get recipients of email.\r\nvar recipientsSplit= recipients.split(\",\");\r\nvar finalRecipients=\"\";\r\n// Add execution condition on \"When to run\" tab. The condition is \" User is email address of the alert receiving from.\" Here User is field on the \"sys_email\" table\r\ncurrent.caller_id = gs.getUserID();\r\ncurrent.comments = \"received from: \" + email.origemail + \"\\n\\n\" + email.body_text; // update incident comments with email body.\r\ncurrent.short_description = email.subject;\r\ncurrent.business_service = \"e32e0a921b223010d1462f8a2d4bcb68\";\r\ncurrent.assignment_group = \"b5a28e7c1bcc1d50789adbd7b04bcbb9\";\r\ncurrent.incident_state = IncidentState.NEW;\r\ncurrent.notify = 2;\r\ncurrent.contact_type = \"email\";\r\ncurrent.description= email.body_text;\r\nor(var i=0; i<recipientsSplit.length;i++)\r\n{\r\nif(!recipientsSplit[i].includes(\"service-now.com\")){ // exclude service-now instance emails.\r\n\r\n\tfinalRecipients=finalRecipients+\",\"+recipientsSplit[i];\r\n\t}\r\n\r\n}\r\ncurrent.watch_list = finalRecipients;// update current incident with reciepients as watch_list members\r\ncurrent.insert();",
    "metadata": {
      "application": "Global",
      "targetTable": "Unknown",
      "type": "Unspecified",
      "stopProcessing": false,
      "active": true,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Inbound Actions/Automate creation of incidents through inbound actions",
        "scriptFiles": [
          "incidentCreation.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Inbound%20Actions/Automate%20creation%20of%20incidents%20through%20inbound%20actions",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Inbound%20Actions/Automate%20creation%20of%20incidents%20through%20inbound%20actions/incidentCreation.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.005Z",
    "updatedAt": "2025-09-21T08:58:58.647Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 325,
    "type": "inbound_action",
    "name": "Auto Reply Email",
    "description": "There are use cases where it has been requested to setup an \"auto reply\" type process within ServiceNow To accomplish this, you'll need to do 3 steps: 1) Create an event - https://docs.servicenow.com/bundle/rome-platform-administration/page/administer/platform-events/task/tCreateYourOwnEvent.html",
    "script": "//Please refer to the readme file which contains all the steps necessary for this to properly work\r\n//The below code is for use within the inbound action and should be placed at the point within your script where you'd like to generate the event which will trigger the notification\r\n\r\ngs.eventQueue('event_name', current, email.from, ''); //replace event_name with the name of your event -- this script will take the inbound email \"from\" address and pass that as parm 1 with this event",
    "metadata": {
      "application": "Global",
      "targetTable": "associated",
      "type": "Unspecified",
      "stopProcessing": false,
      "active": true,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Inbound Actions/Auto Reply Email",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Inbound%20Actions/Auto%20Reply%20Email",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Inbound%20Actions/Auto%20Reply%20Email/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:19.002Z",
    "updatedAt": "2025-09-21T08:58:58.644Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 324,
    "type": "inbound_action",
    "name": "Advanced Scripts",
    "description": "These inbound action scripts will help you with the following: 1) Creation - Map values from an email to variables and create a requested item for the same. Check with script - createcatalogitemfromemail.js",
    "script": "// File: cancel_catalog_item_from_email.js\n//variable values\r\nvar worker = email.body.name;\r\nvar userid = email.body.user_id;\r\n\r\nvar userRec = new GlideRecord(\"sys_user\");\r\nuserRec.addQuery(\"user_name\", userid);\r\nuserRec.query();\r\nif (userRec.next()) {\r\n   var userID = userRec.getUniqueValue();\r\n}\r\n\r\n//query the exisiting RITM and cancel the same.\r\nvar ritm = new GlideRecord('sc_req_item');\r\nvar eq = 'cat_item=SYS_ID_OF_THE_ITEM^active=true^request.requested_for='+ userID; //Update the sys_id of the item and update the query as you need.\r\nritm.addEncodedQuery(eq);\r\nritm.query();\r\nif (ritm.next())\r\n{\r\n\tritm.work_notes = \"received from: \" + email.origemail + \"\\n\\n\" + email.body_text;\r\n\tritm.state = '7';\r\n\tritm.stage = 'Completed';\r\n\tvar workflow = new Workflow();\r\n\tworkflow.cancel(ritm);\r\n    \tritm.update();\r\n\r\n\t//query related catalog task and close the same as well.\r\n\tvar rec = new GlideRecord('sc_task');\r\n\trec.addQuery('request_item', ritm.getUniqueValue());\r\n\trec.query();\r\n\twhile(rec.next()){\r\n\trec.state = '7';\r\n\trec.update();\r\n\t}\r\n\t\r\n   }\n\n// File: create_catalog_item_from_email.js\ncreateRequest();\r\n\r\nfunction createRequest() {\r\n\r\n   var cart = new Cart();   //calling the cart API\r\n\r\n   var item = cart.addItem('SYS_ID');   //Add sys_id of the catag item \r\n\r\n// set variables\r\nvar worker = email.body.name;\r\nvar termination = email.body.date;\r\nvar term_d = new GlideDateTime();\r\nterm_d.setDisplayValue(termination);\r\nvar userid = email.body.user_id;\r\n\r\nvar userRec = new GlideRecord(\"sys_user\");\r\nuserRec.addQuery(\"user_name\", userid);\r\nuserRec.query();\r\nif (userRec.next()) {\r\n   var userID = userRec.getUniqueValue();\r\n}\r\n\r\ncart.setVariable(item, 'select_employee', userID);\r\ncart.setVariable(item, 'termination_date', term_d);\r\n\r\nvar rc = cart.placeOrder();   \r\nvar ritmSys = rc.number;\r\n\r\nupdateRITM(rc.sys_id);   //call a function immediately to update the ritm.           \r\n}\r\n\r\nfunction updateRITM(req){\r\n\r\n   var ritm = new GlideRecord('sc_req_item');\r\n   ritm.addQuery('request', req);   \r\n   ritm.query();\r\n   while (ritm.next()){\r\n       ritm.description = email.body_text;   \r\n       ritm.update();\r\n\r\n   }\r\n\r\n}\r\nevent.state=\"stop_processing\";\n\n// File: update_catalog_item_from_email.js\n//variable values\r\nvar worker = email.body.name;\r\nvar termination = email.body.date;\r\nvar term_d = new GlideDateTime();\r\nterm_d.setDisplayValue(termination);\r\nvar userid = email.body.user_id;\r\n\r\nvar userRec = new GlideRecord(\"sys_user\");\r\nuserRec.addQuery(\"user_name\", userid);\r\nuserRec.query();\r\nif (userRec.next()) {\r\n   var userID = userRec.getUniqueValue();\r\n}\r\n\r\n//query the exisiting RITM and update the same.\r\nvar ritm = new GlideRecord('sc_req_item');\r\nvar eq = 'cat_item=SYS_ID_OF_THE_ITEM^active=true^request.requested_for='+ userID; //Update the sys_id of the item and update the query as you need.\r\nritm.addEncodedQuery(eq);\r\nritm.query();\r\nif(ritm.next()){\r\n\tritm.work_notes = \"received from: \" + email.origemail + \"\\n\\n\" + email.body_text;\r\n\tritm.variables.termination_date = term_d;\r\n    \tritm.description = email.body_text;  \r\n\tnew Workflow().restartWorkflow(ritm);\r\n    ritm.update();\r\n}",
    "metadata": {
      "application": "Global",
      "targetTable": "Unknown",
      "type": "Unspecified",
      "stopProcessing": false,
      "active": true,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Inbound Actions/Advanced Scripts",
        "scriptFiles": [
          "cancel_catalog_item_from_email.js",
          "create_catalog_item_from_email.js",
          "update_catalog_item_from_email.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Inbound%20Actions/Advanced%20Scripts"
      }
    },
    "createdAt": "2025-09-20T08:42:18.998Z",
    "updatedAt": "2025-09-21T08:58:58.640Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 323,
    "type": "scheduled_job",
    "name": "Update Inactive Application Owner",
    "description": "This code snippet will update the owner of application records in the cmdbciappl table where the current owner is inactive. It specifically sets the owner to the manager of that inactive owner, ensuring that each application has an active owner assigned. GlideRecord Initialization: var grApp = new GlideRecord(\"cmdbciappl\");",
    "script": "var grApp = new GlideRecord(\"cmdb_ci_appl\");\r\ngrApp.addEncodedQuery(\"owned_by.active=false\");\r\ngrApp.query();\r\nwhile(grApp.next()){\r\nvar managerSysId = grApp.owned_by.manager.toString(); // Get Manager SysId     \r\nif (managerSysId) {\r\ngrApp.owned_by = managerSysId;\r\ngrApp.update();\r\n}\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Update Inactive Application Owner",
        "scriptFiles": [
          "Update Inactive Application Owner.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Update%20Inactive%20Application%20Owner",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Update%20Inactive%20Application%20Owner/Update%20Inactive%20Application%20Owner.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.994Z",
    "updatedAt": "2025-09-21T08:58:58.636Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 322,
    "type": "scheduled_job",
    "name": "Unpublish Public Reports",
    "description": "Scheduled Job to query the report table for any reports that are Published or roles are set to Public and remove the public role from report.",
    "script": "var pubReport = new GlideRecord('sys_report');\r\npubReport.addQuery('is_published=true^ORroles=public');\r\npubReport.query();\r\nwhile(pubReport.next()) {\r\n    //Obtain current roles report is shared with\r\n\tvar removePublic = pubReport.roles;\r\n    //Remove public role from string\r\n\tremovePublic = removePublic.replace(/public/g, '');\r\n    //Set report roles to new string value. Wihtout public role, report will auto unpublish\r\n\tpubReport.roles.setValue(removePublic);\r\n\tpubReport.update();\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Unpublish Public Reports",
        "scriptFiles": [
          "UnpublishReports.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Unpublish%20Public%20Reports",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Unpublish%20Public%20Reports/UnpublishReports.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.990Z",
    "updatedAt": "2025-09-21T08:58:58.632Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 321,
    "type": "scheduled_job",
    "name": "Survey Trigger Scheduled Script",
    "description": "Use the code snippets to trigger survey via scheduled script. Survey Trigger Scheduled Job surveytriggersj.js",
    "script": "var incidentGR = new GlideRecord('incident');\r\nincidentGR.addEncodedQuery(\"resolved_atONYesterday@javascript:gs.beginningOfYesterday()@javascript:gs.endOfYesterday()\"); //Update query as per your requirement for incident records\r\nincidentGR.query();\r\nwhile(incidentGR.next()){\r\nvar checkIfSent = checkIfSurveyAlreadySentforThisWeek(incidentGR.caller_id);\r\n\tif(checkIfSent == false)\r\n\t\t(new sn_assessment_core.AssessmentCreation()).conditionTrigger(incidentGR, 'sys_id'); //sys_id of the trigger condition record for the survey table name \"asmt_condition\".\r\n}\r\n\r\nfunction checkIfSurveyAlreadySentforThisWeek(callerId){\r\n\t\r\nvar surveyInstanceRec = new GlideRecord('asmt_assessment_instance');\r\n\tsurveyInstanceRec.addQuery('user',callerId);\r\n\tsurveyInstanceRec.addEncodedQuery('metric_type='Survey SYS ID'^task_id.sys_class_name=incident^state!=canceled'); //Update query as per your requirement and add sys_id for the survey record.\r\nsurveyInstanceRec.query();\r\n\tif(surveyInstanceRec.next()){\r\n\t\treturn true;\r\n\t}\r\n\telse\r\n\t\treturn false;\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Survey Trigger Scheduled Script",
        "scriptFiles": [
          "survey_trigger_sj.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Survey%20Trigger%20Scheduled%20Script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Survey%20Trigger%20Scheduled%20Script/survey_trigger_sj.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.987Z",
    "updatedAt": "2025-09-21T08:58:58.628Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 320,
    "type": "scheduled_job",
    "name": "ScheduleAtSpecificDaysAndTimes",
    "description": "Script to execute a schedule job on specific days and times. For eg: Schedule to run on all Mondays, Wednesdays and Fridays at 6, 12, 18 and 24 hours. You could place this in the condition script of a schedule job, configure the properties to setup the required number of days and times. The job should be scheduled to run periodically at every one hour and depending on the configured values, it...",
    "script": "/*************************************************************************************/\r\n// INPUT ARGUMENTS\r\n// days - Create a system property \"job.days.execute\" and specify the number of days as comma separated values eg 1,3,5 \r\n// 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday and 7 - Sunday\r\n\r\n// hours - Create a system property \"job.hours.execute\" and specify the time as comma separated values eg 6,12,18,24\r\n// 1-1am, 12-12pm, 18-6pm and 24-12am \r\n\r\n// OUTPUT ARGUMENTS\r\n// execute - Returns true or false and determines whether the job should be executed or not\r\n/*************************************************************************************/\r\n\r\nexecuteJob();\r\n\r\nfunction executeJob() {\r\n    var execute = false;\r\n    var days = gs.getProperty('job.days.execute');\r\n    var hours = gs.getProperty('job.hours.execute');\r\n\r\n    var dateTime = new GlideDateTime();\r\n    var dayOfWeek = dateTime.getDayOfWeekLocalTime();\r\n    var timeOfDay = dateTime.getLocalTime().toString().split(\" \")[1];\r\n    var hourOfDay = parseInt(timeOfDay.split(\":\")[0]);\r\n\r\n    if (days.indexOf(dayOfWeek) > -1 && hours.indexOf(hourOfDay) > -1) {\r\n        execute = true;\r\n    }\r\n\r\n    return execute;\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "runFrequency": "Hourly",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/ScheduleAtSpecificDaysAndTimes",
        "scriptFiles": [
          "schedulejobcondition.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/ScheduleAtSpecificDaysAndTimes",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/ScheduleAtSpecificDaysAndTimes/schedulejobcondition.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.983Z",
    "updatedAt": "2025-09-21T08:58:58.624Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 319,
    "type": "scheduled_job",
    "name": "Remove Inactive and locked out users from All Groups and Roles",
    "description": "Remove Inactive and locked out users from All Groups and Roles It is always a good practise to have a secure and clean working instance. Having users with specific criteria such as the user is inactive and has been locked out should not have any role or belong to any group.",
    "script": "function removeRolesAndGroupMembership() {\r\n    var glideRecordUserTable = new GlideRecord(\"sys_user\");\r\n    glideRecordUserTable.addEncodedQuery('active=false^locked_out=true');\r\n    glideRecordUserTable.query();\r\n\r\n    while (glideRecordUserTable.next()) {\r\n        var glideRecordGroupMembers = new GlideRecord('sys_user_grmember');\r\n        glideRecordGroupMembers.addQuery('user', glideRecordUserTable.sys_id);\r\n        glideRecordGroupMembers.query();\r\n        while (glideRecordGroupMembers.next()) {\r\n            glideRecordGroupMembers.deleteRecord();\r\n        }\r\n\r\n        var glideRecordUserRoles = new GlideRecord('sys_user_has_role');\r\n        glideRecordUserRoles.addQuery('user', glideRecordUserTable.sys_id);\r\n        glideRecordUserRoles.query();\r\n        while (glideRecordUserRoles.next()) {\r\n            glideRecordUserRoles.deleteRecord();\r\n        }\r\n    }\r\n}\r\n\r\n// removeRolesAndGroupMembership();",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Remove Inactive and locked out users from All Groups and Roles",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Remove%20Inactive%20and%20locked%20out%20users%20from%20All%20Groups%20and%20Roles",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Remove%20Inactive%20and%20locked%20out%20users%20from%20All%20Groups%20and%20Roles/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.980Z",
    "updatedAt": "2025-09-21T08:58:58.618Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 318,
    "type": "scheduled_job",
    "name": "Reject approvals created before an year",
    "description": "Script Purpose: This script helps you manage approval records in ServiceNow. It searches for approval requests in the sysapprovalapprover table that were created more than 12 months ago and are currently marked as \"requested.\" The script then updates these records to change their status to \"rejected.\" How to Use This Script",
    "script": "var grAppr = new GlideRecord(\"sysapproval_approver\");\r\ngrAppr.addEncodedQuery(\"sys_created_on<javascript:gs.beginningOfLast12Months()^state=requested\");\r\ngrAppr.query();\r\nwhile(grAppr.next()){\r\n\tgrAppr.setValue('state', 'rejected');\r\n\tgrAppr.update();\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Reject approvals created before an year",
        "scriptFiles": [
          "Reject Approvals Created Before an Year.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Reject%20approvals%20created%20before%20an%20year",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Reject%20approvals%20created%20before%20an%20year/Reject%20Approvals%20Created%20Before%20an%20Year.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.976Z",
    "updatedAt": "2025-09-21T08:58:58.612Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 317,
    "type": "scheduled_job",
    "name": "PostUserDisabledActivity",
    "description": "Get today's deactivated users records script Scheduled Jobs",
    "script": "/*\r\nGet today's deactivated users records\r\n*/\r\nvar grUserRecords = JSON.parse(new global.glide_record_functions().getTableRecords('sys_user', 'sys_updated_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^active=false^u_disabled_due_to_inactivity=false', 'sys_id'));\r\nif (grUserRecords.length > 0) {\r\n    //Take action on individual record\r\n    for (var i = 0; i < grUserRecords.length; i++) {\r\n        gs.eventQueue('actions.post.user.account.disabled', current, grUserRecords[i].sys_id);\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/PostUserDisabledActivity",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/PostUserDisabledActivity",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/PostUserDisabledActivity/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.973Z",
    "updatedAt": "2025-09-21T08:58:58.609Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 316,
    "type": "scheduled_job",
    "name": "Paginated Export",
    "description": "",
    "script": "var tableName = ''; //table name to export from\r\nvar fileNamePrefix = ''; //name of the file that will be exported\r\nvar rowsPerExport; //number of rows to export per file\r\nvar orderByField = 'sys_id'; //name of the field to orderby, sys_id is recommended except in rare circumstances like querying a db view table\r\nvar instanceURL = ''; //url of the instance to export from\r\nvar fileFormat = ''; //desired format of the exported file\r\nvar authenticationProfileID = ''; //sys_id of the authentication profile to use for rest calls\r\nvar authenticationProfileType = ''; //type of authentication profile, either basic or oauth\r\nvar viewName = ''; //name of the view to use for the export (controls what fields are included)\r\nvar midServerName = ''; //name of midserver to export to\r\n\r\nvar gr = new GlideRecord(tableName);\r\ngr.setLimit(1000000);\r\ngr.query();\r\nvar count = gr.getRowCount();\r\nvar iterations = parseInt(count/rowsPerExport) + 1;\r\nfor(var i = 0; i < iterations; i++){\r\n  var id = getLastSysID(i * 10000);\r\n  var eccAttachmentID = createECCAttachmentGR();\r\n  var fileName = fileNamePrefix + i;\r\n  var attachmentID = downloadFile(id, eccAttachmentID, fileName);\r\n  var eccID = insertToECC(attachmentID, eccAttachmentID, fileName);\r\n}\r\n\r\nfunction getLastSysID(row){\r\n  var gr = new GlideRecord(tableName);\r\n  gr.orderBy(orderByField);\r\n  gr.chooseWindow(row, row+1);\r\n  gr.query();\r\n  gr.next();\r\n  return gr.getValue(orderByField);\r\n}\r\n\r\nfunction createECCAttachmentGR(){\r\n\tvar eccAttachmentGR = new GlideRecord('ecc_agent_attachment');\r\n\teccAttachmentGR.initialize();\r\n\teccAttachmentGR.setValue('source', 'Paginated Export');\r\n\teccAttachmentGR.setValue('name', 'Export Set Attachment');\r\n\tvar eccAttachmentID = eccAttachmentGR.insert();\r\n\treturn eccAttachmentID;\r\n}\r\n\r\nfunction downloadFile(id, eccAttachmentID, fileName){\r\n var request = new sn_ws.RESTMessageV2();\r\nrequest.setAuthenticationProfile(authenticationProfileType, authenticationProfileID);\r\n  request.setEndpoint(instanceURL + '/' + tableName + '_list.do?' + fileFormat.toUpperCase() + '&sysparm_view=' + viewName + '&sysparm_query=' + orderByField + '%3E%3D' + id + '&sysparm_orderby=' + orderByField + '&sysparm_record_count=' + rowsPerExport);\r\n  request.setHttpMethod('GET');\r\n  request.saveResponseBodyAsAttachment('ecc_agent_attachment', eccAttachmentID, fileName + '.' + fileFormat);\r\n  var response = request.execute(); \r\n  var attachmentID = response.getResponseAttachmentSysid();\r\n  return attachmentID;\r\n}\r\n\r\nfunction insertToECC(attachmentID, recordID, fileName){\r\n\tvar xmlString = getXMLString(attachmentID, recordID, fileName);\r\n\tvar eccGR = new GlideRecord('ecc_queue');\r\n\teccGR.initialize();\r\n\teccGR.setValue('agent', midServerName);\r\n\teccGR.setValue('topic', 'StreamPipeline');\r\n\teccGR.setValue('queue', 'output');\r\n\teccGR.setValue('payload', xmlString);\r\n\teccGR.insert();\r\n}\r\n\r\nfunction getXMLString(attachmentID, recordID, fileName){\r\n    fileName += '.' + fileFormat;\r\n\tvar xmlString = \r\n\t'<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + \r\n\t'<parameters>' +\r\n\t\t'<parameter name=\\\"stream_relay_response_topic\\\" value=\\\"ExportSetResult\\\"/>' +\r\n\t\t'<stream_relay_source attachment_sys_id=\\\"' + attachmentID + '\\\" type=\\\"AttachmentSource\\\"/>' +\r\n\t\t'<stream_relay_transform attachment.table_sys_id=\\\"' + recordID + '\\\" order=\\\"0\\\" stream_relay_transfer_progress_interval=\\\"150\\\" type=\\\"AttachmentProgressTransformer\\\"/>' +\r\n\t\t'<stream_relay_sink path=\"\\/' + fileName + '\\\" type=\\\"FileSink\\\"/>' +\r\n\t\t'</parameters>';\r\n\treturn xmlString;\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Paginated Export",
        "scriptFiles": [
          "paginatedExport.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Paginated%20Export",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Paginated%20Export/paginatedExport.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.969Z",
    "updatedAt": "2025-09-21T08:58:58.605Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 315,
    "type": "scheduled_job",
    "name": "Lock out users who have not logged into the system longer than 30 days",
    "description": "Scheduled Script Execution This script allows to lock out users who have not logged into the system for longer than 30 days. You can customize the additional query parameters and change the current ones for example in order to shorten or enlarge the time period. Example configuration of Scheduled Script Execution",
    "script": "//Script to lock out users who have not logged into the system longer than 30 days\r\n\r\n//Query the users who are active, not locked out and have not logged into the system longer than 30 days\r\n//You can add addtional conditions to protect certain groups, e.g. technical users (use grUser.addQuery())\r\nvar grUser = new GlideRecord('sys_user');\r\ngrUser.addActiveQuery();\r\ngrUser.addEncodedQuery('last_login<javascript:gs.beginningOfLast30Days()^locked_out=false');\r\ngrUser.query();\r\n\r\n//For all users from the query, set the locked out flag to true\r\n//You can also set different parameters, for example set active to false instead of locked out\r\nwhile (grUser.next()) {\r\n    grUser.locked_out = true;\r\n    grUser.update();\r\n}\r\n\r\n//Log information about the number of locked out users\r\ngs.info('[Scheduled Script Execution] Locked out ' + grUser.getRowCount() + ' users, which have not logged into system for longer than 30 days.');",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Lock out users who have not logged into the system longer than 30 days",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Lock%20out%20users%20who%20have%20not%20logged%20into%20the%20system%20longer%20than%2030%20days",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Lock%20out%20users%20who%20have%20not%20logged%20into%20the%20system%20longer%20than%2030%20days/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.966Z",
    "updatedAt": "2025-09-21T08:58:58.602Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 314,
    "type": "scheduled_job",
    "name": "Get All Catalog Tasks without Request items",
    "description": "",
    "script": "function catalogTaskWithoutReqItem(){\r\n    var gliderecordToCatalogTask = new GlideRecord('sc_task');\r\n    gliderecordToCatalogTask.encodedQuery('request_itemISEMPTY');\r\n    gliderecordToCatalogTask.query();\r\n}\r\n// catalogTaskWithoutReqItem();",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Get All Catalog Tasks without Request items",
        "scriptFiles": [
          "catalogTaskWithoutReqItem.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Get%20All%20Catalog%20Tasks%20without%20Request%20items",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Get%20All%20Catalog%20Tasks%20without%20Request%20items/catalogTaskWithoutReqItem.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.962Z",
    "updatedAt": "2025-09-21T08:58:58.598Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 313,
    "type": "scheduled_job",
    "name": "Deactive and Reactivate Catalog Items",
    "description": "Scheduled Deactivation/Reactivation of Forms A scheduled job script to deactivate and reactivate forms automatically during a maintenance window. Description",
    "script": "// Configure a variable for each catalog item that needs to be deactivated/reactivated. Variable value needs to be the catalog item sys_id\r\nvar newITAccountForm = 'acbf71d7dbd3341087d5bc56f39619d8';\r\nvar modifyITAccountForm = 'bdcaa8f6db58ff00ee115d87f49619b3';\r\nvar dlManagementForm = 'a7d613e0dbce7740ee115d87f496193c';\r\nvar sharedMailboxManagementForm = '04eabdd1dbc67340de2e32e43a96196c';\r\n\r\n// Add the vatalog item variables to the array as required\r\nvar array = [modifyITAccountForm, dlManagementForm, sharedMailboxManagementForm];\r\n\r\nfor (item in array) {\r\n\tvar grItem = new GlideRecord('sc_cat_item');\r\n\tgrItem.get(array[item]);\r\n\tgrItem.setValue('active', false); // False to deactivate, True to activate.\r\n\tgrItem.update();\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Deactive and Reactivate Catalog Items",
        "scriptFiles": [
          "schedule-deactivation.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Deactive%20and%20Reactivate%20Catalog%20Items",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Deactive%20and%20Reactivate%20Catalog%20Items/schedule-deactivation.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.959Z",
    "updatedAt": "2025-09-21T08:58:58.595Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 312,
    "type": "scheduled_job",
    "name": "Deactivate INC in 90 days",
    "description": "This code snippet will help to inactivate the table records after 90 days of creation through schedule insert on sys trigger table  . Can be used in BR/Script Inculde/Background script. Formatted for background script, please check the result in sys trigger Table or else click on document id it will redirect to  inserted JOb",
    "script": "//Formatted the code for background script       \r\nvar grIncident = new GlideRecord('incident');\r\ngrIncident.addEncodedQuery(\"sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^active=true\");\r\ngrIncident.orderByDesc('number');\r\n//grIncident.setLimit(20);\r\ngrIncident.query();\r\nwhile (grIncident.next()) {\r\n\r\n    var id=grIncident.getValue('sys_id');\r\n    var tableName=grIncident.getValue('sys_class_name');\r\n\r\n    // var id=\"e329de99731423002728660c4cf6a73c\";\r\n//var tableName=\"incident\";  \r\n\r\n              var gdt = new GlideDateTime(gs.nowDateTime());\r\n             gdt.addDays(90);\r\n          \r\n              //gs.addErrorMessage(gdt);\r\n\r\n              var grST = new GlideRecord(\"sys_trigger\");\r\n\r\n              grST.initialize();\r\n\r\n              grST.name = \"Inactivate \"+tableName+\" record\";\r\n\r\n              grST.next_action.setValue(gdt);\r\n\r\n              grST.job_id.setDisplayValue('RunScriptJob');\r\n\r\n              grST.script = doTimelySchedule(id);\r\n\r\n              grST.document = 'syslog';\r\n\r\n              grST.state = 0;\r\n\r\n              grST.trigger_type = 0;\r\n\r\n              grST.insert();\r\n           }\r\n\r\n              function doTimelySchedule(id) {\r\n\r\n                                           var ret = \"\"\r\n\r\n                             + \"var gr = new GlideRecord('\"+tableName+\"');\\n\"\r\n\r\n                             + \"gr.addQuery('sys_id', '\" +id+ \"');\\n\"\r\n\r\n                             + \"gr.query();\\n\"\r\n\r\n                             + \"if (gr.next()) {\\n\"\r\n\r\n                                           + \"gr.active = false;\\n\"\r\n\r\n                                           + \"gr.update();\\n\"\r\n\r\n                                           + \"}\";\r\n\r\n                            return ret;      \r\n                           gs.print( \"return value : \" + ret);//prints the inserted code in sysy trigger table\r\n                           //open the schedule item with the name \r\n                                                            \r\n\r\n\r\n                             }",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Deactivate INC in 90 days",
        "scriptFiles": [
          "90daysInactiveScript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Deactivate%20INC%20in%2090%20days",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Deactivate%20INC%20in%2090%20days/90daysInactiveScript.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.955Z",
    "updatedAt": "2025-09-21T08:58:58.591Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 311,
    "type": "scheduled_job",
    "name": "Daily detection of customer updates made in 'Default' update set",
    "description": "Scheduled Script Execution This script allows detecting any customer updates made in 'Default' update set (on different one based on configuration) in this day. You can change the action after detection from logging, to sending e-mail notification or creating event based on your needs. Example configuration of Scheduled Script Execution",
    "script": "//Script to detect any changes made in 'Default' (or different based on your configuration) update set\r\n\r\n//Sys_id value of the selected update set (In this case 'Default')\r\nvar DEFAULT_UPDATE_SET_ID = '3f8ee93a45553010c0a05206e0e0f800';\r\n\r\n//Query to get list of all updates done in specified update set this day\r\nvar grCustomerUpdate = new GlideRecord('sys_update_xml');\r\ngrCustomerUpdate.addQuery('update_set', DEFAULT_UPDATE_SET_ID);\r\ngrCustomerUpdate.addEncodedQuery('sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()');\r\ngrCustomerUpdate.query();\r\n\r\n//Go through all customer updates in the query \r\nwhile (grCustomerUpdate.next()) {\r\n\r\n    //Notify about found customer updates\r\n    //You can inform about detection in different ways, create event, send e-mail (based on your needs)\r\n    gs.warn('[Scheduled Script Execution] - detected changes made in Default update set in: ' + grCustomerUpdate.name);\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Daily detection of customer updates made in 'Default' update set",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Daily%20detection%20of%20customer%20updates%20made%20in%20'Default'%20update%20set",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Daily%20detection%20of%20customer%20updates%20made%20in%20'Default'%20update%20set/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.952Z",
    "updatedAt": "2025-09-21T08:58:58.588Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 310,
    "type": "scheduled_job",
    "name": "Create send reminders weekly",
    "description": "Consider the scenario of sending remainder approvals weekly. Create an event that is triggered from the scheduled job. Here is the code on the scheduled job that runs daily but sends notification after every week(7 days) based on the due date.",
    "script": "var app = new GlideRecord(\"sysapproval_approver\");\r\napp.addEncodedQuery('sysapproval.numberSTARTSWITHINC^state=requested'); // Please rename the \"INC\" with based on the number maintenance of the table that you are looking at.\r\napp.query();\r\nwhile(app.next())\r\n {\r\nvar createdte = new GlideDateTime(current.created_on);\r\nvar now = new GlideDateTime();\r\nvar dur = new GlideDuration();\r\ndur = GlideDateTime.subtract(createdte,now);\r\nvar days = dur.getDayPart();\r\nif(days%7==0) //check if it's been a week since the created date for each record.\r\n{\r\n gs.eventQueue('<eventname>',approval,app.approver,app.sysapproval);\r\n//event needs to created in the event Registry first and then the event name to be provided as the first parameter in the above eventQueue function.\r\n// Now you configure a Notificatin that triggers based on this event and that does the Job!!!!\r\n}\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "runFrequency": "Daily",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Create send reminders weekly",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Create%20send%20reminders%20weekly",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Create%20send%20reminders%20weekly/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.949Z",
    "updatedAt": "2025-09-21T08:58:58.584Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 309,
    "type": "scheduled_job",
    "name": "Create Scheduled Imports Graphviz file",
    "description": "Graphviz graph of Scheduled Import parent/child relations Create a Graphviz DOT graph of Scheduled Import with parent/child relations Not an actual Scheduled Job but rather to be run as a Background Script or in Xplore.",
    "script": "// Create Scheduled Imports Graphviz file\r\n\r\nfunction get_dotItem(id, name, style) {\r\n    var return_string = '';\r\n    return_string += '\"' + id + '\"';\r\n    return_string += ' [label=\"' + name + '\"';\r\n    if (style) {\r\n        return_string += ' style=\"' + style + '\"';\r\n    }\r\n    return_string += ']';\r\n    return return_string;\r\n}\r\n\r\nfunction print_dotFile(itemsandrelations) {\r\n    var standard_options =\r\n        ' \\\r\n        graph [ \\\r\n        # rankdir = \"LR\" \\\r\n        ]; \\\r\n        node [ \\\r\n         fontsize = \"10\" \\\r\n         shape = \"box\" \\\r\n         fixedsize = false \\\r\n         width=1.8 \\\r\n        ];';\r\n\r\n    return 'digraph g {' + standard_options + '\\n' + itemsandrelations + '}';\r\n}\r\n\r\nfunction get_dotRelation(parent_id, child_id) {\r\n    return '\"' + child_id + '\"->\"' + parent_id + '\"';\r\n}\r\n\r\nvar grSIS = new GlideRecord('scheduled_import_set');\r\n//grSIS.addEncodedQuery(\"active=true\");\r\n//grSIS.addEncodedQuery(\"nameLIKEcmdb\");\r\ngrSIS.orderBy('run_time');\r\ngrSIS.setLimit(100);\r\ngrSIS.query();\r\nvar dotfile_content = '';\r\nwhile (grSIS.next()) {\r\n    if (grSIS.getValue('active') == true) {\r\n        dotfile_content += get_dotItem(grSIS.getValue('sys_id'), grSIS.getValue('name')) + \"\\n\";\r\n    } else {\r\n        dotfile_content += get_dotItem(grSIS.getValue('sys_id'), grSIS.getValue('name'), \"dotted\") + \"\\n\";\r\n    }\r\n    if (grSIS.getValue('parent')) {\r\n        dotfile_content += get_dotRelation(grSIS.getValue('sys_id'), grSIS.getValue('parent')) + \"\\n\";\r\n    }\r\n}\r\n\r\ngs.info('Graphviz File:\\n' + print_dotFile(dotfile_content));",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Create Scheduled Imports Graphviz file",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Create%20Scheduled%20Imports%20Graphviz%20file",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Create%20Scheduled%20Imports%20Graphviz%20file/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.945Z",
    "updatedAt": "2025-09-21T08:58:58.580Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 308,
    "type": "scheduled_job",
    "name": "Condition script to trigger the scheduled job on Quarterly basis",
    "description": "The script in code-snippets/Scheduled Jobs/Condition script to trigger the scheduled job on Quarterly basis/Condition script to trigger the scheduled job on Quarterly basis.js can be used in the condition script of scheduled job so that the scheudled job will trigger only quarterly. The script will make the answer true only on March, June, September, December months. All other months the script...",
    "script": "var d = new Date();// getting today's date\r\nvar month = d.getMonth();// getting the month\r\nvar a = month.toString();\r\nif(a== '2'|| a=='5' || a=='8' || a=='11'){//condition will be true only when month is March, June, September, December\r\nanswer = true;\r\n}\r\nelse{\r\nanswer = false;\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "runFrequency": "Quarterly",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Condition script to trigger the scheduled job on Quarterly basis",
        "scriptFiles": [
          "Condition script to trigger the scheduled job on Quarterly basis.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Condition%20script%20to%20trigger%20the%20scheduled%20job%20on%20Quarterly%20basis",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Condition%20script%20to%20trigger%20the%20scheduled%20job%20on%20Quarterly%20basis/Condition%20script%20to%20trigger%20the%20scheduled%20job%20on%20Quarterly%20basis.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.941Z",
    "updatedAt": "2025-09-21T08:58:58.576Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 307,
    "type": "scheduled_job",
    "name": "Calculate Ticket's Aging",
    "description": "This script helps is calculating the aging of the ticket/cases and define them in bucket of category aging like '0-2 Days','3-4 Days' Based on this you can get the reporting on cases aging. How old is the case. It calculates the aging from the creation date. It works on all cases except the cases which are on resolved,cancelled and closed state.",
    "script": "var elapsedTime = 0;\r\n    var aging = '';\r\n    var actualDateTime = new GlideDateTime();\r\n   \r\n    var rec = new GlideRecord('cases');\r\n    rec.addEncodedQuery('stateNOT IN6,3,7');\r\n    rec.query();\r\n    while (rec.next()) {\r\n    var openedDate = new GlideDateTime(rec.opened_at.getDisplayValue());\r\n    var dur = GlideDateTime.subtract(openedDate,actualDateTime );\r\n    elapsedTime =  dur.getNumericValue()/86400000 ;\r\n    if (elapsedTime <= 2) aging = '0-2 Days';\r\n    if (elapsedTime > 2) aging = '3-4 Days';\r\n    if (elapsedTime > 4) aging = '5-7 Days';\r\n    if (elapsedTime > 7) aging = '8-15 Days';\r\n    if (elapsedTime > 15) aging = '16-30 Days';\r\n    if (elapsedTime > 30) aging = '31-60 Days';\r\n    if (elapsedTime > 60) aging = '61-90 Days';\r\n    if (elapsedTime > 90) aging = 'Over 90 Days';\r\n \r\n    rec.setWorkflow(false); // Skip any Business Rules\r\n    rec.autoSysFields(false); // Do not update system fields\r\n    rec.aging_category = aging;\r\n    rec.update();\r\n    }",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Calculate Ticket's Aging",
        "scriptFiles": [
          "Calculate Ticket's Aging.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Calculate%20Ticket's%20Aging",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Calculate%20Ticket's%20Aging/Calculate%20Ticket's%20Aging.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.937Z",
    "updatedAt": "2025-09-21T08:58:58.573Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 306,
    "type": "scheduled_job",
    "name": "Auto close changes requests updated 30 days prior",
    "description": "This script can be used to auto close records if they have not been updated from past 30 days. For eg. I have taken change requests. This script can be written in a schedule job to run it daily at 23:59:59 time to check if there is any such records present act accordingly.",
    "script": "// Sript to auto close change requests if thre is no update from past 30 days.\r\n\r\nvar chg = new GlideRecord('change_request');\r\nchg.addActiveQuery(); // to fetch active change requests\r\nchg.addEncodedQuery('sys_updated_on<=javascript:gs.beginningOfLast30Days()'); // to get change requests upadated 30 days before\r\nchg.query();\r\nwhile(chg.next())\r\n\t{\r\n\t\tchg.comments = 'Auto closing changing requests as there is no update from past 30 days';\r\n\t\tchg.state = 3;\r\n\t\tchg.setWorkflow(false); // to prevent from any BR to run.\r\n\t\tchg.autoSysFields(false); // to prevent system fields to get upadated. (optional)\r\n\t\tchg.update();\r\n\t}",
    "metadata": {
      "application": "Global",
      "active": true,
      "runFrequency": "Daily",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Auto close changes requests updated 30 days prior",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Auto%20close%20changes%20requests%20updated%2030%20days%20prior",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Scheduled%20Jobs/Auto%20close%20changes%20requests%20updated%2030%20days%20prior/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.932Z",
    "updatedAt": "2025-09-21T08:58:58.569Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 305,
    "type": "scheduled_job",
    "name": "Approval Reminder",
    "description": "Use the code snippets to trigger approval reminder notifications. 1 Change Approval Reminder. changereminderscheduledjob.js",
    "script": "// File: change_reminder_scheduled_job.js\nvar dateTime = new GlideDateTime();\r\n var currentDate = dateTime.getLocalDate();\r\n var grCR = new GlideRecord('change_request');\r\n grCR.addEncodedQuery(\"source_table=change_request\"); //Add your own query.\r\n grCR.orderByDesc('number');\r\n grCR.query();\r\n while (grCR.next()) {\r\n     var grSA = new GlideRecord('sysapproval_approver');\r\n     grSA.addEncodedQuery(\"state=requested^sysapproval=\" + grCR.sys_id); //Add your own query.\r\n     grSA.query(); \r\n     while (grSA.next()) {\r\n         var dateCreated = new GlideDateTime(grSA.sys_created_on);\r\n         var dateCreatedLocal = dateCreated.getLocalDate();\r\n         var daysDifferenceMo = gs.dateDiff(dateCreatedLocal, currentDate, true);\r\n         if (daysDifferenceMo > 86400) //It will trigger a reminder after one day currently configure as required.\r\n             gs.eventQueue('event.name', grSA); //Add your own event name to trigger the notification.\r\n     }\r\n }\n\n// File: requested_item_approval_reminder_approver.js\nvar dateTime = new GlideDateTime();\r\nvar currentDate = dateTime.getLocalDate();\r\nvar grSA = new GlideRecord('sysapproval_approver');\r\ngrSA.addEncodedQuery(\"state=requested^source_table=sc_req_item\"); //Add your own query here alongside with the date conditions.\r\ngrSA.query();\r\nwhile (grSA.next()) {        \r\n             gs.eventQueue('event.name', grSA); //Add your own event name to trigger the notification.\r\n}\n\n// File: requested_item_approval_reminder_requestor.js\nvar dateTime = new GlideDateTime();\r\nvar currentDate = dateTime.getLocalDate();\r\nvar grSA = new GlideAggregate('sysapproval_approver');\r\ngrSA.addEncodedQuery(\"state=requested^source_table=sc_req_item\"); //Add your own query here alongside with the date conditions.\r\ngrSA.addAggregate('count','sysapproval');\r\ngrSA.query();\r\nwhile (grSA.next()) {  \r\n\t         var current = grSA.sysapproval.getRefRecord(); \r\n           gs.eventQueue('event.name',current,current.requested_for); //Add your own event name to trigger the notification.\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Scheduled Jobs/Approval Reminder",
        "scriptFiles": [
          "change_reminder_scheduled_job.js",
          "requested_item_approval_reminder_approver.js",
          "requested_item_approval_reminder_requestor.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Scheduled%20Jobs/Approval%20Reminder"
      }
    },
    "createdAt": "2025-09-20T08:42:18.929Z",
    "updatedAt": "2025-09-21T08:58:58.565Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 304,
    "type": "script_include",
    "name": "VariableToDescription",
    "description": "This script include can be used to get all of the variables from a RITM as text. It is client callable, so it can be used from any client script as well as Server Side script like a business rule.",
    "script": "var VariablesToDescription = Class.create();\r\nVariablesToDescription.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n\t//For GlideAjax\r\n    getDescriptionClient: function() {\r\n        var ritm = this.getParameter('sysparm_ritm');\r\n\t\tvar descStr = this.getDescription(ritm);\r\n\t\treturn descStr;\r\n    },\r\n\t\r\n\t//For ServerSide Access\r\n\tgetDescription: function(ritm) {\r\n        var descStr = '';\r\n        var ritmGr = new GlideRecord(\"sc_req_item\");\r\n        if (ritmGr.get(ritm)) { //sys_id of RITM record\r\n            descStr = ritmGr.getDisplayValue() + ': ' + ritmGr.cat_item.getDisplayValue() + '\\n';\r\n            descStr += this.getVariablesAsText(ritm);\r\n        }\r\n        return descStr;\r\n    },\r\n\r\n    getVariablesAsText: function(ritm) {\r\n        var descStr = '';\r\n        var ritmGr = new GlideRecord(\"sc_req_item\");\r\n        if (ritmGr.get(ritm)) { //sys_id of RITM record\r\n            var varDataGr = new GlideRecord('sc_item_option_mtom');\r\n            varDataGr.addQuery('request_item', ritmGr.getUniqueValue());\r\n            varDataGr.orderBy('sc_item_option.order');\r\n            varDataGr.query();\r\n\r\n            var question_text = '';\r\n            var answer_text = '';\r\n            while (ritmGr._next()) {\r\n                question_text = varDataGr.sc_item_option.item_option_new.getDisplayValue();\r\n                answer_text = ritmGr.variables[varDataGr.sc_item_option.item_option_new.name].getDisplayValue();\r\n                if (!gs.nil(answer_text)) {\r\n                    descStr += question_text + ': ' + answer_text + '\\n';\r\n                } else {\r\n                    descStr += question_text + ': \\n';\r\n                }\r\n            }\r\n        }\r\n        return descStr;\r\n    },\r\n\r\n    type: 'VariablesToDescription'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/VariableToDescription",
        "scriptFiles": [
          "VariableToDescription.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/VariableToDescription",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/VariableToDescription/VariableToDescription.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.923Z",
    "updatedAt": "2025-09-21T08:58:58.561Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 303,
    "type": "script_include",
    "name": "VariableHelper",
    "description": "Variable Helper Working with variables in ServiceNow is no fun sometimes, especially https://docs.servicenow.com/bundle/paris-application-development/page/script/server-scripting/concept/cScriptableServiceCatalogVariables.htmld2332110e207.  For that reason I created a helper Script Include to make my life easier. There are 4 parameters that can be passed as an object when instantiating the Scri...",
    "script": "var variableHelper = Class.create();\r\nvariableHelper.prototype = {\r\n    initialize: function(options) {\r\n\r\n        this.useDisplayValue = options.useDisplayValue || false;\r\n        this.expandRef = options.expandRef || false;\r\n        this.useLabel = options.useLabel || false;\r\n\t\tthis.debug = options.debug || false;\r\n\t\t\r\n\r\n    },\r\n\r\n    _print: function(msg) {\r\n        if (!this.debug) {\r\n            return;\r\n        }\r\n\r\n        gs.info(\"Variable Helper: \" + msg);\r\n    },\r\n\r\n    /**\r\n     * Description: Parse Multi Row Varible set and return array of objects\r\n     * Parameters: mrvs - multi row variable set variable\r\n     * Returns: array\r\n     */\r\n    getMRVS: function(mrvs) {\r\n        var dataToReturn = [];\r\n        this._print('IN GetMRVS');\r\n        this._print(mrvs);\r\n        if (typeof mrvs === 'undefined') {\r\n            return dataToReturn;\r\n        }\r\n\r\n        this._print('got past blank check');\r\n\r\n        var cellObj = {};\r\n\r\n        if (this.expandRef) {\r\n            var questionObj = this._getQuestions(mrvs.getQuestionIds().join(',')) || {};\r\n            this._print(JSON.stringify(questionObj, null, \"\\t\"));\r\n\r\n        }\r\n\r\n        var rows = mrvs.getRows();\r\n        this._print('Row Lengh-' + rows.length);\r\n        for (var j = 0; j < rows.length; j++) {\r\n            this._print('Row -' + j);\r\n            var row = rows[j];\r\n            var cells = row.getCells();\r\n            for (var k = 0; k < cells.length; k++) {\r\n                var cell = cells[k];\r\n                var varName = cell.getName();\r\n\t\t\t\tvar objKey = this.useLabel ? cell.getLabel() : varName;\r\n                this._print('MRVS -' + varName);\r\n                if (this.expandRef && questionObj[varName].table && questionObj[varName].table != '') {\r\n                    if ([\"21\"].indexOf(questionObj[varName].type_id) >= 0) {\r\n                        cellObj[objKey] = this.getMultipleRef(questionObj[varName].table, cell.getCellValue().split(','));\r\n                    } else {\r\n                        cellObj[objKey] = this.getRef(questionObj[varName].table, cell.getCellValue());\r\n                    }\r\n\r\n                } else {\r\n                    cellObj[objKey] = this.useDisplayValue ? cell.getCellDisplayValue() : cell.getCellValue();\r\n                }\r\n\r\n            }\r\n            dataToReturn.push(cellObj);\r\n            cellObj = {};\r\n        }\r\n        return dataToReturn;\r\n    },\r\n    /**\r\n     * Description: Returns Object of questions with thir type and reference table.  Used for MRVS when the expandRef function is true\r\n     * Parameters: questionArr - array of sys_id\r\n     * Returns: Object\r\n     */\r\n    _getQuestions: function(questionArr) {\r\n\r\n        var q = {};\r\n        var grQuestion = new GlideRecordSecure('question');\r\n        grQuestion.addQuery('sys_id', 'IN', questionArr);\r\n        grQuestion.query();\r\n        while (grQuestion.next()) {\r\n            q[grQuestion.getValue('name')] = {\r\n                \"type\": grQuestion.getDisplayValue('type'),\r\n                \"type_id\": grQuestion.getValue('type'),\r\n                \"table\": grQuestion.getValue('reference') || grQuestion.getValue('lookup_table') || grQuestion.getValue('list_table') || grQuestion.getValue('choice_table')\r\n            };\r\n        }\r\n        return q;\r\n\r\n    },\r\n    getMultipleRef: function(tbl, arr) {\r\n        var arrToReturn = [];\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arrToReturn.push(this.getRef(tbl, arr[i]));\r\n        }\r\n        return arrToReturn;\r\n    },\r\n    /**\r\n * Description: Return object containing all fields and values of reference field\r\n * Parameters: \r\n\t tbl - table name\r\n\t id - sys_id from reference field\r\n * Returns: array\r\n*/\r\n    getRef: function(tbl, id) {\r\n        this._print('Table: ' + tbl + \"\\nsys_id: \" + id);\r\n        if (!tbl || tbl == '' || !id || id == '') {\r\n            return false;\r\n        }\r\n\r\n\r\n        var objToReturn = {};\r\n        var grObj = new GlideRecordSecure(tbl);\r\n        if (!grObj.get(id)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        var fields = grObj.getFields();\r\n        objToReturn['sys_id'] = grObj.getValue('sys_id');\r\n        for (var f = 0; f < fields.size(); f++) {\r\n            var field = fields.get(f);\r\n            if (field.hasValue()) {\r\n                objToReturn[this.useLabel ? field.getLabel() :  field.getName()] = this.useDisplayValue ? field.getDisplayValue() : field.getValue();\r\n            }\r\n        }\r\n\r\n        return objToReturn;\r\n    },\r\n\r\n    /**\r\n     * Description: Return object containing all variables for a given record.  The object will possibly be nested if expandRef is true\r\n     * Parameters: rec - GlideRecord\r\n     * Returns: Object\r\n     */\r\n    getVariables: function(rec) {\r\n        rec = rec || current;\r\n        if (!rec || rec == '') {\r\n            return;\r\n        }\r\n        var variablesToReturn = {};\r\n        if (!rec.isValidRecord()) {\r\n            return variablesToReturn;\r\n        }\r\n\r\n        //var variables = rec.variables;\r\n\t\tvar variables = rec.variables.getElements(true);\r\n        var refTable,objKey,question;\r\n\t\t\r\n        //for (var v in variables) {\r\n\t\tfor (var v = 0; v < variables.length;v++) {\r\n\t\t\tquestion = variables[v].getQuestion();\r\n\t\t\tobjKey = this.useLabel ? question.getLabel() : v;\r\n            if (variables[v].isMultiRow()) {\r\n                this._print(variables[v] + ' MRVS');\r\n                variablesToReturn[this.useLabel ? variables[v].getLabel() : v] = this.getMRVS(variables[v]);\r\n            } else {\r\n                \r\n                this._print(variables[v] + ' - ' + question.getLabel());\r\n\t\t\t\t\r\n                if (this.expandRef) {\r\n\r\n                    if (question.type == '21') {\r\n                        variablesToReturn[objKey] = this.getMultipleRef(question.lookupTable || question.listTable, question.getValue().split(','));\r\n                    } else {\r\n                        variablesToReturn[objKey] = this.getRef(question.reference || question.choice_table || question.choiceTable, question.getValue());\r\n                    }\r\n\r\n                } else {\r\n                    variablesToReturn[objKey] = this.useDisplayValue ? question.getDisplayValue() : question.getValue();\r\n                }\r\n            }\r\n        }\r\n\r\n        return variablesToReturn;\r\n    },\r\n\r\n    /**\r\n * Description: get Record from sys_id.\r\n * Parameters: \r\n\t sysid = sys_id of record to retrieve\r\n\t tbl = table to retrieve record from.  Defaults to task\r\n * Returns: Object\r\n*/\r\n    getRecord: function(sysid, tbl) {\r\n        if (!sysid || sysid == '') {\r\n            return;\r\n        }\r\n        tbl = tbl || 'task';\r\n        var grRec = new GlideRecordSecure(tbl);\r\n        if (!grRec.get(sysid)) {\r\n            return;\r\n        }\r\n\t\t\r\n\t\tvar recClassName = grRec.getRecordClassName() + '';\r\n        if (recClassName != tbl) {\r\n            return this.getRecord(sysid, recClassName);\r\n        }\r\n\r\n        return grRec;\r\n\r\n    },\r\n\r\n    //Setters\r\n    setUseDisplayValue: function(val) {\r\n        if (typeof val === 'undefined') {\r\n            return;\r\n        }\r\n        this.useDisplayValue = val;\r\n    },\r\n\r\n    setExpandRef: function(val) {\r\n        if (typeof val === 'undefined') {\r\n            return;\r\n        }\r\n        this.expandRef = val;\r\n    },\r\n\r\n    setDebug: function(val) {\r\n        if (typeof val === 'undefined') {\r\n            return;\r\n        }\r\n        this.debug = val;\r\n    },\r\n    setUseLabel: function(val) {\r\n        if (typeof val === 'undefined') {\r\n            return;\r\n        }\r\n        this.useLabel = val;\r\n    },\r\n\r\n\r\n\r\n    type: 'variableHelper'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/VariableHelper",
        "scriptFiles": [
          "variableHelper.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/VariableHelper",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/VariableHelper/variableHelper.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.919Z",
    "updatedAt": "2025-09-21T08:58:58.557Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 302,
    "type": "script_include",
    "name": "Validate Data Before Insert",
    "description": "<h1DataValidationUtils - Script Include</h1 <p<strongDataValidationUtils</strong is a reusable Script Include for ServiceNow that provides a set of utility methods to perform validation checks on <codeGlideRecord</code objects. This Script Include helps enforce data integrity before records are inserted or updated in ServiceNow tables by validating fields like <codeshortdescription</code and <c...",
    "script": "var DataValidationUtils = Class.create();\r\nDataValidationUtils.prototype = {\r\n    initialize: function() {},\r\n\r\n    validateIncidentData: function(incidentRecord) {\r\n        var errors = [];\r\n\r\n        // Validate short description if the field exists\r\n        if (incidentRecord.isValidField('short_description')) {\r\n            if (gs.nil(incidentRecord.short_description)) {\r\n                errors.push('Short description is required.');\r\n            }\r\n        } else {\r\n            errors.push('Field \"short_description\" does not exist on the record.');\r\n        }\r\n\r\n        // Validate priority if the field exists\r\n        if (incidentRecord.isValidField('priority')) {\r\n            if (gs.nil(incidentRecord.priority) || incidentRecord.priority < 1 || incidentRecord.priority > 5) {\r\n                errors.push('Priority must be between 1 and 5.');\r\n            }\r\n        } else {\r\n            errors.push('Field \"priority\" does not exist on the record.');\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    type: 'DataValidationUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Validate Data Before Insert",
        "scriptFiles": [
          "DataValidationUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Validate%20Data%20Before%20Insert",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Validate%20Data%20Before%20Insert/DataValidationUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.912Z",
    "updatedAt": "2025-09-21T08:58:58.554Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 301,
    "type": "script_include",
    "name": "UserUtil",
    "description": "UserUtil A collection of scripts related to some esoteric user functions. userMemberOf();",
    "script": "var userUtil = Class.create();\r\nuserUtil.prototype = {\r\n  initialize: function () { },\r\n\r\n  //main use of this was to filter a list of assets assigned to the members of a specific group.\r\n\r\n  //On a list, in the condition builder, choose the user field you'd like to filter based on the assignee's group membership.\r\n\r\n  //Ex: javascript: new userUtil().userMemberOf(\"Service Desk\") in the assigned_to field\r\n\r\n  userMemberOf: function (group_name) {\r\n    var members = new GlideRecord(\"sys_user_grmember\");\r\n    members.addQuery(\"group.name\", group_name);\r\n    members.query();\r\n    var member_list = [];\r\n    while (members.next()) {\r\n      member_list.push(members.user.sys_id.toString());\r\n    }\r\n    return member_list;\r\n  },\r\n\r\n  isManager: function (userID) {\r\n    //checks if the user has direct reports. Useful in workflow or if you don't have a group to check against or need\r\n    //typically pass in logged-in user's sys_id\r\n    //var userObj = gs.getUserID();\r\n\r\n    var managerLookup = new GlideRecord(\"sys_user\");\r\n    managerLookup.addActiveQuery();\r\n    managerLookup.addQuery(\"manager\", userObj);\r\n    managerLookup.query();\r\n\r\n    if (managerLookup.next()) {\r\n      //gs.info(\"True - user has direct reports\");\r\n      return true;\r\n    } else {\r\n      //gs.info(\"False - user not have direct reports\");\r\n      return false;\r\n    }\r\n  },\r\n\r\n  //list assets belonging to the user. Can be used to retrieve a user's current assets in a workflow for fulfilment activity\r\n  getUserAssets: function (user) {\r\n    var assets = new GlideRecord(\"alm_hardware\");\r\n    assets.addQuery(\"install_status\", 1);\r\n    assets.addQuery(\"assigned_to\", user);\r\n    assets.query();\r\n\r\n    var list = [];\r\n    while (assets.next()) {\r\n      list.push(assets.sys_id.toString());\r\n    }\r\n\r\n    return list;\r\n  },\r\n\r\n  getCompanyUsers: function (companyId, roleName) {\r\n\r\n    var userGR = new GlideRecord('sys_user');\r\n    userGR.addQuery('company', companyId);\r\n    userGR.addQuery('roles', 'snc_external');\r\n    userGR.addQuery('roles', roleName);\r\n    userGR.query();\r\n    var users = [];\r\n    while (userGR.next()) {\r\n      var user = {};\r\n      user.email = userGR.email.toString();\r\n      user.firstName = userGR.first_name.toString();\r\n      user.lastName = userGR.last_name.toString();\r\n      user.roleName = roleName;\r\n      users.push(user);\r\n    }\r\n\r\n    return users;\r\n  },\r\n\r\n  emailValidation: function () {\r\n    //sysparam_catalog_req_email\r\n    var catalogReqEmail = this.getParameter('sysparam_email');\r\n    var userGR = new GlideRecord('sys_user');\r\n    userGR.addQuery('email', catalogReqEmail);\r\n    userGR.queryNoDomain();\r\n\r\n    var user = {};\r\n\r\n    if (userGR.next()) {\r\n      user.email = userGR.email.toString();\r\n      user.firstName = userGR.first_name.toString();\r\n      user.lastName = userGR.last_name.toString();\r\n    }\r\n\r\n    gs.log(\"Users - \" + JSON.stringify(user));\r\n    return JSON.stringify(user);\r\n  },\r\n\r\n  type: \"userUtil\",\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/UserUtil",
        "scriptFiles": [
          "UserUtil.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/UserUtil",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/UserUtil/UserUtil.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.907Z",
    "updatedAt": "2025-09-21T08:58:58.550Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 300,
    "type": "script_include",
    "name": "UserCriteriaUtil",
    "description": "UserCriteriaUtil This Script Include helps to evaluate if a certain UserCriteria did match with a User. It doesn't use the typical Class.create, instead it is a simple javascript function.",
    "script": "var UserCriteriaUtil = function(userSysId) {\r\n\t\r\n\t//returns all user criteria sys ids which evaluated to true for the current user\r\n\tvar _list = function() {\r\n\t\tif (!userSysId) userSysId = gs.getUserID();\r\n\t\treturn new sn_uc.UserCriteriaLoader.getAllUserCriteria(userSysId);\r\n\t};\r\n\t\r\n\t//checks if a specific user criteria evaluated to true for the current user\r\n\tvar match = function(userCriteriaSysIds) {\r\n\t\tvar listResult = _list();\r\n\t\tvar userCritList = userCriteriaSysIds.split(\",\");\r\n\t\tfor (var i = 0; i < userCritList.length; i++) {\r\n\t\t\tif (listResult.indexOf(userCritList[i]) >= 0) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\t\r\n\t//return public functions\r\n\treturn { match: match };\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/UserCriteriaUtil",
        "scriptFiles": [
          "UserCriteriaUtil.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/UserCriteriaUtil",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/UserCriteriaUtil/UserCriteriaUtil.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.903Z",
    "updatedAt": "2025-09-21T08:58:58.547Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 299,
    "type": "script_include",
    "name": "UnloadXml",
    "description": "Unload XML With this script include you can export a GlideRecord Query to XML which can be imported via the \"Import XML\" functionality.",
    "script": "var UnloadXml = function(table, encQuery) {\r\n\tvar xmlStr = '<unload>';\r\n\tvar grTable = new GlideRecord(table);\r\n\tgrTable.addEncodedQuery(encQuery);\r\n\tgrTable.query();\r\n\twhile (grTable.next()) {\r\n\t\tvar xml = new GlideRecordXMLSerializer();\r\n\t\tvar result = xml.serialize(grTable);\r\n\t\tresult = result.replace('<?xml version=\"1.0\" encoding=\"UTF-8\"?>', '');\r\n\t\txmlStr += result.replace('<' + table + '>', '<' + table + ' action=\"INSERT_OR_UPDATE\">') + '\\n';\r\n\t}\r\n\txmlStr += '</unload>';\r\n\treturn xmlStr;\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/UnloadXml",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/UnloadXml",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/UnloadXml/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.900Z",
    "updatedAt": "2025-09-21T08:58:58.544Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 298,
    "type": "script_include",
    "name": "Translations Import",
    "description": "Translations import runImportNow is designed to load language files for the specified application scope name.",
    "script": "function runImportNow(scopeName) {\r\n  if (gs.tableExists(\"sys_language\")) {\r\n    var gr = new GlideRecord(\"sys_language\");\r\n    gr.addActiveQuery();\r\n    gr.query();\r\n\r\n    while (gr.next()) {\r\n      var lName = gr.name.toLowerCase();\r\n\r\n      if (lName !== \"english\") {\r\n        if (lName.contains(\" - \")) lName = lName.replace(\" - \", /-/g);\r\n        else if (lName.contains(\" \")) lName = lName.replaceAll(\" \", \"_\");\r\n\r\n        var tl = new global.TranslationLoader();\r\n        tl.languageAbbreviation = tl.getLanguageAbbreviation0(\"com.snc.i18n.\" + lName);\r\n\r\n        tl.loadTranslationsFromAppPlugin(scopeName);\r\n        gs.info(\"Completed loading application language files for: \" + scopeName + \" \" + lName);\r\n      }\r\n    }\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Translations Import",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Translations%20Import",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Translations%20Import/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.896Z",
    "updatedAt": "2025-09-21T08:58:58.540Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 297,
    "type": "script_include",
    "name": "TinyURLHelper",
    "description": "This utility Helps to make a tiny url in code. For example, lets say you are creating a custom link to a long list of sysidINa,b,c,etc and want the link to make the link look like this: https://<instance.service-now.com/sometablelist.do?sysparmtiny=3a2bbf87dbdc8890e670d48a489619bf",
    "script": "/**\r\n * Help to make a tiny url in code. For example, lets say you are creating a custom link\r\n * to a long list of sys_idINa,b,c,etc and want the link to make the link look like this:\r\n * https://<instance>.service-now.com/some_table_list.do?sysparm_tiny=3a2bbf87dbdc8890e670d48a489619bf\r\n * Use this script include to do that, like this:\r\n * var myTable = 'some_table_list';\r\n * var myLongQueryStr = 'sysparm_query=sys_idIN' + encodeURIComponent('pretend,long,list,of,sys_id');\r\n * var myCustomUrl = new TinyUrlHelper().getSert(table=myTable, queryStr=myLongQueryStr);\r\n *\r\n * NOTES:\r\n *    * if gs.getProperty('glide.use_tiny_urls') is false, then returns long url\r\n *    * The long url lenghth must be >= to gs.getProperty('glide.tiny_url_min_length', '1024')\r\n *        else, longUrl is returned\r\n */\r\nvar TinyUrlHelper = Class.create();\r\nTinyUrlHelper.prototype = {\r\n\tinitialize: function() {\r\n\t\tthis.tinyEnabled = (gs.getProperty('glide.use_tiny_urls', 'false') == 'true');\r\n\t\tthis.minLength = Number(gs.getProperty('glide.tiny_url_min_length', '1024'));\r\n\t\tthis.instanceName = gs.getProperty('instance_name');\r\n\t},\r\n\r\n\t/*\r\n\t * Return the corresponding tiny url, if it already exists, else Insert a new tiny url and return it\r\n\t * NOTES:\r\n\t *    * if gs.getProperty('glide.use_tiny_urls') is false, then returns long url\r\n\t *    * The long url lenghth must be >= to gs.getProperty('glide.tiny_url_min_length', '1024')\r\n\t *        else, longUrl is returned\r\n\t *\r\n\t * @param {string} table, the table part of the query. If you mean list view, append _list\r\n\t * @param {string} queryStr, the query string part of the long url\r\n     * @return {string} the tinyUrl or the longUrl, depending, see NOTES above\r\n\t*/\r\n\tgetSert: function(table, queryStr) {\r\n\t\tvar tinyHash, longUrl, grSysTinyUrl, tinyUrl;\r\n\t\tgs.debug('TinyUrlHelper.getSert:: table=' + table + ', queryStr=' + queryStr);\r\n\t\tlongUrl = 'https://' + this.instanceName + '.service-now.com/' + table + '.do?' + queryStr;\r\n\t\tif (!this.tinyEnabled || longUrl.length < this.minLength) {\r\n\t\t\tgs.debug('TinyUrlHelper.getSert:: disabled or too short. longUrl=' + longUrl);\r\n\t\t\treturn longUrl;\r\n\t\t}\r\n\t\t\r\n\t\ttinyHash = this._hashCode(queryStr);\r\n\t\tgs.debug('TinyUrlHelper.getSert:: tinyHash = ' + tinyHash);\r\n\r\n\t\tgrSysTinyUrl = new GlideRecord('sys_tiny_url');\r\n\t\tgrSysTinyUrl.addQuery('data_hash', tinyHash);\r\n\t\tgrSysTinyUrl.query();\r\n\t\tif (grSysTinyUrl.next()) {\r\n\t\t\tgs.debug('TinyUrlHelper.getSert:: already');\r\n\t\t} else {\r\n\t\t\tgs.debug('TinyUrlHelper.getSert:: insert');\r\n\t\t\tgrSysTinyUrl.initialize();\r\n\t\t\tgrSysTinyUrl.setValue('data', queryStr);\r\n\t\t\tgrSysTinyUrl.setValue('data_hash', tinyHash);\r\n\t\t\tgrSysTinyUrl.setValue('tiny_url', gs.generateGUID());\r\n\t\t\tgrSysTinyUrl.insert();    \r\n\t\t}\r\n\t\ttinyUrl = 'https://' + this.instanceName + '.service-now.com/' + table + '.do?sysparm_tiny=' + grSysTinyUrl.getValue('tiny_url');\r\n\t\treturn tinyUrl;\r\n\t},\r\n\t\r\n\r\n\r\n\t_hashCode: function(s) {\r\n\t\tvar x = 0;\r\n\t\tvar l = s.length;\r\n\t\tvar i = 0;\r\n\t\tif ( l > 0 ) {\r\n\t\t\twhile (i < l) {\r\n\t\t\t\tx = (x << 5) - x + s.charCodeAt(i++) | 0;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\treturn x;\r\n\t},\r\n\r\n\ttype: 'TinyUrlHelper'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/TinyURLHelper",
        "scriptFiles": [
          "TinyUrlHelper.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/TinyURLHelper",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/TinyURLHelper/TinyUrlHelper.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.893Z",
    "updatedAt": "2025-09-21T08:58:58.537Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 296,
    "type": "script_include",
    "name": "TimeZoneUtils",
    "description": "TimeZoneUtils This Script Include is a tool for handling time-zones in ServiceNow. Specifically, this solves the problem of being unable to get a GlideDate/GlideDateTime object in a SPECIFIED time-zone, without having to get a user object for a user who's already in that specific time-zone. getGDT()",
    "script": "var TimeZoneUtils = Class.create();\r\nTimeZoneUtils.prototype = {\r\n\t\r\n\t/**\r\n\t * Upon initialization, you can pass in a GlideDateTime object you've already created and set to a specific time.\r\n\t * The reference to this object will be used, and your GDT will be modified in-place. Alternatively, you may choose\r\n\t * not to specify a parameter upon initialization, and a new GlideDateTime object will be created, used, and returned\r\n\t * with the current time in the specified time-zone.\r\n\t *\r\n\t * @param {GlideDateTime} [gdt] - A reference to the (optional) GlideDateTime object to be modified IN-PLACE.\r\n\t * If not specified, a new one will be generated, and a reference returned.\r\n\t */\r\n\tinitialize: function(gdt) {\r\n\t\tthis.gdt = (typeof gdt == 'undefined') ? (new GlideDateTime()) : gdt;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Get the GlideDateTime object (as a reference).\r\n\t * This will return a *reference* to the GlideDateTime object. Note that because of JavaScript's\r\n\t *  pass-by-reference jive, you should expect that if you set a variable using this method, then\r\n\t *  call another method which modifies the GDT object referenced in this class, you will be modifying\r\n\t *  the object to which your variable is a reference! In other words, your variable will be modified *in-place*.\r\n\t * @returns {*|GlideDateTime}\r\n\t */\r\n\tgetGDT: function() {\r\n\t\treturn this.gdt;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Get the number representing the current GDT object's offset from UTC, in hours.\r\n\t * If the GlideDateTime object is in the Pacific time zone for example, this method will return either\r\n\t * \"8\" or \"7\" (depending on DST).\r\n\t * @returns {number}\r\n\t */\r\n\tgetOffsetHours: function() {\r\n\t\treturn ((Number(this.gdt.getTZOffset() / 1000) / 60) / 60);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Note that you can specify time-zones in a number of formats, like \"US/Pacific\",\r\n\t * \"US\\\\Eastern\", or by short name (such as \"mountain\").\r\n\t *\r\n\t * Currently, this utility only understands a few time-zones by short name. You can print out a list of\r\n\t *  pre-defined these supported short-names by printing out the keys in the timeZones property.\r\n\t *  Example: gs.print(Object.keys(new TimeZoneUtils().timeZones));\r\n\t *\r\n\t * You can reference any time-zone using the following (case-sensitive) format:\r\n\t *  <Region>\\<Zone>\r\n\t *  Example: \"Pacific\\Guam\", or \"America\\Puerto_Rico\"\r\n\t *\r\n\t * @param {Packages.java.util.TimeZone|string} tz - The TimeZone object to use to set the time-zone of\r\n\t *  the current GlideDateTime object.\r\n\t * @returns {*|GlideDateTime}\r\n\t */\r\n\tsetTimeZone: function(tz) {\r\n\t\t\r\n\t\t/*\r\n\t\t\tFYI: http://twiki.org/cgi-bin/xtra/tzdatepick.html\r\n\t\t\tClick any of the locations there, and on the corresponding page, find the\r\n\t\t\t\"Timezone\" value.\r\n\t\t\tThese are the valid rows for the time-zone parameter.\r\n \t\t*/\r\n\t\t\r\n\t\t//ensure we've got a string and that it's lower-case.\r\n\t\ttz = (typeof tz === 'string') ? tz : tz.toString();\r\n\t\t//Validate the TZ string, and get a TimeZone Java object from it.\r\n\t\ttz = this._getTimeZoneFromString(tz);\r\n\t\t\r\n\t\tthis.gdt.setTZ(tz);\r\n\t\treturn this.gdt;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Gets the display value of the current GlideDateTime object.\r\n\t * If a time-zone was specified by calling .setTimeZone(), this will return the time in that time-zone.\r\n\t * If the GDT's time value was set prior to passing it into TimeZoneUtils, this will return that date/time\r\n\t * in the specified time-zone.\r\n\t * @returns {string} The current time, in the specified time-zone.\r\n\t */\r\n\tgetDisplayValue: function() {\r\n\t\treturn this.gdt.getDisplayValue();\r\n\t},\r\n\t\r\n\t/**\r\n\t * @returns {string} The current value, in SYSTEM time, of the GlideDateTime object.\r\n\t */\r\n\tgetValue: function() {\r\n\t\treturn this.gdt.getValue();\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t * @param {Packages.java.util.TimeZone|string} tz - The TimeZone object to use to set the time-zone of\r\n\t * @returns {*} The TimeZone object, OR false if an invalid time-zone was passed in.\r\n\t * @private\r\n\t */\r\n\t_getTimeZoneFromString: function(tz) {\r\n\t\t//If it's a valid time-zone coming in, bob's our uncle.\r\n\t\tif (this._isValidTimeZone(tz)) {\r\n\t\t\tif (this.timeZones.hasOwnProperty(tz.toLowerCase())) {\r\n\t\t\t\treturn this.timeZones[tz.toLowerCase()];\r\n\t\t\t} else {\r\n\t\t\t\treturn Packages.java.util.TimeZone.getTimeZone(tz);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Otherwise, check if it matches one of our timeZone object properties.\r\n\t\tvar shortTZ = this._getShortTimeZoneName(tz);\r\n\t\tif (this._isValidTimeZone(shortTZ)) {\r\n\t\t\treturn this.timeZones[shortTZ.toLowerCase()];\r\n\t\t}\r\n\t\t\r\n\t\t//If nothing else has returned by now, it means the time zone isn't valid.\r\n\t\tgs.warn('Invalid time zone specified. Time zone: ' + tz, 'TimeZoneUtils Script Include, _getTimeZoneFromString method');\r\n\t\treturn false;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Checks if the passed string is a valid time zone string.\r\n\t * @param {string} tz - The TimeZone string to use to set the time-zone of\r\n\t * @returns {boolean}\r\n\t * @private\r\n\t */\r\n\t_isValidTimeZone: function(tz) {\r\n\t\tvar tzObj = Packages.java.util.TimeZone.getTimeZone(tz);\r\n\t\t//If the tz string wasn't valid, then getID will return the string \"GMT\",\r\n\t\t//which - unless the user specified GMT as the time-zone, will not match the string argument.\r\n\t\t//However, if it does match, OR if the arg is found in the timeZones object, then we're good to go.\r\n\t\treturn ((String(tzObj.getID()) === tz) || this.timeZones.hasOwnProperty(tz.toLowerCase()));\r\n\t},\r\n\t\r\n\t/**\r\n\t * Try another way of getting the proper time-zone. This is used when to look for a time-zone based only on the short-name.\r\n\t * @param {string} tz - The time-zone name we're looking at, at a string.\r\n\t * @returns {string} The time-zone, or a valid version of it if it needs validation, in lower-case.\r\n\t * @private\r\n\t */\r\n\t_getShortTimeZoneName: function(tz) {\r\n\t\t//Check if the string contains a forward-slash, back-slash, or underscore.\r\n\t\tif (tz.indexOf('\\\\') >= 0 || tz.indexOf('/') >= 0 || tz.indexOf(' ') >= 0) {\r\n\t\t\t/*\r\n\t\t\t\tIf it contains a \"/\" or \"\\\", grab everything after that character.\r\n\t\t\t\tTrim the resulting (sub-)string.\r\n\t\t\t\tIf the remainder contains a space, replace it with an underscore.\r\n\t\t\t */\r\n\t\t\ttz = tz.slice(tz.indexOf('\\\\') + 1).slice(tz.indexOf('/') + 1).trim().replace(/ /g, '_');\r\n\t\t}\r\n\t\treturn tz.toLowerCase();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Just a reference to the setTimeZone method.\r\n\t * @param {Packages.java.util.TimeZone|string} tz - The TimeZone object to use to set the time-zone of the current GlideDateTime object.\r\n\t * @returns {*}\r\n\t */\r\n\tsetTZ: function(tz) {\r\n\t\treturn this.setTimeZone(tz);\r\n\t},\r\n\t\r\n\t/**\r\n\t * These are the pre-defined short-names for certain common time-zones.\r\n\t * Feel free to expand upon this object.\r\n\t \r\n\t * Currently, this utility only understands a few pre-defined time-zones by short name.\r\n\t * You can print out a list of these supported short-names by printing out the keys in the timeZones property.\r\n\t * Example: gs.print(Object.keys(new TimeZoneUtils().timeZones));\r\n\t * In a future update, this list will update itself with rows from the sys_choice table, here:\r\n\t * https://YOUR_INSTANCE.service-now.com/sys_choice_list.do?sysparm_query=nameINjavascript%3AgetTableExtensions('sys_user')%5Eelement%3Dtime_zone\r\n\t */\r\n\ttimeZones: {\r\n\t\talaska:      Packages.java.util.TimeZone.getTimeZone('US/Alaska'),\r\n\t\teastern:     Packages.java.util.TimeZone.getTimeZone('US/Eastern'),\r\n\t\tcentral:     Packages.java.util.TimeZone.getTimeZone('US/Central'),\r\n\t\tmountain:    Packages.java.util.TimeZone.getTimeZone('US/Mountain'),\r\n\t\thawaii:      Packages.java.util.TimeZone.getTimeZone('US/Hawaii'),\r\n\t\tpacific:     Packages.java.util.TimeZone.getTimeZone('US/Pacific'),\r\n\t\tarizona:     Packages.java.util.TimeZone.getTimeZone('US/Arizona'),\r\n\t\tguam:        Packages.java.util.TimeZone.getTimeZone('Pacific/Guam'),\r\n\t\tpuerto_rico: Packages.java.util.TimeZone.getTimeZone('America/Puerto_Rico'),\r\n\t\tindia:       Packages.java.util.TimeZone.getTimeZone('Asia/Kolkata'),\r\n\t\tutc: \t\t Packages.java.util.TimeZone.getTimeZone('UTC')\r\n\t},\r\n\t\r\n\ttype: 'TimeZoneUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/TimeZoneUtils",
        "scriptFiles": [
          "TimeZoneUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/TimeZoneUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/TimeZoneUtils/TimeZoneUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.889Z",
    "updatedAt": "2025-09-21T08:58:58.533Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 295,
    "type": "script_include",
    "name": "Testing Script Include Using Jasmine",
    "description": "Testing Script Include Using ATF and Jasmine Step 1. Create a new Script Include based on Sample Calculator Script.js",
    "script": "// File: Sample Calculator Script Include.js\nvar VF_Calculator = Class.create();\r\nVF_Calculator.prototype = {\r\n    initialize: function () {\r\n    },\r\n\r\n    add: function (num1, num2) {\r\n        this._validateNumbers(num1, num2);\r\n\r\n        return num1 + num2;\r\n    },\r\n\r\n    divide: function (num1, num2) {\r\n\r\n        if (num2 == 0) {\r\n            throw new Error(\"Divide by zero is not permitted.\");\r\n        }\r\n\r\n        this._validateNumbers(num1, num2);\r\n\r\n        return num1 / num2;\r\n    },\r\n\r\n    _validateNumbers: function (num1, num2) {\r\n        if (!num1 || !num2) {\r\n            throw new Error(\"Both numbers should be valid.\");\r\n        }\r\n    },\r\n\r\n    type: 'VF_Calculator'\r\n};\n\n// File: Sample Jasmine Script.js\n(function (outputs, steps, stepResult, assertEqual) {\r\n\r\n    describe(\"Test Sample Calculator\", function () {\r\n\r\n        it(\"Expect valid numbers returns a result\", function () {\r\n\r\n            var calc = new VF_Calculator();\r\n            var result = calc.divide(4, 2);\r\n\r\n            expect(result).toEqual(2);\r\n        });\r\n\r\n\r\n        // e.g. throw new Error(\"Both numbers should be valid.\");\r\n        it(\"Expect error if any of the number is null\", function () {\r\n\r\n            var calc = new VF_Calculator();\r\n\r\n            expect(function () {\r\n                calc.divide(1, null);\r\n            }).toThrowError(\"Both numbers should be valid.\");\r\n\r\n        });\r\n\r\n        it(\"Expect error if both of the number are null\", function () {\r\n\r\n            var calc = new VF_Calculator();\r\n\r\n            expect(function () {\r\n                calc.divide(null, null);\r\n            }).toThrowError(\"Both numbers should be valid.\");\r\n\r\n        });\r\n\r\n        it(\"Divide by zero should throw exception\", function () {\r\n\r\n            var calc = new VF_Calculator();\r\n\r\n            expect(function () {\r\n                calc.divide(5, 0);\r\n            }).toThrowError(\"Divide by zero is not permitted.\");\r\n\r\n        });\r\n\r\n    });\r\n\r\n})(outputs, steps, stepResult, assertEqual);\r\n// uncomment the next line to execute this script as a jasmine test\r\n\r\njasmine.getEnv().execute();",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Testing Script Include Using Jasmine",
        "scriptFiles": [
          "Sample Calculator Script Include.js",
          "Sample Jasmine Script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Testing%20Script%20Include%20Using%20Jasmine"
      }
    },
    "createdAt": "2025-09-20T08:42:18.885Z",
    "updatedAt": "2025-09-21T08:58:58.530Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 294,
    "type": "script_include",
    "name": "TableUtils Extension",
    "description": "EnhancedTableUtils Script Include extends out of the box TableUtils It has a getFieldsAndAttributes() method that does not require a GlideRecord. Out of the box getFields() methods from either GlideRecord() or GlideRecordUtil() only work with an existing record and not just with the table name. This one goes to sysdictionary directly and therefore does not need a valid GlideRecord to work. Usage",
    "script": "var Enhanced_TableUtils = Class.create();\r\n\r\nEnhanced_TableUtils.prototype = Object.extendsObject(TableUtils, {\r\n\r\n    initialize: function(tableName) {\r\n        TableUtils.prototype.initialize.call(this, tableName);        \r\n    },\r\n\r\n    /**SNDOC\r\n        @name getFieldsAndAttributes\r\n\r\n        @description Returns a data structure with field name and field properties for a given table.\r\n        OOB getFields() methods from either GlideRecord() or GlideRecordUtil()\r\n        only work with an existing record and not just with the table name. This one goes\r\n        to sys_dictionary directly and therefore does not need a valid GlideRecord to work.\r\n        The returned object has this structure:\r\n        {\r\n            <field_name_1>: {\r\n               field_label: <label>,\r\n               field_size: <size>,\r\n               field_type: <type>,\r\n               reference_table: <table> (only for reference or glide_list types)\r\n            },\r\n            <field_name_2>: {\r\n               ...\r\n            }\r\n        }\r\n\r\n        @example\r\n        var fields = new SPOC_TableUtils('incident').getFieldsAndAttributes();\r\n        for (var fieldName in fields) {\r\n            gs.print('Field ' + fieldName + ' is of type ' + fields[fieldName].field_type);\r\n        }\r\n\r\n        @returns {object} [fields]\r\n        */\r\n\r\n    getFieldsAndAttributes: function() {\r\n\r\n        var fields = {};\r\n\r\n        // Get all the table names in the hierarchy and turn it into an array\r\n        // getHierarchy() is a method from the parent class TableUtils\r\n\r\n        var tableHierarchy = this.getHierarchy(this.tableName);\r\n        \r\n        // Go find all the fields for all the tables of the hierarchy\r\n\r\n        var dicGr = new GlideRecord('sys_dictionary');\r\n\r\n        dicGr.addQuery('name', 'IN', j2js(tableHierarchy).join(','));       \r\n        dicGr.addEncodedQuery('internal_type!=collection^ORinternal_type=NULL');\r\n        dicGr.query();\r\n\r\n        while (dicGr.next()) {\r\n\r\n            var fieldName = dicGr.getValue('element');\r\n\r\n            fields[fieldName] = {};\r\n            fields[fieldName].field_label = dicGr.getValue('column_label');\r\n            fields[fieldName].field_size = dicGr.getValue('max_length');\r\n\r\n            fields[fieldName].field_type = dicGr.getValue('internal_type');\r\n            if (fields[fieldName].field_type === 'reference' || fields[fieldName].field_type === 'glide_list') {\r\n                fields[fieldName].reference_table = dicGr.getValue('reference');\r\n            }\r\n            \r\n        }\r\n\r\n        return fields;\r\n\r\n    },\r\n\r\n    type: 'Enhanced_TableUtils'\r\n\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/TableUtils Extension",
        "scriptFiles": [
          "Enhanced_TableUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/TableUtils%20Extension",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/TableUtils%20Extension/Enhanced_TableUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.881Z",
    "updatedAt": "2025-09-21T08:58:58.526Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 293,
    "type": "script_include",
    "name": "Table List Copy Context Options",
    "description": "Add \"Copy Field Name, Value, Display Value\" to context menu for list records Add context menu options allowing for admins to be able to right click a record's field in the list view and choose \"Copy Field Name\", \"Copy Field Value\", and \"Copy Field Display Value\" to quickly get the column variable name and values to their clipboard. Setting up",
    "script": "// File: Copy Field Display Value Context Menu.js\n//See readme for full setup\r\n/**\r\n  * Script executed on the Client for this menu action \r\n  *\r\n  * The following variables are available to the script:\r\n  *    'g_list' the GlideList2 that the script is running against (only valid for List context menus)\r\n  *    'g_fieldName' the name of the field that the context menu is running against (only valid for List context menus)\r\n  *    'g_sysId' the sys_id of the row or form that the script is running against\r\n  *    'rowSysId' is also set to the sys_id of the row to support legacy actions, but g_sysId is preferred\r\n  */\r\n runContextAction();\r\n\r\n function runContextAction() {\r\n     var ga = new GlideAjax('ListCopyOptions'); \r\n     ga.addParam('sysparm_name','getDisplayValue'); \r\n     ga.addParam('sysparm_sys_id', g_sysId); \r\n     ga.addParam('sysparm_table', g_list.getTableName());\r\n     ga.addParam('sysparm_field', g_fieldName);\r\n     ga.getXML(updateContext); \r\n     \r\n     function updateContext(response){\r\n         var answer = response.responseXML.documentElement.getAttribute(\"answer\"); \r\n         copyToClipboard(answer); \r\n     }\r\n }\n\n// File: Copy Field Name Context Menu.js\n//See readme for full setup\r\n/**\r\n  * Script executed on the Client for this menu action \r\n  *\r\n  * The following variables are available to the script:\r\n  *    'g_list' the GlideList2 that the script is running against (only valid for List context menus)\r\n  *    'g_fieldName' the name of the field that the context menu is running against (only valid for List context menus)\r\n  *    'g_sysId' the sys_id of the row or form that the script is running against\r\n  *    'rowSysId' is also set to the sys_id of the row to support legacy actions, but g_sysId is preferred\r\n  */\r\n runContextAction();\r\n \r\n function runContextAction() {\r\n     copyToClipboard(g_fieldName); \r\n }\n\n// File: Copy Field Value Context Menu.js\n//See readme for full setup\r\n/**\r\n  * Script executed on the Client for this menu action \r\n  *\r\n  * The following variables are available to the script:\r\n  *    'g_list' the GlideList2 that the script is running against (only valid for List context menus)\r\n  *    'g_fieldName' the name of the field that the context menu is running against (only valid for List context menus)\r\n  *    'g_sysId' the sys_id of the row or form that the script is running against\r\n  *    'rowSysId' is also set to the sys_id of the row to support legacy actions, but g_sysId is preferred\r\n  */\r\n runContextAction();\r\n \r\n function runContextAction() {\r\n\t var this_gr = new GlideRecord(g_list.getTableName());\r\n\t this_gr.get(g_sysId);\r\n     copyToClipboard(this_gr.getValue(g_fieldName)); \r\n }\n\n// File: Script Include.js\n//See readme for full setup\r\nvar ListCopyOptions = Class.create();\r\nListCopyOptions.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n\tgetDisplayValue: function(){\r\n\t\tvar sys_id = this.getParameter('sysparm_sys_id');\r\n\t\tvar field = this.getParameter('sysparm_field');\r\n\t\tvar table = this.getParameter('sysparm_table');\r\n\t\tvar this_gr = new GlideRecordSecure(table);\r\n\t\tthis_gr.get(sys_id);\r\n\t\treturn this_gr.getDisplayValue(field);\r\n\t},\r\n\ttype: 'ListCopyOptions'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Table List Copy Context Options",
        "scriptFiles": [
          "Copy Field Display Value Context Menu.js",
          "Copy Field Name Context Menu.js",
          "Copy Field Value Context Menu.js",
          "Script Include.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Table%20List%20Copy%20Context%20Options"
      }
    },
    "createdAt": "2025-09-20T08:42:18.877Z",
    "updatedAt": "2025-09-21T08:58:58.522Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 292,
    "type": "script_include",
    "name": "SubProdLogger",
    "description": "ArtifactRank Logger script include that helps you to specify the environments that you want create log records without commenting your logging lines in your code. The logger will check if it is one of the sub-prod environments that you have specified",
    "script": "var SubProdLogger = Class.create();\r\n\r\n/**\r\n * Logs messages to system log only for sub-prods\r\n * \r\n * usage:\r\n * \r\n * var logger = new SubProdLogger(); // With default sub prod keywords and log prefix\r\n * \r\n * OR\r\n * \r\n * var logger = new SubProdLogger([\"dev\",\"uat\"], \"Rahman Logs:\");\r\n * \r\n * logger.warn(\"This is a warning.\");\r\n */\r\nSubProdLogger.prototype = {\r\n\r\n    /// properties\r\n    _subProdKeywords: null,\r\n    _logPrefix: null,\r\n    _instanceUrl: '',\r\n    _logApplicable: false,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {array} subProdKeywords array of sub-prod names e.g. partial url [\"dev\", \"uat\"] or full url [\"https://dev11111.service-now.com\"]\r\n     * @param {string} logPrefix prefix to be added to the log otherwise will be defaulted to\r\n     */\r\n    initialize: function (subProdKeywords, logPrefix) {\r\n        this._subProdKeywords = subProdKeywords;\r\n        this._logPrefix = logPrefix;\r\n\r\n        if (!this._subProdKeywords) {\r\n            // This is where you specify which environments to logger to log\r\n            this._subProdKeywords = ['test', \"uat\", 'stage', 'qa', 'dev'];\r\n        }\r\n\r\n        if (!this._logPrefix) {\r\n            this._logPrefix = \"VF:\";\r\n        }\r\n\r\n        // Do it once!\r\n        this._instanceUrl = gs.getProperty('glide.servlet.uri');\r\n        this._logApplicable = this._shouldLog();\r\n    },\r\n\r\n    /**\r\n     * Logs warning message\r\n     * @param {string} msg message to be logged\r\n     */\r\n    warn: function (msg) {\r\n        if (this._logApplicable) {\r\n            gs.warn(this._logPrefix + msg);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Logs error message\r\n     * @param {string} msg message to be logged\r\n     */\r\n    error: function (msg) {\r\n        if (this._logApplicable) {\r\n            gs.error(this._logPrefix + msg);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Logs info message\r\n     * @param {string} msg message to be logged\r\n     */\r\n    info: function (msg) {\r\n        if (this._logApplicable) {\r\n            gs.info(this._logPrefix + msg);\r\n        }\r\n    },\r\n\r\n    // Helper functions\r\n\r\n    /**\r\n     * Checks the URL of the instance and finds out if it's a non-prod environemnt based on \r\n     * the _subProdKeywords values e.g. https://dev1111.service-now.com will be considered as\r\n     * sub-prod for the _subProdKeywords=[\"dev\"]\r\n     */\r\n    _shouldLog: function () {\r\n        return this._stringContains(this._instanceUrl, this._subProdKeywords);\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {string} stringToSearch instance url\r\n     * @param {*} fragments array of the sub-prod names\r\n     */\r\n    _stringContains: function (stringToSearch, fragments) {\r\n\r\n        for (var i = 0; i < fragments.length; i++) {\r\n            if (stringToSearch.indexOf(fragments[i]) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    type: 'SubProdLogger'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/SubProdLogger",
        "scriptFiles": [
          "SubProdLogger.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/SubProdLogger",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/SubProdLogger/SubProdLogger.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.873Z",
    "updatedAt": "2025-09-21T08:58:58.518Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 291,
    "type": "script_include",
    "name": "StripHTML",
    "description": "StripHTML Script Include that removes all HTML from a specific string. It doesn't use the typical Class.create, instead it is a simple javascript function.",
    "script": "var StripHTML = function(htmlStr, keepLinebreaks) {\r\n    //GlideSPScriptable will not preserve linebreaks\r\n\tif (!keepLinebreaks) return GlideSPScriptable().stripHTML(htmlStr);\r\n\telse {\r\n        //so unfortunately we have to use regex to keep linebreaks\r\n\t\tvar strippedStr = htmlStr.replace(/<br\\s*\\/?>/gi, \"\\n\");\r\n\t\tstrippedStr = strippedStr.replace(/<\\/p>/gi, \"\\n\");\r\n\t\tstrippedStr = strippedStr.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n\t\treturn strippedStr;\r\n\t}\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/StripHTML",
        "scriptFiles": [
          "StripHTML.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/StripHTML",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/StripHTML/StripHTML.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.870Z",
    "updatedAt": "2025-09-21T08:58:58.515Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 290,
    "type": "script_include",
    "name": "Store data in User Session",
    "description": "The GlideSession API allows you to store the client data in session and retrieve it. Following are the example of the usage:",
    "script": "var storeDataInSession = Class.create();\r\nstoreDataInSession.prototype = {\r\n    initialize: function() {},\r\n\r\n    putDataInSession: function(jsData) //pass the data in json format\r\n    {\r\n        var session = gs.getSession();\r\n        \r\n            for (var j in jsData) {\r\n                if (this.checkIfDataIsPresent(j) == 'true') {\r\n                    this.clearSessionData(j);\r\n\r\n                }\r\n\t\t\t\t\r\n                session.putClientData(j, jsData[j]);\r\n            }\r\n        \r\n        \r\n    },\r\n    checkIfDataIsPresent: function(key) {\r\n        var session = gs.getSession();\r\n        var clientData = session.getClientData(key);\r\n        if (clientData == null || clientData == undefined)\r\n            return 'true';\r\n        else\r\n            return 'false';\r\n    },\r\n    clearSessionData: function(key) {\r\n        var session = gs.getSession();\r\n        session.clearClientData(key);\r\n    },\r\n\r\n    type: 'storeDataInSession'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Store data in User Session",
        "scriptFiles": [
          "storeDataInSession.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Store%20data%20in%20User%20Session",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Store%20data%20in%20User%20Session/storeDataInSession.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.867Z",
    "updatedAt": "2025-09-21T08:58:58.511Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 289,
    "type": "script_include",
    "name": "Stopwatch",
    "description": "Stopwatch A script include that can be used as a stop watch when measuring the performance of a script or when want to show the elapsed time of an operation. Example Script",
    "script": "/*\r\n\tActs as a stop watch to log the seconds or milliseconds of an operation.\r\n\r\n\tUsage:\r\n\r\n\tvar watch = new Stopwatch();\r\n\twatch.start();\r\n\tgs.sleep(1000); // Do something\r\n\twatch.stop();\r\n\twatch.getElapsedTimeMilliseconds();\r\n*/\r\nvar Stopwatch = Class.create();\r\nStopwatch.prototype = {\r\n\r\n\tstartDateTime: null,\r\n\r\n\tendDateTime: null,\r\n\r\n\tinitialize: function () {\r\n\t},\r\n\r\n\t/**\r\n\t * Logs the start of the operation\r\n\t */\r\n\tstart: function () {\r\n\t\tthis.startDateTime = new GlideDateTime();\r\n\t\tgs.info(\"Started: \" + this.startDateTime.getDisplayValue(), \"StopWatch\");\r\n\t},\r\n\r\n\t/**\r\n\t * \r\n\t * @param {boolean} logInfo, indicates to log the end of operation in system log. Default is false \r\n\t */\r\n\tstop: function (logInfo) {\r\n\t\tthis.endDateTime = new GlideDateTime();\r\n\r\n\t\tif (logInfo) {\r\n\t\t\tgs.info(\"Total Elapsed Time Seconds: \" + this.getElapsedTimeSeconds(), \"StopWatch\");\r\n\t\t\tgs.info(\"Total Elapsed Time Milliseconds: \" + this.getElapsedTimeMilliseconds(), \"StopWatch\");\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * \r\n\t * @returns the durations in seconds\r\n\t */\r\n\tgetElapsedTimeSeconds: function () {\r\n\t\tif(!this.endDateTime) throw new Error(\"Please call stop the watch by calling the Stop() method first.\");\r\n\t\treturn gs.dateDiff(this.startDateTime, this.endDateTime, true);\r\n\t},\r\n\r\n\t/**\r\n\t * \r\n\t * @returns the durations in milliseconds\r\n\t */\r\n\tgetElapsedTimeMilliseconds: function () {\r\n\t\tif(!this.endDateTime) throw new Error(\"Please stop the watch by calling the Stop() method first.\");\r\n\t\treturn this.endDateTime.getNumericValue() - this.startDateTime.getNumericValue();\r\n\t},\r\n\r\n\ttype: 'Stopwatch'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Stopwatch",
        "scriptFiles": [
          "Stopwatch.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Stopwatch",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Stopwatch/Stopwatch.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.863Z",
    "updatedAt": "2025-09-21T08:58:58.507Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 288,
    "type": "script_include",
    "name": "StarterPack",
    "description": "Also available on Share here: https://developer.servicenow.com/connect.do!/share/contents/6592535scriptincludestarterpack?t=PRODUCTDETAILS and related to https://events.servicenow.com/widget/servicenow/knowledge2021/library/session/1612301555107001YVuE1617832086855001eNVb",
    "script": "// File: AjaxClientScript.js\nfunction onChange(control, oldValue, newValue, isLoading) {\r\n        if (isLoading || newValue == '') {\r\n            return;\r\n        }\r\n\r\n        var ga = new GlideAjax('StarterPackAjax'); //Script include name\r\n        ga.addParam('sysparm_name', 'getUserInfo'); //Function within the Script Include Name\r\n        ga.addParam('sysparm_id', g_form.getValue('caller_id')); //Parameter to pass to the Script Include, in this case a field called 'caller_id'\r\n        ga.getXML(getParse);\r\n    }\r\n\r\nfunction getParse(response) {\r\n    var answer = response.responseXML.documentElement.getAttribute(\"answer\");\r\n    if (answer) {\r\n        var data = JSON.parse(answer);\r\n        g_form.setValue('location', data.location); // Set values that were returned from the Script Include\r\n        g_form.setValue('manager', data.manager);\r\n    }\r\n}\n\n// File: AjaxSI.js\nvar StarterPackAjax = Class.create();\r\nStarterPackAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n    getUserInfo: function() {\r\n        var userSysid = this.getParameter(\"sysparm_id\"); //Parameter that was passed from the Client Script\r\n        var grUser = new GlideRecord(\"sys_user\");\r\n        grUser.get(userSysid);\r\n        var result = { //build an object with the values we want to return. The \"Name\" of the entry should be in quotes, followed by a : and then the value, followed by a comma\r\n            \"location\": grUser.getDisplayValue('location'),\r\n            \"manager\": grUser.getDisplayValue('manager'),\r\n        };\r\n        var payload = JSON.stringify(result);\r\n        return payload;\r\n    },\r\n\r\n    type: 'StarterPackAjax'\r\n});\n\n// File: classless.js\n/*\r\nUsage:  gs.addInfoMessage(StarterPackClassless(current.sys_id);\r\n\r\nClassless Script Includes only have one function and that function name MUST match the name of the Script Include.\r\n*/\r\n\r\nfunction StarterPackClassless(userId) {\r\n    var answer;\r\n    if (userId == '6816f79cc0a8016401c5a33be04be441') { //Default admin account sys_id\r\n        answer = 'You areÂ the default system admin';\r\n    } else {\r\n        answer = 'You are NOT the default system admin';\r\n    }\r\n    return answer;\r\n}\n\n// File: constants.js\n/*\r\nUsage: In any script block you can use \"StarterPackConstants.<SOMETHING>\"\r\n*/\r\n\r\nvar StarterPackConstants = Class.create();\r\n\r\nStarterPackConstants.INSTANCE = gs.getProperty('instance_name'); //usage: var instanceString = 'The current Instance is ' + StarterPackConstants.INSTANCE;\r\nStarterPackConstants.ACTIVEQUERY = 'active=true'; //usage: gr.addEncodedQuery(StarterPackConstants.ACTIVEQUERY);\n\n// File: reference.js\n/*\r\nUsage: in a Reference Field  to the User table set the Ref Qual to Advanced and paste this in\r\n               javascript: 'sys_idIN'+new.StarterPackRef().getAdmins();\r\n*/\r\n\r\n\r\nvar StarterPackRef = Class.create();\r\nStarterPackRef.prototype = {\r\n    initialize: function() {},\r\n\r\n    getAdmins: function() {\r\n        var users = {};\r\n        var grHasRole = new GlideRecord('sys_user_has_role');\r\n        grHasRole.addEncodedQuery('role=2831a114c611228501d4ea6c309d626d'); //admin\r\n        grHasRole.query();\r\n        while (grHasRole.next()) {\r\n            users[grHasRole.user.toString()] = true;\r\n        }\r\n        var ids = [];\r\n        for (var id in users)\r\n            ids.push(id);\r\n        return ids.join(',');\r\n    },\r\n\r\n    type: 'StarterPackRef'\r\n};\n\n// File: utilsExample.js\n/*\r\nUsage: \r\n  new StarterPackUtils().doubleNumber(<some number>);\r\n  new StarterPackUtils().sayMyName(<user sys_id>);\r\n\r\nOR \r\n  var utils = new StarterPackUtils();\r\n  utils.doubleNumber(<some number>);\r\n  utils.sayMyName(<user sys_id>);\r\n\r\n*/\r\n\r\n\r\nvar StarterPackUtils = Class.create();\r\nStarterPackUtils.prototype = {\r\n    initialize: function() {},\r\n\r\n    doubleNumber: function(number) {\r\n        var doubleNumber = number * 2;\r\n        return doubleNumber;\r\n    },\r\n    sayMyName: function(userId) {\r\n        var currentUser = gs.getUser().getUserByID(userID);\r\n        return currentUser.getFirstName();\r\n    },\r\n    type: 'StarterPackUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/StarterPack",
        "scriptFiles": [
          "AjaxClientScript.js",
          "AjaxSI.js",
          "classless.js",
          "constants.js",
          "reference.js",
          "utilsExample.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/StarterPack"
      }
    },
    "createdAt": "2025-09-20T08:42:18.859Z",
    "updatedAt": "2025-09-21T08:58:58.504Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 287,
    "type": "script_include",
    "name": "Standard Change Creator",
    "description": "This Script Includes provides a way to create a Standard Change, that will be auto-populated with certain fields. Usage and list of required variables, as well as documentation and commets are inline in the code.",
    "script": "var RepeatingStandardChange = Class.create();\r\n\r\nRepeatingStandardChange.prototype = {\r\n    initialize: function() {\r\n    },\r\n\t\r\n\t/*\r\n\t\tGiven the following params are set before execution:\r\n\t\t\ttemplate [string]: the name of the CHG template\r\n\t\t\tassignUser [string]: the username of the user to assign the CHG to\r\n\t\t\tassignGroup [string]: the group name to assign the CHG to\r\n\t\t\tshortDesc [string]: the short description for the CHG\r\n\t\t\tdesc [string]: the description for the CHG\r\n\t\t\t\r\n\t\t\tstartDateTime [string]: (YYYY-MM-DD hh:mm:ss format) the start date for the CHG\r\n\t\t\tendDateTime [string]: (YYYY-MM-DD hh:mm:ss format) the end date for the CHG\r\n\t\t\t\r\n\t\tCreate a new CHG, and return the number\r\n\t*/\r\n\tcreateWithTemplate: function(){\r\n\t\t\r\n\t\t//Lookup the provided template\r\n\t\tvar templateGr = new GlideRecord('std_change_producer_version');\r\n\t\ttemplateGr.addQuery('std_change_producer.name', '=', this.template);\r\n\t\ttemplateGr.orderByDesc('version');\r\n\t\ttemplateGr.query();\r\n\t\t\r\n\t\t//If the template was found\r\n\t\tif(templateGr.next()){\r\n\t\t\t//Initialize a new change\r\n\t\t\tvar chgGr = new GlideRecord('change_request');\r\n\t\t\tchgGr.initialize();\r\n\t\t\t\r\n\t\t\t//Standard Type\r\n\t\t\tchgGr.type = 'standard';\r\n\t\t\tchgGr.std_change_producer_version = templateGr.sys_ID;\r\n\t\t\t\r\n\t\t\t//Apply query from template\r\n\t\t\tchgGr.applyEncodedQuery(templateGr.std_change_producer.template.template);\r\n\t\t\t\r\n\t\t\t//Compile dates into GDT objects\r\n\t\t\tvar start = new GlideDateTime;\r\n            if(this.startDateTime != '' && this.startDateTime != undefined) start.setDisplayValue(this.startDateTime);\r\n\r\n            var end = new GlideDateTime;\r\n            if(this.endDateTime != '' && this.endDateTime != undefined) end.setDisplayValue(this.endDateTime);\r\n\r\n            //Set dates\r\n\t\t\tchgGr.work_start = start.getDisplayValue();\r\n\t\t\tchgGr.work_end = end.getDisplayValue();\r\n\t\t\tchgGr.start_date = start.getDisplayValue();\r\n\t\t\tchgGr.end_date = end.getDisplayValue();\r\n\t\t\t\r\n\t\t\t//Set assigned user\r\n\t\t\tvar userGr = new GlideRecord('sys_user');\r\n\t\t\tuserGr.addQuery('user_name', this.assignUser);\r\n\t\t\tuserGr.query();\r\n\t\t\tif(userGr.next()) chgGr.assigned_to = userGr.sys_id.toString();\r\n\t\t\telse return \"User provided for assignment was not found.\";\r\n\t\t\t\r\n\t\t\t//Set assignment group\r\n\t\t\tvar groupGr = new GlideRecord('sys_user_group');\r\n\t\t\tgroupGr.addQuery('name', this.assignGroup);\r\n\t\t\tgroupGr.query();\r\n\t\t\tif(groupGr.next()) chgGr.assignment_group = groupGr.sys_id.toString();\r\n\t\t\telse return \"Group provided for assignment was not found.\";\r\n\t\t\t\r\n\t\t\t//Set description\r\n\t\t\tchgGr.short_description = this.shortDesc;\r\n\t\t\t//Replace newlines with html breaks\r\n\t\t\tchgGr.description = this.desc.replace(/\\n/g, \"<br />\");\r\n\t\t\t\r\n\t\t\t//Create the change\r\n\t\t\tvar newChange = chgGr.insert();\r\n\t\t\t\r\n\t\t\t//Manually move through the steps to complete the change\r\n\t\t\tvar chg = new GlideRecord('change_request');\r\n\t\t\tchg.get(newChange);\r\n\t\t\tchg.state = -2;\r\n\t\t\tchg.update();\r\n\t\t\tchg.state = -1;\r\n\t\t\tchg.update();\r\n\t\t\tchg.state = 0;\r\n\t\t\tchg.update();\r\n\t\t\t\r\n\t\t\tif((this.close && this.close == true) || this.close == undefined){\r\n\t\t\t\tgs.log(\"this.close: '\" + this.close + \"', this.close == false ?: \" + (this.close == false));\r\n\t\t\t\tchg.close_code = 'successful';\r\n\t\t\t\tchg.state = 3;\r\n\t\t\t\tchg.update();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Return the CHG number\r\n\t\t\treturn chg.number.toString();\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn \"!!! Template provided was not found.\";\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n    type: 'RepeatingStandardChange'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Standard Change Creator",
        "scriptFiles": [
          "sys_script_include.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Standard%20Change%20Creator",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Standard%20Change%20Creator/sys_script_include.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.855Z",
    "updatedAt": "2025-09-21T08:58:58.499Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 286,
    "type": "script_include",
    "name": "SRAPIUtil",
    "description": "SRAPIUtil Utility class for common methods when implementing SRAPIs. Also includes examples of SNDocs and Revealing Module script include pattern with true private methods",
    "script": "var SRAPIUtil = (function() {\r\n\r\n    /**SNDOC\r\n    @name updateRecord\r\n    @description Update a record on provided table with provided field/value pairs\r\n    @param {String} [table] - Table the record is on\r\n\t@param {String} [id] - sys_id or number of record\r\n\t@param {Object} [fields] - Fields to be updated and their value eg. {\"state\": \"1\"}\r\n\t@throws error if no record is found or an invalid field or choice value is used\r\n\t@return {Object} {updatedFields, unchangedFields, record}\r\n\t@function REIChangeUtil~updateRecord\r\n\t*/\r\n    function updateRecord(table, id, fields) {\r\n        var response = {};\r\n        var unchangedFields = [];\r\n        var updatedFields = [];\r\n\r\n        var recordGR = new GlideRecordSecure(table);\r\n        var fieldToQuery;\r\n        _isSysID(id) ? fieldToQuery = 'sys_id' : fieldToQuery = 'number';\r\n        if (!recordGR.get(fieldToQuery, id)) {\r\n            throw 'Could not find record, please provide a valid number or sys_id';\r\n        }\r\n        for (var field in fields) {\r\n            if (!recordGR.isValidField(field)) {\r\n                throw field + ' is not a valid field on the ' + table + ' table';\r\n            }\r\n            if (!recordGR.getElement(field).canWrite()) {\r\n                unchangedFields.push(field);\r\n                continue;\r\n            }\r\n            var choiceList = _getChoiceList(field, table);\r\n            if (_getChoiceList(field) && _isChoiceList(field)) {\r\n                if (choiceList.indexOf(fields[field]) < 0) {\r\n                    throw fields[field] + ' is not a valid value for ' + field + '. Valid values: ' + choiceList;\r\n                }\r\n            }\r\n            recordGR.setValue(field, fields[field]);\r\n            var obj = {};\r\n            obj[field] = fields[field];\r\n            updatedFields.push(obj);\r\n        }\r\n        recordGR.update();\r\n        response.updatedFields = updatedFields;\r\n        if (unchangedFields.length > 0) {\r\n            response.unchangedFields = unchangedFields;\r\n        }\r\n        response[table] = _convertToJSON(recordGR);\r\n        return response;\r\n    }\r\n\r\n    /**SNDOC\r\n\t @name getRecord\r\n     @description Get a GlideRecord\r\n     @param {String}  [table] - Table the record is on\r\n\t @param {String} [id] - sys_id or number of record to be retrieved\r\n\t @return {Object} GlideRecord represented in JSON\r\n\t*/\r\n    function getRecord(table, id) {\r\n        var field;\r\n        _isSysID(id) ? field = 'sys_id' : field = 'number';\r\n        var recordGRS = new GlideRecordSecure(table);\r\n        if (recordGRS.get(field, id)) {\r\n            var record = _convertToJSON(recordGRS);\r\n            return record;\r\n        }\r\n        throw \"Could not find record. Please provide a valid table and sys_id\";\r\n    }\r\n\r\n    /**SNDOC\r\n     @name queryRecords\r\n     @description Query a table\r\n     @param {String} [table] - table the records are on\r\n\t @param {Object} [queryParams] - Query parameters of a REST message containing fields/values to query for\r\n\t @return {Array} Collection of GlideRecords represented in JSON\r\n\t*/\r\n    function queryRecords(table, queryParams) {\r\n        var records = [];\r\n        var recordGRS = new GlideRecordSecure(table);\r\n        recordGRS.setLimit(100);\r\n        for (var param in queryParams) {\r\n            if (param == 'api') {\r\n                continue;\r\n            }\r\n            if (param == 'limit') {\r\n                recordGRS.setLimit(queryParams[param]);\r\n                continue;\r\n            }\r\n            if (!recordGRS.isValidField(param)) {\r\n                throw param + ' is not a valid field on ' + table;\r\n            }\r\n            var fieldType = recordGRS.getElement(param).getED().getInternalType();\r\n            if (fieldType == 'reference') {\r\n                var refTable = recordGRS.getElement(param).getReferenceTable();\r\n                var displayField = _getTableDisplayValue(refTable);\r\n            }\r\n            recordGRS.addQuery(param, queryParams[param]).addOrCondition(param + '.' + displayField, queryParams[param]);\r\n        }\r\n        recordGRS.query();\r\n        while (recordGRS.next()) {\r\n            var obj = _convertToJSON(recordGRS);\r\n            records.push(obj);\r\n        }\r\n        return records;\r\n    }\r\n\r\n    /**SNDOC\r\n     @name _getChoiceList\r\n     @description Get choices available for a field\r\n     @private\r\n     @param {String} [field] - Name of field to check\r\n     @param {String} [table] - Name of the field the table is on\r\n     @return {Array} Collection of choices available on the field\r\n    */\r\n    function _getChoiceList(field, table) {\r\n        var choices = [];\r\n        var choiceGR = new GlideRecord('sys_choice');\r\n        choiceGR.addQuery('element', field);\r\n        choiceGR.addQuery('name', table);\r\n        choiceGR.addQuery('inactive', false);\r\n        choiceGR.query();\r\n        if (!choiceGR.hasNext()) {\r\n            return null;\r\n        }\r\n        while (choiceGR.next()) {\r\n            choices.push(choiceGR.getValue('value'));\r\n        }\r\n        return choices;\r\n    }\r\n\r\n    /**SNDOC\r\n     @name _isChoiceList\r\n     @description Check if a field is choice list by checking if the field's choice value is dropdown, dropdown with none, or suggestion\r\n     @private\r\n\t @param {String} [field] - Name of field to check\r\n\t @return {Boolean} True if the provided field is a choice list, false if not\r\n\t*/\r\n    function _isChoiceList(field) {\r\n        var dictionaryGR = new GlideRecord('sys_dictionary');\r\n        dictionaryGR.addQuery('name', 'task');\r\n        dictionaryGR.addQuery('element', field);\r\n        dictionaryGR.addQuery('active', true);\r\n        dictionaryGR.query();\r\n        if (dictionaryGR.next()) {\r\n            if (dictionaryGR.getValue('choice') == 2 || dictionaryGR.getValue('choice') == 3 || dictionaryGR.getValue('choice') == 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**SNDOC\r\n     @name _convertToJSON\r\n     @description Convert the provided GlideRecord to a JSON object\r\n     @private \r\n\t @param {GlideRecord} [GlideRecord] - GlideRecord to convert\r\n\t @return {Object} GlideRecord represented as JSON\r\n\t*/\r\n    function _convertToJSON(glideRecord) {\r\n        var obj = {};\r\n        for (var field in glideRecord) {\r\n            if (glideRecord.getValue(field)) {\r\n                obj[field] = glideRecord.getDisplayValue(field);\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    /**SNDOC\r\n     @name _isSysID\r\n     @description Check if provided text is a sys_id (32 char alphanumeric)\r\n     @private \r\n\t @param {String} [text] - Text to check\r\n\t @return {Boolean} True if the provided string is a sys_id, false if not\r\n\t*/\r\n    function _isSysID(text) {\r\n        var regexp = /[0-9a-f]{32}/;\r\n        if (text.match(regexp)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**SNDOC\r\n     @name _getTableDisplayValue\r\n     @description Get the display field for the provided table\r\n     @private\r\n\t @param {String} [table] - Table to get the display field of\r\n\t @return {String} Name of the display field\r\n\t*/\r\n    function _getTableDisplayValue(table) {\r\n        var dictionaryGR = new GlideRecord('sys_dictionary');\r\n        dictionaryGR.addQuery('name', table);\r\n        dictionaryGR.addQuery('display', true);\r\n        dictionaryGR.query();\r\n        if (dictionaryGR.next()) {\r\n            return dictionaryGR.getValue('element');\r\n        } else {\r\n            return 'name';\r\n        }\r\n    }\r\n\r\n    return {\r\n        'updateRecord': updateRecord,\r\n        'getRecord': getRecord,\r\n        'queryRecords': queryRecords\r\n    };\r\n})();",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/SRAPIUtil",
        "scriptFiles": [
          "SRAPIUtil.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/SRAPIUtil",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/SRAPIUtil/SRAPIUtil.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.852Z",
    "updatedAt": "2025-09-21T08:58:58.496Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 285,
    "type": "script_include",
    "name": "Slack JSON Block Factory",
    "description": "This Script Includes provides simple factories (Slacktory) to create Slack JSON blocks, that can be sent in payloads. Documentation for syntax is inline in the code. The factories will always return the created or modified block [Object].",
    "script": "//Class def\r\nvar Slacktory = Class.create();\r\nSlacktory.prototype = {\r\n\t\r\n    initialize: function() {},\r\n\t\r\n\t/*\r\n\tinnerText [String]: The text for the text.text property\r\n\t\t- if not supplied, defaults to an empty string\r\n\t*/\r\n\tsectionBlock: function(innerText){\r\n\t\tvar facBlock = {};\r\n        facBlock.type = 'section';\r\n        facBlock.text = {};\r\n        facBlock.text.type = 'plain_text';\r\n        facBlock.text.text = innerText ? innerText : '';\r\n\t\treturn facBlock;\r\n\t},\r\n\t\r\n\t/*\r\n    innerText [String]: The text to be inserted into the block's text.text property.\r\n        - if not supplied, defaults to an empty string.\r\n\t*/\r\n\tsectionMarkdownBlock: function(innerText){\r\n\t\tvar facBlock = {};\r\n\t\tfacBlock.type = 'section';\r\n\t\tfacBlock.text = {};\r\n\t\tfacBlock.text.type = 'mrkdwn';\r\n\t\tfacBlock.text.text = innerText ? innerText : '';\r\n\t\treturn facBlock;\r\n\t},\r\n\r\n\t/*\r\n\t\tinnerTexts [Array]: An array of strings to be inserted into the block's text.text property.\r\n\t*/\r\n\tmultiFieldSectionMarkdownBlock: function(innerTexts){\r\n\t\tvar facBlock = {};\r\n\t\tfacBlock.type = 'section';\r\n\t\tfacBlock.fields = [];\r\n\r\n        innerTexts.forEach(function(innerText){\r\n            var field = {};\r\n            field.type = 'mrkdwn';\r\n            field.text = innerText;\r\n            facBlock.fields.push(field);\r\n        });\r\n\t\treturn facBlock;\r\n\t},\r\n\r\n\t/*\r\n\t\tinnerText [String]: The text to be inserted into the block's element's text.text property.\r\n\t\t\t- This is 100% required ( even if it's just an emoji... )\r\n\r\n\t\tex: \r\n\r\n\t\tblock = contextMarkdownBlock(':blank:\\n:sn-info: *Information*');\r\n\t*/\r\n\tcontextMarkdownBlock: function(innerText){\r\n\t\tvar facBlock = {};\r\n\t\tfacBlock.type = 'context';\r\n\t\tfacBlock.elements = [];\r\n\t\tif(Array.isArray(innerText)){\r\n\t\t\tinnerText.forEach(function(t){\r\n\t\t\t\telement = {};\r\n\t\t\t\telement.type = 'mrkdwn';\r\n\t\t\t\telement.text = t;\r\n\t\t\t\tfacBlock.elements.push(element);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse{\r\n\t\t\telement = {};\r\n\t\t\telement.type = 'mrkdwn';\r\n\t\t\telement.text = innerText;\r\n\t\t\tfacBlock.elements.push(element);\r\n\t\t}\r\n\t\treturn facBlock;\r\n\t},\r\n\r\n\t/*\r\n\t\theaderText [String]: The text to be inserted into the block's text.text property.\r\n\t\ttable [String]: The table that is being referenced (e.g. 'sys_user' or 'task')\r\n\t\trecord [String]: The sys_id of the record that is being referenced\r\n\r\n\t\trecord can be directly passed by name, as it is defined earlier.\r\n\r\n\t\ttable can (sometimes) be passed by name as it is defined earlier.\r\n\t\tThe only exception here is when the table name is not the way to directly reference the list.\r\n\t\tFor example, INC, SCTASK, and RITM all live on the `task` table, but the table would be the\r\n\t\tcorresponding `inc`, `sc_task`, etc.\r\n\r\n\t\tex:\r\n\r\n\t\tblock = headerBlockWithOpenInServiceNow('Record', table, record);\r\n\r\n\t\tIf the table name does not mach the list name, you can pass the table name as a string:\r\n\r\n\t\tblock = headerBlockWithOpenInServiceNow('Record', 'task', record);\r\n\t*/\r\n\theaderBlockWithOpenInServiceNow: function(headerText, table, record){\r\n\t\tvar facBlock = this.sectionMarkdownBlock(headerText);\r\n\t\tthis.buttonAdder(facBlock, 'Open in ServiceNow', (gs.getProperty('glide.servlet.uri') + 'nav_to.do?uri=' + table + '.do?sys_id=' + record));\r\n\t\treturn facBlock;\r\n\t},\r\n\r\n\t/*\r\n\t\tAdd a button that will open a specified URL on press. This should NOT be used to add Modals,\r\n\t\tas modal URLs will not play nice with block.accessory.url\r\n\t\r\n\t\tblock [Object]: The block to add the button to.\r\n\t\tbuttonText [String]: The text label for the button.\r\n\t\tbuttonUrl [String]: The url that the button will link to.\r\n\t*/\r\n\tbuttonAdder: function(block, buttonText, buttonUrl){\r\n\t\tblock.accessory = {};\r\n\t\tblock.accessory.type = 'button';\r\n\t\tblock.accessory.style = 'primary';\r\n\t\tblock.accessory.text = {};\r\n\t\tblock.accessory.text.type = 'plain_text';\r\n\t\tblock.accessory.text.text = buttonText;\r\n\t\tblock.accessory.url = buttonUrl;\r\n\t\treturn block;\r\n\t},\r\n\t/*\r\n\t\tModal adder should be used for adding any non-url-explicit-redirect functionality (More Info, View Workflow, etc.)\r\n\t\tModals must be added as block.accessory.value instead of block.acessory.url, hence the separate function.\r\n\t\r\n\t\tblock [Object]: The block to add the button to.\r\n\t\tbuttonText [String]: The text label for the button.\r\n\t\tbuttonValue [String]: The value the modal will spit back to the modal info SRAPI. [eg: 'variables|' + gr.sys_id, 'workflow|' + gr.sys_id]\r\n\t*/\r\n\tmodalAdder: function(block, buttonText, buttonValue){\r\n\t\tblock.accessory = {};\r\n\t\tblock.accessory.type = 'button';\r\n\t\tblock.accessory.text = {};\r\n\t\tblock.accessory.text.type = 'plain_text';\r\n\t\tblock.accessory.text.text = buttonText;\r\n\t\tblock.accessory.value = buttonValue;\r\n\t\treturn block;\r\n\t},\r\n\t\r\n\t/*\r\n\t\tSwitch adder should be used for adding any form-controlling switcher functionality (e.g., changing active from true to false, etc.)\r\n\t\t\r\n\t\tblock [Object]: The block to add the switch to.\r\n\t\tplaceholderText [String]: The text that will display intermittently in Slack when the provided choices do not.\r\n\t\tinitialOptionIndex [Integer]: The integer index of the object that should be shown as selected originally, as is it located in objArray.\r\n\t\tobjArray [Object Array]: Array of options that should be provided to define what the switch options will be. Form of the object:\r\n\t\t\t[\r\n\t\t\t\t{\r\n\t\t\t\t\t\"text\": \"...\", [String]: The label of the option\r\n\t\t\t\t\t\"value\": \"...\", [String]: The action that the modal will send back when the option is selected. Usually should be in the format: \"descriptive_action_name|sys_id_of_record\"\r\n\t\t\t\t},\r\n\t\t\t\tetc.\r\n\t\t\t]\r\n\t*/\r\n\tswitchAdder: function(block, placeholderText, initialOptionIndex, objArray){\r\n\t\tblock.accessory = {};\r\n\t\tblock.accessory.type = 'static_select';\r\n\t\tblock.accessory.placeholder = {};\r\n\t\tblock.accessory.placeholder.type = 'plain_text';\r\n\t\tblock.accessory.placeholder.text = placeholderText;\r\n\t\tblock.accessory.options = [];\r\n\r\n\t\tobjArray.forEach(function(e, index){\r\n\t\t\tvar obj = {};\r\n\t\t\tobj.text = {};\r\n\t\t\tobj.text.type = 'plain_text';\r\n\t\t\tobj.text.text = e.text;\r\n\t\t\tobj.value = e.value;\r\n\r\n\t\t\tblock.accessory.options.push(obj);\r\n\r\n\t\t\tif(index == initialOptionIndex) block.accessory.initial_option = obj;\r\n\t\t});\r\n\t\t\r\n\t\treturn block;\r\n\t},\r\n\r\n    type: 'Slacktory'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Slack JSON Block Factory",
        "scriptFiles": [
          "Slacktory.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Slack%20JSON%20Block%20Factory",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Slack%20JSON%20Block%20Factory/Slacktory.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.848Z",
    "updatedAt": "2025-09-21T08:58:58.491Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 284,
    "type": "script_include",
    "name": "Single Sign-On (SSO) Direct Login URL Generator",
    "description": "Script Include for Single Sign-On (SSO) Direct Login URL Generator using UserHelper 1. introduction 2. installation",
    "script": "var UserHelper = Class.create();\r\nUserHelper.prototype = {\r\n    SECRET_KEY: '<YOUR_SECRET_KEY>', //secret key defined by you for encoding\r\n    MAC_ALG: 'HmacSHA256',\r\n    GLIDE_SSO_ID: '<SSO_PROVIDER_SYS_ID>', //system id of digest token sso provider\r\n\r\n    initialize: function(userGR) {\r\n        this.userGR = userGR;\r\n    },\r\n\r\n    getUserById: function(sys_id) {\r\n        return this.getUser('sys_id', sys_id);\r\n    },\r\n\r\n    getUserByEmail: function(email) {\r\n        return this.getUser('email', email);\r\n    },\r\n\r\n    getUserByName: function(user_name) {\r\n        return this.getUser('user_name', user_name);\r\n    },\r\n\r\n    getUser: function(key, value) {\r\n        if (key && value) {\r\n            this.userGR = new GlideRecord('sys_user');\r\n            this.userGR.get(key, value);\r\n        }\r\n        return this.userGR;\r\n    },\r\n\r\n    //generate the direct login url using user_name or user glide record\r\n    login: function(user_name) {\r\n\r\n        if (user_name) {\r\n            this.getUserByName(user_name);\r\n        }\r\n\r\n        if (!this.userGR) {\r\n            return null;\r\n        }\r\n\r\n        //generating token\r\n        var token = SncAuthentication.encode(this.userGR.getValue('user_name'), this.SECRET_KEY, this.MAC_ALG);\r\n\r\n        //formating url\r\n        var url = gs.getProperty('glide.servlet.uri') + '?glide_sso_id=' + this.GLIDE_SSO_ID + '&SM_USER=' + this.userGR.getValue('user_name') + '&DE_USER=' + token;\r\n\r\n        return url;\r\n    },\r\n\r\n    type: 'UserHelper'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Single Sign-On (SSO) Direct Login URL Generator",
        "scriptFiles": [
          "UserHelper.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Single%20Sign-On%20(SSO)%20Direct%20Login%20URL%20Generator",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Single%20Sign-On%20(SSO)%20Direct%20Login%20URL%20Generator/UserHelper.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.845Z",
    "updatedAt": "2025-09-21T08:58:58.487Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 283,
    "type": "script_include",
    "name": "SCIM Payload Generator",
    "description": "A script include to generate payload for testing SCIM-based integration. The script covers as specific case where user is added/removed to user groups based on the values in the 'entitlements' object of the SCIM payload. The main function accepts 3 parameters:",
    "script": "var GenerateSCIMPayload = Class.create();\r\nGenerateSCIMPayload.prototype = {\r\n    initialize: function() {\r\n    },\r\n\r\n    // Function to generate a random string for new group names\r\n    generateRandomString: function(length) {\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var result = '';\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() * characters.length));\r\n        }\r\n        return \"test group \" + result;\r\n    },\r\n\r\n    // Function to retrieve the groups where the user is a member\r\n    getUserGroups: function(userSysId) {\r\n        var groupNames = [];\r\n        var grGroupMember = new GlideRecord('sys_user_grmember'); // Group Member table\r\n        grGroupMember.addQuery('user', userSysId); // Get groups of the user\r\n        grGroupMember.query();\r\n        \r\n        while (grGroupMember.next()) {\r\n            var groupName = grGroupMember.group.getDisplayValue(); // Get group name\r\n            groupNames.push({\r\n                name: groupName\r\n            });\r\n        }\r\n        return groupNames;\r\n    },\r\n\r\n    // Function to retrieve groups where the user is NOT a member\r\n    getGroupsNotMemberOf: function(userSysId) {\r\n        var groupNames = [];\r\n        var grGroup = new GlideRecord('sys_user_group'); // Group table\r\n\r\n        // Subquery to find groups the user is a member of\r\n        var subquery = new GlideRecord('sys_user_grmember');\r\n        subquery.addQuery('user', userSysId);\r\n        subquery.query();\r\n\r\n        var groupIds = [];\r\n        while (subquery.next()) {\r\n            groupIds.push(subquery.group.sys_id.toString());\r\n        }\r\n\r\n        // Query for groups where the user is NOT a member\r\n        grGroup.addQuery('sys_id', 'NOT IN', groupIds);\r\n        grGroup.query();\r\n\r\n        while (grGroup.next()) {\r\n            groupNames.push({\r\n                name: grGroup.name.toString() // Only store the group name\r\n            });\r\n        }\r\n\r\n        return groupNames;\r\n    },\r\n\r\n    // Function to generate entitlements for current user groups, excluding a set number\r\n    generateEntitlementsFromCurrentGroups: function(userSysId, groupsToRemove) {\r\n        var currentGroups = this.getUserGroups(userSysId);\r\n        var countToKeep = Math.max(0, currentGroups.length - groupsToRemove); // Ensure non-negative value\r\n        var keptGroups = currentGroups.slice(0, countToKeep); // Keep the first groups, up to the count\r\n\r\n        var entitlements = [];\r\n        for (var i = 0; i < keptGroups.length; i++) {\r\n            entitlements.push({\r\n                \"value\": keptGroups[i].name // Add kept group names to entitlements\r\n            });\r\n        }\r\n        return entitlements;\r\n    },\r\n\r\n    // Function to generate entitlements for groups the user will \"join\"\r\n    generateEntitlementsForNewGroups: function(userSysId, groupsToAdd) {\r\n        var availableGroups = this.getGroupsNotMemberOf(userSysId);\r\n        var entitlements = [];\r\n\r\n        for (var i = 0; i < groupsToAdd; i++) {\r\n            if (availableGroups.length > 0) {\r\n                var randomIndex = Math.floor(Math.random() * availableGroups.length);\r\n                var selectedGroup = availableGroups.splice(randomIndex, 1)[0];\r\n                entitlements.push({\r\n                    \"value\": selectedGroup.name // Add selected group names to entitlements\r\n                });\r\n            }\r\n        }\r\n\r\n        return entitlements;\r\n    },\r\n\r\n    // Main function to generate entitlements\r\n    generateEntitlements: function(userSysId, groupsToRemove, groupsToAdd, newGroupsToCreate) {\r\n        // Initialize the object\r\n        var userObj = {\r\n            \"schemas\": [\r\n                \"urn:ietf:params:scim:schemas:extension:servicenow:2.0:User\",\r\n                \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n                \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n            ],\r\n            \"id\": userSysId,\r\n            \"meta\": {\r\n                \"resourceType\": \"User\",\r\n                \"created\": \"2006-07-11T21:16:15Z\",\r\n                \"lastModified\": new Date().toISOString(), // Current date for lastModified\r\n                \"location\": \"https://<instance-name>.service-now.com/api/now/scim/Users/\" + userSysId //to be updated with your instance name\r\n            },\r\n            \"userName\": \"jvittolo\", // Replace with actual user name if needed\r\n            \"name\": {\r\n                \"familyName\": \"Vittolo\",\r\n                \"givenName\": \"Jamessss\"\r\n            },\r\n            \"displayName\": \"Jamessss Vittolo\",\r\n            \"title\": \"VP, Client Services\",\r\n            \"active\": true,\r\n            \"emails\": [\r\n                {\r\n                    \"value\": \"jvittolo@example.com\",\r\n                    \"type\": \"work\"\r\n                }\r\n            ],\r\n            \"entitlements\": []\r\n        };\r\n\r\n        // Step 1: Generate entitlements for existing groups (excluding some)\r\n        var currentGroupEntitlements = this.generateEntitlementsFromCurrentGroups(userSysId, groupsToRemove);\r\n        userObj.entitlements = userObj.entitlements.concat(currentGroupEntitlements);\r\n\r\n        // Step 2: Generate entitlements for new groups the user will \"join\"\r\n        var newGroupEntitlements = this.generateEntitlementsForNewGroups(userSysId, groupsToAdd);\r\n        userObj.entitlements = userObj.entitlements.concat(newGroupEntitlements);\r\n\r\n        // Step 3: Create new groups (non-existing) and add to entitlements\r\n        for (var j = 0; j < newGroupsToCreate; j++) {\r\n            var newGroupName = this.generateRandomString(12);\r\n            userObj.entitlements.push({\r\n                \"value\": newGroupName // Add new group names directly to entitlements\r\n            });\r\n        }\r\n\r\n        // Return the modified object\r\n        return userObj;\r\n    },\r\n\r\n    // Function to simulate removal of all group memberships\r\n    removeAllGroupMemberships: function(userSysId) {\r\n        // Initialize the object with all original properties\r\n        var userObj = {\r\n            \"schemas\": [\r\n                \"urn:ietf:params:scim:schemas:extension:servicenow:2.0:User\",\r\n                \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n                \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n            ],\r\n            \"id\": userSysId,\r\n            \"meta\": {\r\n                \"resourceType\": \"User\",\r\n                \"created\": \"2006-07-11T21:16:15Z\",\r\n                \"lastModified\": new Date().toISOString(), // Current date for lastModified\r\n                \"location\": \"https://<instance-name>.service-now.com/api/now/scim/Users/\" + userSysId\r\n            },\r\n            \"userName\": \"jvittolo\", // Replace with actual user name if needed\r\n            \"name\": {\r\n                \"familyName\": \"Vittolo\",\r\n                \"givenName\": \"Jamessss\"\r\n            },\r\n            \"displayName\": \"Jamessss Vittolo\",\r\n            \"title\": \"VP, Client Services\",\r\n            \"active\": true,\r\n            \"emails\": [\r\n                {\r\n                    \"value\": \"jvittolo@example.com\",\r\n                    \"type\": \"work\"\r\n                }\r\n            ],\r\n            \"entitlements\": [] // Empty entitlements array\r\n        };\r\n\r\n        return userObj; // Return the full object with empty entitlements\r\n    },\r\n\r\n    type: 'GenerateSCIMPayload'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/SCIM Payload Generator",
        "scriptFiles": [
          "GenerateSCIMPayload.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/SCIM%20Payload%20Generator",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/SCIM%20Payload%20Generator/GenerateSCIMPayload.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.841Z",
    "updatedAt": "2025-09-21T08:58:58.483Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 282,
    "type": "script_include",
    "name": "SCIM Custom Mapping Handler",
    "description": "This is a script include to handle custom mapping, covering a specific case where the SCIM client is using the entitlement attribute to store the user-group-memberships. Usage: the script must be invoked from the \"SCIM User\" ETL definition (installed with the SCIM v2 plugin). The main function accepts an array with group names and a user sysid:",
    "script": "var SCIMCustomMappingHandler = Class.create();\r\nSCIMCustomMappingHandler.prototype = {\r\n    initialize: function(debug) {\r\n        if (debug) {\r\n            this.debug = true;\r\n        }\r\n    },\r\n\r\n    handleGroupMemberships: function(entitlementsList, userSysID){\r\n\r\n        this.removeMembershipsNotInEntitlements(entitlementsList, userSysID);\r\n        this.addAllMembershipsInEntitlements(entitlementsList, userSysID);\r\n\r\n    },\r\n\r\n    addAllMembershipsInEntitlements: function(entitlementsList, userSysID){\r\n\r\n        for (entitlement in entitlementsList){\r\n            var groupSysID = '';\r\n            var groupGR = new GlideRecord('sys_user_group');\r\n            if(groupGR.get('name', entitlementsList[entitlement])){\r\n                \r\n                if (!this._isMemberAlready(groupGR.getUniqueValue(), userSysID)){\r\n                    groupSysID = groupGR.getUniqueValue();\r\n                }\r\n\r\n            }else{\r\n                groupSysID = this._createNewGroup(entitlementsList[entitlement]); \r\n            }\r\n\r\n            if(groupSysID && groupSysID.length == 32){\r\n                this.createGroupMembership(groupSysID, userSysID);\r\n            }\r\n        }\r\n    },\r\n\r\n    removeMembershipsNotInEntitlements: function(entitlementsList, userSysID){\r\n\r\n        var membershipsToBeDeletedGR = new GlideRecord('sys_user_grmember');\r\n        membershipsToBeDeletedGR.addQuery('user', userSysID);\r\n        membershipsToBeDeletedGR.addQuery('group.name', \"NOT IN\", entitlementsList); \r\n        membershipsToBeDeletedGR.query();\r\n\r\n        membershipsToBeDeletedGR.deleteMultiple();\r\n    },  \r\n    \r\n    createGroupMembership: function(groupSysID, userSysID) {\r\n        var groupMembershipGR = new GlideRecord('sys_user_grmember');\r\n        groupMembershipGR.initialize();\r\n        groupMembershipGR.setValue('user', userSysID);\r\n        groupMembershipGR.setValue('group', groupSysID);\r\n        var membershipSysID = groupMembershipGR.insert();\r\n\r\n        if(this.debug){\r\n            if (membershipSysID){\r\n                gs.info ('Group membership created for User: ' + this._getUserDisplayValueAndEmail(userSysID) + ' and Group: ' + this._getGroupDisplayValue(groupSysID), this.type);\r\n            }\r\n        }\r\n    },\r\n\r\n    deleteGroupMembership: function(groupSysID, userSysID) {\r\n\r\n        var groupMembershipGR = new GlideRecord('sys_user_grmember');\r\n        groupMembershipGR.addQuery('group', groupSysID);\r\n        groupMembershipGR.addQuery('user', userSysID);\r\n        groupMembershipGR.query();\r\n\r\n        if (groupMembershipGR.next()) {\r\n            groupMembershipGR.deleteRecord();\r\n                \r\n            if (this.debug) {\r\n                gs.info(\"User: \" + this._getUserDisplayValueAndEmail(userSysID) + ' has been removed from ' + groupMembershipGR.group.getDisplayValue(), this.type);\r\n            }\r\n        }\r\n    },\r\n\r\n    _getUserDisplayValueAndEmail: function(userSysID) {\r\n        var userGR = new GlideRecord('sys_user');\r\n        if (userGR.get(userSysID)) {\r\n            var userInfo = userGR.getDisplayValue() + ' (' + userGR.getValue('email') + ')';\r\n            return userInfo;\r\n        }else{\r\n            gs.info(\"User with sys_id: \" + userSysID + ' does not exist.', this.type);\r\n        }\r\n    },\r\n\r\n    _getGroupDisplayValue: function(groupSysID) {\r\n        var groupGR = new GlideRecord('sys_user_group');\r\n        if (groupGR.get(groupSysID)) {\r\n            return groupGR.getDisplayValue();\r\n        }else{\r\n            gs.info(\"Group with sys_id: \" + groupSysID + ' does not exist.', this.type);\r\n        }\r\n    },\r\n\r\n    \r\n    _createNewGroup: function(groupName){\r\n        if (this.debug){\r\n            gs.info('_createNewGroup invoked with groupName = ' + groupName, this.type);\r\n        }\r\n        \r\n        var newGroupGR = new GlideRecord('sys_user_group');\r\n        newGroupGR.initialize();\r\n        newGroupGR.setValue('name', groupName);\r\n        \r\n        return newGroupGR.insert();\r\n    \r\n    },\r\n\r\n    _isMemberAlready: function(groupSysID, userSysID){\r\n        var membershipGR = new GlideRecord('sys_user_grmember');\r\n        membershipGR.addQuery('group', groupSysID);\r\n        membershipGR.addQuery('user', userSysID);\r\n        membershipGR.query();\r\n\r\n        if (membershipGR.hasNext()){\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    type: 'SCIMCustomMappingHandler'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/SCIM Custom Mapping Handler",
        "scriptFiles": [
          "SCIMCustomMappingHandler.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/SCIM%20Custom%20Mapping%20Handler",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/SCIM%20Custom%20Mapping%20Handler/SCIMCustomMappingHandler.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.838Z",
    "updatedAt": "2025-09-21T08:58:58.479Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 281,
    "type": "script_include",
    "name": "Scheduled Recursion",
    "description": "Scheduled Recursion To take action on a large number of records in a table, a single script may time out before the actions are completed. This is especially true for deletes. To avoid timing out the script, this solution will enable the action to be scheduled in batches with delays to avoid hanging the system for an extended operation. Any (i.e. Background) Script",
    "script": "// File: background_script.js\nvar objInputs = {\r\n    \"strTableName\": \"u_demo_cmdb_widget\",         // Which table?\r\n    \"strEncodedQuery\": \"nameLIKE34\",\t\t\t  // Which records?\r\n    \"intBatchSize\": 100,\t \t\t\t\t\t  // How many records at a time?\r\n    \"intBatchDelay\": 3,\t\t\t\t\t\t      // How many seconds delay to schedule the next batch\r\n    \"strLogPrefix\": 'JD: ',\t\t\t\t\t\t  // Used to prefix log entries for grouping/identification\r\n    \"strFunction\": function( tableName, query ){  // Function to be executed on each record. \r\n        new global.GlideQuery.parse( tableName, query )\r\n        .deleteMultiple();\t\t  \r\n    }\r\n};\r\n\r\nnew ScheduleRecursion().runMe( JSON.stringify( objInputs ) );\n\n// File: scheduled_recursion.js\nvar ScheduledRecursion = Class.create();\r\nScheduledRecursion.prototype = {\r\n    initialize: function( strInputs ) {},\r\n    type: 'ScheduledRecursion',\r\n\t\r\n\trunMe: function( strInputs ){\r\n\t\tvar objInputs = JSON.parse( strInputs );\r\n\t\t\r\n\t\treturn createTrigger( strInputs );\r\n\t\t\r\n\t},\r\n\t\r\n\tdoIt: function( strInputs ){\r\n\r\n\t\ttry{\r\n\r\n\t\t\tobjInputs = JSON.parse( strInputs );\r\n\r\n\t\t\tvar totalRecordCount = new global.GlideQuery.parse( objInputs.strTableName, objInputs.strEncodedQuery ).count(); // Total records matching the query\r\n\t\t\tif( totalRecordCount == 0 ){ return null; }\r\n\r\n\t\t\tif( objInputs.intBatchCount == undefined ){\r\n\t\t\t\tobjInputs.intBatchCount = 0;\r\n\t\t\t\tgs.info( objInputs.strLogPrefix + 'Starting to process ' + totalRecordCount + ' records from ' + \r\n\t\t\t\t\t\tobjInputs.strTableName + ' in batches of ' + objInputs.intBatchSize + ' records.\\nFunction: ' + JSON.stringify( objInputs.strFunction ) );\t\t\t\t\r\n\t\t\t}\r\n\t\t\tgs.info( objInputs.strLogPrefix + 'Batch #' + ++objInputs.intBatchCount + ', Processing ' + objInputs.intBatchSize < totalRecordCount ? objInputs.intBatchSize : totalRecordCount + \r\n\t\t\t\t' of ' + totalRecordCount + ' remaining records.' );\r\n\r\n\t\t\tvar batchIDs = [];\r\n\t\t\tvar grBID = new GlideRecord( objInputs.strTableName );\r\n\t\t\tgrBID.addEncodedQuery( objInputs.strEncodedQuery );\r\n\t\t\tgrBID.setLimit( objInputs.intBatchSize );\r\n\t\t\tgrBID.query();\r\n\t\t\twhile( grBID.next() ){\r\n\t\t\t\tbatchIDs.push( grBID.getUniqueValue() );\r\n\t\t\t}\r\n\r\n\t\t\tobjInputs.strFunction( objInputs.strTableName, 'sys_idIN' + batchIDs )\r\n\r\n\t\t\tgs.info( objInputs.strLogPrefix + 'Batch #' + objInputs.intBatchCount + ' is complete.' );\r\n\t\t\t\r\n\t\t\tstrInputs = JSON.stringify( objInputs );\r\n\t\t\tcreateTrigger( strInputs );\r\n\t\t\t\r\n\t\t}\r\n\t\tcatch( e ){\r\n\t\t\tgs.error( \r\n\t\t\t\tobjInputs.strLogPrefix + 'An error occurred trying to process records from ' + objInputs.strTableName + \r\n\t\t\t\t'\\nERROR: ' + e.name + ': ' + e.message \r\n\t\t\t);\r\n\t\t}\r\n\r\n\t},\r\n\t\r\n\tcreateTrigger: function( strInputs ){\r\n\t\tvar objInputs = JSON.parse( strInputs ),\r\n\t\t\tintBatchNumber = ( objInputs.intBatchCount || 0 ) + 1,\r\n\t\t\tgdtNextAction = new GlideDateTime(),\r\n\t\t\tgrTrigger = new GlideRecord( 'sys_trigger' );\r\n\t\t\r\n\t\tgdtNextAction.addSeconds( objInputs.intBatchDelay );\r\n\t\t\t\r\n\t\tgrTrigger.initialize();\r\n\t\tgrTrigger.setValue( 'name', 'MassRecordDeletes Batch #' + intBatchNumber);\r\n\t\tgrTrigger.setValue( 'next_action', gdtNextAction );\r\n\t\tgrTrigger.setValue( 'trigger_type', 0 ); // Run Once\r\n\t\tgrTrigger.setValue( 'script', \"new ScheduledRecursion().doIt( '\" + strInputs + \"' )\" );\r\n\t\t\r\n\t\treturn 'Trigger: ' + grTrigger.insert() + ': ' + gs.getProperty('glide.servlet.uri') + 'sys_trigger_list.do?nameSTARTSWITHMassRecordDeletes';\r\n\t\t\r\n\t},\r\n\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Scheduled Recursion",
        "scriptFiles": [
          "background_script.js",
          "scheduled_recursion.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Scheduled%20Recursion"
      }
    },
    "createdAt": "2025-09-20T08:42:18.834Z",
    "updatedAt": "2025-09-21T08:58:58.476Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 280,
    "type": "script_include",
    "name": "Role Checker Util",
    "description": "Script incude with 4 functions to check if users have a certain role. Should work server side as well as client side with the right prameters (with some caviats for the 4th function). Pay attention to the defined sysparm names in the script if used on client side.",
    "script": "var checkUserRole = Class.create();\r\ncheckUserRole.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n    hasRoleID: function(roleID, userID) {\r\n\t\t/** Checks if a user has a given role based on sys_id received\r\n\t\t* Returns a boolean value of true or false depending on whether or not the user has the role\r\n\t\t* @roleID: must be the sys_id of the role to check\r\n\t\t* @userID: must be the sys_id of the user to check\r\n\t\t*/\r\n    var role = this.getParameter('sysparm_roleID') || roleID;\r\n\tvar user = this.getParameter('sysparm_userID') || userID;\r\n\tvar rolesCheck = new GlideAggregate('sys_user_has_role');\r\n        rolesCheck.addEncodedQuery('role=' + role + '^user.sys_id=' + user);\r\n        rolesCheck.addAggregate('count');\r\n        rolesCheck.query();\r\n\tvar counter = 0;\r\n        if (rolesCheck.next())\r\n            counter = rolesCheck.getAggregate('count');\r\n        if (counter > 0)\r\n            return true;\r\n        else\r\n            return false;\r\n    },\r\n\r\n    hasRoleEmail: function(roleID, email) {\r\n\t\t/** Checks if a user has a given role based on sys_id of role and email address of user received\r\n\t\t* Only makes sense if user has an account in ServiceNow, otherwise it won't have a role anyway :)\r\n\t\t* Returns a boolean value of true or false depending on whether or not the user has the role\r\n\t\t* @roleID: must be the sys_id of the role to check\r\n\t\t* @email: must be an email address in string format\r\n\t\t*/\r\n    var role = this.getParameter('sysparm_roleID') || roleID;\r\n\tvar emailAddress = this.getParameter('sysparm_email') || email;\r\n\tvar rolesCheck = new GlideAggregate('sys_user_has_role');\r\n        rolesCheck.addEncodedQuery('role=' + role + '^user.email=' + emailAddress);\r\n        rolesCheck.addAggregate('count');\r\n        rolesCheck.query();\r\n\t var counter = 0;\r\n        if (rolesCheck.next())\r\n            counter = rolesCheck.getAggregate('count');\r\n        if (counter > 0)\r\n            return true;\r\n        else\r\n            return false;\r\n    },\r\n\r\n    checkArray: function(roleName, array) {\r\n\t\t/** Checks if an array of users have a given role based on the role's name\r\n\t\t* Returns a comma separated list of names (can be changed) of those users who have the provided role\r\n\t\t* @roleName: must be name of the role to check as string\r\n\t\t* @array: must be an array that contains sys_ids, email addresses or a combination of both.\r\n\t\t*/\r\n        var role = this.getParameter('sysparm_roleName') || roleName;\r\n        var arr = [];\r\n        arr = this.getParameter('sysparm_array') || array;\r\n        //          gs.info('checkArray method in checkUserRole script include started.  Received parameters rolename: ' + role + ' and array: ' + arr);\r\n        var users = arr.toString();\r\n        //         gs.info('These are the users: ' + users);\r\n\r\n        var userGR = new GlideRecord('sys_user');\r\n        userGR.addEncodedQuery('sys_idIN' + users + '^ORemailIN' + users + '^roles=' + role);\r\n        // \t\tgs.info('Encoded query: ' + userGR.getEncodedQuery());\r\n        userGR.query();\r\n        //         gs.info('userGR results: ' + userGR.getRowCount());\r\n        var roleUsers = [];\r\n        while (userGR.next()) {\r\n            roleUsers.push(userGR.getDisplayValue('name')); // change this line if you want to return a different value than name (e.g. sys_id, email, etc.)\r\n            //             gs.info('List of users with role updated: ' + roleUsers);\r\n        }\r\n        //         gs.info('Final list of users with role: ' + roleUsers);\r\n        return roleUsers.toString();\r\n    },\r\n\r\n    checkArrayGetObjects: function(roleName, array) {\r\n\t\t/** Checks if an array of users have a given role based on the role's name and array of users received\r\n\t\t* Returns an array of objects with some details of the users who have the provided role. You can extend the object per your requirements, by default it returns sys_id, name and email.\r\n\t\t* @roleName: must be name of the role to check as string\r\n\t\t* @array: must be an array that contains sys_ids, email addresses or a combination of both.\r\n\t\t*/\r\n        var role = this.getParameter('sysparm_roleName') || roleName;\r\n        var arr = [];\r\n        arr = this.getParameter('sysparm_array') || array;\r\n//         gs.info('checkArrayGetObjects method in checkUserRole script include started.  Received parameters rolename: ' + role + ' and array: ' + arr);\r\n        var users = arr.toString();\r\n//         gs.info('These are the users: ' + users);\r\n\r\n        var userGR = new GlideRecord('sys_user');\r\n        userGR.addEncodedQuery('sys_idIN' + users + '^ORemailIN' + users + '^roles=' + role);\r\n//         gs.info('Encoded query: ' + userGR.getEncodedQuery());\r\n        userGR.query();\r\n//         gs.info('userGR results: ' + userGR.getRowCount());\r\n        var roleUsers = []; // this is the array that will be returned, and will contain objects as defined below in userObj variable\r\n        var i = 0;\r\n        while (userGR.next()) {\r\n            var userObj = {};\r\n\t\t\t// feel free to add or remove elements to the object per your requirements, simply taking it from the GlideRecord object (userGR)\r\n            userObj.sys_id = userGR.getValue('sys_id');\r\n            userObj.name = userGR.getValue('name');\r\n            userObj.email = userGR.getValue('email');\r\n            roleUsers[i] = userObj;\r\n            i += 1;\r\n        }\r\n        return roleUsers; // array of objects - Note: if you want to use it client side, you need to stringify the array first here, and convert it back in your client script!\r\n    },\r\n\r\n    type: 'checkUserRole'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Role Checker Util",
        "scriptFiles": [
          "checkUserRole.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Role%20Checker%20Util",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Role%20Checker%20Util/checkUserRole.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.830Z",
    "updatedAt": "2025-09-21T08:58:58.472Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 279,
    "type": "script_include",
    "name": "Return Object",
    "description": "ReturnRecord Script Include - The script include is client callable - The returnRecordObject function allows for users to return a record values within the objects properties.",
    "script": "var ReturnRecord = Class.create();\r\nReturnRecord.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n    returnRecordObject: function() {\r\n        var tableName = this.getParameter('sysparm_tableName');\r\n\t\tvar recordID = this.getParameter('sysparm_recordID');\r\n\r\n        var getRecord = new GlideRecord(tableName);\r\n        getRecord.addQuery('sys_id', recordID);\r\n        getRecord.query();\r\n        var obj = {};\r\n\r\n        if (getRecord.next()) {\r\n            obj.short_description = getRecord.getValue('short_description');\r\n            obj.sys_id = getRecord.getValue('sys_id');\r\n        }\r\n\r\n        return JSON.stringify(obj);\r\n    }\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Return Object",
        "scriptFiles": [
          "ReturnObject.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Return%20Object",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Return%20Object/ReturnObject.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.827Z",
    "updatedAt": "2025-09-21T08:58:58.468Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 278,
    "type": "script_include",
    "name": "Retrieve Last Comment by Ticket",
    "description": "Retrieve Last Comment By Ticket This script returns the last comment that has been added on a ticket by the record id. The function 'retrieveLastCommentByTicket' requires two arguments",
    "script": "var RetrieveLastCommentByTicket = Class.create();\r\nRetrieveLastCommentByTicket.prototype = {\r\n    initialize: function() {},\r\n\t\r\n    retrieveLastCommentByTicket: function(sysId, tableName) {\r\n        var lastComment = new GlideRecord('sys_journal_field');\r\n\r\n        lastComment.addQuery('name', tableName);\r\n        lastComment.addQuery('element_id', sysId);\r\n        lastComment.addQuery('element', 'comments');\r\n        lastComment.orderByDesc('sys_created_on');\r\n        lastComment.setLimit(1);\r\n        lastComment.query();\r\n\r\n        if (lastComment.next())\r\n            return lastComment;\r\n\r\n        return null;\r\n    },\r\n\r\n    type: 'RetrieveLastCommentByTicket'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Retrieve Last Comment by Ticket",
        "scriptFiles": [
          "RetrieveLastCommentByTicket.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Retrieve%20Last%20Comment%20by%20Ticket",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Retrieve%20Last%20Comment%20by%20Ticket/RetrieveLastCommentByTicket.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.823Z",
    "updatedAt": "2025-09-21T08:58:58.465Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 277,
    "type": "script_include",
    "name": "RequestNotificationUtil",
    "description": "If a Request is rejected through Employee Center, the rejection notes get added to the RITM record rather than the Approval record. Therefore, the OOB reject notification does not contain the rejection comments. RequestNotificationUtil is used in rejectreasonnew notification email script to pull RITM reject reason (if available)",
    "script": "var RequestNotificationUtil = Class.create();\r\nRequestNotificationUtil.prototype = Object.extendsObject(RequestNotificationUtilSNC, {\r\n    initialize: function() {\r\n        RequestNotificationUtilSNC.prototype.initialize.apply(this, arguments);\r\n    },\r\n\r\n\t/**\r\n     * Get Reject comment from RITM - found that rejection notes added in EC will post\r\n\t * to RITM record rather than Approval record\r\n     * @param requestId - requestId\r\n     * @returns comment based on the state for last rejected\r\n     */\r\n    getRejectCommentRITM: function(requestId) {\r\n        var ritmRecord = new GlideRecord(\"sc_req_item\");\r\n        ritmRecord.addQuery('request', requestId);\r\n        ritmRecord.orderBy('sys_updated_on');\r\n        ritmRecord.setLimit(1);\r\n        ritmRecord.query();\r\n        while (ritmRecord.next()) {\r\n            var commentDesc = ritmRecord.comments.getJournalEntry(1).toString();\r\n            if (commentDesc.length > 0 && commentDesc.indexOf(\"Reason for rejection:\") > -1) {\r\n                var split = commentDesc.split(/\\(Additional comments\\)/gi);\r\n                if (split.length > 1) {\r\n                    // returns the first comment.\r\n                    var comment = split[split.length - 1];\r\n                    comment = comment.trim();\r\n                    var colonIndex = comment.indexOf(':');\r\n                    if (colonIndex != -1) {\r\n                        comment = comment.substr(colonIndex + 2, comment.length - 1);\r\n                    }\r\n                    comment = comment.replace(/\\n/g, '<br/>');\r\n                    return comment;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    type: 'RequestNotificationUtil'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/RequestNotificationUtil",
        "scriptFiles": [
          "RequestNotificationUtil.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/RequestNotificationUtil",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/RequestNotificationUtil/RequestNotificationUtil.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.820Z",
    "updatedAt": "2025-09-21T08:58:58.462Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 276,
    "type": "script_include",
    "name": "Request Approval Helper",
    "description": "Checks all RTIMs approval status for a request returns True if all RTIMs are approved or rejected Example:",
    "script": "var RequestApprovalHelper = Class.create();\r\n\r\nRequestApprovalHelper.prototype = {\r\n\tinitialize: function() {\r\n\t},\r\n\t\r\n\t///\r\n\t/// Checks all RTIMs approval status for a request\r\n\t/// Returns True if all RTIMs are approved or rejected\r\n\t///\r\n\tareAllRTIMsApprovedOrRejected : function(requestSysId) {\r\n\t\tvar result = false;\r\n\t\t\r\n\t\tvar rtimGR = new GlideRecord('sc_req_item');\r\n\t\t\r\n\t\trtimGR.addQuery('request', requestSysId);\r\n\t\trtimGR.query();\r\n\t\t\r\n\t\t// If ALL RTIMs are approved or rejected\r\n\t\tvar allRTIMsHaveDecisionAndAtleastOneApproved = this._CheckForAllRTIMsApprovedOrRejected(rtimGR);\r\n\t\t\r\n\t\tif (allRTIMsHaveDecisionAndAtleastOneApproved) {\r\n\t\t\tresult = true;\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t},\r\n\r\n\t\r\n\t///\r\n\t/// Update the request and mark the flag that all RTIMs are approved or rejected\r\n\t///\r\n\tupdateRequest : function(requestSysId){\r\n\t\t\r\n\t\tvar rec = new GlideRecord('sc_request');\r\n\t\trec.get(requestSysId);\r\n\r\n\t\tif(rec){\r\n\t\t\trec.u_all_rtims_are_approved_or_rejected = true;\r\n\t\t\trec.update();\r\n\t\t}\r\n\t\t\r\n\t},\r\n\t\r\n\t///\r\n\t/// Helper that checks all RTIMs have a decision i.e. Either approved or rejected e.g. not requested etc\r\n\t///\r\n\t_CheckForAllRTIMsApprovedOrRejected : function(rtimGR) {\r\n\t\t\r\n\t\tvar result = false;\r\n\t\tvar totalRecords = rtimGR.getRowCount();\r\n\t\tvar approvedCounter = 0;\r\n\t\tvar rejectedCounter = 0;\r\n\t\t\r\n\t\twhile (rtimGR.next()) {\r\n\t\t\t\r\n\t\t\tvar status = rtimGR.approval;\r\n\t\t\t\r\n\t\t\tif (status == 'approved') {\r\n\t\t\t\tapprovedCounter += 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (status == 'rejected') {\r\n\t\t\t\trejectedCounter += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// At least one approved exist\r\n\t\tif (approvedCounter > 0) { \r\n\t\t\t\r\n\t\t\t// All records either approved or rejected\r\n\t\t\tif(approvedCounter + rejectedCounter == totalRecords){\r\n\t\t\t\tresult = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t},\r\n\t\r\n\ttype: 'RequestApprovalHelper'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Request Approval Helper",
        "scriptFiles": [
          "RequestApprovalHelper.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Request%20Approval%20Helper",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Request%20Approval%20Helper/RequestApprovalHelper.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.816Z",
    "updatedAt": "2025-09-21T08:58:58.458Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 275,
    "type": "script_include",
    "name": "Reparent Table",
    "description": "Reparent Table This function reparentTable is to reparent the existing table to the another parent. This glide.rollback.blacklist.TableParentChange.change property can restrict user to reparent the table so in script we first set it to false before reparenting and later on changed it to its initially value once reparenting is done.",
    "script": "function reparentTable(tableName, parentTable) {\r\n  var tableParentChangePropVal = gs.getProperty(\"glide.rollback.blacklist.TableParentChange.change\");\r\n  try {\r\n    gs.info(tableName + \" reparent to \" + parentTable);\r\n    var tableUtil = new TableUtils(tableName);\r\n    var parentTables = tableUtil.getTables();\r\n    if (parentTables.indexOf(parentTable) != -1) {\r\n      gs.info(tableName + \" is reparented to \" + parentTable);\r\n      reparentingDone = true;\r\n    } else {\r\n      gs.setProperty(\"glide.rollback.blacklist.TableParentChange.change\", false);\r\n      var tpc = new GlideTableParentChange(tableName);\r\n      reparentingDone = tpc.change(tableName, parentTable);\r\n      gs.info(\r\n        \"Completed \" + tableName + \" reparent to \" + parentTable + \"with status reparentingDone = \" + reparentingDone\r\n      );\r\n    }\r\n  } catch (exception) {\r\n    gs.info(\"Exception thrown during reparenting: \" + exception);\r\n    reparentingDone = false;\r\n  } finally {\r\n    gs.setProperty(\"glide.rollback.blacklist.TableParentChange.change\", tableParentChangePropVal);\r\n    gs.info(\"Completed setting up glide.rollback.blacklist.TableParentChange.change property\");\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Reparent Table",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Reparent%20Table",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Reparent%20Table/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.813Z",
    "updatedAt": "2025-09-21T08:58:58.455Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 274,
    "type": "script_include",
    "name": "regexCheckerScript",
    "description": "Script Include to check regex This script include can be used in a report or any other script/BR/Action to check if a particular type of text or a field matches the required regex. Returns the sysid of the records that match the regex. You can select your desired table, query and field, also update the required regex in the script.",
    "script": "var regexCheckerScript = Class.create();\r\nregexCheckerScript.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n    getFieldforRegex: function() {\r\n        var dRecordSysId = [];\r\n        var grDRecordTable = new GlideRecord('incident'); //ADD YOUR DESIRED TABLE NAME \r\n        grDRecordTable.addEncodedQuery('active=true'); //ADD YOUR DESIRED QUERY\r\n        grDRecordTable.query();\r\n        while (grDRecordTable.next()) {\r\n            var description = grDRecordTable.getValue('description'); //ADD YOUR DESIRED FIELD HERE\r\n            var re = YOUR REGEX GOES HERE; //ADD YOUR DESIRED REGEX HERE\r\n            if (re.test(description)) {\r\n                dRecordSysId.push(grDRecordTable.sys_id.toString()); //IF MATCHES FIELD IT PUSHES THE SYS_ID TO THE ARRAY\r\n            }\r\n        }\r\n        return dRecordSysId.toString(); //RETURNS ALL THE RECORDS THAT MATCH THE REGEX\r\n    },\r\n\r\n    type: 'regexCheckerScript'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/regexCheckerScript",
        "scriptFiles": [
          "regexCheckerScript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/regexCheckerScript",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/regexCheckerScript/regexCheckerScript.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.809Z",
    "updatedAt": "2025-09-21T08:58:58.451Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 273,
    "type": "script_include",
    "name": "Regex utils",
    "description": "RegexUtils A script include with some of the common Regex related functions Usage",
    "script": "var RegexUtils = Class.create();\r\nRegexUtils.prototype = {\r\n    initialize: function() {},\r\n\r\n    /**\r\n     * \r\n     * @param {String} text that tokens to be replaced in \r\n     * @param {String} Token to be replaced\r\n     * @param {String} replaceTo \r\n     * @returns Returns new text with updated token\r\n     * \r\n     * NB: This is case in-sensitive\r\n     */\r\n    replaceAllIgnoreCase: function(text, replaceFrom, replaceTo) {\r\n        var regEx = new RegExp(replaceFrom, \"ig\");\r\n        return text.replace(regEx, replaceTo);\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {String} text that tokens to be replaced in \r\n     * @param {String} Token to be replaced\r\n     * @param {String} replaceTo \r\n     * @returns Returns new text with updated token\r\n     * \r\n     * NB: This is case sensitive\r\n     */\r\n    replaceAllMatchCase: function(text, replaceFrom, replaceTo) {\r\n        var regEx = new RegExp(replaceFrom, \"g\");\r\n        return text.replace(regEx, replaceTo);\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {String} field to find the value for \r\n     * @param {String} text that contains a list of fields and values \r\n     * @returns returns field values\r\n     * \r\n     * Example text:\r\n     * \r\n     * Name: rahman mahmoodi\r\n     * Position: Tech\r\n     * Company: ValueFlow\r\n     * \r\n     * findFieldValue(\"Position\", text)\r\n     */\r\n    findFieldValue: function(field, text) {\r\n        return this._findFeildValue(field, text, \":\");\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {String} field to find the value for \r\n     * @param {String} text that contains a list of fields and values \r\n     * @param {String} delimiter to be used to split the string based\r\n     * @returns returns field values\r\n     * \r\n     * Example text:\r\n     * \r\n     * Name: rahman mahmoodi\r\n     * Position: Tech\r\n     * Company: ValueFlow\r\n     * \r\n     * findFieldValue(\"Position\", text, \":\")\r\n     */\r\n    findFieldValue: function(field, text, delimiter) {\r\n        return this._findFeildValue(field, text, delimiter);\r\n    },\r\n\r\n    _findFeildValue: function(field, text, delimiter) {\r\n        if (!field || !text || !delimiter) return \"\";\r\n\r\n        var result = '';\r\n        var regExp = new RegExp(field + delimiter + '(.*)', 'g');\r\n        var match = text.match(regExp);\r\n        if (match && match.length > 0) {\r\n            var fieldList = match[0].split(delimiter);\r\n            if (fieldList.length > 1) {\r\n                result = fieldList[1].replace(/[\\[\\]]/g, '');\r\n                result = result.trim();\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {String} email to validate \r\n     * @returns returns true if valid email\r\n     */\r\n    isValidEmail: function(email) {\r\n        if (!email) return false;\r\n        var pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return pattern.test(email.toLowerCase());\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {number} number to validate \r\n     * @returns returns true if the number is a positive integer\r\n     */\r\n    isInteger: function(number) {\r\n        if (!number) return false;\r\n        var regex = /^\\d+$/;\r\n        return regex.test(number);\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {number} number to validate \r\n     * @returns returns true if the number is a decimal digit\r\n     * \r\n     * NB: This will match all the numbers in the form of \r\n     * \r\n     * \t3.14529, -255.34, 128, 1.9e10, 123,340.00\r\n     */\r\n    isDecimal: function(number) {\r\n        if (!number) return false;\r\n        var regex = /^-?\\d+(,\\d+)*(\\.\\d+(e\\d+)?)?$/;\r\n        return regex.test(number);\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {String} password to validate \r\n     * @returns returns true if the password contains One or More Upper, one or more Lower, and one or more Special character,\r\n     * one or more numbers, and minimum of 8 characters\r\n     * \r\n     * Example: Pa$$word1!\r\n     */\r\n    isStrongPassword: function(password) {\r\n        if (!password) return false;\r\n        // positive look ahead to check for each condition\r\n        var regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n        return regex.test(password);\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {Regex} regex : regex to execute. Regex should include groups\r\n     * @param {string} text : text to execute the regex on \r\n     * @returns returns an array of all groups identified via regex\r\n     * Example: var reg = new RegexUtils();\r\n     * var groups = reg.executeGroups(/(\\d{4})(\\d{3})(\\d{3})/gm, \"0423394881\");\r\n\t *\r\n\t * Or find all numbers in a string\r\n\t * var reg = new RegexUtils();\r\n\t * var result = reg.executeGroups(/\\b\\d+\\b/g, 'A string with 3 numbers in it... 42 and 88.');\r\n     */\r\n    executeGroups: function(regex, text) {\r\n        if (!regex || !text) return null;\r\n\r\n        var groups = [];\r\n\r\n        while ((m = regex.exec(text)) !== null) {\r\n            // This is necessary to avoid infinite loops with zero-width matches\r\n            if (m.index === regex.lastIndex) {\r\n                regex.lastIndex++;\r\n            }\r\n\r\n            // The result can be accessed through the `m`-variable.\r\n            m.forEach(function(match, groupIndex) {\r\n                if (match) {\r\n                    groups.push(match);\r\n                }\r\n            });\r\n        }\r\n\r\n        return groups;\r\n    },\r\n\r\n    type: 'RegexUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Regex utils",
        "scriptFiles": [
          "RegexUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Regex%20utils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Regex%20utils/RegexUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.805Z",
    "updatedAt": "2025-09-21T08:58:58.448Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 272,
    "type": "script_include",
    "name": "Records Calculator",
    "description": "Records Calculator Provides functions to easily calculate values across multiple records This class provides shortcut functions that works in both Client and Server sides.",
    "script": "/* \r\n * RecordsCalculator \r\n * \r\n * Provides functions to easily calculate values across multiple records\r\n * The functions work in both Client and Server scripts.\r\n */\r\nvar RecordsCalculator = Class.create();\r\nRecordsCalculator.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\r\n\r\n\r\n    _getAggregateByType: function (in_tableName, pColumn, pEncodedQuery, pAggregateType) {\r\n        var ga = new GlideAggregate(in_tableName);\r\n        if (pEncodedQuery) {\r\n            ga.addQuery(pEncodedQuery);\r\n        }\r\n        ga.setGroup(false);\r\n        //ga.setOrder(false);\r\n        ga.addAggregate(pAggregateType, pColumn);\r\n        ga.query();\r\n        if (ga.next()) {\r\n            return ga.getAggregate(pAggregateType, pColumn);\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieve the parameters value independently of where they come from: passed as parameters or in the Ajax call\r\n     */\r\n    _getParameters: function (in_tableName, in_fieldName, in_encodedQuery) {\r\n        var tableName = global.JSUtil.nil(in_tableName) ? this.getParameter('sysparm_tableName') : in_tableName;\r\n        var fieldName = global.JSUtil.nil(in_fieldName) ? this.getParameter('sysparm_fieldName') : in_fieldName;\r\n        var encodedQuery = global.JSUtil.nil(in_encodedQuery) ? this.getParameter('sysparm_encodedQuery') : in_encodedQuery;\r\n        return {\r\n            tableName: tableName,\r\n            fieldName: fieldName,\r\n            encodedQuery: encodedQuery\r\n        };\r\n    },\r\n\r\n    getMin: function (in_tableName, in_fieldName, in_encodedQuery) {\r\n        var param = this._getParameters(in_tableName, in_fieldName, in_encodedQuery);\r\n        return this._getAggregateByType(param.tableName, param.fieldName, param.encodedQuery, 'MIN');\r\n    },\r\n\r\n    getMax: function (in_tableName, in_fieldName, in_encodedQuery) {\r\n        var param = this._getParameters(in_tableName, in_fieldName, in_encodedQuery);\r\n        return this._getAggregateByType(param.tableName, param.fieldName, param.encodedQuery, 'MAX');\r\n    },\r\n\r\n    getAvg: function (in_tableName, in_fieldName, in_encodedQuery) {\r\n        var param = this._getParameters(in_tableName, in_fieldName, in_encodedQuery);\r\n        return this._getAggregateByType(param.tableName, param.fieldName, param.encodedQuery, 'AVG');\r\n    },\r\n\r\n    getSum: function (in_tableName, in_fieldName, in_encodedQuery) {\r\n        var param = this._getParameters(in_tableName, in_fieldName, in_encodedQuery);\r\n        return this._getAggregateByType(param.tableName, param.fieldName, param.encodedQuery, 'SUM');\r\n    },\r\n\r\n    type: 'RecordsCalculator'\r\n});",
    "metadata": {
      "application": "built",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Records Calculator",
        "scriptFiles": [
          "RecordsCalculator.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Records%20Calculator",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Records%20Calculator/RecordsCalculator.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.801Z",
    "updatedAt": "2025-09-21T08:58:58.444Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 271,
    "type": "script_include",
    "name": "RecordProducerVariableUtils",
    "description": "RecordProducerVariableUtils The RecordProducerVariableUtils Script Include provides a utility function to dynamically create and associate variables with a specific record in ServiceNow. This function is designed to work with ServiceNow's Variable Editor to make created variables accessible and visible on record forms. Methods",
    "script": "var RecordProducerVariableUtils = Class.create();\r\n\r\n// Method to create a new variable\r\n// by providing target GlideRecord, variable order, and variable (question) sys_id\r\nRecordProducerVariableUtils.createVariable = function(currentGr, order, questionId) {\r\n\r\n    // Get table name and the sys_id of the record\r\n    var recordId = currentGr.getUniqueValue();\r\n    var tableName = currentGr.getTableName();\r\n\r\n\t// Create variable and associate it with the record so that it can be visible via Variable Editor\r\n    var variableGr = new GlideRecord('question_answer');\r\n    variableGr.initialize();\r\n    variableGr.setValue('order', order);\r\n    variableGr.setValue('question', questionId);\r\n    variableGr.setValue('table_name', tableName);\r\n    variableGr.setValue('table_sys_id', recordId);\r\n    \r\n\treturn variableGr.insert();\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/RecordProducerVariableUtils",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/RecordProducerVariableUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/RecordProducerVariableUtils/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.797Z",
    "updatedAt": "2025-09-21T08:58:58.441Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 270,
    "type": "script_include",
    "name": "PullEmptySerialNumberAssetRecords",
    "description": "Overview The getAssetRecord Script Include is designed to identify records in the almasset table that are missing a serialnumber. This functionality is crucial for maintaining the integrity of asset management data, as it ensures that all assets have complete and accurate information. The script executes a query to detect assets with a missing serialnumber and returns a summary that includes th...",
    "script": "var getAssetRecord = Class.create();\r\ngetAssetRecord.prototype = {\r\n    initialize: function() {},\r\n\t\r\n   assetRecord: function() {\r\n        try { \r\n\t\t\tvar tableName= \"alm_asset\";\r\n            var result = [];\r\n            var ruleDescription = \"Records in Asset with missing Serial Number\";\r\n\r\n            // GlideRecord query to get all assets with missing Serial Number\r\n            var grAsset = new GlideRecordSecure(tableName);\r\n            grAsset.addEncodedQuery('serial_numberEMPTY'); // Checking for missing serial numbers\r\n            grAsset.query();\r\n\r\n            var count = grAsset.getRowCount(); // Count of records with missing serial numbers\r\n\r\n            // Get the instance URL\r\n            var instanceUrl = gs.getProperty('glide.servlet.uri'); // Get the instance's base URL\r\n            var url = instanceUrl + 'alm_asset_list.do?sysparm_query=serial_numberEMPTY'; // Complete URL for assets with missing serial number\r\n\r\n            // Create the object with required fields and push to result array\r\n            result.push({\r\n                ruleDescription: ruleDescription,\r\n                count: count,\r\n                tableName: tableName,\r\n                url: url\r\n            });\r\n\r\n            // Return the result as a JSON string\r\n            return JSON.stringify(result);\r\n        } catch (e) {\r\n            // Log the error in case something goes wrong\r\n            var message = 'In INHUB_0198 method, failure could be due to ' + e.message;\r\n            return [\"Error\", message];\r\n        }\r\n    },\r\n    type: 'getAssetRecord'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/PullEmptySerialNumberAssetRecords",
        "scriptFiles": [
          "pull_empty_serial_number_record.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/PullEmptySerialNumberAssetRecords",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/PullEmptySerialNumberAssetRecords/pull_empty_serial_number_record.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.794Z",
    "updatedAt": "2025-09-21T08:58:58.437Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 269,
    "type": "script_include",
    "name": "Public Script Include search",
    "description": "Find public Script Includes The snippet helps to find public Script Includes (can be executed by a non-logged-in user) and check their security later manually. Such Script Include can be called from a public page (e.g. login.do page) in the browser console.",
    "script": "var publicSIArr = [];\r\nvar nonPublicSIArr = [];\r\nvar currentScope = gs.getCurrentScopeName() == 'rhino.global' ? 'global' : gs.getCurrentScopeName();\r\n\r\nvar scriptIncludeGR = new GlideRecord('sys_script_include');\r\nscriptIncludeGR.addActiveQuery();\r\nscriptIncludeGR.addQuery('client_callable', true);\r\nscriptIncludeGR.addQuery('sys_scope.scope', currentScope).addOrCondition('access', '!=', 'package_private');\r\nscriptIncludeGR.query();\r\nwhile (scriptIncludeGR.next()) {\r\n\tvar apiNameArr = scriptIncludeGR.getValue('api_name').split('.');\r\n\tvar scope = apiNameArr[0];\r\n\tvar name = apiNameArr[1];\r\n\r\n\ttry {\r\n\t\tvar klass = this[scope][name].prototype;\r\n\r\n\t\tif (typeof klass.isPublic === 'function') {\r\n\t\t\tvar isPublic = klass.isPublic();\r\n\r\n\t\t\tif (isPublic === true) {\r\n\t\t\t\tpublicSIArr.push(name);\r\n\t\t\t} else {\r\n\t\t\t\tnonPublicSIArr.push(name);\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tgs.log(name + ' ' + e);\r\n\t}\r\n}\r\n\r\ngs.log('Count of public Script Includes: ' + publicSIArr.length);\r\ngs.log('Public Script Includes: ' + publicSIArr.toString());\r\ngs.log('Count of explicitly non-public Script Includes: ' + nonPublicSIArr.length);\r\ngs.log('Explicitly non-public Script Includes: ' + nonPublicSIArr.toString());",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Public Script Include search",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Public%20Script%20Include%20search",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Public%20Script%20Include%20search/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.789Z",
    "updatedAt": "2025-09-21T08:58:58.434Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 268,
    "type": "script_include",
    "name": "Project Base Line",
    "description": "// Sample code to pull the latest planned baseline tasks list of each project. It will fetch the list and push it an array.",
    "script": "var LatestBaselineList = Class.create();\r\nLatestBaselineList.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n    runReport: function() {\r\n\r\nvar answer=[];\r\n        var prj = new GlideRecord('pm_project');\r\n        prj.addEncodedQuery('stateIN-5,2');\r\n        prj.query();\r\n\r\n        while (prj.next()) {\r\n            var base = prj.getValue('sys_id');\r\n            var plannedBLines = new GlideRecord('planned_task_baseline');\r\n            plannedBLines.addQuery('top_task', base);\r\n            //plannedBLines.addEncodedQuery('task.key_LatestBaselineList=true^task.top_task.state=2');\r\n            plannedBLines.orderByDesc('sys_created_on');\r\n            //plannedBLines.setLimit(1);\r\n\t\t\t\r\n            plannedBLines.query();\r\n            if (plannedBLines.next()) {\r\n                var baseLineId = plannedBLines.getValue('sys_id');\r\n                var baseLineName = plannedBLines.baseline.name;\r\n\t\t\t\tanswer.push(baseLineId);\r\n\t\t\t\t\r\n            }\r\n           \r\n\t}\r\n\t\treturn answer;\r\n        \r\n    },\r\n\r\n    type: 'LatestBaselineList'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Project Base Line",
        "scriptFiles": [
          "latestPlannedBaseline.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Project%20Base%20Line",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Project%20Base%20Line/latestPlannedBaseline.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.786Z",
    "updatedAt": "2025-09-21T08:58:58.430Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 267,
    "type": "script_include",
    "name": "PII Redactor",
    "description": "There are many implementations where there is a need to redact PII data from servicenow tables as par of audit requirements. e.g Instances may have catalog item for the newly onboarded users to order hardware equirement. This catalog item will contain variable to store shipping information of users which is PII data.",
    "script": "var piiRedaction = Class.create();\r\npiiRedaction.prototype = {\r\n    initialize: function() {},\r\n\r\n    redactPii: function(tableName, record, piiData) {\r\n\r\n        //store the parameters as variables\r\n\r\n        if (tableName != undefined) {\r\n            var table = tableName;\r\n        } else {\r\n            return gs.log('tableName required', 'piiRedaction');\r\n        }\r\n\r\n        if (record != undefined) {\r\n            var record = record;\r\n        } else {\r\n            return gs.log('sysId required', 'piiRedaction');\r\n        }\r\n\r\n        if (piiData != undefined) {\r\n            var piiData = piiData;\r\n        } else {\r\n            return gs.log('piiData required', 'piiRedaction');\r\n        }\r\n\r\n\r\n        //variables for use in queries locating the records that need to be deleted\r\n\r\n        var grAudit;\r\n        var grJournal;\r\n        var grEmail;\r\n        var grHistory;\r\n        var grVariables;\r\n        var recordNumber;\r\n\r\n        //get the record\r\n\r\n        var gr = new GlideRecord(table);\r\n        gr.get(record);\r\n\r\n        //if the record has a number store it for later use\r\n\r\n        if (gr.getValue('number')) {\r\n            recordNumber = gr.getValue('number');\r\n        }\r\n\r\n        //locate the Journal records where the element_id matches the sys_id of the record being redacted and the value contains the piiData being redacted\r\n\r\n        grJournal = new GlideRecord('sys_journal_field');\r\n        grJournal.addQuery('element_id', record);\r\n        grJournal.addQuery('value', 'CONTAINS', piiData);\r\n        grJournal.query();\r\n\r\n        grJournal.deleteMultiple();\r\n\r\n\r\n        //If removing piiData from a specific field, not a variable, locate the Audit records.  Query for any records where the document key is the sys_id of the record being redacted and the piiData shows in either the new or old value\r\n\r\n        grAudit = new GlideRecord('sys_audit');\r\n        grAudit.addEncodedQuery('documentkey=' + record + '^oldvalueLIKE' + piiData + '^ORnewvalueLIKE' + piiData);\r\n        grAudit.query();\r\n\r\n        grAudit.deleteMultiple();\r\n\r\n\r\n        //Locate the History Records.  All history records for the record need to be removed so they can be regenerated when the history set is loaded again\r\n\r\n        grHistory = new GlideRecord('sys_history_set');\r\n        grHistory.addQuery('id', record);\r\n        grHistory.query();\r\n\r\n        grHistory.deleteMultiple();\r\n\r\n        //if deleting piiData from a variable look up all records on the SC Item Option Mtom table where the request_item.number is the number of the RITM being redacted and the variable name matches the variables name passed into the function\r\n\r\n        if (recordNumber != undefined) {\r\n            grVariables = new GlideRecord('sc_item_option_mtom');\r\n            grVariables.addEncodedQuery('request_item.numberSTARTSWITH' + recordNumber + '^sc_item_option.value=' + piiData);\r\n            grVariables.query();\r\n\r\n            grVariables.deleteMultiple();\r\n        }\r\n\r\n        var grActivity = new GlideRecord('sys_activity');\r\n        grActivity.addQuery('document_id', record);\r\n        grActivity.addQuery('payload', 'CONTAINS', piiData);\r\n        grActivity.query();\r\n\r\n        grActivity.deleteMultiple();\r\n\r\n        //locate the email records associated to the record being redacted where the body contain the piiData\r\n        grEmail = new GlideRecord('sys_email');\r\n        grEmail.addQuery('instance', record);\r\n        grEmail.addQuery('body', 'CONTAINS', piiData);\r\n        grEmail.query();\r\n\r\n        grEmail.deleteMultiple();\r\n    },\r\n\r\n    piiRedactField: function(table, record, field, piiData) {\r\n        if (table != undefined) {\r\n            var table = table;\r\n        } else {\r\n            return gs.log('Table required', 'piiRedaction');\r\n        }\r\n        if (record != undefined) {\r\n            var record = record;\r\n        } else {\r\n            return gs.log('Record sys_id required', 'piiRedaction');\r\n        }\r\n        if (field != undefined) {\r\n            var field = field;\r\n        } else {\r\n            return gs.log('Field name required', 'piiRedaction');\r\n        }\r\n        if (piiData != undefined) {\r\n            var piiData = piiData;\r\n        } else {\r\n            return gs.log('piiData string required', 'piiRedaction');\r\n        }\r\n\r\n        //variables for use in queries locating the records that need to be deleted\r\n\r\n        var grAudit;\r\n        var grJournal;\r\n        var grEmail;\r\n        var grHistory;\r\n        var grVariables;\r\n        var recordNumber;\r\n\r\n        //get the record\r\n\r\n        var gr = new GlideRecord(table);\r\n        gr.get(record);\r\n\r\n        //if the record has a number store it for later use\r\n\r\n        if (gr.getValue('number')) {\r\n            recordNumber = gr.getValue('number');\r\n        }\r\n\r\n        //locate the Journal records where the element_id matches the sys_id of the record being redacted and the value contains the piiData being redacted\r\n\r\n        grJournal = new GlideRecord('sys_journal_field');\r\n        grJournal.addQuery('element_id', record);\r\n        grJournal.addQuery('value', 'CONTAINS', piiData);\r\n        grJournal.query();\r\n\r\n        grJournal.deleteMultiple();\r\n\r\n\r\n        //If removing piiData from a specific field, not a variable, locate the Audit records.  Query for any records where the document key is the sys_id of the record being redacted and the piiData shows in either the new or old value\r\n\r\n        grAudit = new GlideRecord('sys_audit');\r\n        grAudit.addEncodedQuery('fieldname=' + field + 'documentkey=' + record + '^oldvalueLIKE' + piiData + '^ORnewvalueLIKE' + piiData);\r\n        grAudit.query();\r\n\r\n        grAudit.deleteMultiple();\r\n\r\n\r\n        //Locate the History Records.  All history records for the record need to be removed so they can be regenerated when the history set is loaded again\r\n\r\n        grHistory = new GlideRecord('sys_history_set');\r\n        grHistory.addQuery('id', record);\r\n        grHistory.query();\r\n\r\n        grHistory.deleteMultiple();\r\n\r\n        //if deleting piiData from a variable look up all records on the SC Item Option Mtom table where the request_item.number is the number of the RITM being redacted and the variable name matches the variables name passed into the function\r\n\r\n        if (recordNumber != undefined && table == 'sc_req_item') {\r\n            grVariables = new GlideRecord('sc_item_option_mtom');\r\n            grVariables.addEncodedQuery('request_item.numberSTARTSWITH' + recordNumber + '^sc_item_option.value=' + piiData);\r\n            grVariables.query();\r\n\r\n            grVariables.deleteMultiple();\r\n        }\r\n\r\n\r\n        //locate the email records associated to the record being redacted where the body contain the piiData\r\n        grEmail = new GlideRecord('sys_email');\r\n        grEmail.addQuery('instance', record);\r\n        grEmail.addQuery('body', 'CONTAINS', piiData);\r\n        grEmail.query();\r\n\r\n        grEmail.deleteMultiple();\r\n\r\n        var grActivity = new GlideRecord('sys_activity');\r\n        grActivity.addQuery('document_id', record);\r\n        grActivity.addQuery('payload', 'CONTAINS', piiData);\r\n        grActivity.query();\r\n\r\n        grActivity.deleteMultiple();\r\n\r\n        if (gr.getValue(field) == piiData) {\r\n            gr.setValue(field, 'NULL');\r\n            gr.update();\r\n        }\r\n    },\r\n\r\n    piiRedactRp: function(table, record, piiData) {\r\n        if (table != undefined) {\r\n            var table = table;\r\n        } else {\r\n            return gs.log('Table name required', 'piiRedactRp');\r\n        }\r\n\r\n        if (record != undefined) {\r\n            var record = record;\r\n        } else {\r\n            return gs.log('Record sys_id required', 'piiRedactRp');\r\n        }\r\n\r\n        if (piiData != undefined) {\r\n            var piiData = piiData;\r\n        } else {\r\n            return gs.log('piiData string required', 'piiRedactRp');\r\n        }\r\n\r\n        //variables for use in queries locating the records that need to be deleted\r\n\r\n        var grAudit;\r\n        var grJournal;\r\n        var grEmail;\r\n        var grHistory;\r\n\r\n        //get the record\r\n\r\n        var gr = new GlideRecord(table);\r\n        gr.get(record);\r\n\r\n        //if the record has a number store it for later use\r\n\r\n        if (gr.getValue('number')) {\r\n            recordNumber = gr.getValue('number');\r\n        }\r\n\r\n        //locate the Journal records where the element_id matches the sys_id of the record being redacted and the value contains the piiData being redacted\r\n\r\n        grJournal = new GlideRecord('sys_journal_field');\r\n        grJournal.addQuery('element_id', record);\r\n        grJournal.addQuery('value', 'CONTAINS', piiData);\r\n        grJournal.query();\r\n\r\n        grJournal.deleteMultiple();\r\n\r\n        //locate the Audit records.  Query for any records where the document key is the sys_id of the record being redacted and the piiData shows in either the new or old value\r\n\r\n        grAudit = new GlideRecord('sys_audit');\r\n        grAudit.addEncodedQuery('documentkey=' + record + '^oldvalueLIKE' + piiData + '^ORnewvalueLIKE' + piiData);\r\n        grAudit.query();\r\n\r\n        grAudit.deleteMultiple();\r\n\r\n        //Locate the History Records.  All history records for the record need to be removed so they can be regenerated when the history set is loaded again\r\n\r\n        grHistory = new GlideRecord('sys_history_set');\r\n        grHistory.addQuery('id', record);\r\n        grHistory.query();\r\n\r\n        grHistory.deleteMultiple();\r\n\r\n        //locate the Question/Answer records for the record producer\r\n        var grQA = new GlideRecord('question_answer');\r\n        grQA.addQuery('table_sys_id', record);\r\n        grQA.addQuery('value', piiData);\r\n        grQA.query();\r\n\r\n        grQA.deleteMultiple();\r\n\r\n        var grActivity = new GlideRecord('sys_activity');\r\n        grActivity.addQuery('document_id', record);\r\n        grActivity.addQuery('payload', 'CONTAINS', piiData);\r\n        grActivity.query();\r\n\r\n        grActivity.deleteMultiple();\r\n\r\n        //locate the email records associated to the record being redacted where the body contain the piiData\r\n        grEmail = new GlideRecord('sys_email');\r\n        grEmail.addQuery('instance', record);\r\n        grEmail.addQuery('body', 'CONTAINS', piiData);\r\n        grEmail.query();\r\n\r\n        grEmail.deleteMultiple();\r\n\r\n    },\r\n\r\n    piiRedactQa: function(record, variableName) {\r\n\r\n        if (record != undefined) {\r\n            var record = record;\r\n        } else {\r\n            return gs.log('Record sys_id required', 'piiRedactRp');\r\n        }\r\n\r\n        if (piiData != undefined) {\r\n            var piiData = piiData;\r\n        } else {\r\n            return gs.log('piiData string required', 'piiRedactRp');\r\n        }\r\n\r\n        var gr = new GlideRecord('question_answer');\r\n        gr.addEncodedQuery('table_sys_id=' + record + '^question.name=' + variableName);\r\n        gr.query();\r\n\r\n\t\twhile(gr.next()) {\r\n\r\n\t\tvar piiData = gr.getValue('value');\t\r\n        \r\n\t\tgr.deleteRecord();\r\n\t\t}\r\n\t\t\r\n        var grActivity = new GlideRecord('sys_activity');\r\n        grActivity.addQuery('document_id', record);\r\n        grActivity.addQuery('payload', 'CONTAINS', piiData);\r\n        grActivity.query();\r\n\r\n        grActivity.deleteMultiple();\r\n    },\r\n    type: 'piiRedaction'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/PII Redactor",
        "scriptFiles": [
          "piiRedaction.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/PII%20Redactor",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/PII%20Redactor/piiRedaction.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.781Z",
    "updatedAt": "2025-09-21T08:58:58.426Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 266,
    "type": "script_include",
    "name": "PerformanceAnalyticsUtils",
    "description": "Performance Analytics Utils A Script Include to gather methods for handling Performance Analytics subjects. Typical use case is to be invoked by PA Scripts (for custom aggregation or breakdown mappings). getCmdbClassTableNames",
    "script": "var PerformanceAnalyticsUtils = Class.create();\r\nPerformanceAnalyticsUtils.prototype = {\r\n\t\r\n    initialize: function() {\r\n    },\r\n\r\n\t/**SNDOC\r\n\t\t@name getCmdbClassTableNames\r\n\t\t@description Retrieve an array of all the child classes from a start class\r\n\t\t\r\n\t\t@param {string} [startClassTableName]\r\n\t\t\r\n\t\t@returns {array} An array of all child classes from the start class downwards\r\n\t*/\r\n\t\r\n\tgetCmdbClassTableNames: function(startClassTableName) {\r\n\t\t\r\n\t\tvar dbObjectIds = [];\r\n\t\t\r\n\t\t// From the start table sys_class_path, get the child tables\r\n\t\t\r\n\t\tvar grDbObjectStart = new GlideRecord('sys_db_object');\r\n\t\tif (grDbObjectStart.get('name', startClassTableName)) {\r\n\t\t\t\r\n\t\t\tvar grDbObjectChild = new GlideRecord('sys_db_object');\r\n\t\t\tgrDbObjectChild.addQuery('sys_class_path', 'CONTAINS', grDbObjectStart.getValue('sys_class_path'));\r\n\t\t\tgrDbObjectChild.query();\r\n\t\t\r\n\t\t\t// Put all the child table sys_id's into the returned array\r\n\t\t\twhile (grDbObjectChild.next()) {\r\n\t\t\t\tdbObjectIds.push(grDbObjectChild.getUniqueValue());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn dbObjectIds;\r\n\t\t\r\n\t},\t\r\n    type: 'PerformanceAnalyticsUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/PerformanceAnalyticsUtils",
        "scriptFiles": [
          "PerformanceAnalyticsUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/PerformanceAnalyticsUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/PerformanceAnalyticsUtils/PerformanceAnalyticsUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.777Z",
    "updatedAt": "2025-09-21T08:58:58.423Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 265,
    "type": "script_include",
    "name": "Password Generator with specific length",
    "description": "Generates a random password with a specified length NOTE: There is a OOTB script that generates password but length is between 8 to 10 characters. However, if you need a simple password generator with specified length you can use this. Example",
    "script": "var PasswordGenerator = Class.create();\r\nPasswordGenerator.prototype = {\r\n    initialize: function() {},\r\n\r\n    //\r\n    // Input: Minimum password length that is required\r\n\t// Returns a random password for the min length specified\r\n    //\r\n    generate: function(givenPasswordLength) {\r\n        var specials = '!@#$%&*()_+<>[].~';\r\n        var lowercase = 'abcdefghijklmnopqrstuvwxyz';\r\n        var uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        var numbers = '0123456789';\r\n        var all = specials + lowercase + uppercase + numbers;\r\n\r\n        String.prototype.pick = function(min, max) {\r\n            var n, chars = '';\r\n            if (typeof max === 'undefined') {\r\n                n = min;\r\n            } else {\r\n                n = min + Math.floor(Math.random() * (max - min));\r\n            }\r\n            for (var i = 0; i < n; i++) {\r\n                chars += this.charAt(Math.floor(Math.random() * this.length));\r\n            }\r\n            return chars;\r\n        };\r\n\r\n\r\n        String.prototype.shuffle = function() {\r\n            var array = this.split('');\r\n            var tmp, current, top = array.length;\r\n\r\n            if (top)\r\n                while (--top) {\r\n                    current = Math.floor(Math.random() * (top + 1));\r\n                    tmp = array[current];\r\n                    array[current] = array[top];\r\n                    array[top] = tmp;\r\n                }\r\n            return array.join('');\r\n        };\r\n\r\n        //adjust the pick numbers here to increase or decrease password strength\r\n        var ent = givenPasswordLength - 4;\r\n        if (ent < 0) {\r\n            ent = 0;\r\n        }\r\n\r\n        var password = (specials.pick(1) + lowercase.pick(1) + uppercase.pick(1) + numbers.pick(1) + all.pick(ent)).shuffle();\r\n        return (password + '');\r\n    },\r\n\r\n\r\n    type: 'PasswordGenerator'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Password Generator with specific length",
        "scriptFiles": [
          "PasswordGenerator.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Password%20Generator%20with%20specific%20length",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Password%20Generator%20with%20specific%20length/PasswordGenerator.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.774Z",
    "updatedAt": "2025-09-21T08:58:58.419Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 264,
    "type": "script_include",
    "name": "OrderedRecords",
    "description": "ArtifactRank Script Include that helps with getting the next spaced out ordering Example Script",
    "script": "var ArtifactRank = Class.create();\r\nArtifactRank.prototype = {\r\n    initialize: function() {\r\n    },\r\n\t\r\n\tgetNextRank: function(field) {\r\n\t\tvar gr = new GlideRecord('TABLENAME'); \r\n\t\tgr.addQuery('state', '!=', 'published'); \r\n\t\tgr.addNotNullQuery(field); \r\n\t\tgr.orderByDesc(field); \r\n\t\tgr.setLimit(1);\r\n\t\tgr.query(); \r\n\t\t\r\n\t\tif (gr.next()) {\r\n\t\t\t// Round up to nearest 10\r\n\t\t\tvar nextRank = parseInt(gr.getValue(field)) + 10; \r\n\t\t\treturn Math.round(nextRank / 10) * 10; \r\n\t\t} else {\r\n\t\t\treturn 10; \r\n\t\t}\r\n\t},\r\n\r\n    type: 'ArtifactRank'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/OrderedRecords",
        "scriptFiles": [
          "orderedRecords.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/OrderedRecords",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/OrderedRecords/orderedRecords.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.770Z",
    "updatedAt": "2025-09-21T08:58:58.415Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 263,
    "type": "script_include",
    "name": "OAuth token helper",
    "description": "Helps to get Refresh Token based on username and password or get the Access Token based on the Refresh Token To be noted that this is using the new ES2021 feature. So if your instance is upgraded to Xanadu or you are using a Scoped App that already enabled the ES2021 then this Script Include can be used. Example",
    "script": "class OAuthTokenHelper {\r\n\r\n    /**\r\n     * Returns the access token and refresh token for the given OAuth profile id and credentials\r\n     * @param {String} oauth_profile_id - The sys_id of the OAuth profile\r\n     * @param {String} oAuth_Application_Registry_Name - The name of the OAuth application registry record (oauth_entity)\r\n     * @param {String} requestor_context - Context of the request e.g. Sales Order \r\n     * @param {String} requestor_id - user ID of the sys_user who requests\r\n     * @param {String} username - the username to use for the password grant\r\n     * @param {String} password - the password to use for the password grant\r\n     * @return {Object} an object with accessToken and refreshToken properties\r\n     */\r\n    getRefreshAndAccessTokens(oauth_profile_id, requestor_context, requestor_id, username, password) {\r\n        if (!oauth_profile_id) {\r\n            throw gs.getMessage(\"oauth_profile_id is a required parameter\");\r\n        }\r\n        if (!requestor_context) {\r\n            throw gs.getMessage(\"requestor_context is a required parameter\");\r\n        }\r\n        if (!requestor_id) {\r\n            throw gs.getMessage(\"requestor_id is a required parameter\");\r\n        }\r\n        if (!username) {\r\n            throw gs.getMessage(\"username is a required parameter\");\r\n        }\r\n        if (!password) {\r\n            throw gs.getMessage(\"password is a required parameter\");\r\n        }\r\n\r\n        let oAuthClient = new sn_auth.GlideOAuthClient();\r\n        let params = {\r\n            grant_type: \"password\",\r\n            username: username,\r\n            password: password,\r\n            oauth_requestor_context: requestor_context,\r\n            oauth_requestor: requestor_id,\r\n            oauth_provider_profile: oauth_profile_id\r\n        };\r\n\r\n        let json = new global.JSON();\r\n        let text = json.encode(params);\r\n        let tokenResponse = oAuthClient.requestToken(oAuth_Application_Registry_Name, text); // is the name of the OAuth application registry record (oauth_entity)\r\n        let token = tokenResponse.getToken();\r\n        let accessToken = token.getAccessToken();\r\n        let refreshToken = token.getRefreshToken();\r\n\r\n        return {\r\n            accessToken: accessToken,\r\n            refreshToken: refreshToken\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the access token based on the refresh token\r\n     * @param {String} oauth_profile_id - The sys_id of the OAuth profile (oauth_entity_profile)\r\n     * @param {String} oAuth_Application_Registry_Name - The name of the OAuth application registry record (oauth_entity)\r\n     * @param {String} requestor_context - Context of the request e.g. Sales Order\r\n     * @param {String} requestor_id - user ID of the sys_user who requests\r\n     * @param {String} refreshToken - the refresh token to use for the refresh token grant\r\n     * @return {Object} an object with accessToken and refreshToken properties\r\n     */\r\n    getAccessToken(oauth_profile_id, oAuth_Application_Registry_Name, requestor_context, requestor_id, refreshToken) {\r\n        if (!oauth_profile_id) {\r\n            throw \"oauth_profile_id is a required parameter\";\r\n        }\r\n        if (!requestor_context) {\r\n            throw \"requestor_context is a required parameter\";\r\n        }\r\n        if (!requestor_id) {\r\n            throw \"requestor_id is a required parameter\";\r\n        }\r\n        if (!refreshToken) {\r\n            throw \"refreshToken is a required parameter\";\r\n        }\r\n\r\n        let oAuthClient = new sn_auth.GlideOAuthClient();\r\n        let params = {\r\n            grant_type: \"refresh_token\",\r\n            refresh_token: refreshToken,\r\n            oauth_requestor_context: requestor_context,\r\n            oauth_requestor: requestor_id,\r\n            oauth_provider_profile: oauth_profile_id\r\n        };\r\n\r\n        let json = new global.JSON();\r\n        let text = json.encode(params);\r\n        let tokenResponse = oAuthClient.requestToken(oAuth_Application_Registry_Name, text); // the name of the OAuth application registry record (oauth_entity)\r\n        let token = tokenResponse.getToken();\r\n        let access_Token = token.getAccessToken();\r\n        let refresh_Token = token.getRefreshToken();\r\n\r\n        return {\r\n            accessToken: access_Token,\r\n            refreshToken: refresh_Token\r\n        };\r\n    }\r\n\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/OAuth token helper",
        "scriptFiles": [
          "OAuthTokenHelper.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/OAuth%20token%20helper",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/OAuth%20token%20helper/OAuthTokenHelper.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.766Z",
    "updatedAt": "2025-09-21T08:58:58.412Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 262,
    "type": "script_include",
    "name": "Number Padding",
    "description": "Lets you pad your single digit number for better formating",
    "script": "module.exports.numberPadding = function (value) {\r\n  return String(value).padStart(2, '0');\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Number Padding",
        "scriptFiles": [
          "numberPadding.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Number%20Padding",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Number%20Padding/numberPadding.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.762Z",
    "updatedAt": "2025-09-21T08:58:58.408Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 261,
    "type": "script_include",
    "name": "NotificationUtil",
    "description": "NotificationUtil Quickly format all MRVS variables into a table of your current record into a notification mail scripts by using the NotificationUtil script include. Usage",
    "script": "var notificationUtil = Class.create();\r\nnotificationUtil.prototype = {\r\n    initialize: function () { },\r\n\r\n    //Display Multi-Row Variable Set in a table\r\n    formatMRVS: function (current) {\r\n\r\n        var headers = getMrvsHeaders(current);\r\n        var values = getMrvsValues(current, headers.length);\r\n        var result = \"\";\r\n        result += \"<head><style>table, th, td {border: 1px solid black; text-align:left;}</style></head>\";\r\n        result += '<body><table style=\"border-collapse: collapse; width:75%\"><tbody>';\r\n        result += headers.html; // Print headers\r\n        result += values; // Print values\r\n        result += \"</tbody></table></body>\";\r\n        return result;\r\n    },\r\n\r\n    type: 'notificationUtil'\r\n};\r\n\r\nfunction getMrvsHeaders(gr) {\r\n    var multiVar = new GlideRecord('sc_multi_row_question_answer');\r\n    multiVar.addQuery('parent_id', gr.sys_id.toString());\r\n    multiVar.addQuery('variable_set', '!=', '');\r\n    multiVar.orderBy('row_index');\r\n    multiVar.orderBy('sc_item_option.order');\r\n    multiVar.query();\r\n    var headers = {\r\n        length: 0,\r\n        html: \"\",\r\n        arr: []\r\n    };\r\n    while (multiVar.next()) {\r\n        if (headers.arr.indexOf(multiVar.item_option_new.getDisplayValue()) === -1) {\r\n            headers.arr.push(multiVar.item_option_new.getDisplayValue());\r\n            headers.html = headers.html + \"<th>\" + multiVar.item_option_new.getDisplayValue() + \"</th>\";\r\n            headers.length++;\r\n        }\r\n    }\r\n    headers.html = \"<tr>\" + headers.html + \"</tr>\";\r\n    return headers;\r\n}\r\n\r\nfunction getMrvsValues(gr, headerLength) {\r\n    var multiVar = new GlideRecord('sc_multi_row_question_answer');\r\n    multiVar.addQuery('parent_id', gr.sys_id.toString());\r\n    multiVar.addQuery('variable_set', '!=', '');\r\n    multiVar.orderBy('row_index');\r\n    multiVar.orderBy('sc_item_option.order');\r\n    multiVar.query();\r\n    var values = [];\r\n    while (multiVar.next()) {\r\n        values.push(getDisplayValue(multiVar.value.toString(), multiVar.item_option_new));\r\n    }\r\n    var result = \"\";\r\n    for (var i = 0; i < values.length; i++) {\r\n        result += i % headerLength == 0 ? \"<tr><td> \" + values[i] + \" </td>\" : \"<td> \" + values[i] + \" </td></tr>\";\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction getDisplayValue(rawValue, question) {\r\n    var varType = question.type.toString(), varRefTable = question.reference.toString();\r\n    if (varType == 8) { // Type == Reference\r\n\r\n        var gr = new GlideRecord(varRefTable);\r\n        gr.get(rawValue);\r\n\r\n        return gr.getDisplayValue();\r\n    }\r\n\r\n    else if (varType == 3 || varType == 5) { // Type == Multiple Choice or Select Box\r\n\r\n        var variableName = question.name.toString();\r\n        var questionID = question.sys_id.toString();\r\n\r\n        var qc = new GlideRecord(\"question_choice\");\r\n        qc.addQuery(\"question\", questionID);\r\n        qc.addQuery(\"value\", rawValue);\r\n        qc.query();\r\n\r\n        if (qc.next()) {\r\n            return qc.text;\r\n        }\r\n    } else {\r\n        return rawValue;\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/NotificationUtil",
        "scriptFiles": [
          "NotificationUtil.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/NotificationUtil",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/NotificationUtil/NotificationUtil.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.759Z",
    "updatedAt": "2025-09-21T08:58:58.404Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 260,
    "type": "script_include",
    "name": "Non Prod Instance Password Reset",
    "description": "This script include can reset the password of the non prod instances using Rest integration. Before implementation you should have a admin user credentials for the integration. Follow follwoing steps to implement this script. Step 1: Create Basic Auth Profile Step 2: Go To the sysauthprofilebasic.LIST",
    "script": "var passwordReset = Class.create();\r\npasswordReset.prototype = {\r\n    initialize: function() {},\r\n    nonProdPasswordReset: function(instanceName, userid, password,authProfileName) {\r\n\t\tvar access='';\r\n\t\tvar endpoint = \"https://\"+instanceName+'.service-now.com/api/now/table/sys_user/'+userid+'?sysparm_input_display_value=true';\r\n\t\tvar request2='';\r\n        var auth = new GlideRecord('sys_auth_profile_basic');\r\n        auth.addEncodedQuery('name='+authProfileName);\r\n        auth.query();\r\n        if (auth.next()) {\r\n            access = auth.getValue('sys_id');\r\n        }      \r\n        request2 = new sn_ws.RESTMessageV2();\r\n        request2.setEndpoint(endpoint);\r\n        request2.setHttpMethod('PATCH');\r\n        request2.setAuthenticationProfile(\"basic\", access);\r\n        request2.setRequestHeader(\"Accept\", \"application/json\");\r\n        request2.setRequestHeader('Content-Type', 'application/json');\r\n        var currenttime = new GlideDateTime();\r\n        var pw = password;\r\n\r\n        var js = {};\r\n        js.locked_out = 'false';\r\n        js.password_needs_reset = 'true';\r\n        js.user_password = pw.toString();\r\n\r\n        request2.setRequestBody(JSON.stringify(js));\r\n        var response2 = request2.execute();\r\n        var httpResponseStatus = response2.getStatusCode();\r\n        return(response2.getBody());\r\n    },\r\n    type: 'passwordReset'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Non Prod Instance Password Reset",
        "scriptFiles": [
          "passwordReset.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Non%20Prod%20Instance%20Password%20Reset",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Non%20Prod%20Instance%20Password%20Reset/passwordReset.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.755Z",
    "updatedAt": "2025-09-21T08:58:58.396Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 259,
    "type": "script_include",
    "name": "Match URL with a String",
    "description": "Match URL with a String using Regex This script gets the url using the referer method and matches the substring in the url.",
    "script": "var MatchURLByRegex = Class.create();\r\nMatchURLByRegex.prototype = {\r\n    initialize: function() {},\r\n\t\r\n    matchReferer: function() {\r\n        return ((/YOUR_URL_MATCH_STRING/.test(this.getReferer())));\r\n    },\r\n    \r\n\tgetReferer: function() {\r\n        return GlideTransaction.get().getRequest().getHeader(\"referer\");\r\n    },\r\n    \r\n\ttype: 'MatchURLByRegex'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Match URL with a String",
        "scriptFiles": [
          "MatchURLByRegex.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Match%20URL%20with%20a%20String",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Match%20URL%20with%20a%20String/MatchURLByRegex.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.752Z",
    "updatedAt": "2025-09-21T08:58:58.392Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 258,
    "type": "script_include",
    "name": "ManagerRecursiveUtil",
    "description": "Many teams have a  use case to build reports for executives that shows data related all groups underneath them, such as problem tickets assigned to their reports. The script include return a list of group sysids that roll up to the given leader. This is  client callable script includes and there is a limit the maximum amount of reporting depth, such as 7 users for performance reaasons.",
    "script": "var RecursiveByManager = Class.create();\r\nRecursiveByManager.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n    initialize: function () { },\r\n    maxDepth: 7,\r\n\r\n    getUserSysIds: function (managersName, depth, includeInactive, managerSysId) {\r\n        var managersId;\r\n        if (managersName) {\r\n            managersId = this._getUserSysId(managersName);\r\n        }\r\n        else if (managerSysId) {\r\n            managersId = managerSysId;\r\n        }\r\n\r\n        if (managersId) {\r\n            // No more than max depth of 7. \r\n            if (depth) {\r\n                if (depth > this.maxDepth) {\r\n                    depth = this.maxDepth;\r\n                }\r\n            }\r\n            else {\r\n                depth = this.maxDepth;\r\n            }\r\n\r\n            // Add manager's sys_id to array to get their groups too. \r\n            var arr = [managersId];\r\n            return arr.concat(this._getSubordinate(managersId, depth, includeInactive));\r\n        }\r\n        else { // No user found.\r\n            return 'Manager\\'s name not found.';\r\n        }\r\n    },\r\n\r\n    getGroupSysIds: function (managersName, depth, managerSysId) {\r\n        var arr;\r\n        if (managersName) {\r\n            arr = this.getUserSysIds(managersName, depth, true);\r\n        }\r\n        else if (managerSysId) {\r\n            arr = this.getUserSysIds(null, depth, true, managerSysId);\r\n        }\r\n        else { // No user found.\r\n            return 'Manager not found.';\r\n        }\r\n\r\n        if (arr) {\r\n            return this._getGroups(arr);\r\n        }\r\n        else { // No user found.\r\n            return 'Manager not found.';\r\n        }\r\n    },\r\n\r\n    _getUserSysId: function (managersName) {\r\n        // Get manager's sys_id\r\n        var grUser = new GlideRecord('sys_user');\r\n        grUser.addQuery('name', managersName);\r\n        grUser.setLimit(1);\r\n        grUser.query();\r\n\r\n        if (grUser.next()) {\r\n            return grUser.getValue('sys_id');\r\n        }\r\n        return false;\r\n    },\r\n\r\n    _getSubordinate: function (managerSysId, depth, includeInactive) {\r\n        // Keep digging. \r\n        if (depth > 0) {\r\n            var grUser = new GlideRecord('sys_user'),\r\n                usersSysIds = [],\r\n                newArray = [];\r\n\r\n            depth--;\r\n\r\n            grUser.addEncodedQuery('web_service_access_only=false^manager=' + managerSysId);\r\n            grUser.query();\r\n            while (grUser.next()) {\r\n                // Manager shouldn't be what was passed in. e.g use case where CEO is his,her own manager.\r\n                if (grUser.getValue('sys_id') != managerSysId) {\r\n                    // Do we want just active users? \r\n                    if (!includeInactive) {\r\n                        if (grUser.active) {\r\n                            usersSysIds.push(grUser.getValue('sys_id'));\r\n                        }\r\n                    }\r\n                    else {\r\n                        usersSysIds.push(grUser.getValue('sys_id'));\r\n                    }\r\n                    newArray = this._getSubordinate(grUser.getValue('sys_id'), depth);\r\n                    if (newArray) {\r\n                        usersSysIds = usersSysIds.concat(newArray);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return usersSysIds;\r\n        }\r\n        else { // No more digging. \r\n            return false;\r\n        }\r\n    },\r\n\r\n    _getGroups: function (managerArray) {\r\n        var grGroup = new GlideRecord('sys_user_group'),\r\n            groupSysIds = [];\r\n\r\n        grGroup.addEncodedQuery('active=true^managerIN' + managerArray.join(','));\r\n        grGroup.query();\r\n        while (grGroup.next()) {\r\n            groupSysIds.push(grGroup.getValue('sys_id'));\r\n        }\r\n\r\n        return groupSysIds;\r\n    },\r\n\r\n    type: 'RecursiveByManager'\r\n});\r\n\r\n// Added so this could be called without having to instantiate the class. \r\nRecursiveByManager.getGroupSysIds = function (managerSysId, depth) {\r\n    var util = new RecursiveByManager();\r\n    return util.getGroupSysIds(managerSysId, depth);\r\n};\r\n\r\nRecursiveByManager.getUserSysIds = function (managerSysId, depth) {\r\n    var util = new RecursiveByManager();\r\n    return util.getUserSysIds(managerSysId, depth);\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/ManagerRecursiveUtil",
        "scriptFiles": [
          "RecursiveByManager.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/ManagerRecursiveUtil",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/ManagerRecursiveUtil/RecursiveByManager.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.748Z",
    "updatedAt": "2025-09-21T08:58:58.388Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 257,
    "type": "script_include",
    "name": "Logger",
    "description": "This is the logger module which can be used to log Payloads easily in a more efficient way. This module can be controlled from properties. Here's an explanation of the key components and methods of this Logger Script Include: 1. Constructor (initialize method):",
    "script": "var Logger = Class.create();\r\nLogger.prototype = {\r\n    initialize: function(source) {\r\n       \r\n            this.logging_enabled = gs.getProperty(source + \" update Logging\"); // Property to verify whether logging enabled for the source for example LogicMonitor\r\n            this.payload_logging_enabled = gs.getProperty(source + \" API Requests Logging\"); // Property to verify whether Payload logging enabled for this source for example LogicMonitor\r\n            this.source = source;\r\n        }\r\n    \r\n    },\r\n    infoLog: function(description) {\r\n        if (this.logging_enabled == \"true\") {\r\n            gs.log(description, this.source);\r\n        }\r\n    },\r\n    warnLog: function(description) {\r\n        if (this.logging_enabled == \"true\") {\r\n            gs.logWarning(description, this.source);\r\n        }\r\n    },\r\n    errorLog: function(description) {\r\n        if (this.logging_enabled == \"true\") {\r\n            gs.logError(description, this.source);\r\n        }\r\n    },\r\n    logPayload: function(description) {\r\n        if (this.payload_logging_enabled == \"true\") {\r\n            gs.log(description, this.source);\r\n        }\r\n    },\r\n    type: 'Logger'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Logger",
        "scriptFiles": [
          "Logger.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Logger",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Logger/Logger.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.745Z",
    "updatedAt": "2025-09-21T08:58:58.384Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 256,
    "type": "script_include",
    "name": "ListFieldUtil",
    "description": "ListFieldUtil Script Include that helps with handling list fields, like for example \"Watch List\" on the task table. It doesn't use the typical Class.create, instead it is a simple javascript function.",
    "script": "var ListFieldUtil = function(listFieldVal) {\r\n    if (listFieldVal == null || listFieldVal == undefined) {\r\n        listFieldVal = \"\";\r\n    }\r\n    var _getIdx = function(id) {\r\n        return listFieldVal.split(\",\").indexOf(id);\r\n    };\r\n    var exists = function(id) {\r\n        return _getIdx(id) >= 0;\r\n    };\r\n    var remove = function(id) {\r\n        return listFieldVal.split(\",\").filter(function(fid) {\r\n            return fid != id;\r\n        }).join(\",\");\r\n    };\r\n    var add = function(id) {\r\n        if (!exists(id)) {\r\n            var listFieldArr = listFieldVal.split(\",\");\r\n            listFieldArr.push(id);\r\n            return listFieldArr.join(\",\");\r\n        }\r\n        return listFieldVal;\r\n    };\r\n    return {\r\n        \"exists\": exists,\r\n        \"remove\": remove,\r\n        \"add\": add\r\n    };\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/ListFieldUtil",
        "scriptFiles": [
          "ListFieldUtil.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/ListFieldUtil",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/ListFieldUtil/ListFieldUtil.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.741Z",
    "updatedAt": "2025-09-21T08:58:58.381Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 255,
    "type": "script_include",
    "name": "KBArticleExpPDF",
    "description": "This utility contains a script include which generates PDF export of knowledge article  and this script include handles all HTML formatting of Knowledge article as well. Also, this utility will handle any images attached in KB article body. Sample Script to call this Script Include:",
    "script": "var PolicyPDFHelper = Class.create();\r\nPolicyPDFHelper.prototype = {\r\n    initialize: function () {\r\n    },\r\n\r\n    getPDFBase64: function (kbSysId, landscape) {\r\n        var grKB = new GlideRecord('kb_knowledge'),\r\n            gsattachment = new GlideSysAttachment(),\r\n            body = '',\r\n            text = '';\r\n\r\n        grKB.get(kbSysId);\r\n        text = grKB.getValue('text');\r\n\r\n        var att = this.generatePDFAttachment(text, kbSysId, 'kb_knowledge', kbSysId, landscape);\r\n\r\n        if (att) {\r\n            var retval = this.getAttNameAndBase64(att, true);\r\n\t\t\tif (retval) {\r\n\t\t\t\tif (retval.base64) {\r\n\t\t\t\t\treturn retval.base64;\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n        return false;\r\n    },\r\n\r\n    generatePDFAttachment: function (html, fileName, tableName, recordSysId, landscape) {\r\n        var body = '';\r\n        /* \r\n        PDF exports don't seem to like '/sys_attachment' for images. \r\n        It works in the web interface, but will not export correctly.\r\n        Here I remove the forward slashes which is causing the issue. \r\n        */\r\n        if (html.indexOf('/sys_attachment.do?sys_id') > -1) {\r\n            html = html.replace(/\\/sys_attachment/g, 'sys_attachment');\r\n        }\r\n\r\n        body = (landscape) ? '<style>@page {size: A4 landscape;}</style>' + html : html;\r\n\r\n        // Generate the PDF and attach it to the KB record. \r\n        var att = new sn_pdfgeneratorutils.PDFGenerationAPI().convertToPDF(body, tableName, recordSysId, fileName, '');\r\n        if (att.attachment_id) {\r\n            return att.attachment_id;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    getAttNameAndBase64: function (attSysId, deleteRecord) {\r\n        var grAttachment = new GlideRecord('sys_attachment'),\r\n            gsattachment = new GlideSysAttachment();\r\n        // Get the PDF we just attached. \r\n        if (grAttachment.get(attSysId)) {\r\n            // Get the base64 of the content for the download. \r\n            var attachmentContent = gsattachment.getContentBase64(grAttachment),\r\n                fileName = grAttachment.getValue('file_name');\r\n\r\n            if (attachmentContent) {\r\n                if (deleteRecord) {\r\n                    // Now that we have the base64, let's delete the attachment record. \r\n                    grAttachment.deleteRecord();\r\n                }\r\n                return {\r\n                    'file_name': fileName, 'base64': attachmentContent\r\n                };\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    type: 'PolicyPDFHelper'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/KBArticleExpPDF",
        "scriptFiles": [
          "ArticlePDFHelper.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/KBArticleExpPDF",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/KBArticleExpPDF/ArticlePDFHelper.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.737Z",
    "updatedAt": "2025-09-21T08:58:58.377Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 254,
    "type": "script_include",
    "name": "JSONtoYAML",
    "description": "Hi Everyone, This code is to convert JSON object into Yaml format. To use this please pass the JSON object as below to this function as shown below",
    "script": "(function (self) {\r\n  /*\r\n   * TODO, lots of concatenation (slow in js)\r\n   */\r\n  var spacing = \"  \";\r\n\r\n  function getType(obj) {\r\n    var type = typeof obj;\r\n    if (obj instanceof Array) {\r\n      return 'array';\r\n    } else if (type == 'string') {\r\n      return 'string';\r\n    } else if (type == 'boolean') {\r\n      return 'boolean';\r\n    } else if (type == 'number') {\r\n      return 'number';\r\n    } else if (type == 'undefined' || obj === null) {\r\n      return 'null';\r\n    } else {\r\n      return 'hash';\r\n    }\r\n  }\r\n\r\n  function convert(obj, ret) {\r\n    var type = getType(obj);\r\n\r\n    switch(type) {\r\n      case 'array':\r\n        convertArray(obj, ret);\r\n        break;\r\n      case 'hash':\r\n        convertHash(obj, ret);\r\n        break;\r\n      case 'string':\r\n        convertString(obj, ret);\r\n        break;\r\n      case 'null':\r\n        ret.push('null');\r\n        break;\r\n      case 'number':\r\n        ret.push(obj.toString());\r\n        break;\r\n      case 'boolean':\r\n        ret.push(obj ? 'true' : 'false');\r\n        break;\r\n    }\r\n  }\r\n\r\n  function convertArray(obj, ret) {\r\n    if (obj.length === 0) {\r\n      ret.push('[]');\r\n    }\r\n    for (var i=0; i<obj.length; i++) {\r\n\r\n      var ele     = obj[i];\r\n      var recurse = [];\r\n      convert(ele, recurse);\r\n\r\n      for (var j=0; j<recurse.length; j++) {\r\n        ret.push((j == 0 ? \"- \" : spacing) + recurse[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function convertHash(obj, ret) {\r\n    for (var k in obj) {\r\n      var recurse = [];\r\n      if (obj.hasOwnProperty(k)) {\r\n        var ele = obj[k];\r\n        convert(ele, recurse);\r\n        var type = getType(ele);\r\n        if (type == 'string' || type == 'null' || type == 'number' || type == 'boolean') {\r\n          ret.push(normalizeString(k) + ': ' +  recurse[0]);\r\n        } else {\r\n          ret.push(normalizeString(k) + ': ');\r\n          for (var i=0; i<recurse.length; i++) {\r\n            ret.push(spacing + recurse[i]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function normalizeString(str) {\r\n    if (str.match(/^[\\w]+$/)) {\r\n      return str;\r\n    } else {\r\n      return '\"'+escape(str).replace(/%u/g,'\\\\u').replace(/%U/g,'\\\\U').replace(/%/g,'\\\\x')+'\"';\r\n    }\r\n  }\r\n\r\n  function convertString(obj, ret) {\r\n    ret.push(normalizeString(obj));\r\n  }\r\n\r\n  self.json2yaml = function(obj) {\r\n    if (typeof obj == 'string') {\r\n      obj = JSON.parse(obj);\r\n    }\r\n\r\n    var ret = [];\r\n    convert(obj, ret);\r\n    return ret.join(\"\\n\");\r\n  };\r\n})(this);",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/JSONtoYAML",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/JSONtoYAML",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/JSONtoYAML/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.734Z",
    "updatedAt": "2025-09-21T08:58:58.373Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 253,
    "type": "script_include",
    "name": "JSONPath",
    "description": "JSONPath Plus Analyse, transform, and selectively extract data from JSON documents (and JavaScript objects). jsonpath-plus expands on the original specification to add some additional operators and makes explicit some behaviors the original did not spell out.",
    "script": "(function (global, factory) {\r\n  typeof exports === \"object\" && typeof module !== \"undefined\"\r\n    ? factory(exports)\r\n    : typeof define === \"function\" && define.amd\r\n    ? define([\"exports\"], factory)\r\n    : ((global =\r\n        typeof globalThis !== \"undefined\" ? globalThis : global || self),\r\n      factory((global.JSONPath = {})));\r\n})(this, function (exports) {\r\n  \"use strict\";\r\n\r\n  function _typeof(obj) {\r\n    \"@babel/helpers - typeof\";\r\n\r\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n      _typeof = function (obj) {\r\n        return typeof obj;\r\n      };\r\n    } else {\r\n      _typeof = function (obj) {\r\n        return obj &&\r\n          typeof Symbol === \"function\" &&\r\n          obj.constructor === Symbol &&\r\n          obj !== Symbol.prototype\r\n          ? \"symbol\"\r\n          : typeof obj;\r\n      };\r\n    }\r\n\r\n    return _typeof(obj);\r\n  }\r\n\r\n  function _classCallCheck(instance, Constructor) {\r\n    if (!(instance instanceof Constructor)) {\r\n      throw new TypeError(\"Cannot call a class as a function\");\r\n    }\r\n  }\r\n\r\n  function _inherits(subClass, superClass) {\r\n    if (typeof superClass !== \"function\" && superClass !== null) {\r\n      throw new TypeError(\"Super expression must either be null or a function\");\r\n    }\r\n\r\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n      constructor: {\r\n        value: subClass,\r\n        writable: true,\r\n        configurable: true,\r\n      },\r\n    });\r\n    if (superClass) _setPrototypeOf(subClass, superClass);\r\n  }\r\n\r\n  function _getPrototypeOf(o) {\r\n    _getPrototypeOf = Object.setPrototypeOf\r\n      ? Object.getPrototypeOf\r\n      : function _getPrototypeOf(o) {\r\n          return o.__proto__ || Object.getPrototypeOf(o);\r\n        };\r\n    return _getPrototypeOf(o);\r\n  }\r\n\r\n  function _setPrototypeOf(o, p) {\r\n    _setPrototypeOf =\r\n      Object.setPrototypeOf ||\r\n      function _setPrototypeOf(o, p) {\r\n        o.__proto__ = p;\r\n        return o;\r\n      };\r\n\r\n    return _setPrototypeOf(o, p);\r\n  }\r\n\r\n  function _isNativeReflectConstruct() {\r\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\r\n    if (Reflect.construct.sham) return false;\r\n    if (typeof Proxy === \"function\") return true;\r\n\r\n    try {\r\n      Boolean.prototype.valueOf.call(\r\n        Reflect.construct(Boolean, [], function () {})\r\n      );\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function _construct(Parent, args, Class) {\r\n    if (_isNativeReflectConstruct()) {\r\n      _construct = Reflect.construct;\r\n    } else {\r\n      _construct = function _construct(Parent, args, Class) {\r\n        var a = [null];\r\n        a.push.apply(a, args);\r\n        var Constructor = Function.bind.apply(Parent, a);\r\n        var instance = new Constructor();\r\n        if (Class) _setPrototypeOf(instance, Class.prototype);\r\n        return instance;\r\n      };\r\n    }\r\n\r\n    return _construct.apply(null, arguments);\r\n  }\r\n\r\n  function _isNativeFunction(fn) {\r\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\r\n  }\r\n\r\n  function _wrapNativeSuper(Class) {\r\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\r\n\r\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\r\n      if (Class === null || !_isNativeFunction(Class)) return Class;\r\n\r\n      if (typeof Class !== \"function\") {\r\n        throw new TypeError(\r\n          \"Super expression must either be null or a function\"\r\n        );\r\n      }\r\n\r\n      if (typeof _cache !== \"undefined\") {\r\n        if (_cache.has(Class)) return _cache.get(Class);\r\n\r\n        _cache.set(Class, Wrapper);\r\n      }\r\n\r\n      function Wrapper() {\r\n        return _construct(Class, arguments, _getPrototypeOf(this).constructor);\r\n      }\r\n\r\n      Wrapper.prototype = Object.create(Class.prototype, {\r\n        constructor: {\r\n          value: Wrapper,\r\n          enumerable: false,\r\n          writable: true,\r\n          configurable: true,\r\n        },\r\n      });\r\n      return _setPrototypeOf(Wrapper, Class);\r\n    };\r\n\r\n    return _wrapNativeSuper(Class);\r\n  }\r\n\r\n  function _assertThisInitialized(self) {\r\n    if (self === void 0) {\r\n      throw new ReferenceError(\r\n        \"this hasn't been initialised - super() hasn't been called\"\r\n      );\r\n    }\r\n\r\n    return self;\r\n  }\r\n\r\n  function _possibleConstructorReturn(self, call) {\r\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\r\n      return call;\r\n    }\r\n\r\n    return _assertThisInitialized(self);\r\n  }\r\n\r\n  function _createSuper(Derived) {\r\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n\r\n    return function _createSuperInternal() {\r\n      var Super = _getPrototypeOf(Derived),\r\n        result;\r\n\r\n      if (hasNativeReflectConstruct) {\r\n        var NewTarget = _getPrototypeOf(this).constructor;\r\n\r\n        result = Reflect.construct(Super, arguments, NewTarget);\r\n      } else {\r\n        result = Super.apply(this, arguments);\r\n      }\r\n\r\n      return _possibleConstructorReturn(this, result);\r\n    };\r\n  }\r\n\r\n  function _toConsumableArray(arr) {\r\n    return (\r\n      _arrayWithoutHoles(arr) ||\r\n      _iterableToArray(arr) ||\r\n      _unsupportedIterableToArray(arr) ||\r\n      _nonIterableSpread()\r\n    );\r\n  }\r\n\r\n  function _arrayWithoutHoles(arr) {\r\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\r\n  }\r\n\r\n  function _iterableToArray(iter) {\r\n    if (\r\n      (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null) ||\r\n      iter[\"@@iterator\"] != null\r\n    )\r\n      return Array.from(iter);\r\n  }\r\n\r\n  function _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) return;\r\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\r\n      return _arrayLikeToArray(o, minLen);\r\n  }\r\n\r\n  function _arrayLikeToArray(arr, len) {\r\n    if (len == null || len > arr.length) len = arr.length;\r\n\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n    return arr2;\r\n  }\r\n\r\n  function _nonIterableSpread() {\r\n    throw new TypeError(\r\n      \"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"\r\n    );\r\n  }\r\n\r\n  function _createForOfIteratorHelper(o, allowArrayLike) {\r\n    var it =\r\n      (typeof Symbol !== \"undefined\" && o[Symbol.iterator]) || o[\"@@iterator\"];\r\n\r\n    if (!it) {\r\n      if (\r\n        Array.isArray(o) ||\r\n        (it = _unsupportedIterableToArray(o)) ||\r\n        (allowArrayLike && o && typeof o.length === \"number\")\r\n      ) {\r\n        if (it) o = it;\r\n        var i = 0;\r\n\r\n        var F = function () {};\r\n\r\n        return {\r\n          s: F,\r\n          n: function () {\r\n            if (i >= o.length)\r\n              return {\r\n                done: true,\r\n              };\r\n            return {\r\n              done: false,\r\n              value: o[i++],\r\n            };\r\n          },\r\n          e: function (e) {\r\n            throw e;\r\n          },\r\n          f: F,\r\n        };\r\n      }\r\n\r\n      throw new TypeError(\r\n        \"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"\r\n      );\r\n    }\r\n\r\n    var normalCompletion = true,\r\n      didErr = false,\r\n      err;\r\n    return {\r\n      s: function () {\r\n        it = it.call(o);\r\n      },\r\n      n: function () {\r\n        var step = it.next();\r\n        normalCompletion = step.done;\r\n        return step;\r\n      },\r\n      e: function (e) {\r\n        didErr = true;\r\n        err = e;\r\n      },\r\n      f: function () {\r\n        try {\r\n          if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\r\n        } finally {\r\n          if (didErr) throw err;\r\n        }\r\n      },\r\n    };\r\n  }\r\n\r\n  var hasOwnProp = Object.prototype.hasOwnProperty;\r\n  /**\r\n   * @typedef {null|boolean|number|string|PlainObject|GenericArray} JSONObject\r\n   */\r\n\r\n  /**\r\n   * Copies array and then pushes item into it.\r\n   * @param {GenericArray} arr Array to copy and into which to push\r\n   * @param {any} item Array item to add (to end)\r\n   * @returns {GenericArray} Copy of the original array\r\n   */\r\n\r\n  function push(arr, item) {\r\n    arr = arr.slice();\r\n    arr.push(item);\r\n    return arr;\r\n  }\r\n  /**\r\n   * Copies array and then unshifts item into it.\r\n   * @param {any} item Array item to add (to beginning)\r\n   * @param {GenericArray} arr Array to copy and into which to unshift\r\n   * @returns {GenericArray} Copy of the original array\r\n   */\r\n\r\n  function unshift(item, arr) {\r\n    arr = arr.slice();\r\n    arr.unshift(item);\r\n    return arr;\r\n  }\r\n  /**\r\n   * Caught when JSONPath is used without `new` but rethrown if with `new`\r\n   * @extends Error\r\n   */\r\n\r\n  var NewError = /*#__PURE__*/ (function (_Error) {\r\n    _inherits(NewError, _Error);\r\n\r\n    var _super = _createSuper(NewError);\r\n\r\n    /**\r\n     * @param {any} value The evaluated scalar value\r\n     */\r\n    function NewError(value) {\r\n      var _this;\r\n\r\n      _classCallCheck(this, NewError);\r\n\r\n      _this = _super.call(\r\n        this,\r\n        'JSONPath should not be called with \"new\" (it prevents return ' +\r\n          \"of (unwrapped) scalar values)\"\r\n      );\r\n      _this.avoidNew = true;\r\n      _this.value = value;\r\n      _this.name = \"NewError\";\r\n      return _this;\r\n    }\r\n\r\n    return NewError;\r\n  })(/*#__PURE__*/ _wrapNativeSuper(Error));\r\n  /**\r\n   * @typedef {PlainObject} ReturnObject\r\n   * @property {string} path\r\n   * @property {JSONObject} value\r\n   * @property {PlainObject|GenericArray} parent\r\n   * @property {string} parentProperty\r\n   */\r\n\r\n  /**\r\n   * @callback JSONPathCallback\r\n   * @param {string|PlainObject} preferredOutput\r\n   * @param {\"value\"|\"property\"} type\r\n   * @param {ReturnObject} fullRetObj\r\n   * @returns {void}\r\n   */\r\n\r\n  /**\r\n   * @callback OtherTypeCallback\r\n   * @param {JSONObject} val\r\n   * @param {string} path\r\n   * @param {PlainObject|GenericArray} parent\r\n   * @param {string} parentPropName\r\n   * @returns {boolean}\r\n   */\r\n\r\n  /* eslint-disable max-len -- Can make multiline type after https://github.com/syavorsky/comment-parser/issues/109 */\r\n\r\n  /**\r\n   * @typedef {PlainObject} JSONPathOptions\r\n   * @property {JSON} json\r\n   * @property {string|string[]} path\r\n   * @property {\"value\"|\"path\"|\"pointer\"|\"parent\"|\"parentProperty\"|\"all\"} [resultType=\"value\"]\r\n   * @property {boolean} [flatten=false]\r\n   * @property {boolean} [wrap=true]\r\n   * @property {PlainObject} [sandbox={}]\r\n   * @property {boolean} [preventEval=false]\r\n   * @property {PlainObject|GenericArray|null} [parent=null]\r\n   * @property {string|null} [parentProperty=null]\r\n   * @property {JSONPathCallback} [callback]\r\n   * @property {OtherTypeCallback} [otherTypeCallback] Defaults to\r\n   *   function which throws on encountering `@other`\r\n   * @property {boolean} [autostart=true]\r\n   */\r\n\r\n  /* eslint-enable max-len -- Can make multiline type after https://github.com/syavorsky/comment-parser/issues/109 */\r\n\r\n  /**\r\n   * @param {string|JSONPathOptions} opts If a string, will be treated as `expr`\r\n   * @param {string} [expr] JSON path to evaluate\r\n   * @param {JSON} [obj] JSON object to evaluate against\r\n   * @param {JSONPathCallback} [callback] Passed 3 arguments: 1) desired payload\r\n   *     per `resultType`, 2) `\"value\"|\"property\"`, 3) Full returned object with\r\n   *     all payloads\r\n   * @param {OtherTypeCallback} [otherTypeCallback] If `@other()` is at the end\r\n   *   of one's query, this will be invoked with the value of the item, its\r\n   *   path, its parent, and its parent's property name, and it should return\r\n   *   a boolean indicating whether the supplied value belongs to the \"other\"\r\n   *   type or not (or it may handle transformations and return `false`).\r\n   * @returns {JSONPath}\r\n   * @class\r\n   */\r\n\r\n  function JSONPath(opts, expr, obj, callback, otherTypeCallback) {\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    if (!(this instanceof JSONPath)) {\r\n      try {\r\n        return new JSONPath(opts, expr, obj, callback, otherTypeCallback);\r\n      } catch (e) {\r\n        if (!e.avoidNew) {\r\n          throw e;\r\n        }\r\n\r\n        return e.value;\r\n      }\r\n    }\r\n\r\n    if (typeof opts === \"string\") {\r\n      otherTypeCallback = callback;\r\n      callback = obj;\r\n      obj = expr;\r\n      expr = opts;\r\n      opts = null;\r\n    }\r\n\r\n    var optObj = opts && _typeof(opts) === \"object\";\r\n    opts = opts || {};\r\n    this.json = opts.json || obj;\r\n    this.path = opts.path || expr;\r\n    this.resultType = opts.resultType || \"value\";\r\n    this.flatten = opts.flatten || false;\r\n    this.wrap = hasOwnProp.call(opts, \"wrap\") ? opts.wrap : true;\r\n    this.sandbox = opts.sandbox || {};\r\n    this.preventEval = opts.preventEval || false;\r\n    this.parent = opts.parent || null;\r\n    this.parentProperty = opts.parentProperty || null;\r\n    this.callback = opts.callback || callback || null;\r\n\r\n    this.otherTypeCallback =\r\n      opts.otherTypeCallback ||\r\n      otherTypeCallback ||\r\n      function () {\r\n        throw new TypeError(\r\n          \"You must supply an otherTypeCallback callback option \" +\r\n            \"with the @other() operator.\"\r\n        );\r\n      };\r\n\r\n    if (opts.autostart !== false) {\r\n      var args = {\r\n        path: optObj ? opts.path : expr,\r\n      };\r\n\r\n      if (!optObj) {\r\n        args.json = obj;\r\n      } else if (\"json\" in opts) {\r\n        args.json = opts.json;\r\n      }\r\n\r\n      var ret = this.evaluate(args);\r\n\r\n      if (!ret || _typeof(ret) !== \"object\") {\r\n        throw new NewError(ret);\r\n      }\r\n\r\n      return ret;\r\n    }\r\n  } // PUBLIC METHODS\r\n\r\n  JSONPath.prototype.evaluate = function (\r\n    expr,\r\n    json,\r\n    callback,\r\n    otherTypeCallback\r\n  ) {\r\n    var _this2 = this;\r\n\r\n    var currParent = this.parent,\r\n      currParentProperty = this.parentProperty;\r\n    var flatten = this.flatten,\r\n      wrap = this.wrap;\r\n    this.currResultType = this.resultType;\r\n    this.currPreventEval = this.preventEval;\r\n    this.currSandbox = this.sandbox;\r\n    callback = callback || this.callback;\r\n    this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;\r\n    json = json || this.json;\r\n    expr = expr || this.path;\r\n\r\n    if (expr && _typeof(expr) === \"object\" && !Array.isArray(expr)) {\r\n      if (!expr.path && expr.path !== \"\") {\r\n        throw new TypeError(\r\n          'You must supply a \"path\" property when providing an object ' +\r\n            \"argument to JSONPath.evaluate().\"\r\n        );\r\n      }\r\n\r\n      if (!hasOwnProp.call(expr, \"json\")) {\r\n        throw new TypeError(\r\n          'You must supply a \"json\" property when providing an object ' +\r\n            \"argument to JSONPath.evaluate().\"\r\n        );\r\n      }\r\n\r\n      var _expr = expr;\r\n      json = _expr.json;\r\n      flatten = hasOwnProp.call(expr, \"flatten\") ? expr.flatten : flatten;\r\n      this.currResultType = hasOwnProp.call(expr, \"resultType\")\r\n        ? expr.resultType\r\n        : this.currResultType;\r\n      this.currSandbox = hasOwnProp.call(expr, \"sandbox\")\r\n        ? expr.sandbox\r\n        : this.currSandbox;\r\n      wrap = hasOwnProp.call(expr, \"wrap\") ? expr.wrap : wrap;\r\n      this.currPreventEval = hasOwnProp.call(expr, \"preventEval\")\r\n        ? expr.preventEval\r\n        : this.currPreventEval;\r\n      callback = hasOwnProp.call(expr, \"callback\") ? expr.callback : callback;\r\n      this.currOtherTypeCallback = hasOwnProp.call(expr, \"otherTypeCallback\")\r\n        ? expr.otherTypeCallback\r\n        : this.currOtherTypeCallback;\r\n      currParent = hasOwnProp.call(expr, \"parent\") ? expr.parent : currParent;\r\n      currParentProperty = hasOwnProp.call(expr, \"parentProperty\")\r\n        ? expr.parentProperty\r\n        : currParentProperty;\r\n      expr = expr.path;\r\n    }\r\n\r\n    currParent = currParent || null;\r\n    currParentProperty = currParentProperty || null;\r\n\r\n    if (Array.isArray(expr)) {\r\n      expr = JSONPath.toPathString(expr);\r\n    }\r\n\r\n    if ((!expr && expr !== \"\") || !json) {\r\n      return undefined;\r\n    }\r\n\r\n    var exprList = JSONPath.toPathArray(expr);\r\n\r\n    if (exprList[0] === \"$\" && exprList.length > 1) {\r\n      exprList.shift();\r\n    }\r\n\r\n    this._hasParentSelector = null;\r\n\r\n    var result = this._trace(\r\n      exprList,\r\n      json,\r\n      [\"$\"],\r\n      currParent,\r\n      currParentProperty,\r\n      callback\r\n    ).filter(function (ea) {\r\n      return ea && !ea.isParentSelector;\r\n    });\r\n\r\n    if (!result.length) {\r\n      return wrap ? [] : undefined;\r\n    }\r\n\r\n    if (!wrap && result.length === 1 && !result[0].hasArrExpr) {\r\n      return this._getPreferredOutput(result[0]);\r\n    }\r\n\r\n    return result.reduce(function (rslt, ea) {\r\n      var valOrPath = _this2._getPreferredOutput(ea);\r\n\r\n      if (flatten && Array.isArray(valOrPath)) {\r\n        rslt = rslt.concat(valOrPath);\r\n      } else {\r\n        rslt.push(valOrPath);\r\n      }\r\n\r\n      return rslt;\r\n    }, []);\r\n  }; // PRIVATE METHODS\r\n\r\n  JSONPath.prototype._getPreferredOutput = function (ea) {\r\n    var resultType = this.currResultType;\r\n\r\n    switch (resultType) {\r\n      case \"all\": {\r\n        var path = Array.isArray(ea.path)\r\n          ? ea.path\r\n          : JSONPath.toPathArray(ea.path);\r\n        ea.pointer = JSONPath.toPointer(path);\r\n        ea.path =\r\n          typeof ea.path === \"string\"\r\n            ? ea.path\r\n            : JSONPath.toPathString(ea.path);\r\n        return ea;\r\n      }\r\n\r\n      case \"value\":\r\n      case \"parent\":\r\n      case \"parentProperty\":\r\n        return ea[resultType];\r\n\r\n      case \"path\":\r\n        return JSONPath.toPathString(ea[resultType]);\r\n\r\n      case \"pointer\":\r\n        return JSONPath.toPointer(ea.path);\r\n\r\n      default:\r\n        throw new TypeError(\"Unknown result type\");\r\n    }\r\n  };\r\n\r\n  JSONPath.prototype._handleCallback = function (fullRetObj, callback, type) {\r\n    if (callback) {\r\n      var preferredOutput = this._getPreferredOutput(fullRetObj);\r\n\r\n      fullRetObj.path =\r\n        typeof fullRetObj.path === \"string\"\r\n          ? fullRetObj.path\r\n          : JSONPath.toPathString(fullRetObj.path); // eslint-disable-next-line node/callback-return\r\n\r\n      callback(preferredOutput, type, fullRetObj);\r\n    }\r\n  };\r\n  /**\r\n   *\r\n   * @param {string} expr\r\n   * @param {JSONObject} val\r\n   * @param {string} path\r\n   * @param {PlainObject|GenericArray} parent\r\n   * @param {string} parentPropName\r\n   * @param {JSONPathCallback} callback\r\n   * @param {boolean} hasArrExpr\r\n   * @param {boolean} literalPriority\r\n   * @returns {ReturnObject|ReturnObject[]}\r\n   */\r\n\r\n  JSONPath.prototype._trace = function (\r\n    expr,\r\n    val,\r\n    path,\r\n    parent,\r\n    parentPropName,\r\n    callback,\r\n    hasArrExpr,\r\n    literalPriority\r\n  ) {\r\n    var _this3 = this;\r\n\r\n    // No expr to follow? return path and value as the result of\r\n    //  this trace branch\r\n    var retObj;\r\n\r\n    if (!expr.length) {\r\n      retObj = {\r\n        path: path,\r\n        value: val,\r\n        parent: parent,\r\n        parentProperty: parentPropName,\r\n        hasArrExpr: hasArrExpr,\r\n      };\r\n\r\n      this._handleCallback(retObj, callback, \"value\");\r\n\r\n      return retObj;\r\n    }\r\n\r\n    var loc = expr[0],\r\n      x = expr.slice(1); // We need to gather the return value of recursive trace calls in order to\r\n    // do the parent sel computation.\r\n\r\n    var ret = [];\r\n    /**\r\n     *\r\n     * @param {ReturnObject|ReturnObject[]} elems\r\n     * @returns {void}\r\n     */\r\n\r\n    function addRet(elems) {\r\n      if (Array.isArray(elems)) {\r\n        // This was causing excessive stack size in Node (with or\r\n        //  without Babel) against our performance test:\r\n        //  `ret.push(...elems);`\r\n        elems.forEach(function (t) {\r\n          ret.push(t);\r\n        });\r\n      } else {\r\n        ret.push(elems);\r\n      }\r\n    }\r\n\r\n    if (\r\n      (typeof loc !== \"string\" || literalPriority) &&\r\n      val &&\r\n      hasOwnProp.call(val, loc)\r\n    ) {\r\n      // simple case--directly follow property\r\n      addRet(\r\n        this._trace(\r\n          x,\r\n          val[loc],\r\n          push(path, loc),\r\n          val,\r\n          loc,\r\n          callback,\r\n          hasArrExpr\r\n        )\r\n      ); // eslint-disable-next-line unicorn/prefer-switch -- Part of larger `if`\r\n    } else if (loc === \"*\") {\r\n      // all child properties\r\n      this._walk(\r\n        loc,\r\n        x,\r\n        val,\r\n        path,\r\n        parent,\r\n        parentPropName,\r\n        callback,\r\n        function (m, l, _x, v, p, par, pr, cb) {\r\n          addRet(_this3._trace(unshift(m, _x), v, p, par, pr, cb, true, true));\r\n        }\r\n      );\r\n    } else if (loc === \"..\") {\r\n      // all descendent parent properties\r\n      // Check remaining expression with val's immediate children\r\n      addRet(\r\n        this._trace(x, val, path, parent, parentPropName, callback, hasArrExpr)\r\n      );\r\n\r\n      this._walk(\r\n        loc,\r\n        x,\r\n        val,\r\n        path,\r\n        parent,\r\n        parentPropName,\r\n        callback,\r\n        function (m, l, _x, v, p, par, pr, cb) {\r\n          // We don't join m and x here because we only want parents,\r\n          //   not scalar values\r\n          if (_typeof(v[m]) === \"object\") {\r\n            // Keep going with recursive descent on val's\r\n            //   object children\r\n            addRet(\r\n              _this3._trace(unshift(l, _x), v[m], push(p, m), v, m, cb, true)\r\n            );\r\n          }\r\n        }\r\n      ); // The parent sel computation is handled in the frame above using the\r\n      // ancestor object of val\r\n    } else if (loc === \"^\") {\r\n      // This is not a final endpoint, so we do not invoke the callback here\r\n      this._hasParentSelector = true;\r\n      return {\r\n        path: path.slice(0, -1),\r\n        expr: x,\r\n        isParentSelector: true,\r\n      };\r\n    } else if (loc === \"~\") {\r\n      // property name\r\n      retObj = {\r\n        path: push(path, loc),\r\n        value: parentPropName,\r\n        parent: parent,\r\n        parentProperty: null,\r\n      };\r\n\r\n      this._handleCallback(retObj, callback, \"property\");\r\n\r\n      return retObj;\r\n    } else if (loc === \"$\") {\r\n      // root only\r\n      addRet(this._trace(x, val, path, null, null, callback, hasArrExpr));\r\n    } else if (/^(\\x2D?[0-9]*):(\\x2D?[0-9]*):?([0-9]*)$/.test(loc)) {\r\n      // [start:end:step]  Python slice syntax\r\n      addRet(this._slice(loc, x, val, path, parent, parentPropName, callback));\r\n    } else if (loc.indexOf(\"?(\") === 0) {\r\n      // [?(expr)] (filtering)\r\n      if (this.currPreventEval) {\r\n        throw new Error(\"Eval [?(expr)] prevented in JSONPath expression.\");\r\n      }\r\n\r\n      this._walk(\r\n        loc,\r\n        x,\r\n        val,\r\n        path,\r\n        parent,\r\n        parentPropName,\r\n        callback,\r\n        function (m, l, _x, v, p, par, pr, cb) {\r\n          if (\r\n            _this3._eval(\r\n              l.replace(\r\n                /^\\?\\(((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?)\\)$/,\r\n                \"$1\"\r\n              ),\r\n              v[m],\r\n              m,\r\n              p,\r\n              par,\r\n              pr\r\n            )\r\n          ) {\r\n            addRet(_this3._trace(unshift(m, _x), v, p, par, pr, cb, true));\r\n          }\r\n        }\r\n      );\r\n    } else if (loc[0] === \"(\") {\r\n      // [(expr)] (dynamic property/index)\r\n      if (this.currPreventEval) {\r\n        throw new Error(\"Eval [(expr)] prevented in JSONPath expression.\");\r\n      } // As this will resolve to a property name (but we don't know it\r\n      //  yet), property and parent information is relative to the\r\n      //  parent of the property to which this expression will resolve\r\n\r\n      addRet(\r\n        this._trace(\r\n          unshift(\r\n            this._eval(\r\n              loc,\r\n              val,\r\n              path[path.length - 1],\r\n              path.slice(0, -1),\r\n              parent,\r\n              parentPropName\r\n            ),\r\n            x\r\n          ),\r\n          val,\r\n          path,\r\n          parent,\r\n          parentPropName,\r\n          callback,\r\n          hasArrExpr\r\n        )\r\n      );\r\n    } else if (loc[0] === \"@\") {\r\n      // value type: @boolean(), etc.\r\n      var addType = false;\r\n      var valueType = loc.slice(1, -2);\r\n\r\n      switch (valueType) {\r\n        case \"scalar\":\r\n          if (!val || ![\"object\", \"function\"].includes(_typeof(val))) {\r\n            addType = true;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"boolean\":\r\n        case \"string\":\r\n        case \"undefined\":\r\n        case \"function\":\r\n          // eslint-disable-next-line valid-typeof\r\n          if (_typeof(val) === valueType) {\r\n            addType = true;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"integer\":\r\n          if (Number.isFinite(val) && !(val % 1)) {\r\n            addType = true;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"number\":\r\n          if (Number.isFinite(val)) {\r\n            addType = true;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"nonFinite\":\r\n          if (typeof val === \"number\" && !Number.isFinite(val)) {\r\n            addType = true;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"object\":\r\n          // eslint-disable-next-line valid-typeof\r\n          if (val && _typeof(val) === valueType) {\r\n            addType = true;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"array\":\r\n          if (Array.isArray(val)) {\r\n            addType = true;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"other\":\r\n          addType = this.currOtherTypeCallback(\r\n            val,\r\n            path,\r\n            parent,\r\n            parentPropName\r\n          );\r\n          break;\r\n\r\n        case \"null\":\r\n          if (val === null) {\r\n            addType = true;\r\n          }\r\n\r\n          break;\r\n\r\n        /* c8 ignore next 2 */\r\n\r\n        default:\r\n          throw new TypeError(\"Unknown value type \" + valueType);\r\n      }\r\n\r\n      if (addType) {\r\n        retObj = {\r\n          path: path,\r\n          value: val,\r\n          parent: parent,\r\n          parentProperty: parentPropName,\r\n        };\r\n\r\n        this._handleCallback(retObj, callback, \"value\");\r\n\r\n        return retObj;\r\n      } // `-escaped property\r\n    } else if (loc[0] === \"`\" && val && hasOwnProp.call(val, loc.slice(1))) {\r\n      var locProp = loc.slice(1);\r\n      addRet(\r\n        this._trace(\r\n          x,\r\n          val[locProp],\r\n          push(path, locProp),\r\n          val,\r\n          locProp,\r\n          callback,\r\n          hasArrExpr,\r\n          true\r\n        )\r\n      );\r\n    } else if (loc.includes(\",\")) {\r\n      // [name1,name2,...]\r\n      var parts = loc.split(\",\");\r\n\r\n      var _iterator = _createForOfIteratorHelper(parts),\r\n        _step;\r\n\r\n      try {\r\n        for (_iterator.s(); !(_step = _iterator.n()).done; ) {\r\n          var part = _step.value;\r\n          addRet(\r\n            this._trace(\r\n              unshift(part, x),\r\n              val,\r\n              path,\r\n              parent,\r\n              parentPropName,\r\n              callback,\r\n              true\r\n            )\r\n          );\r\n        } // simple case--directly follow property\r\n      } catch (err) {\r\n        _iterator.e(err);\r\n      } finally {\r\n        _iterator.f();\r\n      }\r\n    } else if (!literalPriority && val && hasOwnProp.call(val, loc)) {\r\n      addRet(\r\n        this._trace(\r\n          x,\r\n          val[loc],\r\n          push(path, loc),\r\n          val,\r\n          loc,\r\n          callback,\r\n          hasArrExpr,\r\n          true\r\n        )\r\n      );\r\n    } // We check the resulting values for parent selections. For parent\r\n    // selections we discard the value object and continue the trace with the\r\n    // current val object\r\n\r\n    if (this._hasParentSelector) {\r\n      for (var t = 0; t < ret.length; t++) {\r\n        var rett = ret[t];\r\n\r\n        if (rett && rett.isParentSelector) {\r\n          var tmp = this._trace(\r\n            rett.expr,\r\n            val,\r\n            rett.path,\r\n            parent,\r\n            parentPropName,\r\n            callback,\r\n            hasArrExpr\r\n          );\r\n\r\n          if (Array.isArray(tmp)) {\r\n            ret[t] = tmp[0];\r\n            var tl = tmp.length;\r\n\r\n            for (var tt = 1; tt < tl; tt++) {\r\n              t++;\r\n              ret.splice(t, 0, tmp[tt]);\r\n            }\r\n          } else {\r\n            ret[t] = tmp;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  };\r\n\r\n  JSONPath.prototype._walk = function (\r\n    loc,\r\n    expr,\r\n    val,\r\n    path,\r\n    parent,\r\n    parentPropName,\r\n    callback,\r\n    f\r\n  ) {\r\n    if (Array.isArray(val)) {\r\n      var n = val.length;\r\n\r\n      for (var i = 0; i < n; i++) {\r\n        f(i, loc, expr, val, path, parent, parentPropName, callback);\r\n      }\r\n    } else if (val && _typeof(val) === \"object\") {\r\n      Object.keys(val).forEach(function (m) {\r\n        f(m, loc, expr, val, path, parent, parentPropName, callback);\r\n      });\r\n    }\r\n  };\r\n\r\n  JSONPath.prototype._slice = function (\r\n    loc,\r\n    expr,\r\n    val,\r\n    path,\r\n    parent,\r\n    parentPropName,\r\n    callback\r\n  ) {\r\n    if (!Array.isArray(val)) {\r\n      return undefined;\r\n    }\r\n\r\n    var len = val.length,\r\n      parts = loc.split(\":\"),\r\n      step = (parts[2] && Number.parseInt(parts[2])) || 1;\r\n    var start = (parts[0] && Number.parseInt(parts[0])) || 0,\r\n      end = (parts[1] && Number.parseInt(parts[1])) || len;\r\n    start = start < 0 ? Math.max(0, start + len) : Math.min(len, start);\r\n    end = end < 0 ? Math.max(0, end + len) : Math.min(len, end);\r\n    var ret = [];\r\n\r\n    for (var i = start; i < end; i += step) {\r\n      var tmp = this._trace(\r\n        unshift(i, expr),\r\n        val,\r\n        path,\r\n        parent,\r\n        parentPropName,\r\n        callback,\r\n        true\r\n      ); // Should only be possible to be an array here since first part of\r\n      //   ``unshift(i, expr)` passed in above would not be empty, nor `~`,\r\n      //     nor begin with `@` (as could return objects)\r\n      // This was causing excessive stack size in Node (with or\r\n      //  without Babel) against our performance test: `ret.push(...tmp);`\r\n\r\n      tmp.forEach(function (t) {\r\n        ret.push(t);\r\n      });\r\n    }\r\n\r\n    return ret;\r\n  };\r\n\r\n  JSONPath.prototype._eval = function (\r\n    code,\r\n    _v,\r\n    _vname,\r\n    path,\r\n    parent,\r\n    parentPropName\r\n  ) {\r\n    if (code.includes(\"@parentProperty\")) {\r\n      this.currSandbox._$_parentProperty = parentPropName;\r\n      code = code.replace(/@parentProperty/g, \"_$_parentProperty\");\r\n    }\r\n\r\n    if (code.includes(\"@parent\")) {\r\n      this.currSandbox._$_parent = parent;\r\n      code = code.replace(/@parent/g, \"_$_parent\");\r\n    }\r\n\r\n    if (code.includes(\"@property\")) {\r\n      this.currSandbox._$_property = _vname;\r\n      code = code.replace(/@property/g, \"_$_property\");\r\n    }\r\n\r\n    if (code.includes(\"@path\")) {\r\n      this.currSandbox._$_path = JSONPath.toPathString(path.concat([_vname]));\r\n      code = code.replace(/@path/g, \"_$_path\");\r\n    }\r\n\r\n    if (code.includes(\"@root\")) {\r\n      this.currSandbox._$_root = this.json;\r\n      code = code.replace(/@root/g, \"_$_root\");\r\n    }\r\n\r\n    if (\r\n      /@([\\t-\\r \\)\\.\\[\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF])/.test(\r\n        code\r\n      )\r\n    ) {\r\n      this.currSandbox._$_v = _v;\r\n      code = code.replace(\r\n        /@([\\t-\\r \\)\\.\\[\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF])/g,\r\n        \"_$_v$1\"\r\n      );\r\n    }\r\n\r\n    try {\r\n      return this.vm.runInNewContext(code, this.currSandbox);\r\n    } catch (e) {\r\n      // eslint-disable-next-line no-console\r\n      console.log(e);\r\n      throw new Error(\"jsonPath: \" + e.message + \": \" + code);\r\n    }\r\n  }; // PUBLIC CLASS PROPERTIES AND METHODS\r\n  // Could store the cache object itself\r\n\r\n  JSONPath.cache = {};\r\n  /**\r\n   * @param {string[]} pathArr Array to convert\r\n   * @returns {string} The path string\r\n   */\r\n\r\n  JSONPath.toPathString = function (pathArr) {\r\n    var x = pathArr,\r\n      n = x.length;\r\n    var p = \"$\";\r\n\r\n    for (var i = 1; i < n; i++) {\r\n      if (\r\n        !/^(~|\\^|@(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?\\(\\))$/.test(\r\n          x[i]\r\n        )\r\n      ) {\r\n        p += /^[\\*0-9]+$/.test(x[i]) ? \"[\" + x[i] + \"]\" : \"['\" + x[i] + \"']\";\r\n      }\r\n    }\r\n\r\n    return p;\r\n  };\r\n  /**\r\n   * @param {string} pointer JSON Path\r\n   * @returns {string} JSON Pointer\r\n   */\r\n\r\n  JSONPath.toPointer = function (pointer) {\r\n    var x = pointer,\r\n      n = x.length;\r\n    var p = \"\";\r\n\r\n    for (var i = 1; i < n; i++) {\r\n      if (\r\n        !/^(~|\\^|@(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?\\(\\))$/.test(\r\n          x[i]\r\n        )\r\n      ) {\r\n        p += \"/\" + x[i].toString().replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\r\n      }\r\n    }\r\n\r\n    return p;\r\n  };\r\n  /**\r\n   * @param {string} expr Expression to convert\r\n   * @returns {string[]}\r\n   */\r\n\r\n  JSONPath.toPathArray = function (expr) {\r\n    var cache = JSONPath.cache;\r\n\r\n    if (cache[expr]) {\r\n      return cache[expr].concat();\r\n    }\r\n\r\n    var subx = [];\r\n    var normalized = expr // Properties\r\n      .replace(\r\n        /@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\\(\\)/g,\r\n        \";$&;\"\r\n      ) // Parenthetical evaluations (filtering and otherwise), directly\r\n      //   within brackets or single quotes\r\n      .replace(\r\n        /['\\[](\\??\\((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?\\))['\\]]/g,\r\n        function ($0, $1) {\r\n          return \"[#\" + (subx.push($1) - 1) + \"]\";\r\n        }\r\n      ) // Escape periods and tildes within properties\r\n      .replace(/\\[[\"']((?:(?!['\\]])[\\s\\S])*)[\"']\\]/g, function ($0, prop) {\r\n        return \"['\" + prop.replace(/\\./g, \"%@%\").replace(/~/g, \"%%@@%%\") + \"']\";\r\n      }) // Properties operator\r\n      .replace(/~/g, \";~;\") // Split by property boundaries\r\n      .replace(/[\"']?\\.[\"']?(?!(?:(?!\\[)[\\s\\S])*\\])|\\[[\"']?/g, \";\") // Reinsert periods within properties\r\n      .replace(/%@%/g, \".\") // Reinsert tildes within properties\r\n      .replace(/%%@@%%/g, \"~\") // Parent\r\n      .replace(/(?:;)?(\\^+)(?:;)?/g, function ($0, ups) {\r\n        return \";\" + ups.split(\"\").join(\";\") + \";\";\r\n      }) // Descendents\r\n      .replace(/;;;|;;/g, \";..;\") // Remove trailing\r\n      .replace(/;$|'?\\]|'$/g, \"\");\r\n    var exprList = normalized.split(\";\").map(function (exp) {\r\n      var match = exp.match(/#([0-9]+)/);\r\n      return !match || !match[1] ? exp : subx[match[1]];\r\n    });\r\n    cache[expr] = exprList;\r\n    return cache[expr].concat();\r\n  };\r\n\r\n  /**\r\n   * @callback ConditionCallback\r\n   * @param {any} item\r\n   * @returns {boolean}\r\n   */\r\n\r\n  /**\r\n   * Copy items out of one array into another.\r\n   * @param {GenericArray} source Array with items to copy\r\n   * @param {GenericArray} target Array to which to copy\r\n   * @param {ConditionCallback} conditionCb Callback passed the current item;\r\n   *     will move item if evaluates to `true`\r\n   * @returns {void}\r\n   */\r\n\r\n  var moveToAnotherArray = function moveToAnotherArray(\r\n    source,\r\n    target,\r\n    conditionCb\r\n  ) {\r\n    var il = source.length;\r\n\r\n    for (var i = 0; i < il; i++) {\r\n      var item = source[i];\r\n\r\n      if (conditionCb(item)) {\r\n        target.push(source.splice(i--, 1)[0]);\r\n      }\r\n    }\r\n  };\r\n\r\n  JSONPath.prototype.vm = {\r\n    /**\r\n     * @param {string} expr Expression to evaluate\r\n     * @param {PlainObject} context Object whose items will be added\r\n     *   to evaluation\r\n     * @returns {any} Result of evaluated code\r\n     */\r\n    runInNewContext: function runInNewContext(expr, context) {\r\n      var keys = Object.keys(context);\r\n      var funcs = [];\r\n      moveToAnotherArray(keys, funcs, function (key) {\r\n        return typeof context[key] === \"function\";\r\n      });\r\n      var values = keys.map(function (vr, i) {\r\n        return context[vr];\r\n      });\r\n      var funcString = funcs.reduce(function (s, func) {\r\n        var fString = context[func].toString();\r\n\r\n        if (!/function/.test(fString)) {\r\n          fString = \"function \" + fString;\r\n        }\r\n\r\n        return \"var \" + func + \"=\" + fString + \";\" + s;\r\n      }, \"\");\r\n      expr = funcString + expr; // Mitigate http://perfectionkills.com/global-eval-what-are-the-options/#new_function\r\n\r\n      if (!/([\"'])use strict\\1/.test(expr) && !keys.includes(\"arguments\")) {\r\n        expr = \"var arguments = undefined;\" + expr;\r\n      } // Remove last semi so `return` will be inserted before\r\n      //  the previous one instead, allowing for the return\r\n      //  of a bare ending expression\r\n\r\n      expr = expr.replace(\r\n        /;[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*$/,\r\n        \"\"\r\n      ); // Insert `return`\r\n\r\n      var lastStatementEnd = expr.lastIndexOf(\";\");\r\n      var code =\r\n        lastStatementEnd > -1\r\n          ? expr.slice(0, lastStatementEnd + 1) +\r\n            \" return \" +\r\n            expr.slice(lastStatementEnd + 1)\r\n          : \" return \" + expr; // eslint-disable-next-line no-new-func\r\n\r\n      return _construct(\r\n        Function,\r\n        _toConsumableArray(keys).concat([code])\r\n      ).apply(void 0, _toConsumableArray(values));\r\n    },\r\n  };\r\n\r\n  exports.JSONPath = JSONPath;\r\n\r\n  Object.defineProperty(exports, \"__esModule\", { value: true });\r\n});\r\nvar JSONPath = JSONPath.JSONPath;",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/JSONPath",
        "scriptFiles": [
          "JSONPath.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/JSONPath",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/JSONPath/JSONPath.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.729Z",
    "updatedAt": "2025-09-21T08:58:58.369Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 252,
    "type": "script_include",
    "name": "Install base items with active cases",
    "description": "Install base items with active cases This script will run RLQUERY on the sninstallbaseitem table and get active cases by the help of RLQUERYsninstallbasem2maffectedinstallbase table.",
    "script": "var ibGr = new GlideRecord(\"sn_install_base_item\");\r\nibGr.addEncodedQuery(\"RLQUERYsn_install_base_m2m_affected_install_base.install_base,>0,case.active=true^ENDRLQUERY\");\r\nibGr.query();\r\n\r\nwhile (ibGr.next()) {\r\n  // Do something\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Install base items with active cases",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Install%20base%20items%20with%20active%20cases",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Install%20base%20items%20with%20active%20cases/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.725Z",
    "updatedAt": "2025-09-21T08:58:58.366Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 251,
    "type": "script_include",
    "name": "Inactive User",
    "description": "Inactive User Cleanup Utility for ServiceNow This utility is designed for ServiceNow administrators to help maintain user accounts by automatically deactivating users who have not logged in for a specified number of days. It's a Script Include that can be scheduled to run at regular intervals or executed manually.",
    "script": "/**\r\n * This script include provides a utility to identify and deactivate users\r\n * who have not logged in for a specified number of days.\r\n * \r\n * Usage: Call the `deactivateInactiveUsers` method with the number of days\r\n * as the parameter to deactivate users who have been inactive for that duration.\r\n */\r\nvar InactiveUserCleanup = Class.create();\r\nInactiveUserCleanup.prototype = {\r\n    initialize: function() {\r\n        // Initialization code if needed\r\n    },\r\n\r\n    /**\r\n     * Deactivates users who have not logged in for the specified number of days.\r\n     * @param {number} days - The number of days of inactivity before deactivation.\r\n     */\r\n    deactivateInactiveUsers: function(days) {\r\n        var cutoffDate = new GlideDateTime();\r\n        cutoffDate.addDays(-days); // Set the cutoff date to 'days' ago\r\n\r\n        // Query for users who have not logged in since the cutoff date\r\n        var userGr = new GlideRecord('sys_user');\r\n        userGr.addQuery('last_login_time', '<', cutoffDate);\r\n        userGr.addQuery('active', 'true'); // Only consider active users\r\n        userGr.query();\r\n\r\n        while (userGr.next()) {\r\n            userGr.active = false; // Deactivate the user\r\n            userGr.update();\r\n            gs.info('Deactivated user: ' + userGr.name);\r\n        }\r\n    },\r\n\r\n    type: 'InactiveUserCleanup'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Inactive User",
        "scriptFiles": [
          "InactiveUserCleanup.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Inactive%20User",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Inactive%20User/InactiveUserCleanup.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.722Z",
    "updatedAt": "2025-09-21T08:58:58.362Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 250,
    "type": "script_include",
    "name": "Hybrid Script Include for AJAX or Server Side Parameters",
    "description": "This example shows how one could code a script include that might be called in two different scenarios. One being a client AJAX call, and the other being a server side call, from another script include perhaps. Example usage: Client script AJAX call:",
    "script": "var example_hybrid_parameters = Class.create();\r\nexample_hybrid_parameters.prototype = Object.extendsObject(\r\n  AbstractAjaxProcessor,\r\n  {\r\n    /*\r\n        This function shows how you can create a script include that can either be called from a AJAX call, or from direct object creation in a server side script.\r\n\r\n    \t@parm: {parm1} Shows if parm1 was a string of values seperated by a \",\"\r\n    \t@parm: {parm2} Shows directly getting the value from the parameter.\r\n    \t@parm: {parm3} Shows constructing the parameter value into a string, the one from the AJAX call will already be a string.\r\n\t\t@parm: {parm4} Shows an example of using a boolean value for the parameter.\r\n    */\r\n    exampleHybrid: function (parm1, parm2, parm3, parm4) {\r\n      parm1 = parm1\r\n        ? parm1.split(\",\")\r\n        : this.getParameter(\"sysparm_parm1\").split(\",\");\r\n      parm2 = parm2 ? parm2 : this.getParameter(\"sysparm_parm2\");\r\n      parm3 = parm3 ? parm3.toString() : this.getParameter(\"sysparm_parm3\");\r\n      parm4 = parm4 ? parm4 : true;\r\n\r\n      //Do other things after this\r\n    },\r\n    type: \"example_hybrid_parameters\",\r\n  }\r\n);",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Hybrid Script Include for AJAX or Server Side Parameters",
        "scriptFiles": [
          "ScriptInclude.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Hybrid%20Script%20Include%20for%20AJAX%20or%20Server%20Side%20Parameters",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Hybrid%20Script%20Include%20for%20AJAX%20or%20Server%20Side%20Parameters/ScriptInclude.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.718Z",
    "updatedAt": "2025-09-21T08:58:58.359Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 249,
    "type": "script_include",
    "name": "HTMLUtils",
    "description": "Creates an HTML Table from an object @param  {String} [title] - Title above table @param  {Object} [table] - Object with headers attribute and row multi dimension array",
    "script": "var HTMLUtils = Class.create();\r\nGlideRecordHelper.prototype = Object.extendsObject(AbstractAjaxProcessor, {\t\r\n    \r\n    /**SNDOC\r\n\t @name createHTMLTable\r\n\t @description Base method that creates an HTML Table from an object\r\n\t @param  {String} [title] - Title above table\r\n\t @param  {Object} [table] - Object with headers attribute and row multi dimension array\r\n\t @returns {String} HTML Table\r\n\t @example\r\n\t var table = {\r\n\t\theader:['col1','col2'],\r\n\t\trows:[['row1col1','row1col2'],\r\n\t\t\t  ['row2col1','row2col2']]\r\n\t }\r\n\r\n\t var hU = new HTMLUtils();\r\n\t hU.createHTMLTable(\"Test\",table);\r\n\t*/\r\n\tcreateHTMLTable: function(title,table){\r\n\t\tvar html = \"<p style='margin: 10px 0px 10px;'><b>\"+title+\"</b></p><table class='template_TBL table'><tbody>\";\r\n\t\thtml += \"<tr>\";\r\n\t\ttable.header.forEach(function(h){html +=\"<td>\"+h+\"</td>\";});\r\n\t\thtml +=\"</tr>\";\r\n\t\ttable.rows.forEach(function(row){\r\n\t\t\thtml += \"<tr>\";\r\n\t\t\trow.forEach(function(r){\r\n\t\t\t\thtml += \"<td>\"+r+\"</td>\";\r\n\t\t\t});\r\n\t\t\thtml += \"</tr>\";\r\n\t\t});\r\n\t\thtml += \"</tbody></table>\";\r\n\r\n\t\treturn html;\r\n\t},\r\n\r\n    type: 'HTMLUtils'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/HTMLUtils",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/HTMLUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/HTMLUtils/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.714Z",
    "updatedAt": "2025-09-21T08:58:58.355Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 248,
    "type": "script_include",
    "name": "GlideRecordHelper",
    "description": "Various functions for working with gliderecords, inspired by some of the methods available in the service portal with $sp. Functions have JSDoc documnetation for use. @name getField @description: Checks the specified field and returns an object.",
    "script": "var GlideRecordHelper = Class.create();\r\nGlideRecordHelper.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n  \r\n  \t/**SNDOC\r\n\t  @name getField\r\n\t  @description: Checks the specified field and returns an object.\r\n\t  @param {object} [record] - Glide Record object\r\n\t  @param {string} [value] - string of field\r\n\t  @return {object}  An object containing label, value, and display value of provided field\r\n\t*/\r\n\tgetField : function (record,value){\r\n\t\tvar addValue = {};\r\n\t\taddValue.label = record[value].getLabel();\r\n\t\taddValue.value = record.getValue(value);\r\n\t\taddValue.display_value = record.getDisplayValue(value);\r\n\t\taddValue.type = \"notAssigned\";\r\n\t\taddValue.type = record && record.getElement(value) && record.getElement(value).getED() && record.getElement(value).getED().getInternalType()?record.getElement(value).getED().getInternalType():null;\r\n\r\n\t\treturn addValue;\r\n\t},\r\n\t\r\n\t/**SNDOC\r\n\t  @name getFields\r\n\t  @description: Checks the specified fields and returns an array of field objects.\r\n\t  @param {object} [record] - Glide Record object\r\n\t  @param {string} [values] - Comma deliminated string of field values\r\n\t  @return {object}  An array of objects containing label, value, and display value of provided fields\r\n\t*/\r\n\tgetFields : function (record,values){\r\n\t\tvar valueList = values.split(\",\");\r\n\t\tvar returnList = [];\r\n\r\n\t\tvalueList.forEach(function(currentValue){\r\n\t\t\tvar addValue = {};\r\n\t\t\taddValue.label = record[currentValue].getLabel();\r\n\t\t\taddValue.value = record.getValue(currentValue);\r\n\t\t\taddValue.display_value = record.getDisplayValue(currentValue);\r\n\t\t\taddValue.type = \"notAssigned\";\r\n\t\t\taddValue.type = record && record.getElement(currentValue) && record.getElement(currentValue).getED() && record.getElement(currentValue).getED().getInternalType()?record.getElement(currentValue).getED().getInternalType():null;\r\n\r\n\t\t\treturnList.push(addValue);\r\n\t\t});\r\n\r\n\t\treturn returnList;\r\n\t},\r\n\r\n\tgetFieldsObject: function(record,values){\r\n\t\tvar valueList = values.split(\",\");\r\n\t\tvar returnList = {};\r\n\r\n\t\tvalueList.forEach(function(currentValue){\r\n\t\t\treturnList[currentValue] = {};\r\n\t\t\treturnList[currentValue].label = record[currentValue].getLabel();\r\n\t\t\treturnList[currentValue].value = record.getValue(currentValue);\r\n\t\t\treturnList[currentValue].display_value = record.getDisplayValue(currentValue);\r\n\t\t\treturnList[currentValue].type = \"notAssigned\";\r\n\t\t\treturnList[currentValue].type = record && record.getElement(currentValue) && record.getElement(currentValue).getED() && record.getElement(currentValue).getED().getInternalType()?record.getElement(currentValue).getED().getInternalType():null;\r\n\t\t});\r\n\r\n\t\treturn returnList;\r\n\t},\r\n\r\n\tgetFieldsObjectWithQuery: function(table,query,values){\r\n\t\tvar gr = new GlideRecordSecure(table);\r\n\t\tgr.addEncodedQuery(query);\r\n\t\tgr.query();\r\n\r\n\t\treturn (gr.next() ? this.getFieldsObject(gr,values) : null);\r\n\t},\r\n\t\r\n\t/**SNDOC\r\n\t\t@name getFieldsObjectWithQueryAjax\r\n\t\t@description: Client callable to get fields array of objects with query\r\n\t\t@param {getParameter}   [sysparm_table] - Valid table\r\n\t\t@param {getParameter}   [sysparm_query] - Encoded query\r\n\t\t@param {getParameter}   [sysparm_values] - Fields to return\r\n\t\t@return {JSON} Array of object with display_value, label, type, and value\r\n\t\t@example\r\n\t\tvar gaCi = new GlideAjax('GlideRecordHelper');\r\n\t\tgaCi.addParam('sysparm_name', 'getFieldsObjectWithQueryAjax');\r\n\t\tgaCi.addParam('sysparm_table', 'cmdb_ci');\r\n\t\tgaCi.addParam('sysparm_query', 'sys_id=44c417444f6b2200f92eab99f110c762');\r\n\t\tgaCi.addParam('sysparm_values', 'state');\r\n\t\tgaCi.getXML(callBackFuncation);\r\n\t\t\r\n\t\tfunction callBackFuncation(response){\r\n\t\tvar answer = response.responseXML.documentElement.getAttribute(\"answer\");\r\n\t\tvar ci = JSON.parse(answer);\r\n\t\t\r\n\t\t// ci = [state{\r\n\t\t//\t\t\tdisplay_value: \"Active\",\r\n\t\t//\t\t\tlabel: \"State\",\r\n\t\t//\t\t\ttype: \"integer\",\r\n\t\t//\t\t\tvalue: \"2\"\r\n\t\t//\t\t}]\t\r\n\t*/\r\n\tgetFieldsObjectWithQueryAjax: function(){\r\n\t\tvar table = this.getParameter('sysparm_table');\r\n\t\tvar query = this.getParameter('sysparm_query');\r\n\t\tvar values = this.getParameter('sysparm_values');\r\n\t\treturn JSON.stringify(this.getFieldsObjectWithQuery(table,query,values));\r\n\t},\r\n\r\n\tgetFieldsMultiObjectWithQuery: function(table,query,values){\r\n\t\tvar fieldObjectArray = [];\r\n\t\tvar gr = new GlideRecordSecure(table);\r\n\t\tgr.addEncodedQuery(query);\r\n\t\tgr.query();\r\n\t\twhile(gr.next()){\r\n\t\t\tfieldObjectArray.push(this.getFieldsObject(gr,values));\r\n\t\t}\r\n\t\treturn fieldObjectArray;\r\n\t},\r\n\r\n\t/**SNDOC\r\n\t\t@name hasNextQuery\r\n\t\t@description: Checks if the provided query has results, returns true if so.\r\n\t\t@param {string}   [table] - Valid table\r\n\t\t@param {string}   [query] - Encoded query\r\n\t\t@return {boolean}  \r\n\t*/\r\n\thasNextQuery: function(table,query){\r\n\t\ttable = table || this.getParameter('sysparm_table');\r\n\t\tquery = query || this.getParameter('sysparm_query');\r\n\t\tvar returnVar = false;\r\n\t\tvar grGlideRecord = new GlideRecordSecure(table);\r\n\t\tgrGlideRecord.addEncodedQuery(query);\r\n\t\tgrGlideRecord.query();\r\n\t\tif (grGlideRecord.hasNext()) {\r\n\t\t\treturnVar = true;\r\n\t\t}\r\n\t\treturn returnVar;\r\n\t},\r\n\r\n\ttype: 'GlideRecordHelper'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/GlideRecordHelper",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/GlideRecordHelper",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/GlideRecordHelper/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.711Z",
    "updatedAt": "2025-09-21T08:58:58.352Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 247,
    "type": "script_include",
    "name": "GlideRecord to JSON",
    "description": "GlideRecord to JSON object converter Description: This script include (gr2obj) converts GlideRecord to a JSON object Sample Usage:",
    "script": "var gr2obj = Class.create();\r\n/**\r\n * A function to convert a glide record to a JSON object\r\n * @param {GlideRecord} gr\r\n * @out {Object}\r\n */\r\ngr2obj = function(gr) {\r\n    // Get the GlideRecord's array of fields\r\n    var fieldArr = new GlideRecordUtil().getFields(gr);\r\n    fieldArr.sort();\r\n    var recordObj = {};\r\n    // For each field get the value\r\n    for (var field in fieldArr) {\r\n        // For a 'boolean' or a 'journal_input' field type, get the display value\r\n        var type = gr.getElement(fieldArr[field]).getED().getInternalType();\r\n        if (type == 'boolean' || type == 'journal_input') {\r\n            recordObj[fieldArr[field]] = gr.getDisplayValue(fieldArr[field]);\r\n        } else if (type == 'reference' && gr.getValue(fieldArr[field])) {\r\n            recordObj[fieldArr[field]] = gr.getDisplayValue(fieldArr[field]);\r\n            // if reference field sys_id is needed, uncomment the next line\r\n            // recordObj[fieldArr[field]] = gr.getValue(fieldArr[field]);\r\n        } else {\r\n            recordObj[fieldArr[field]] = gr.getValue(fieldArr[field]);\r\n        }\r\n    }\r\n    return recordObj;\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/GlideRecord to JSON",
        "scriptFiles": [
          "gr2obj.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/GlideRecord%20to%20JSON",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/GlideRecord%20to%20JSON/gr2obj.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.707Z",
    "updatedAt": "2025-09-21T08:58:58.348Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 246,
    "type": "script_include",
    "name": "GlideDateTimeUtils",
    "description": "ClientDateTimeUtils This Script Include contains useful functions related to date/time calculations that can be called using GlideAjax. As there is very limited javascript functions related to Date & Time, this will be very useful for client side calculations of date & time.",
    "script": "var ClientDateTimeUtils = Class.create();\r\nClientDateTimeUtils.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n    //Takes a Single Date/Time Field and returns its time difference from nowDateTime().\r\n    //params = sysparm_fdt (the first date/time field), sysparm_difftype (time based format to return result. See \"_calcDateDiff\" function comments)\r\n    getNowDateTimeDiff: function () {\r\n        var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field\r\n        var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day\r\n        var diff = gs.dateDiff(gs.nowDateTime(), firstDT, true);\r\n        var timediff = this._calcDateDiff(diffTYPE, diff);\r\n        //return \"getNowDateTimeDiff: FIRST DT: \" + firstDT + \" -DIFFTYPE: \" + diffTYPE + \" -TIME DIFF: \" + timediff;\r\n        return timediff;\r\n    },\r\n\r\n    //Diff the amount of time between two different Date/Time fields\r\n    //params = sysparm_fdt (the first date/time field), sysparm_sdt (second date/time field), sysparm_difftype (time based format to return result. See \"_calcDateDiff\" function comments)\r\n    getDateTimeDiff: function () {\r\n        var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field\r\n        var secondDT = this.getParameter('sysparm_sdt'); // Second Date-Time Field\r\n        var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day\r\n        var diff = gs.dateDiff(firstDT, secondDT, true);\r\n        var timediff = this._calcDateDiff(diffTYPE, diff);\r\n        //return \"getDateTimeDiff: FIRST DT: \" + firstDT + \" -SECOND DT: \" + secondDT + \" -DIFFTYPE: \" + diffTYPE + \" -TIME DIFF: \" + timediff;\r\n        return timediff;\r\n    },\r\n\r\n    //Takes your date/time field and returns the amount of time before now. A positive is time before now, a negative number is after now.\r\n    //params = sysparm_fdt (the first date/time field), sysparm_difftype (time based format to return result. See \"_calcDateDiff\" function comments)\r\n    getDateTimeBeforeNow: function () {\r\n        var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field\r\n        var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day\r\n        var diff = gs.dateDiff(firstDT, gs.nowDateTime(), true);\r\n        var timediff = this._calcDateDiff(diffTYPE, diff);\r\n        //return \"getDateTimeBeforeNow: FIRST DT: \" + firstDT + \" -DIFFTYPE: \" + diffTYPE + \" -TIME DIFF: \" + timediff;\r\n        return timediff;\r\n    },\r\n\r\n    //Returns true if it is before now, and false if it is after now.\r\n    //params = sysparm_fdt (the first date/time field)\r\n    getDateTimeBeforeNowBool: function () {\r\n        var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field\r\n        var diff = gs.dateDiff(firstDT, gs.nowDateTime(), true);\r\n        var answer = '';\r\n        if (diff >= 0) {\r\n            answer = 'true';\r\n        } else {\r\n            answer = 'false';\r\n        }\r\n        return answer;\r\n    },\r\n\r\n    //Returns the Date/Time of right now.\r\n    getNowDateTime: function () {\r\n        var now = gs.nowDateTime(); //Now Date/Time\r\n        return now;\r\n    },\r\n\r\n    //Returns the Date right now.\r\n    getNowDate: function () {\r\n        var now = GlideDate();; //Now Date\r\n        return now.getLocalDate();\r\n    },\r\n\r\n    //Returns the Time of right now.\r\n    getNowTime: function () {\r\n        var now = GlideTime();; //Now Time\r\n        var modnow = now.getLocalTime().toString().split(' ');\r\n        return modnow[1];\r\n    },\r\n\r\n    //Takes a date/time field and adds time to it.\r\n    //params = sysparm_fdt (the first date/time field), sysparm_addtype (type of time to add - second, minute, hour, day, week, month, year), sysparm_addtime (amount of time to add based on the type).\r\n    addDateTimeAmount: function () {\r\n        var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field\r\n        var addTYPE = this.getParameter('sysparm_addtype'); //What to add - second (addSeconds()), minute (need to add conversion), hour (need to add conversion), day (addDays()), week (addWeeks()), month (addMonths()), year (addYears())\r\n        var addTIME = this.getParameter('sysparm_addtime'); //How much time to add\r\n        var day = GlideDateTime(firstDT);\r\n\r\n        if (addTYPE == 'second') {\r\n            day.addSeconds(addTIME);\r\n        } else if (addTYPE == 'minute') {\r\n            day.addSeconds(addTIME * 60);\r\n        } else if (addTYPE == 'hour') {\r\n            day.addSeconds(addTIME * (60 * 60));\r\n        } else if (addTYPE == 'day') {\r\n            day.addDays(addTIME);\r\n        } else if (addTYPE == 'week') {\r\n            day.addWeeks(addTIME);\r\n        } else if (addTYPE == 'month') {\r\n            day.addMonths(addTIME);\r\n        } else if (addTYPE == 'year') {\r\n            day.addYears(addTIME);\r\n        } else {\r\n            day.addDays(addTIME);\r\n        }\r\n\r\n        //return \"First Date: \" + firstDT + \" -Time to Add: \" + addTIME + \" -Add Type: \" + addTYPE + \" -Added Time: \" + day;\r\n        return day;\r\n    },\r\n\r\n    //Takes a glide date field and adds time to it.\r\n    //params = sysparm_fdt (the first date/time field), sysparm_addtype (type of time to add - day, week, month, year),sysparm_addtime (amount of time to add based on the type).\r\n    addDateAmount: function () {\r\n        var firstDT = this.getParameter('sysparm_fdt'); //First Date Field\r\n        var addTYPE = this.getParameter('sysparm_addtype'); //What to add - day (addDays()), week (addWeeks()), month (addMonths()), year (addYears())\r\n        var addTIME = this.getParameter('sysparm_addtime'); //How much time to add\r\n        var day = GlideDate();\r\n        day.setValue(firstDT);\r\n\r\n        if (addTYPE == 'day') {\r\n            day.addDays(addTIME);\r\n        } else if (addTYPE == 'week') {\r\n            day.addWeeks(addTIME);\r\n        } else if (addTYPE == 'month') {\r\n            day.addMonths(addTIME);\r\n        } else if (addTYPE == 'year') {\r\n            day.addYears(addTIME);\r\n        } else {\r\n            day.addDays(addTIME);\r\n        }\r\n\r\n        //return \"First Date: \" + firstDT + \" -Time to Add: \" + addTIME + \" -Add Type: \" + addTYPE + \" -Added Time: \" + day;\r\n        return day;\r\n    },\r\n\r\n    addTimeAmount: function () {\r\n        var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field\r\n        var addTYPE = this.getParameter('sysparm_addtype'); //What\r\n        var addTIME = this.getParameter('sysparm_addtime'); //How much time to add\r\n        var time = GlideTime();\r\n        time.setValue(firstDT);\r\n\r\n        if (addTYPE == 'second') {\r\n            time.addSeconds(addTIME);\r\n        } else if (addTYPE == 'minute') {\r\n            time.addSeconds(addTIME * 60);\r\n        } else if (addTYPE == 'hour') {\r\n            time.addSeconds(addTIME * (60 * 60));\r\n        } else {\r\n            time.addSeconds(addTIME);\r\n        }\r\n\r\n        var modtime = time.toString().split(' ');\r\n        //return \"First Date: \" + firstDT + \" -Time to Add: \" + addTIME + \" -Add Type: \" + addTYPE + \" -Added Time: \" + time;\r\n        return modtime[1];\r\n    },\r\n\r\n    //Private function to calculate the date difference return result in second, minute, hour, day.\r\n    _calcDateDiff: function (diffTYPE, seconds) {\r\n        var thisdiff;\r\n        if (diffTYPE == \"day\") {\r\n            thisdiff = seconds / 86400;\r\n        } else if (diffTYPE == \"hour\") {\r\n            thisdiff = seconds / 3600;\r\n        } else if (diffTYPE == \"minute\") {\r\n            thisdiff = seconds / 60;\r\n        } else if (diffTYPE == \"second\") {\r\n            thisdiff = seconds;\r\n        } else {\r\n            thisdiff = seconds;\r\n        }\r\n        return thisdiff;\r\n    }\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/GlideDateTimeUtils",
        "scriptFiles": [
          "ClientDateTimeUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/GlideDateTimeUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/GlideDateTimeUtils/ClientDateTimeUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.703Z",
    "updatedAt": "2025-09-21T08:58:58.345Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 245,
    "type": "script_include",
    "name": "getGlideRecordObject",
    "description": "CustomUtils A Script utils containing utility functions, patterns and coding standards. Notes:",
    "script": "var CustomUtils = Class.create();\r\nCustomUtils.prototype = {\r\n\tinitialize: function () {},\r\n\r\n\t/**\r\n\t *\r\n\t * @param {String} sysID: record sys_id\r\n\t * @param {String} tableName: record table name\r\n\t * @returns {glideRecord Obj, boolean}: GlideRecord object of the record OR false\r\n\t */\r\n\t_getGlideRecordObject: function (sysID, tableName) {\r\n\t\tif (sysID && tableName) {\r\n\t\t\tvar gr = new GlideRecord(tableName);\r\n\t\t\tgr.get(sysID);\r\n\t\t\tif (gr) {\r\n\t\t\t\treturn gr;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n    },\r\n    \r\n    // example _getGlideRecordObject\r\n    getIncidentState: function (sysID) {\r\n        var incidentTableName = 'incident';\r\n\r\n        var incidentGR = this._getGlideRecordObject(recordSysID, incidentTableName);\r\n        if (incidentGR) {\r\n            return incidentGR.getValue('state');\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\ttype: \"CustomUtils\",\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/getGlideRecordObject",
        "scriptFiles": [
          "getGlideRecordObject.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/getGlideRecordObject",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/getGlideRecordObject/getGlideRecordObject.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.699Z",
    "updatedAt": "2025-09-21T08:58:58.341Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 244,
    "type": "script_include",
    "name": "getCountFunction",
    "description": "Introduction : We have two script includes in here. Main aim for this is to have a generic count function which can be called from all server side scripts and you donâ€™t have to write GlideAggregate every time. It is scripted in such a way that you can pass table name and query dynamically and get the count. Script Include Significance :",
    "script": "// File: callingSI.js\nvar IncidentSI = Class.create();\r\nIncidentSI.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n    type: \"IncidentSI\",\r\n    generic: new GenericNOW(), \r\n/**\r\n     * Retrieve the number of active (non closed) incident tasks\r\n     * @param {sys_id} id - The id of an incident\r\n     * @returns {integer} - The number of open incident tasks\r\n     */\r\n    getActiveIncTasksCount: function(id) {\r\n        // Return the count of all open incident tasks associated with the incident\r\n        var result = this.generic.count({\r\n            table: \"incident_task\",\r\n            query: \"active=true^incident=\" + id\r\n        });\r\n        if (result.error) {\r\n            gs.error(\"getActiveIncTasksCount => Error message: \" + result.error);\r\n        }\r\n        return result.count;\r\n    },\r\n    \r\n    \r\n    /** Example calling script\r\nvar siinc = new GenericNOW();\r\nvar result = siinc.count({\r\n            table: \"incident_task\",\r\n            query: \"active=true^incident=b07db7f9878f345034e864a80cbb35e6\"\r\n        });\r\ngs.log(result.count.toString());\r\n*/\n\n// File: code.js\nvar GenericNOW, _count, _get, _insert, _remove, _update;\r\nGenericNOW = Class.create();\r\n\r\nGenericNOW.prototype = {\r\n    type: \"GenericNOW\",\r\n    initialize: function() {},\r\n\r\n    count: function() {\r\n        return _count.apply(this, arguments);\r\n    },\r\n    tableExists: function(table) {\r\n        return new TableUtils(table).tableExists();\r\n    },\r\n\r\n};\r\n\r\n\r\n\r\n_count = function(arg) {\r\n    var count, ga, query, res, table;\r\n    table = arg.table;\r\n    query = arg.query;\r\n    if (!table) {\r\n        return {\r\n            error: \"Attribute 'table' is not provided\"\r\n        };\r\n    }\r\n    if (query == null) {\r\n        return {\r\n            error: \"Attribute 'query' is not provided\"\r\n        };\r\n    }\r\n    if (!this.tableExists(table)) {\r\n        return {\r\n            error: \"Provided 'table' is not a valid table\"\r\n        };\r\n    }\r\n    res = {\r\n        data: {},\r\n        error: null,\r\n        count: 0\r\n    };\r\n    ga = new GlideAggregate(table);\r\n    ga.addEncodedQuery(query);\r\n    ga.addAggregate(\"COUNT\");\r\n    ga.query();\r\n    res.count = ga.next() ? (ga.getAggregate(\"COUNT\") * 1) : 0;\r\n    return res;\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/getCountFunction",
        "scriptFiles": [
          "callingSI.js",
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/getCountFunction"
      }
    },
    "createdAt": "2025-09-20T08:42:18.695Z",
    "updatedAt": "2025-09-21T08:58:58.338Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 243,
    "type": "script_include",
    "name": "GetCallerDetails",
    "description": "This script include will help to get the details of caller Idname like (email, firstname, lastname username etc.) mentioned in incident form with the help of on change client script by iniating a Ajax call.",
    "script": "// File: Calling Script Include from client.js\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n   if (isLoading || newValue === '') {\r\n      return;\r\n   }\r\n   var aj = new GlideAjax(\"GetCallerDetails\");  // This is the name of script include, as per the name of your requirement.\r\n   aj.addParam('sysparm_name',\"demoTest\");  // This is calling a defined function in script include.\r\n   aj.addParam('sysparm_caller_id',g_form.getValue('caller_id')); // getting a caller_id\r\n   aj.getXML(callback);\r\n   function callback(response){  // creating a callback function to store the response getting from script include.\r\n\tvar answer = response.responseXML.documentElement.getAttribute('answer');\r\n\t//alert(answer); // This will alert the details.\r\n\t// Commented above code and replaced it with GlideModal\r\n        var gm = new GlideModal(\"glide_alert_standard\", false, 600);\r\n        gm.setTitle(\"Caller Details\");\r\n        gm.setPreference(\"title\", answer.toString());\r\n        gm.setPreference(\"warning\", \"false\");\r\n        gm.render();\r\n   }\r\n   \r\n}\n\n// File: scriptinclude.js\nvar GetCallerDetails = Class.create(); // This will create a new class.\r\nGetCallerDetails.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\tdemoTest:function(){\r\n\t\tvar caller = this.getParameter('sysparm_caller_id');  // this will make the instance for caller id\r\n\t\tvar user = new GlideRecord('sys_user');\r\n\t\tuser.addQuery('sys_id',caller); // This will query the parameter, if exist\r\n\t\tuser.query();\r\n\t\tif(user.next()){  // If user found\r\n\t\t\treturn \"Email Id: \" + user.email + \"\\n\" + \"First Name \" + user.first_name + \"\\n\" + \"Last Name: \" + user.last_name + \"\\n\" + \"User Id: \" + user.user_name;\r\n\t\t}\r\n\t},\r\n\r\n    type: 'GetCallerDetails'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/GetCallerDetails",
        "scriptFiles": [
          "Calling Script Include from client.js",
          "scriptinclude.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/GetCallerDetails"
      }
    },
    "createdAt": "2025-09-20T08:42:18.691Z",
    "updatedAt": "2025-09-21T08:58:58.334Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 242,
    "type": "script_include",
    "name": "Get Reference Display Value",
    "description": "Get Reference Choice Display Value This scripts gets the display value of the selected reference value. Method: getChoiceDisplayValue(question, value)",
    "script": "var GetReferenceDisplayValue = Class.create();\r\nGetReferenceDisplayValue.prototype = {\r\n    initialize: function() {},\r\n\r\n    getReferenceDisplayValue: function(table, value) {\r\n        try {\r\n            var displayValue = '';\r\n            var grReferenceTable = new GlideRecord(table);\r\n\r\n            grReferenceTable.addQuery('sys_id', 'IN', value);\r\n            grReferenceTable.query();\r\n\r\n            while (grReferenceTable.next())\r\n                displayValue += grReferenceTable.getDisplayValue() + ', ';\r\n\r\n            return displayValue.slice(0, -2);\r\n        } catch (exception) {\r\n            gs.error(\"getReferenceDisplayValue() - \" + exception);\r\n        }\r\n    },\r\n\r\n    type: 'GetReferenceDisplayValue'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Get Reference Display Value",
        "scriptFiles": [
          "getReferenceDisplayValue.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Get%20Reference%20Display%20Value",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Get%20Reference%20Display%20Value/getReferenceDisplayValue.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.688Z",
    "updatedAt": "2025-09-21T08:58:58.330Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 241,
    "type": "script_include",
    "name": "Get Group Members",
    "description": "Get Group Members by Id A Script utils containing utility functions, to get the group members sys ids",
    "script": "var GetGroupMembers = Class.create();\r\nGetGroupMembers.prototype = {\r\n    initialize: function() {},\r\n    \r\n    getGroupMember: function(groupId) {\r\n        var id = [];\r\n        var grGroupMember = new GlideRecord('sys_user_grmember');\r\n\r\n        grGroupMember.addQuery(\"group.sys_id\", groupId);\r\n        grGroupMember.query();\r\n\r\n        while (grGroupMember.next()) {\r\n            id.push(grGroupMember.getValue(\"user\"));\r\n        }\r\n\r\n        return id.join();\r\n    },\r\n\r\n    type: 'GetGroupMembers'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Get Group Members",
        "scriptFiles": [
          "getGroupMembers.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Get%20Group%20Members",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Get%20Group%20Members/getGroupMembers.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.684Z",
    "updatedAt": "2025-09-21T08:58:58.327Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 240,
    "type": "script_include",
    "name": "get field values for multiple records from a table",
    "description": "Script contains scalable method to get display value of particular field from a table for any number of records filtered by a encoded query Method: \\getFieldDisplayValues(tableName, query, fieldName) -   @param {String} tableName: Table name",
    "script": "var CustomUtils = Class.create();\r\nCustomUtils.prototype = {\r\n\tinitialize: function () {},\r\n\r\n\t/**\r\n\t *\r\n\t * @param {String} tableName: Table name\r\n\t * @param {String} query: query to filter the records\r\n\t * @param {String} fieldName: Field name for which display value is required\r\n\t * @returns {String OR boolean}: comma separated field display values of filtered records\r\n\t * \t\t\t\t\t\t\t\tOR false if no record/no display value if found on filtered records\r\n\t */\r\n\t_getFieldDisplayValues: function (tableName, query, fieldName) {\r\n\t\tvar result = false;\r\n\t\tif (tableName && query && fieldName) {\r\n\t\t\tvar arr = [];\r\n\t\t\tvar gr = new GlideRecord(tableName);\r\n\t\t\tgr.addEncodedQuery(query);\r\n\t\t\tgr.query();\r\n\t\t\twhile (gr.next()) {\r\n\t\t\t\tif (!gr[fieldName].nil()) {\r\n\t\t\t\t\tarr.push(gr[fieldName].getDisplayValue());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresult = arr.join(\", \");\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\t/****** Example functions *******/\r\n\r\n\t/**\r\n\t *\r\n\t * @param {String} sysIDs: Comma separated list of sysIDs (can also be single sysID)\r\n\t */\r\n\tgetUserEmailAddressesBySysIDs: function (sysIDs) {\r\n\t\treturn this._getFieldDisplayValues(\"sys_user\", \"sys_idIN\" + sysIDs, \"email\");\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t * @param {String} sysIDs: Comma separated list of sysIDs (can also be single sysID)\r\n\t */\r\n\tgetUserNamesBySysIDs: function (sysIDs) {\r\n\t\treturn this._getFieldDisplayValues(\"sys_user\", \"sys_idIN\" + sysIDs, \"name\");\r\n\t},\r\n\r\n\ttype: \"CustomUtils\",\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/get field values for multiple records from a table",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/get%20field%20values%20for%20multiple%20records%20from%20a%20table",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/get%20field%20values%20for%20multiple%20records%20from%20a%20table/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.680Z",
    "updatedAt": "2025-09-21T08:58:58.323Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 239,
    "type": "script_include",
    "name": "Get Field Label in Specific Language",
    "description": "Get Field Label in Specific Language This Script Include enables retrieving the label of a certain table field in any given language. Often in multi-language instances, the label of a field must be accessed via a script (e.g. to add it to the HTML of an email or add it to another fields like the description or work notes). Instead of retrieving the value each time individually this script inclu...",
    "script": "var LanguageUtils = Class.create();\r\nLanguageUtils.prototype = {\r\n    getLabel: function(table, variable, language) {\r\n\r\n        var grLabel = new GlideRecord(\"sys_documentation\");\r\n        grLabel.addQuery(\"name\", table);\r\n        grLabel.addQuery(\"element\", variable);\r\n        grLabel.addQuery(\"language\", language);\r\n        grLabel.query();\r\n\r\n        if (grLabel.next()) {\r\n            return grLabel.getValue(\"label\");\r\n        } else { //if no label in the given language can be found return the default English label instead\r\n            var grEnLabel = new GlideRecord(\"sys_documentation\");\r\n            grEnLabel.addQuery(\"name\", table);\r\n            grEnLabel.addQuery(\"element\", variable);\r\n            grEnLabel.addQuery(\"language\", \"en\");\r\n            grEnLabel.query();\r\n\r\n            if (grEnLabel.next()) {\r\n                gs.log(\"The variable \" + variable + \" does not have a label in \" + language + \" associated to it, in the following table: +\" + table);\r\n                return grEnLabel.getValue(\"label\");\r\n            } else {\r\n                gs.log(\"The variable \" + variable + \" can not be found in the following table: +\" + table);\r\n                return;\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    type: 'LanguageUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Get Field Label in Specific Language",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Get%20Field%20Label%20in%20Specific%20Language",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Get%20Field%20Label%20in%20Specific%20Language/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.676Z",
    "updatedAt": "2025-09-21T08:58:58.319Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 238,
    "type": "script_include",
    "name": "Get Current User Information",
    "description": "Get Current User Information We frequently need essential current user information such as userId, name, sysId, email, and roles on the client side. To streamline this process, I've developed a Script Include that can be invoked directly from the client side. This Script Include fetches and provides an object encapsulating the current user's userId, firstName, lastName, email, roles, and sysId...",
    "script": "var GetCurrentUserInfo = Class.create();\r\nGetCurrentUserInfo.prototype = {\r\n    initialize: function() {},\r\n\r\n    getCurrentUserInfo: function() {\r\n        var currentUser = gs.getUser(); //This will give the reference to current user object.\r\n        var userId = currentUser.getName();\r\n        var firstName = currentUser.getFirstName();\r\n        var lastName = currentUser.getLastName();\r\n        var email = currentUser.getEmail();\r\n        var sysId = currentUser.getID();\r\n        var roles = currentUser.getRoles();\r\n\r\n        return {\r\n            userId: userId,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            email: email,\r\n            roles: roles,\r\n            sysId: sysId\r\n        };\r\n    },\r\n    type: 'GetCurrentUserInfo'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Get Current User Information",
        "scriptFiles": [
          "getCurrentUserInformation.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Get%20Current%20User%20Information",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Get%20Current%20User%20Information/getCurrentUserInformation.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.673Z",
    "updatedAt": "2025-09-21T08:58:58.316Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 237,
    "type": "script_include",
    "name": "Get Choice Display Value",
    "description": "Get Selected Choice Display Value This scripts gets the display value of the selected choice. Method: getChoiceDisplayValue(question, value)",
    "script": "var GetChoiceDisplayValue = Class.create();\r\nGetChoiceDisplayValue.prototype = {\r\n    initialize: function() {},\r\n\t\r\n    getChoiceDisplayValue: function(question, value) {\r\n        try {\r\n            var displayValue = '';\r\n            var grQuestionChoice = new GlideRecord('question_choice');\r\n\r\n            grQuestionChoice.addEncodedQuery('question=' + question + '^value=' + value);\r\n            grQuestionChoice.query();\r\n\r\n            if (grQuestionChoice.next())\r\n                displayValue = grQuestionChoice.text + '';\r\n\r\n            return displayValue;\r\n        } catch (exception) {\r\n            gs.error(\"getChoiceDisplayValue() - \" + exception);\r\n        }\r\n    },\r\n\r\n    type: 'GetChoiceDisplayValue'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Get Choice Display Value",
        "scriptFiles": [
          "getChoiceDisplayValue.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Get%20Choice%20Display%20Value",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Get%20Choice%20Display%20Value/getChoiceDisplayValue.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.669Z",
    "updatedAt": "2025-09-21T08:58:58.312Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 236,
    "type": "script_include",
    "name": "Get Approvers of a Ticket",
    "description": "Get Approvers of a Ticket This script returns the number of approvers sysid that are being requested for Approval",
    "script": "var GetApproversForATicket = Class.create();\r\nGetApproversForATicket.prototype = {\r\n    initialize: function() {},\r\n\r\n    getApprovers: function(sysId) {\r\n\r\n        var approvalUsers = [];\r\n        var grApproval = new GlideRecord('sysapproval_approver');\r\n        grApproval.addQuery('sysapproval.sys_id', sysId);\r\n        grApproval.query();\r\n\r\n        while (grApproval.next()) {\r\n            approvalUsers.push(grApproval.approver.toString());\r\n        }\r\n\r\n        return approvalUsers;\r\n    },\r\n\r\n    type: 'GetApproversForATicket'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Get Approvers of a Ticket",
        "scriptFiles": [
          "GetApproversForATicket.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Get%20Approvers%20of%20a%20Ticket",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Get%20Approvers%20of%20a%20Ticket/GetApproversForATicket.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.666Z",
    "updatedAt": "2025-09-21T08:58:58.308Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 235,
    "type": "script_include",
    "name": "Generate QR Code and attach to RITM",
    "description": "Create QR Code This sample script uses a free QR Code API and does a REST call to the server and returns the QR code as image. Then attaches the QR code into Requested Item record.",
    "script": "var ritm_sys_id = '4060f68007cd30100779fea89c1ed0a2'; // Replace to your RITM sys_id\r\nvar qrText = \"Test\"; // Your text to convert to QR code e.g. your URL etc\r\n\r\nvar current = new GlideRecord('sc_req_item');\r\n\r\nif (current.get(ritm_sys_id)) {\r\n\r\n\tvar baseURL = \"https://api.qrserver.com/v1/create-qr-code/\";\r\n\tvar qrData = \"?data=\" + qrText + \"&size=100x100\";\r\n\r\n\tvar requestUrl = encodeURI(baseURL +  qrData);\r\n\tvar request = new sn_ws.RESTMessageV2();\r\n\trequest.setHttpMethod('get');\r\n\trequest.setEndpoint(requestUrl);\r\n\trequest.setRequestHeader(\"Content-Type\", \"image/jpeg\");\r\n\trequest.saveResponseBodyAsAttachment(\"sc_req_item\", ritm_sys_id, qrText); // Save the body as attachment\r\n\tvar pdfContentResponse = request.execute();\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Generate QR Code and attach to RITM",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Generate%20QR%20Code%20and%20attach%20to%20RITM",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Generate%20QR%20Code%20and%20attach%20to%20RITM/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.662Z",
    "updatedAt": "2025-09-21T08:58:58.304Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 234,
    "type": "script_include",
    "name": "Find months between two dates",
    "description": "getMonths Helper function that calculates total months between two specified dates e.g. total months between 2020-01-01 and 2022-01-01 is 24!",
    "script": "var DateUtils = Class.create();\r\nDateUtils.prototype = {\r\n    initialize: function () { },\r\n\r\n    getMonths: function (startDate, endDate) {\r\n\r\n        var MONTHS_IN_A_YEAR = 12;\r\n        var totalMonths = 0;\r\n\r\n        var startDateGd = new GlideDate();\r\n        startDateGd.setValue(startDate);\r\n        var startDateTimeGdt = new GlideDateTime(startDateGd);\r\n        var startDateMonth = startDateTimeGdt.getMonthLocalTime();\r\n        var startDateYear = startDateTimeGdt.getYearLocalTime();\r\n\r\n        var endDateGt = new GlideDate();\r\n        endDateGt.setValue(endDate);\r\n        var endDateTimeGdt = new GlideDateTime(endDateGt);\r\n        var endDateMonth = endDateTimeGdt.getMonthLocalTime();\r\n        var endDateYear = endDateTimeGdt.getYearLocalTime();\r\n\r\n        if (startDateYear != endDateYear) {\r\n            totalMonths = MONTHS_IN_A_YEAR - startDateMonth + endDateMonth + (endDateYear - startDateYear - 1) * MONTHS_IN_A_YEAR;\r\n        } else {\r\n            totalMonths = endDateMonth - startDateMonth;\r\n        }\r\n\r\n        return totalMonths;\r\n\r\n    },\r\n\r\n    type: 'DateUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Find months between two dates",
        "scriptFiles": [
          "DateUtil.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Find%20months%20between%20two%20dates",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Find%20months%20between%20two%20dates/DateUtil.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.659Z",
    "updatedAt": "2025-09-21T08:58:58.301Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 233,
    "type": "script_include",
    "name": "Financial Service Utilities",
    "description": "Financial Service Utilities Script Include This Script Include provides a collection of utility functions commonly used in financial services applications. It includes functions for calculating interest, formatting currency, and calculating loan payments.",
    "script": "var FinancialServiceUtilities = Class.create();\r\nFinancialServiceUtilities.prototype = {\r\n    initialize: function() {\r\n    },\r\n\r\n    /**\r\n     * Calculates simple interest.\r\n     *\r\n     * @param {number} principal - The principal amount.\r\n     * @param {number} rate - The annual interest rate (in percentage).\r\n     * @param {number} time - The time period in years.\r\n     * @returns {number} The calculated simple interest.\r\n     */\r\n    calculateInterest: function(principal, rate, time) {\r\n        // Simple interest calculation\r\n        return (principal * rate * time) / 100;\r\n    },\r\n\r\n    /**\r\n     * Calculates compound interest.\r\n     *\r\n     * @param {number} principal - The principal amount.\r\n     * @param {number} rate - The annual interest rate (in percentage).\r\n     * @param {number} time - The time period in years.\r\n     * @param {number} compoundingFrequency - The number of times interest is compounded per year.\r\n     * @returns {number} The calculated compound interest.\r\n     */\r\n    calculateCompoundInterest: function(principal, rate, time, compoundingFrequency) {\r\n        // Compound interest calculation\r\n        var compoundInterest = principal * Math.pow(1 + (rate / compoundingFrequency), compoundingFrequency * time);\r\n        return compoundInterest - principal;\r\n    },\r\n\r\n    /**\r\n     * Formats a currency amount.\r\n     *\r\n     * @param {number} amount - The amount to be formatted.\r\n     * @param {string} currencyCode - The currency code (e.g., \"USD\", \"EUR\").\r\n     * @returns {string} The formatted currency amount.\r\n     */\r\n    formatCurrency: function(amount, currencyCode) {\r\n        // Format the amount as currency\r\n        return gs.formatNumber(amount, currencyCode);\r\n    },\r\n\r\n    /**\r\n     * Calculates monthly loan payments.\r\n     *\r\n     * @param {number} principal - The principal loan amount.\r\n     * @param {number} rate - The annual interest rate (in percentage).\r\n     * @param {number} term - The loan term in years.\r\n     * @returns {number} The calculated monthly loan payment.\r\n     */\r\n    calculateLoanPayments: function(principal, rate, term) {\r\n        // Calculate monthly loan payments (assuming monthly compounding)\r\n        var monthlyInterestRate = rate / 12 / 100;\r\n        var numberOfPayments = term * 12;\r\n        var monthlyPayment = principal * monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments) / (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1);\r\n        return monthlyPayment;\r\n    },\r\n\r\n    type: 'FinancialServiceUtilities'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Financial Service Utilities",
        "scriptFiles": [
          "FinancialServiceUtilities.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Financial%20Service%20Utilities",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Financial%20Service%20Utilities/FinancialServiceUtilities.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.655Z",
    "updatedAt": "2025-09-21T08:58:58.297Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 232,
    "type": "script_include",
    "name": "Extending OOB TableUtils",
    "description": "Extending the baseline TableUtils Script Include This code snippet extends the out of the box Table Utils Script Include by adding a method to retrieve all fields -and the properties- of a given table. There is already a baseline API called getFields() that does the same, but it required an existing GlideRecord to perform it. There are cases where we want the fields of a table without necessari...",
    "script": "var EXT_TableUtils = Class.create();\r\n\r\nEXT_TableUtils.prototype = Object.extendsObject(TableUtils, {\r\n\r\n    initialize: function(tableName) {\r\n        TableUtils.prototype.initialize.call(this, tableName);        \r\n    },\r\n\r\n    /**SNDOC\r\n        @name getFieldsAndAttributes\r\n        @description Returns a data structure with field name and field properties for a given table.\r\n        OOB getFields() methods from either GlideRecord() or GlideRecordUtil()\r\n        only work with an existing record and not just with the table name. This one goes\r\n        to sys_dictionary directly and therefore does not need a valid GlideRecord to work.\r\n        The returned object has this structure:\r\n        {\r\n            <field_name_1>: {\r\n               field_label: <label>,\r\n               field_size: <size>,\r\n               field_type: <type>,\r\n               reference_table: <table> (only for reference or glide_list types)\r\n            },\r\n            <field_name_2>: {\r\n               ...\r\n            }\r\n        }\r\n        @example\r\n        var fields = new EXT_TableUtils('incident').getFieldsAndAttributes();\r\n        for (var fieldName in fields) {\r\n            gs.print('Field ' + fieldName + ' is of type ' + fields[fieldName].field_type);\r\n        }\r\n        @returns {object} [fields]\r\n        */\r\n\r\n    getFieldsAndAttributes: function() {\r\n\r\n        var fields = {};\r\n\r\n        // Get all the table names in the hierarchy and turn it into an array\r\n        // getHierarchy() is a method from the parent class TableUtils\r\n\r\n        var tableHierarchy = this.getHierarchy(this.tableName);\r\n        \r\n        // Go find all the fields for all the tables of the hierarchy\r\n\r\n        var dicGr = new GlideRecord('sys_dictionary');\r\n\r\n        dicGr.addQuery('name', 'IN', j2js(tableHierarchy).join(','));       \r\n        dicGr.addEncodedQuery('internal_type!=collection^ORinternal_type=NULL');\r\n        dicGr.query();\r\n\r\n        while (dicGr.next()) {\r\n\r\n            var fieldName = dicGr.getValue('element');\r\n\r\n            fields[fieldName] = {};\r\n            fields[fieldName].field_label = dicGr.getValue('column_label');\r\n            fields[fieldName].field_size = dicGr.getValue('max_length');\r\n\r\n            fields[fieldName].field_type = dicGr.getValue('internal_type');\r\n            if (fields[fieldName].field_type === 'reference' || fields[fieldName].field_type === 'glide_list') {\r\n                fields[fieldName].reference_table = dicGr.getValue('reference');\r\n            }\r\n            \r\n        }\r\n\r\n        return fields;\r\n\r\n    },\r\n\r\n    type: 'EXT_TableUtils'\r\n\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Extending OOB TableUtils",
        "scriptFiles": [
          "EXT_TablesUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Extending%20OOB%20TableUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Extending%20OOB%20TableUtils/EXT_TablesUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.652Z",
    "updatedAt": "2025-09-21T08:58:58.294Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 231,
    "type": "script_include",
    "name": "Excel Parser",
    "description": "Server side Excel parser utility leveraging the GlideExcelParser API. Pass in the sysid of an Excel attachment and get back an array of objects, with every row in the sheet being an element in the array.",
    "script": "var ExcelParser = Class.create();\r\nExcelParser.prototype = {\r\n    initialize: function() {\r\n    },\r\n\r\n    readData: function(attachmentID) {\r\n        //Initialize the GlideSysAttachment call for retrieval of our sheet\r\n        var attachment = new GlideSysAttachment();\r\n        var attachmentStream = attachment.getContentStream(attachmentID);\r\n\r\n        //Begin to parse the excel sheet for relevant data\r\n        var parser = new sn_impex.GlideExcelParser();\r\n        parser.parse(attachmentStream);\r\n        parser.setHeaderRowNumber(1);\r\n        var headers = parser.getColumnHeaders(); // Array of headers\r\n        var excelData = []; // An array that will hold the data from each line as an object\r\n\r\n        while (parser.next()) {\r\n            var row = parser.getRow();\r\n            if (JSUtil.notNil(row))\r\n                excelData.push(row);\r\n        }\r\n        return excelData;\r\n    },\r\n\r\n    type: 'ExcelParser'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Excel Parser",
        "scriptFiles": [
          "excelParser.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Excel%20Parser",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Excel%20Parser/excelParser.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.648Z",
    "updatedAt": "2025-09-21T08:58:58.290Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 230,
    "type": "script_include",
    "name": "Excel Attachment Via script",
    "description": "Using Excel Attachment feature you can export the table contents in excel. This script include can be use for making an excel sheet from ServiceNow script and adding it to a record as an attachment. Usage Example:",
    "script": "var excelAttachment = Class.create();\r\nexcelAttachment.prototype = {\r\n    initialize: function() {},\r\n    addExcelAttachment: function(table, recordId, fileName, row, headerColumns) //RecordId is a sysid of the record for the attachment\r\n    {\r\n        /* headerColumns variable should contains the comma seperated headers for excel header for ex: Number,Summary,Description,Requester\r\n        Row variable should be a JSON Array for ex: [{'number':'inc000001','short_description':'test'}] */\r\n\r\n        var attachment = new Attachment();\r\n        fileName = fileName + \".csv\";\r\n        var content_type = 'text/csv';\r\n        var fileBytes = '';\r\n        fileBytes += headerColumns.toString() + \"\\n\";\r\n        \r\n        for (var i = 0; i < row.length; i++) {\r\n\t\t\tvar jsRow = row[i];\r\n            for (var j in jsRow) {\r\n                fileBytes += jsRow[j] + ',';\r\n            }\r\n            fileBytes += '\\n';\r\n        }\r\n        var attachmentRec = attachment.write(table, recordId, fileName, content_type, fileBytes);\r\n\t\t\r\n\t\treturn attachmentRec;\r\n    },\r\n    type: 'excelAttachment'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Excel Attachment Via script",
        "scriptFiles": [
          "excelAttachment.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Excel%20Attachment%20Via%20script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Excel%20Attachment%20Via%20script/excelAttachment.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.644Z",
    "updatedAt": "2025-09-21T08:58:58.287Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 229,
    "type": "script_include",
    "name": "EvtMgmtCustom_PostTransformHandler",
    "description": "EvtMgmtCustomPostTransformHandler Script Include I came across a requirement where we wanted to a create a new alert/incident when the same event is encountered after a certain amount of time, even if the existing alert/incident are still open. OOTB if this is the case and same event comes into the system, it will go ahead and append it to the existing alert. So, I made the EvtMgmtCustomPostTra...",
    "script": "/**\r\n @Param event - GlideRecord representing the event after transform\r\n @Param origEventSysId - Id of the event. The GlideRecord event parameter is a temporary object, and therefore does not contain the id of the original event.\r\n*/\r\n(function postTransformHandler(event, origEventSysId){\r\n  gs.log('PostTransformHandler custom script is active'); \r\n\t// Make any changes to the alert which will be created out of this Event\r\n\t// Note that the Event itself is immutable, and will not be changed in the database\r\n\tif(event.source == 'Your Source' && event.resource == 'Your Resource')  //this script to action only in certain source and resource values.\r\n\t{\r\n  //Checking if there's already an processed event in the system with same source , resource , message key, again we can add more query paramteters here or modify this query as per the requirement.\r\n  var checkAlert = new GlideRecord('em_event');\r\n\tcheckAlert.addQuery('source',event.source);\r\n\tcheckAlert.addQuery('resource',event.resource);\r\n\tcheckAlert.addQuery('severity',event.severity);\r\n\tcheckAlert.addQuery('message_key',event.message_key);\r\n\tcheckAlert.addQuery('stateNOT INReady,Ignored,Error');\t\r\n\tcheckAlert.orderByDesc('time_of_event');\r\n\tcheckAlert.query();\r\n\tif(checkAlert.next())   //Event found\r\n \t\t{  \r\n\t\t\t var limit = '4';  //set limit to 4 hours we can make changes to this as per the requirement. \r\n\t\t\t var newDate = event.time_of_event.toString();   \r\n\t\t\t var oldDate = checkAlert.time_of_event.toString(); \r\n\t\t\t var gDate = new GlideDateTime(newDate); \r\n\t\t\t var sDate = new GlideDateTime(oldDate); \r\n\t\t\t var diffSeconds = gs.dateDiff(gDate.getDisplayValue(),sDate.getDisplayValue(),true); //calculating the different between current time of event and previous time of event.\r\n\t\t\t var diff_sec = Math.abs(diffSeconds);  \r\n\t\t\t var hours = diff_sec/3600;  //Converting the seconds to hours for comparison with the limit value.\r\n       if(limit < hours)  //If hours is more than limit we apent the message key with time of event for new event before being processed as alert. This will create a new alert with the updated message key , instead of updating a exisiting one. \r\n\t\t\t\t{\r\n\t\t\t\tvar m_key = event.message_key+'+'+event.time_of_event;\r\n\t\t\t\tevent.setValue('message_key',m_key);\r\n\t\t\t\t} \r\n\t\t}\r\n\t}\r\n\t// To abort event processing and ignore the event, return false;\r\n\t// returning a value other than boolean will result in an error\r\n\treturn true;  \r\n \r\n})(event, origEventSysId);",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/EvtMgmtCustom_PostTransformHandler",
        "scriptFiles": [
          "EvtMgmtCustom_PostTransformHandler.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/EvtMgmtCustom_PostTransformHandler",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/EvtMgmtCustom_PostTransformHandler/EvtMgmtCustom_PostTransformHandler.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.638Z",
    "updatedAt": "2025-09-21T08:58:58.283Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 228,
    "type": "script_include",
    "name": "Dynamic Dropdown List",
    "description": "The client script and script include can be used to load a options of a dropdown list where dependency exist on another dropdownlist. Like Category - Subcategory. Adiitional functionality added in the client script is, when there are no options available for the selected dependent value, we can hide the dropdown field.",
    "script": "// File: Client.js\nfunction onChange(control, oldValue, newValue, isLoading) {\r\n  \r\n  \r\n        // Do nothing when loading the form or no change in the category.  \r\n\t      if(isLoading || newValue == oldValue){\r\n     \t      return;\r\n    \t  }\r\n\r\n        //Hide Subcategory if the selction of category is 'None'.\r\n        if (newValue == '') {\r\n            g_form.setMandatory('subcategory', false);\r\n            g_form.setDisplay('subcategory', false);\r\n        }\r\n        //Clear the subcategory before adding new options values.\r\n        g_form.clearOptions('subcategory');\r\n\r\n        //Get the list of Subcategories based on the selection of Category value.\r\n        var ajax_query = new GlideAjax('DynamicListAjax');\r\n        ajax_query.addParam('sysparm_name', 'getList');\r\n        ajax_query.addParam('sysparm_table', 'incident');\r\n        ajax_query.addParam('sysparm_dependent', newValue);\r\n        ajax_query.addParam('sysparm_element', 'subcategory');\r\n        ajax_query.getXML(loadSubCategory);\r\n\r\n        function loadSubCategory(response) {\r\n\r\n            var answer = response.responseXML.documentElement.getAttribute(\"answer\");\r\n            //add the choice list to the subcategory if exist.\r\n            if (answer) {\r\n                answer = Array.from(new Set(answer.split(','))).toString();\r\n                var subcat_list = answer.split(\",\");\r\n\r\n                g_form.addOption('subcategory', '', '-- None --');\r\n              \r\n                //add the list of options retrieved to the Subactegory field\r\n                for (var i = 0; i < returned_subcat_list.length; i++) {\r\n                    if (returned_subcat_list[i] != \"\") {\r\n                        var value_label_pair = subcat_list[i].split(':');\r\n                        g_form.addOption('subcategory', value_label_pair[0], value_label_pair[1]);\r\n                    }\r\n                }\r\n                g_form.setDisplay('subcategory', true);\r\n                g_form.setMandatory('subcategory', true);\r\n            } else { // hide subcategory if no choice list exist\r\n                g_form.setMandatory('subcategory', false);\r\n                g_form.setDisplay('subcategory', false);\r\n            }\r\n        }\r\n\r\n    }\n\n// File: UtilScript.js\nvar DynamicListAjax = Class.create();\r\nDynamicListAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\t\r\n\tgetList : function(sysparm_table,sysparm_dependent,sysparm_element){\r\n\t\tvar list={};\r\n    \t\tvar table_name = this.getParameter('sysparm_table');\r\n\t\tvar dependent_value = this.getParameter('sysparm_dependent');\r\n\t\tvar element = this.getParameter('sysparm_element');\r\n\t\tvar sys_choice_gr = new GlideRecord('sys_choice');\r\n\t\tsys_choice_gr.addQuery('name',table_name);\r\n\t\tsys_choice_gr.addQuery('dependent_value', dependent_value);\r\n\t\tsys_choice_gr.addQuery('element', element);\r\n\t\tsys_choice_gr.addQuery('inactive',false);\r\n\t\tsys_choice_gr.orderByDesc('sequence');\r\n\t\tsys_choice_gr.query();\r\n\t\tif(sys_choice_gr.hasNext())\r\n\t\t\t{\r\n\t\t\t\twhile(sys_choice_gr.next())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist[sys_choice_gr.label] = sys_choice_gr.value;\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\treturn JSON.stringify(list);\r\n\t\t\r\n\t},\r\n  \r\n    type: 'DynamicListAjax'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Dynamic Dropdown List",
        "scriptFiles": [
          "Client.js",
          "UtilScript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Dynamic%20Dropdown%20List"
      }
    },
    "createdAt": "2025-09-20T08:42:18.634Z",
    "updatedAt": "2025-09-21T08:58:58.279Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 227,
    "type": "script_include",
    "name": "Deprecate Field",
    "description": "Deprecate Field This function deprecateField is design to depreacte particular field of the table so Customers will not use it for any further use. Example:",
    "script": "function deprecateField(fieldName, tableName) {\r\n  if (!GlideTableDescriptor.fieldExists(tableName, fieldName)) return;\r\n  var deprecationLabel = \" (deprecated)\";\r\n  var dictGr = new GlideRecord(\"sys_documentation\");\r\n  dictGr.addQuery(\"name\", tableName);\r\n  dictGr.addQuery(\"element\", fieldName);\r\n  dictGr.addEncodedQuery(\"labelNOT LIKE(deprecated)\");\r\n  dictGr.query();\r\n  if (dictGr.next()) {\r\n    dictGr.setValue(\"label\", dictGr.label + deprecationLabel);\r\n    dictGr.setValue(\"plural\", dictGr.plural + deprecationLabel);\r\n    dictGr.setValue(\"hint\", dictGr.hint + deprecationLabel);\r\n    dictGr.update();\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Deprecate Field",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Deprecate%20Field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Deprecate%20Field/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.630Z",
    "updatedAt": "2025-09-21T08:58:58.275Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 226,
    "type": "script_include",
    "name": "Delete Multiple Records Async",
    "description": "This script include provides a way to delete multiple records asynchronously, with the option to define chunk sizes. It is useful for deleting huge amount of data without overoading the instance. Since this is a script for DELETE operations, use with caution!",
    "script": "var DeleteMultipleRecordsAsync = Class.create();\r\nDeleteMultipleRecordsAsync.prototype = {\r\n    initialize: function() {\r\n\t\t\r\n\t\tthis.secondsBetweenChunks = 1;\r\n\t\t\r\n    },\r\n\r\n\t/* Delete all records asynchronously */\r\n\tdeleteRecordsAsync : function(tableName, encodedQuery, executeBusinessRules, chunkSize){\t\t\t\t\r\n\t\t\r\n\t\tthis._validateVariables(tableName, encodedQuery, chunkSize);\r\n\t\tthis._scheduleNextJob(tableName, encodedQuery, executeBusinessRules, chunkSize);\r\n\t\t\r\n\t},\r\n\t\r\n\t/* Delete chunk of records and schedule next chunk asynchronously */\r\n\tdeleteAndScheduleNext : function(tableName, encodedQuery, executeBusinessRules, chunkSize){\r\n\t\t\r\n\t\tthis._validateVariables(tableName, encodedQuery, chunkSize);\r\n\t\t\r\n\t\tvar dtStart = new GlideDateTime();\r\n\t\t\r\n\t\tvar rowCount = 0;\r\n\t\tvar grRecordsToDelete = new GlideRecord(tableName);\t\t\r\n\t\t\r\n\t\tgrRecordsToDelete.addEncodedQuery(encodedQuery);\r\n\t\tgrRecordsToDelete.setLimit(chunkSize);\r\n\t\t\r\n\t\tif(executeBusinessRules == \"false\"){\t\t\t\r\n\t\t\tgrRecordsToDelete.setWorkflow(false);\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tgrRecordsToDelete.query();\r\n\t\t\r\n\t\twhile(grRecordsToDelete.next()){\r\n\t\t\t\r\n\t\t\trowCount++;\r\n\t\t\t\r\n\t\t\tgrRecordsToDelete.deleteRecord();\r\n\t\t\t\r\n\t\t}\r\n\t\t\t\t\r\n\t\tvar dtEnd = new GlideDateTime();\r\n\t\tvar duration = GlideDateTime.subtract(dtStart, dtEnd);\r\n\t\t\r\n\t\tvar logMessage = \"Deleted \" + rowCount + \" records in \" + duration.getDisplayValue() + \".\";\r\n\t\t\r\n\t\tif(rowCount == chunkSize){\t\t\t\r\n\t\t\t\r\n\t\t\tthis._scheduleNextJob(tableName, encodedQuery, executeBusinessRules, chunkSize);\r\n\t\t\t\r\n\t\t\tlogMessage += \" Next chunk scheduled to run in \" + this.secondsBetweenChunks + \" second(s).\";\r\n\t\t\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\t\r\n\t\t\tlogMessage += \" Job completed.\";\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tgs.log(logMessage, \"DeleteMultipleRecordsAsync\");\r\n\t\t\r\n\t},\r\n\t\r\n\t/* create a new scheduled job for chunk delete */\r\n\t_scheduleNextJob : function(tableName, encodedQuery, executeBusinessRules, chunkSize){\r\n\t\t\r\n\t\tvar scriptString = \"\";\r\n\t\t\r\n\t\tscriptString += \"var delScript = new DeleteMultipleRecordsAsync(); \\n\";\r\n\t\tscriptString += \"delScript.deleteAndScheduleNext('\" + tableName + \"', '\" + encodedQuery + \"', '\" + executeBusinessRules + \"', \" + chunkSize + \");\";\r\n\t\t\r\n\t\tvar bulkStartTime = new GlideDateTime();\r\n\t\t\t\t\r\n\t\tbulkStartTime.addSeconds(this.secondsBetweenChunks);\r\n\t\t\r\n\t\tvar grTrigger = new GlideRecord(\"sys_trigger\");\r\n\t\t\r\n\t\tgrTrigger.initialize();\r\n\t\tgrTrigger.name = \"DeleteMultipleRecordsAsync\";\r\n\t\tgrTrigger.next_action = bulkStartTime;\r\n\t\tgrTrigger.script = scriptString;\r\n\t\tgrTrigger.job_id.setDisplayValue('RunScriptJob');\r\n\t\tgrTrigger.state = 0; /* Ready */\r\n\t\tgrTrigger.trigger_type = 0; /* Run Once */\r\n\t\t\r\n\t\tgrTrigger.insert();\r\n\t\t\r\n\t},\r\n\t\r\n\t_validateVariables : function(tableName, encodedQuery, chunkSize){\r\n\t\t\r\n\t\tif(tableName == undefined || tableName == \"\"){\r\n\t\t\tthrow \"Table name must be provided.\";\r\n\t\t}\r\n\t\t\r\n\t\tif(encodedQuery == undefined || encodedQuery == \"\"){\r\n\t\t\tthrow \"Encoded query must be provided.\";\r\n\t\t}\r\n\t\t\r\n\t\tif(chunkSize == undefined || !parseInt(chunkSize) > 0 ){\r\n\t\t\tthrow \"Chunk size must be a number higher than 0.\";\r\n\t\t}\r\n\t\t\r\n\t},\r\n\t\r\n    type: 'DeleteMultipleRecordsAsync'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Delete Multiple Records Async",
        "scriptFiles": [
          "DeleteMultipleRecordsAsync.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Delete%20Multiple%20Records%20Async",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Delete%20Multiple%20Records%20Async/DeleteMultipleRecordsAsync.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.627Z",
    "updatedAt": "2025-09-21T08:58:58.271Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 225,
    "type": "script_include",
    "name": "Data Lookup Table Utils",
    "description": "Data Lookup Table Utils This script include provides a quick method of looking up data from any table extended from dlmatcher (Data Lookup Matcher Rules). It will build a list of the columns for the specified table and then allow you to query based on an array of values.",
    "script": "var DataLookupUtils = Class.create();\r\n\r\nDataLookupUtils.prototype = {\r\n    initialize: function (tableName, sortByColumn) {\r\n        this.tableName = tableName;\r\n        this.columnNames = this._getColumnNames(tableName);\r\n        this.queryColumns = this.columnNames;\r\n\r\n        sortByColumn = sortByColumn || false;\r\n        this.sortColumn = sortByColumn ? DataLookupUtils.SORT_BY_COLUMN : DataLookupUtils.SORT_BY_ORDER; // optional, use the field being retrieved or the built in order field\r\n    },\r\n\r\n    /**\r\n     * query lookup data\r\n     * can accept either an array of keys, or multiple parameters\r\n     * e.g\r\n     *    getLookupData('key1', 'key2', 'key3');\r\n     *    getLookupData(['key1', 'key2', 'key3']);\r\n     */\r\n    getLookupData: function (_keys) {\r\n        var keys = [];\r\n        if (_keys && typeof _keys != 'object') {\r\n            for (var _arg in arguments) {\r\n                keys.push(arguments[_arg]);\r\n            }\r\n        } else {\r\n            keys = _keys;\r\n        }\r\n\r\n        if (keys.length >= this.queryColumns.length) {\r\n            NiceError.raise(gs.getMessage(\"Too many keys ({0}) provided.  Maximum is {1}\", [keys.length.toString(), (this.queryColumns.length - 1).toString()]));\r\n        }\r\n\r\n        try {\r\n            var fieldIdx = 0;\r\n            var fieldName = this.queryColumns[fieldIdx];\r\n            var gq = new global.GlideQuery(this.tableName)\r\n                .where('active', true);\r\n\r\n            if (keys.length > 0) {\r\n                // loop through the keys\r\n                keys.forEach(function (key, idx, arr) {\r\n                    gq = gq.where(fieldName, key);\r\n                    fieldName = this.queryColumns[++fieldIdx];\r\n                }, this);\r\n            }\r\n\r\n            gq = gq.orderBy(this.sortColumn == DataLookupUtils.SORT_BY_COLUMN ? fieldName : 'order')\r\n                .whereNotNull(fieldName)\r\n                .select(fieldName)\r\n                .map(function (_x) {\r\n                    // just need the data, not the other stuff\r\n                    return _x[fieldName];\r\n                })\r\n                .reduce(function (arr, e) {\r\n                    // remove duplicates\r\n                    if (arr.indexOf(e) == -1) arr.push(e);\r\n                    return arr;\r\n                }, []);\r\n\r\n            return gq;\r\n        } catch (e) {\r\n            NiceError.raise(e);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * override the columns to use for lookups\r\n     * \r\n     */\r\n    setColumns: function (columns) {\r\n        if (columns.length == 0) return;\r\n\r\n        this.queryColumns = [];\r\n        columns.forEach(function (_col) {\r\n            if (this.columnNames.indexOf(_col) > -1) {\r\n                this.queryColumns.push(_col);\r\n            } else {\r\n                NiceError.raise(gs.getMessage('Cannot find column {0}.  Valid columns are {1}', [_col, this.columnNames.join(', ')]));\r\n            }\r\n        }, this);\r\n\r\n    },\r\n\r\n    /**\r\n     * build the list of column names for the table\r\n     * use the default system view for the table and exclude all system and inherited fields\r\n     * column order determines key lookup\r\n     */\r\n    _getColumnNames: function () {\r\n        return new global.GlideQuery('sys_ui_list_element')\r\n            .where('list_id.name', this.tableName)\r\n            .where('list_id.view', 'Default view')\r\n            // ignore any system or inherited fields from the table\r\n            .where('element', 'NOT IN', ['sys_class_name', 'sys_created_by', 'sys_created_on', 'sys_id', 'sys_mod_count', 'sys_name', 'sys_package', 'sys_policy', 'sys_scope', 'sys_updated_by', 'sys_updated_on', 'sys_update_name', 'active', 'order'])\r\n            .whereNull('list_id.sys_user') // make sure we get the system view\r\n            .orderBy('position')\r\n            .select('element')\r\n            .reduce(function (arr, e) {\r\n                arr.push(e.element);\r\n                return arr;\r\n            }, []);\r\n    },\r\n\r\n    type: 'DataLookupUtils'\r\n};\r\n\r\nDataLookupUtils.SORT_BY_ORDER = 0;\r\nDataLookupUtils.SORT_BY_COLUMN = 1;",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Data Lookup Table Utils",
        "scriptFiles": [
          "DataLookupUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Data%20Lookup%20Table%20Utils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Data%20Lookup%20Table%20Utils/DataLookupUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.623Z",
    "updatedAt": "2025-09-21T08:58:58.268Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 224,
    "type": "script_include",
    "name": "CustomUserUtils",
    "description": "CustomUserUtils A collection of methods related to user roles, group memberships and other utilities. hasRoleExactly();",
    "script": "var CustomUserUtils = Class.create();\r\nCustomUserUtils.prototype = {\r\n    initialize: function() {},\r\n\r\n    /*\r\n    \tParameters:\r\n    \t\tuser : sys_id of user\r\n    \t\trole : role name\r\n    \t\r\n    \tReturns: boolean\r\n    \t\t- true \t: if the user have the exact role\r\n    \t\t- false\t: if the user does not have exact role\r\n    */\r\n\r\n    hasRoleExactly: function(user, role) {\r\n        var roleGr = new GlideRecord('sys_user_has_role');\r\n        roleGr.addQuery('user', user);\r\n        roleGr.addQuery('role.name', role);\r\n        roleGr.addQuery('state', 'active');\r\n        roleGr.setLimit(1);\r\n        roleGr.query();\r\n\r\n        if (roleGr.next()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /*\r\n    \tParameters:\r\n    \t\tuser : sys_id of user\r\n    \t\trole : list of comma seperated roles\r\n    \t\r\n    \tReturns: Boolean\r\n    \t\t- true \t: if the user have any one of the exact role\r\n    \t\t- false\t: if the user does not have any one of the exact role\r\n    */\r\n    hasAnyRoleExactly: function(user, roles) {\r\n        var roleGr = new GlideRecord('sys_user_has_role');\r\n        roleGr.addQuery('user', user);\r\n        roleGr.addQuery('role.name', 'IN', roles);\r\n        roleGr.addQuery('state', 'active');\r\n        roleGr.setLimit(1);\r\n        roleGr.query();\r\n\r\n        if (roleGr.next()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /*\r\n    \tParameters:\r\n    \t\tuser : sys_id of user\r\n    \t\trole : list of comma seperated roles\r\n    \t\r\n    \tReturns: Boolean\r\n    \t\t- true \t: if the user have all of the roles exactly\r\n    \t\t- false\t: if the user does not have any one of the role exactly\r\n    */\r\n    hasAllRoles: function(user, roles) {\r\n        var roleGr = new GlideRecord('sys_user_has_role');\r\n        roleGr.addQuery('user', user);\r\n        roleGr.addQuery('role.name', 'IN', roles);\r\n        roleGr.addQuery('state', 'active');\r\n        roleGr.query();\r\n        var actual_roles = [];\r\n        while (roleGr.next()) {\r\n            actual_roles.push(roleGr.role.name + '');\r\n        }\r\n\t\tvar arrayUtil = new ArrayUtil();\r\n\t\tactual_roles = arrayUtil.unique(actual_roles);\r\n        var query_roles = roles.split(',');\r\n        if (query_roles.length === actual_roles.length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /*\r\n    \tParameters:\r\n    \t\tuser : sys_id of user\r\n    \t\tgroup : group name\r\n    \t\r\n    \tReturns: Boolean\r\n    \t\t- true \t: if the user is member of the group\r\n    \t\t- false\t: if the user is not member of the group\r\n    */\r\n    isMemberOf: function(user, group) {\r\n        var grpGr = new GlideRecord('sys_user_grmember');\r\n        grpGr.addQuery('user', user);\r\n        grpGr.addQuery('group.name', group);\r\n        grpGr.setLimit(1);\r\n        grpGr.query();\r\n\r\n        if (grpGr.next()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n\t/*\r\n    \tParameters:\r\n    \t\tuser : sys_id of user\r\n    \t\tgroups : list of comma seperated group names\r\n    \t\r\n    \tReturns: Boolean\r\n    \t\t- true \t: if the user is member of any of one of the groups\r\n    \t\t- false\t: if the user is not member of any groups specified\r\n    */\r\n    isMemberOfAny: function(user, groups) {\r\n        var grpGr = new GlideRecord('sys_user_grmember');\r\n        grpGr.addQuery('user', user);\r\n        grpGr.addQuery('group.name', 'IN', groups);\r\n        grpGr.setLimit(1);\r\n        grpGr.query();\r\n\r\n        if (grpGr.next()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n\t/*\r\n    \tParameters:\r\n    \t\tuser : sys_id of user\r\n    \t\tgroups : list of comma seperated group names\r\n    \t\r\n    \tReturns: Boolean\r\n    \t\t- true \t: if the user is member of all the groups specified\r\n    \t\t- false\t: if the user is not member of all the groups specified \r\n    */\r\n    isMemberOfAll: function(user, groups) {\r\n        var grpGr = new GlideRecord('sys_user_grmember');\r\n        grpGr.addQuery('user', user);\r\n        grpGr.addQuery('group.name', 'IN', groups);\r\n        grpGr.query();\r\n\t\tvar query_groups = groups.split(',');\r\n\t\tvar actual_groups = [];\r\n        while (grpGr.next()) {\r\n            actual_groups.push(grpGr.group.name + '');\r\n        }\r\n\t\tvar arrayUtil = new ArrayUtil();\r\n\t\tactual_groups = arrayUtil.unique(actual_groups);\r\n\r\n\t\tif(query_groups.length === actual_groups.length){\r\n\t\t\treturn true;\r\n\t\t}\r\n        return false;\r\n    },\r\n\r\n    /*\t\r\n    \tReturns: Array of user SysIDs\r\n    */\r\n   \r\n    lineManagers: function() {\r\n        var managers = [];\r\n        var usrGa = new GlideAggregate(\"sys_user\");\r\n        usrGa.addQuery(\"active\", \"=\", true);\r\n        usrGa.addQuery(\"manager\", \"!=\", \"\");\r\n        usrGa.addAggregate(\"COUNT\", \"manager\");\r\n        usrGa.query();\r\n        while (usrGa._next()) {\r\n            managers.push(usrGa.getValue('manager'));\r\n        }\r\n        return managers;\r\n    },\r\n\r\n    type: 'CustomUserUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/CustomUserUtils",
        "scriptFiles": [
          "CustomUserUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/CustomUserUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/CustomUserUtils/CustomUserUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.619Z",
    "updatedAt": "2025-09-21T08:58:58.264Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 223,
    "type": "script_include",
    "name": "CustomObjectUtils",
    "description": "CustomObjectUtils A utility class to provide methods for safely accessing nested object properties. The class can be initialized to use either ES5 or ES12 (ECMAScript 2021) methods. Initialization",
    "script": "var CustomObjectUtils = Class.create();\r\nCustomObjectUtils.prototype = {\r\n\tinitialize: function(useES12 = false) {\r\n\t\tif (useES12) {\r\n\t\t\tthis.safeAccess = this.safeAccessModern;\r\n\t\t}\r\n\t},\r\n\r\n\t// ====================\r\n\t// ES5 Functions\r\n\t// ====================\r\n\r\n    /**SNDOC\r\n    @name safeAccess\r\n    @description Safely accesses nested object properties.\r\n    @param {Object} obj - The object to access.\r\n    @param {string} path - The dot-separated path to the property.\r\n    @returns {*} The accessed value or false if not found.\r\n \r\n    @example\r\n    var myObj = { a: { b: { c: 42 } } };\r\n    safeAccess(myObj, 'a.b.c');\r\n    // Returns: 42\r\n    */\r\n    safeAccess: function(obj, path) {\r\n        var parts = path.split('.');\r\n        for (var i = 0; i < parts.length; i++) {\r\n            if (obj && obj.hasOwnProperty(parts[i])) {\r\n                obj = obj[parts[i]];\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return obj;\r\n    },\r\n\t\r\n\r\n\t// ====================\r\n\t// ECMAScript 2021 (ES12)\r\n\t// ====================\r\n\r\n   /**SNDOC\r\n    @name safeAccessModern\r\n    @description Safely accesses nested object properties.\r\n    @param {Object} obj - The object to access.\r\n    @param {string} path - The dot-separated path to the property.\r\n    @returns {*} The accessed value or false if not found.\r\n \r\n    @example\r\n    const myObj = { a: { b: { c: 42 } } };\r\n    safeAccess(myObj, 'a.b.c');\r\n    // Returns: 42\r\n    */\r\n    safeAccessModern: function(obj, path) {\r\n        const value = path.split('.').reduce((o, key) => o?.[key], obj);\r\n        return value ?? false;\r\n    },\r\n\r\n\t\r\n\ttype: 'CustomObjectUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/CustomObjectUtils",
        "scriptFiles": [
          "CustomObjectUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/CustomObjectUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/CustomObjectUtils/CustomObjectUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.615Z",
    "updatedAt": "2025-09-21T08:58:58.261Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 222,
    "type": "script_include",
    "name": "CustomDateUtils",
    "description": "CustomDateUtils A collection of scripts related sorting of an array of dates. sortArrayOfDateStrings();",
    "script": "var CustomDateUtils = Class.create();\r\nCustomDateUtils.prototype = {\r\n    initialize: function() {},\r\n\r\n    sortArrayOfDateStrings: function(dates) {\r\n        dates.sort(function(d1, d2) {\r\n            var gdt1 = new GlideDate();\r\n            gdt1.setValue(d1);\r\n            var gdt2 = new GlideDate();\r\n            gdt2.setValue(d2);\r\n            if (gdt1.getValue() < gdt2.getValue())\r\n                return -1;\r\n            else if (gdt1.getValue() >= gdt2.getValue())\r\n                return 1;\r\n        });\r\n        return dates;\r\n    },\r\n\r\n    sortArrayOfDateStringsDesc: function(dates) {\r\n        dates.sort(function(d1, d2) {\r\n            var gdt1 = new GlideDate();\r\n            gdt1.setValue(d1);\r\n            var gdt2 = new GlideDate();\r\n            gdt2.setValue(d2);\r\n            if (gdt1.getValue() < gdt2.getValue())\r\n                return 1;\r\n            else if (gdt1.getValue() >= gdt2.getValue())\r\n                return -1;\r\n        });\r\n        return dates;\r\n    },\r\n\r\n    sortArrayOfDates: function(dates) {\r\n        dates.sort(function(d1, d2) {\r\n            if (d1 < d2)\r\n                return -1;\r\n            else if (d1 >= d2)\r\n                return 1;\r\n        });\r\n        return dates;\r\n    },\r\n\r\n    sortArrayOfDatesDesc: function(dates) {\r\n        dates.sort(function(d1, d2) {\r\n            if (d1 < d2)\r\n                return 1;\r\n            else if (d1 >= d2)\r\n                return -1;\r\n        });\r\n        return dates;\r\n    },\r\n\r\n    type: 'CustomDateUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/CustomDateUtils",
        "scriptFiles": [
          "CustomDateUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/CustomDateUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/CustomDateUtils/CustomDateUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.611Z",
    "updatedAt": "2025-09-21T08:58:58.257Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 221,
    "type": "script_include",
    "name": "CustomArrayUtils",
    "description": "CustomArrayUtils CustomArrayUtils is a utility class designed to provide various array manipulation functions. The class offers both ES5 and modern ES12 versions of each function. By default, the ES5 versions are used, but you can opt for the modern ES12 versions by initializing the class with the useES12 parameter set to true. Initialization",
    "script": "var CustomArrayUtils = Class.create();\r\nCustomArrayUtils.prototype = {\r\n\tinitialize: function(useES12 = false) {\r\n\t\tif (useES12) {\r\n\t\t\tthis.arrToJSON = this.arrToJSONModern;\r\n\t\t\tthis.mergeArray = this.mergeArrayModern;\r\n\t\t\tthis.groupBy = this.groupByModern;\r\n\t\t}\r\n\t},\r\n\r\n\t// ====================\r\n\t// ES5 Functions\r\n\t// ====================\r\n\r\n\t/**SNDOC\r\n    @name arrToJSON\r\n    @description Convert input array to JSON. If the array is a key-value pair like ['name','John','age','30'], the output would be a JSON Object like {\"name\":\"John\",\"age\":\"30\"}. If the array is not a key-value pair like ['John','30'], the output would be a JSON Object like {\"John\":\"John\",\"30\":\"30\"}.\r\n    @param  {Array} [array] - Input array to be converted to JSON.\r\n    @param  {Boolean} [isPair] - Boolean indicating if the array is a key-value pair.\r\n    @returns {String} JSON string representation of the input array.\r\n    @throws {Exception} Throws an exception if there's an error during conversion.\r\n    @example \r\n        var arrayObj = ['name','John','age','30']; \r\n        var outputObj = new CustomArrayUtils().arrToJSON(arrayObj, true);\r\n        gs.info(outputObj);\r\n        //output: '{\"name\":\"John\",\"age\":\"30\"}'\r\n    */\r\n\tarrToJSON: function(array /*Input array */ , isPair /*boolean*/ ) {\r\n\t\ttry {\r\n\t\t\tvar jsonObj = {};\r\n\t\t\tvar myJsonString;\r\n\t\t\tif (isPair) { // isPair should be true if array is key value pair like ['name','John','age','30']\r\n\t\t\t\tfor (var i = 0; i < array.length; i = i + 2) {\r\n\t\t\t\t\tjsonObj[array[i]] = array[i + 1] + '';\r\n\t\t\t\t}\r\n\t\t\t\tmyJsonString = JSON.stringify(jsonObj);\r\n\t\t\t\treturn myJsonString;\r\n\t\t\t} else { // isPair should be false if array is not a key value pair like ['John','30']\r\n\t\t\t\tfor (var i = 0; i < array.length; i++) {\r\n\t\t\t\t\tjsonObj[array[i]] = array[i] + '';\r\n\t\t\t\t}\r\n\t\t\t\tmyJsonString = JSON.stringify(jsonObj);\r\n\t\t\t\treturn myJsonString;\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tgs.info('Exception caught inside  customArrayUtil.arrToJSON: ' + e);\r\n\t\t}\r\n\t},\r\n\r\n\t/**SNDOC\r\n\t @name mergeArray\r\n\t @description Compare two arrays of objects, provide add/remove/edit based on the difference of the two arrays\r\n\t @param  {Object} [originalArray] - Array of objects is the base of comparison\r\n\t @param  {Object} [modifiedArray] - Array of objects compared against original to determin add/remove/edit\r\n\t @param  {String} [uniqueProperty] - Which object property to coalesce typically sys_id\r\n\t @param  {String} [compareProperty] - Which object property to compare\r\n\t @returns {Object} Array of objects with included 'action' property indicating add/remove/edit\r\n      @example \r\n        // Comparing two arrays of objects\r\n        var original = [{sys_id: '1', name: 'John'}, {sys_id: '2', name: 'Jane'}];\r\n        var modified = [{sys_id: '1', name: 'Johnny'}, {sys_id: '3', name: 'Jake'}];\r\n        var outputObj = new CustomArrayUtils().mergeArray(original, modified, 'sys_id', 'name');\r\n        gs.info(outputObj);\r\n        // Returns: \r\n        // [\r\n        //    {sys_id: '1', name: 'Johnny', action: 'edit'},\r\n        //    {sys_id: '2', name: 'Jane', action: 'delete'},\r\n        //    {sys_id: '3', name: 'Jake', action: 'insert'}\r\n        // ]\r\n\t*/\r\n\tmergeArray: function(originalArray,modifiedArray,uniqueProperty,compareProperty){\r\n\t\tvar grouped = [originalArray, modifiedArray].reduce(function(acc, arr, i) {\r\n\t\t\tvar label = i === 0 ? 'orig' : 'mod';\r\n\t\t\tfor (var j = 0; j < arr.length; j++) {\r\n\t\t\t\tvar curr = arr[j], id = curr[uniqueProperty];\r\n\t\t\t\tacc[id] = acc[id] || {orig: null, mod: null };\r\n\t\t\t\tacc[id][label] = curr;\r\n\t\t\t}\r\n\t\t\treturn acc;\r\n\t\t}, {});\r\n\r\n\t\tvar res = [];\r\n\r\n\t\tfunction insertObj(o, act) {\r\n\t\t\tvar newObj = { action: act };\r\n\t\t\t// iterate existing keys to add to new object\r\n\t\t\tfor (var k in o) {\r\n\t\t\t\tif (o.hasOwnProperty(k)) {\r\n\t\t\t\t\tnewObj[k] = o[k];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tres.push(newObj);\r\n\t\t}\r\n\r\n\t\tfor (var key in grouped) {\r\n\t\t\tvar action, obj;\r\n\t\t\tif (grouped.hasOwnProperty(key)) { \r\n\t\t\t\tobj = grouped[key];\r\n\t\t\t\tif (!obj.orig) {\r\n\t\t\t\t\tinsertObj(obj.mod, 'insert');\r\n\t\t\t\t} else if (!obj.mod) {\r\n\t\t\t\t\tinsertObj(obj.orig, 'delete');\r\n\t\t\t\t} else if (obj.mod[compareProperty] !== obj.orig[compareProperty] ){\r\n\t\t\t\t\tinsertObj(obj.mod, 'edit');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t},\r\n\r\n\t/**SNDOC\r\n    @name groupBy\r\n    @description Groups array elements based on a key function.\r\n    @param {Array} array - The array to group.\r\n    @param {Function} keyFunc - The function that produces the key for grouping.\r\n    @returns {Map} A map with grouped elements.\r\n\r\n    @example\r\n    var outputObj = new CustomArrayUtils().groupBy(['one', 'two', 'three'], function(word) { return word.length; });\r\n    var arrayFromMap = Array.from(outputObj.entries());\r\n    gs.info(JSON.stringify(arrayFromMap));\r\n    // Returns: Map { 3 => ['one', 'two'], 5 => ['three'] }\r\n    */\r\n\tgroupBy: function(array, keyFunc) {\r\n\t\treturn array.reduce(function(acc, item) {\r\n\t\t\tvar key = keyFunc(item);\r\n\t\t\tvar group = acc.get(key) || [];\r\n\t\t\tgroup.push(item);\r\n\t\t\tacc.set(key, group);\r\n\t\t\treturn acc;\r\n\t\t}, new Map());\r\n\t},\r\n\r\n\t// ====================\r\n\t// ECMAScript 2021 (ES12)\r\n\t// ====================\r\n\r\n\t/**SNDOC\r\n    @name arrToJSONModern\r\n    @description Convert input array to JSON. If the array is a key-value pair like ['name','John','age','30'], the output would be a JSON Object like {\"name\":\"John\",\"age\":\"30\"}. If the array is not a key-value pair like ['John','30'], the output would be a JSON Object like {\"John\":\"John\",\"30\":\"30\"}.\r\n    @param  {Array} [array] - Input array to be converted to JSON.\r\n    @param  {Boolean} [isPair] - Boolean indicating if the array is a key-value pair.\r\n    @returns {String} JSON string representation of the input array.\r\n    @throws {Exception} Throws an exception if there's an error during conversion.\r\n    @example \r\n        let arrayObj = ['name','John','age','30']; \r\n        let outputObj = new CustomArrayUtils(true).arrToJSON(arrayObj, true);\r\n        gs.info(outputObj);\r\n        //output: '{\"name\":\"John\",\"age\":\"30\"}'\r\n    */\r\n\tarrToJSONModern: function(array, isPair) {\r\n\t\ttry {\r\n\t\t\tconst jsonObj = {};\r\n\r\n\t\t\tif (isPair) {\r\n\t\t\t\tfor (let i = 0; i < array.length; i += 2) {\r\n\t\t\t\t\tjsonObj[array[i]] = String(array[i + 1]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tarray.forEach(item => {\r\n\t\t\t\t\tjsonObj[item] = String(item);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn JSON.stringify(jsonObj);\r\n\t\t} catch (e) {\r\n\t\t\tgs.info('Exception caught inside customArrayUtil.arrToJSON: ' + e);\r\n\t\t}\r\n\t},\r\n\r\n\t/**SNDOC\r\n\t @name mergeArrayModern\r\n\t @description Compare two arrays of objects, provide add/remove/edit based on the difference of the two arrays\r\n\t @note Same as mergeArray just written with ES12!\r\n     @param  {Object} [originalArray] - Array of objects is the base of comparison\r\n\t @param  {Object} [modifiedArray] - Array of objects compared against original to determin add/remove/edit\r\n\t @param  {String} [uniqueProperty] - Which object property to coalesce typically sys_id\r\n\t @param  {String} [compareProperty] - Which object property to compare\r\n\t @returns {Object} Array of objects with included 'action' property indicating add/remove/edit\r\n      @example \r\n        // Comparing two arrays of objects\r\n        let original = [{sys_id: '1', name: 'John'}, {sys_id: '2', name: 'Jane'}];\r\n        let modified = [{sys_id: '1', name: 'Johnny'}, {sys_id: '3', name: 'Jake'}];\r\n        let outputObj = new CustomArrayUtils(true).mergeArray(original, modified, 'sys_id', 'name');\r\n        gs.info(outputObj);\r\n        // Returns: \r\n        // [\r\n        //    {sys_id: '1', name: 'Johnny', action: 'edit'},\r\n        //    {sys_id: '2', name: 'Jane', action: 'delete'},\r\n        //    {sys_id: '3', name: 'Jake', action: 'insert'}\r\n        // ]\r\n\t*/\r\n\tmergeArrayModern: function(originalArray, modifiedArray, uniqueProperty, compareProperty) {\r\n\t\tconst grouped = new Map();\r\n\r\n\t\t// Process original array\r\n\t\toriginalArray.forEach(item => grouped.set(item[uniqueProperty], { orig: item }));\r\n\r\n\t\t// Process modified array and determine actions\r\n\t\treturn modifiedArray.map(item => {\r\n\t\t\tconst origItem = grouped.get(item[uniqueProperty])?.orig;\r\n\t\t\tif (!origItem) return { ...item, action: 'insert' };\r\n\t\t\tif (item[compareProperty] !== origItem[compareProperty]) return { ...item, action: 'edit' };\r\n\t\t\treturn item;\r\n\t\t})\r\n\t\t\t.concat(\r\n\t\t\t// Process deletions\r\n\t\t\t[...grouped.values()]\r\n\t\t\t.filter(group => !modifiedArray.some(modItem => modItem[uniqueProperty] === group.orig[uniqueProperty]))\r\n\t\t\t.map(group => ({ ...group.orig, action: 'delete' }))\r\n\t\t);\r\n\t},\r\n\r\n\t/**SNDOC\r\n    @name groupByModern\r\n    @description Groups array elements based on a key function.\r\n    @param {Array} array - The array to group.\r\n    @param {Function} keyFunc - The function that produces the key for grouping.\r\n    @returns {Map} A map with grouped elements.\r\n\r\n    @example\r\n    let outputObj = new CustomArrayUtils(true).groupBy(['one', 'two', 'three'], word => word.length);\r\n    let arrayFromMap = Array.from(outputObj.entries());\r\n    gs.info(JSON.stringify(arrayFromMap));\r\n    // Returns: Map { 3 => ['one', 'two'], 5 => ['three'] }\r\n    */\r\n\tgroupByModern: function(array, keyFunc) {\r\n\t\treturn array.reduce((acc, item) => {\r\n\t\t\tconst key = keyFunc(item);\r\n\t\t\tconst group = acc.get(key) || [];\r\n\t\t\tgroup.push(item);\r\n\t\t\tacc.set(key, group);\r\n\t\t\treturn acc;\r\n\t\t}, new Map());\r\n\t},\r\n\r\n\ttype: 'CustomArrayUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/CustomArrayUtils",
        "scriptFiles": [
          "CustomArrayUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/CustomArrayUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/CustomArrayUtils/CustomArrayUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.607Z",
    "updatedAt": "2025-09-21T08:58:58.254Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 220,
    "type": "script_include",
    "name": "Custom Discovery Schedule With Freeze Periods",
    "description": "Custom Discovery Schedule One of the requirements we had from one of our client was that they didn't want discovery schedules to run for few days at the begining of the month (BOM) and few days for the end of the month (EOM) as they internally had to generate some big financial reports and didn't want discovery to take any network resources. So this custom discovery script enables to run discov...",
    "script": "/*\r\n\tThis script submits the Pre-created discovery schedules (On Demand schedules) but it honours\r\n\tpre-configured days to be skipped at the begining of the month and days at the end of the month.\r\n\t\r\n\tIt also honours the pre-configured times that discovery should be skipped.\r\n\t\r\n\tConfigurations required:\r\n\t\r\n\t- Standard discovery schedules with Run (On Demand)\r\n\t- The following sys_properties needs to be configured\r\n\t\t> VF.Discovery.BOM.DaysToFreeze\r\n\t\t> VF.Discovery.EOM.DaysToFreeze\r\n\t\t> VF.Discovery.Freeze.StartTime\r\n\t\t> VF.Discovery.Freeze.EndTime\r\n*/\r\n\r\nvar VF_DiscoveryScheduleWithFreezePeriod = Class.create();\r\nVF_DiscoveryScheduleWithFreezePeriod.prototype = {\r\n\r\n    // Setting to true will generate a log in System Logs > All\r\n    _log: false,\r\n\r\n    // Prefix to be appended to log files\r\n    _logPrefix: 'VF: ',\r\n\r\n    // Result to be returned\r\n    _result: {\r\n        scheduleStatusIds: [],\r\n        success: false,\r\n        message: ''\r\n    },\r\n\r\n    _msg: '',\r\n\r\n    initialize: function (log) {\r\n        this._log = log;\r\n    },\r\n\r\n\t/**\r\n \t* Reads the discovery records where type is 'On Demand'\r\n \t* Checks the discovery freeze values and calculates if discovery to be submitted or not\r\n \t* Returns the result including was it successful, the message (if any error or validations) and\r\n \t* discovery schedule Ids (if schedules were submitted)\r\n \t*\r\n \t* @param {GlideDateTime} gdt : Current date as GlideDateTime - Just injecting it for ease of testing\r\n    */\r\n    process: function (gdt) {\r\n\r\n        try {\r\n\r\n            if (!gdt) {\r\n                throw 'Current date as GlideDateTime is required.';\r\n            }\r\n\r\n            var validation = this.isOutsideFreezePeriodAndTime(gdt);\r\n            if (!validation.success) {\r\n                // Its discovery freeze period, so update the result and log if needed\r\n                this._msg = validation.message;\r\n                this._logIfApplicable(this._msg);\r\n                return this._setResult(false, this._msg, null);\r\n            }\r\n\r\n            // **** Get all the schedules that are configured to run 'On Demand' ****\r\n            var discoverySchedules = new GlideRecord('discovery_schedule');\r\n            discoverySchedules.addQuery('disco_run_type', 'on_demand');\r\n            discoverySchedules.query();\r\n            var totalSchedules = discoverySchedules.getRowCount();\r\n\r\n            if (totalSchedules > 0) {\r\n                // Some schedules are found, verify if it is not freeze period\r\n                this._logIfApplicable('Discovery Schedules found: ' + totalSchedules);\r\n\r\n                // **** Submit the discovieries and hold the status Id ****\r\n                while (discoverySchedules.next()) {\r\n                    this._logIfApplicable(\"Processing discovery schedule: \" + discoverySchedules.getValue('name'));\r\n                    var disco = new Discovery();\r\n                    var statusId = disco.discoverNow(discoverySchedules);\r\n                    this._result.scheduleStatusIds.push(statusId);\r\n                    this._logIfApplicable(\"Discovery StatusId: \" + statusId);\r\n                }\r\n\r\n            } else {\r\n                // No schedules found, update the result and log if needed\r\n                this._msg = 'No discovery schedule records where found.';\r\n                this._logIfApplicable(this._msg);\r\n                return this._setResult(false, this._msg, null);\r\n            }\r\n\r\n            // If we are here and thing are all good, return the success result\r\n            return this._setResult(true, '', this._result.scheduleStatusIds);\r\n\r\n        } catch (err) {\r\n            this._msg = this._logPrefix + JSON.stringify(err);\r\n            gs.error(this._msg);\r\n            return this._setResult(false, this._msg, null);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n    * Function that just validates if the date is outside the freeze period or not\r\n    * Can be used in UI Actions etc.\r\n \t*\r\n \t* @param {GlideDateTime} gdt : Current date as GlideDateTime - Just injecting it for ease of testing\r\n    */\r\n    isOutsideFreezePeriodAndTime: function (gdt) {\r\n\r\n        if (!gdt) {\r\n            throw 'Current date as GlideDateTime is required.';\r\n        }\r\n\r\n        var result = {\r\n            success: false,\r\n            message: 'It is discovery freeze period and therefore no discovery will be submitted.'\r\n        };\r\n\r\n        try {\r\n            // Number of days in current month\r\n            var daysOfTheMonth = gdt.getDaysInMonthLocalTime();\r\n\r\n            // Validate system properties are configured and having valid values ****\r\n            var sysProps = this._readAndValidateSystemProperties(daysOfTheMonth);\r\n\r\n            var dayOfMonth = gdt.getDayOfMonthLocalTime();\r\n\r\n            // Calculate if its outside the freeze period\r\n            if (this._isOutsideFreezeDate(daysOfTheMonth, dayOfMonth, sysProps.noOfDaysToFreezeBOM, sysProps.noOfDaysToFreezeEOM)) {\r\n\r\n                if (this._isOutsideFreezeTime(sysProps.freezeStartTime, sysProps.freezeEndTime)) {\r\n                    result.success = true;\r\n                    result.message = '';\r\n                } else {\r\n                    result.message = 'It is discovery freeze time and therefore no discovery will be submitted.';\r\n                }\r\n            }\r\n\r\n        } catch (err) {\r\n            this._msg = this._logPrefix + JSON.stringify(err);\r\n            gs.error(this._msg);\r\n            result.message = this._msg;\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n\t/**\r\n    * Validates if the time is outside the pre-configured freeze time or not i.e. the time is smaller than start and greater than end times\r\n \t*\r\n \t* @param {string} startTime: Freeze start time\r\n\t* @param {string} endTime: Freeze end time\r\n    */\r\n    _isOutsideFreezeTime: function (startTime, endTime) {\r\n\r\n        var currentDateTime = new GlideDateTime();\r\n        var freezeStartTime = this._getDateTime(currentDateTime, startTime);\r\n        var freezeEndTime = this._getDateTime(currentDateTime, endTime);\r\n\r\n        if (currentDateTime.getLocalTime() > freezeStartTime.value && currentDateTime.getLocalTime() < freezeEndTime) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    },\r\n\r\n\t/**\r\n    * Returns GlideDateTime based on string time and current date\r\n \t*\r\n \t* @param {GlideDateTime} currentDateTime: base date time\r\n\t* @param {string} time: time string\r\n    */\r\n    _getDateTime: function (currentDateTime, time) {\r\n        var baseDateTime = currentDateTime.getLocalTime().toString();\r\n        var baseDate = baseDateTime.split(\" \")[0];\r\n        var variableTime = new GlideDateTime(baseDate + ' ' + time);\r\n        return variableTime;\r\n    },\r\n\r\n\r\n    /**\r\n    * Determines if the date is outside the freeze period. Returns true if outside freeze period.\r\n    *\r\n    * @param {number} daysOfTheMonth : Total days of the month based on GlideDateTime for current date\r\n    * @param {number} currentDayOfMonth : Current day of the month based on GlideDateTime for current date\r\n    * @param {number} noOfDaysToFreezeBOM : Total days to freeze discovery schedule at the begining of the month\r\n    * @param {number} noOfDaysToFreezeEOM : Total days to freeze discovery schedule at the end of the month\r\n    */\r\n    _isOutsideFreezeDate: function (daysOfTheMonth, currentDayOfMonth, noOfDaysToFreezeBOM, noOfDaysToFreezeEOM) {\r\n\r\n        var startDayOfDiscovery = noOfDaysToFreezeBOM;\r\n        var endDayOfDiscovery = daysOfTheMonth - noOfDaysToFreezeEOM;\r\n\r\n        // For the EOM should be inclusive e.g. 31-2=29 but should include 29 as discovery day\r\n        if (currentDayOfMonth > startDayOfDiscovery && currentDayOfMonth <= endDayOfDiscovery) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n    * Helper to set the result to be returned\r\n    *\r\n    * @param {boolean} successOrFailure : was it successful?\r\n    * @param {string} message : any message in case of error or validations\r\n    * @param {array} statusIds : discovery status ids if schedule was submitted successfuly\r\n    */\r\n    _setResult: function (successOrFailure, message, statusIds) {\r\n        this._result.success = successOrFailure;\r\n        this._result.message = message;\r\n        this._result.scheduleStatusIds = statusIds;\r\n\r\n        return this._result;\r\n    },\r\n\r\n    /**\r\n    * Reads the system properties and applies the appropriate validations\r\n    * Throws exception if values are not valid.\r\n    *\r\n    * Returns an object containing no of days to freeze BOM and  no of days to freeze EOM\r\n    *\r\n    * @param {number} daysOfMonth : Total days of the month based on GlideDateTime for the date\r\n    */\r\n    _readAndValidateSystemProperties: function (daysOfMonth) {\r\n        var noOfDaysToFreezeBOM = parseInt(gs.getProperty('VF.Discovery.BOM.DaysToFreeze'));\r\n        var noOfDaysToFreezeEOM = parseInt(gs.getProperty('VF.Discovery.EOM.DaysToFreeze'));\r\n\r\n        if (noOfDaysToFreezeBOM < 0) {\r\n            throw 'Please provide a valid value for the System Property: VF.Discovery.BOM.DaysToFreeze';\r\n        }\r\n\r\n        if (noOfDaysToFreezeEOM < 0) {\r\n            throw 'Please provide a valid value for the System Property: VF.Discovery.EOM.DaysToFreeze';\r\n        }\r\n\r\n        if (noOfDaysToFreezeBOM === 0 && noOfDaysToFreezeEOM === 0) {\r\n            throw 'Please configure one of the System Properties either VF.Discovery.EOM.DaysToFreeze or VF.Discovery.BOM.DaysToFreeze';\r\n        }\r\n\r\n        if (daysOfMonth > 0 && (noOfDaysToFreezeBOM > 0 || noOfDaysToFreezeEOM > 0)) {\r\n            if (noOfDaysToFreezeBOM + noOfDaysToFreezeEOM >= daysOfMonth) {\r\n                throw 'Please configure the System Properties VF.Discovery.EOM.DaysToFreeze and VF.Discovery.BOM.DaysToFreeze to have valid values. This schedule will not run as the sum of days to freeze at BOM and EOM are greater than total days of the month!';\r\n            }\r\n        }\r\n\r\n        // read start and end times\r\n        var freezeStartTime = gs.getProperty('VF.Discovery.Freeze.StartTime');\r\n        var freezeEndTime = gs.getProperty('VF.Discovery.Freeze.EndTime');\r\n\r\n        if (!freezeStartTime || !freezeEndTime) {\r\n            throw 'Please configure a valid discovery freeze start time and end time in sys_properties e.g. VF.Discovery.Freeze.StartTime and VF.Discovery.Freeze.EndTime';\r\n        }\r\n\r\n        return {\r\n            noOfDaysToFreezeBOM: noOfDaysToFreezeBOM,\r\n            noOfDaysToFreezeEOM: noOfDaysToFreezeEOM,\r\n            freezeStartTime: freezeStartTime,\r\n            freezeEndTime: freezeEndTime\r\n        };\r\n    },\r\n\r\n    /**\r\n    * Adds an info log using GlideSystem. Prepends a prefix as needed.\r\n    * Checks the flag if log is needed or not\r\n    *\r\n    * @param {string} message : message to be logged\r\n    */\r\n    _logIfApplicable: function (message) {\r\n\r\n        if (this._log) {\r\n            gs.info(this._logPrefix + message);\r\n        }\r\n    },\r\n\r\n\r\n    type: 'VF_DiscoveryScheduleWithFreezePeriod'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Custom Discovery Schedule With Freeze Periods",
        "scriptFiles": [
          "DiscoveryScheduleWithFreezePriod.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Custom%20Discovery%20Schedule%20With%20Freeze%20Periods",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Custom%20Discovery%20Schedule%20With%20Freeze%20Periods/DiscoveryScheduleWithFreezePriod.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.602Z",
    "updatedAt": "2025-09-21T08:58:58.250Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 219,
    "type": "script_include",
    "name": "CSV Parser",
    "description": "Script Include: CSVParser A script includes that parses concatenated CSV string and returns and array of the JSON objects for each row of the CSV data. Example usage",
    "script": "var CSVParser = Class.create();\r\nCSVParser.prototype = {\r\n    initialize: function() {},\r\n\r\n    //\r\n    // Parses a CSV string into array of objects\r\n    // Example:\r\n    // var csv = \"John, Doe, 33\\nJane, Doe, 32\\nJack, Doe, 11\\nJosh, Doe, 13\" \r\n    // var delimiter = \",\"\r\n    // var headers = [\"first_name\", \"last_name\", \"age\"]\r\n    // var result = parser.parse(csv, headers, delimiter);\r\n    //\r\n    parse: function(csv, headers, delimiter, quoteCharacter) {\r\n\r\n        // Validate all input parameters\r\n        this._validateInput(csv, headers, delimiter, quoteCharacter);\r\n\r\n        // Split based on carriage return\r\n        var lines = csv.split(\"\\n\");\r\n\r\n        var jsonArray = [];\r\n\r\n        // Populate the array from JSON objects\r\n        for (var i = 0; i < lines.length; i++) {\r\n            if (i == 0) {\r\n                continue; // Ignore the header line\r\n            }\r\n\r\n            var csvLine = lines[i];\r\n\r\n            if (csvLine) {\r\n                var jsonObject = new sn_impex.CSVParser().parseLineToObject(csvLine, headers, delimiter, quoteCharacter);\r\n                jsonArray.push(jsonObject);\r\n            }\r\n\r\n        }\r\n\r\n        return jsonArray;\r\n\r\n    },\r\n\r\n    _validateInput: function(csv, headers, delimiter, quoteCharacter) {\r\n\r\n        if (!csv) {\r\n            throw new Error(\"The field 'csv' is required. This is the concatenated CSV text that needs to be parsed.\");\r\n        }\r\n\r\n        if (!delimiter) {\r\n            throw new Error(\"The field 'delimiter' is required. This is the character that splits the columns in the CSV file e.g. a comma.\");\r\n        }\r\n\r\n        if (headers) {\r\n            if (!Array.isArray(headers)) {\r\n                throw new Error(\"The field 'headers' should be an array in the form of ['field1','field2'] etc.\");\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    type: 'CSVParser'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/CSV Parser",
        "scriptFiles": [
          "CSVParser.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/CSV%20Parser",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/CSV%20Parser/CSVParser.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.599Z",
    "updatedAt": "2025-09-21T08:58:58.247Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 218,
    "type": "script_include",
    "name": "Create Multiple RITMS from MRVS",
    "description": "Create Multiple RITMS from MRVS Use this script to submit multiple Requested Items with data being populated from the MRVS. Match the variables names in the Obj to the respective Catalog Item variable names and the MRVS variables to the variable names for the MRVS",
    "script": "var CreateMultipleRITMSFromMRVS = Class.create();\r\nCreateMultipleRITMSFromMRVS.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n    addRITM: function() {\r\n        var mrvsList = this.getParameter('sysparm_mrvs_list');\r\n        var itemSysId = gs.getProperty('property_id'); //System Property containing the sys_id of the Catalog Item\r\n        var obj = JSON.parse(itemList);\r\n\r\n\t\t//Initialize the variables of your Catalog Item\r\n\t\tvar variables = {\r\n            'variable1': '',\r\n            'variable2': '',\r\n            'variable3': ''\r\n        };\r\n\r\n        var total = obj.length;\r\n        for (var i = 0; i < total; i++) {\r\n            variables['variable1'] = obj[i]['mrvs_variable_1'];\r\n            variables['variable2'] = obj[i]['mrvs_variable_2'];\r\n            variables['variable3'] = obj[i]['mrvs_variable_3'];\r\n            var cart = new sn_sc.CartJS();\r\n            cart.setRequestedFor(gs.getUserID());\r\n            var item = {\r\n                'sysparm_id': itemSysId,\r\n                'sysparm_quantity': '1',\r\n                'variables': variables\r\n            };\r\n            var cartDetails = cart.addToCart(item);\r\n        }\r\n        var cartSubmit = cart.checkoutCart();\r\n        return cartSubmit.request_id;\r\n    },\r\n\r\n    type: 'CreateMultipleRITMSFromMRVS'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Create Multiple RITMS from MRVS",
        "scriptFiles": [
          "CreateMultipleRITMSFromMRVS.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Create%20Multiple%20RITMS%20from%20MRVS",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Create%20Multiple%20RITMS%20from%20MRVS/CreateMultipleRITMSFromMRVS.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.595Z",
    "updatedAt": "2025-09-21T08:58:58.244Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 217,
    "type": "script_include",
    "name": "Convert image into base64",
    "description": "This script include helps to convert the image into base64 encoded string easily. Mainly used during the rest integrations when it comes to the handling the attachment.",
    "script": "var BigEncoder64 = Class.create();\r\n\r\nBigEncoder64.prototype = {\r\n\tinitialize: function() {\r\n    },\r\n    // This script will help to convert the image into base64 encoded string.\r\n\tGetBase64EncodedString: function(attachment_sys_id) {\r\n\t\tvar StringUtil = new GlideStringUtil();\r\n\t\tvar gsis = GlideSysAttachmentInputStream(attachment_sys_id);  // pass the attahment sys_id\r\n\t\tvar baos = new Packages.java.io.ByteArrayOutputStream();\r\n\t\tgsis.writeTo(baos);\r\n\t\tbaos.close();\r\n\t\tvar base64Data = StringUtil.base64Encode(baos.toByteArray());\r\n\t\treturn base64Data;\t// return the base64 encoded string.\r\n\t},\r\n\r\n\ttype: 'BigEncoder64'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Convert image into base64",
        "scriptFiles": [
          "Convert image into base63 encoded string.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Convert%20image%20into%20base64",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Convert%20image%20into%20base64/Convert%20image%20into%20base63%20encoded%20string.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.591Z",
    "updatedAt": "2025-09-21T08:58:58.240Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 216,
    "type": "script_include",
    "name": "ConversationUtils",
    "description": "Script Include: ConversationUtils A simple script include to create a Connect Chat conversation with a single user and send messages to the conversation. Example usage",
    "script": "var ConversationUtils = Class.create();\r\nConversationUtils.prototype = {\r\n\r\n    // Initialize by creating a new conversation\r\n    initialize: function(userId, subject) {\r\n        this.conversationId = this.createConversation(userId, subject);\r\n\t\t\r\n    },\r\n\r\n    // Create a new conversation with a user\r\n    // Returns sys_id of the new conversation\r\n    createConversation: function(userId, subject) {\r\n\r\n        // 1. Create the conversation\r\n        var conversation = sn_connect.Conversation.create({\r\n            name: subject,\r\n            type: \"connect\"\r\n        });\r\n\r\n        // 2. Add the provided user to the conversation as a subscriber\r\n        conversation.addSubscriber(userId);\r\n\r\n        // 3. Get the new conversation's Sys ID and return it\r\n        return this._getConversation(subject);\r\n    },\r\n\r\n    // Send a message to a conversation\r\n    sendMessage: function(body) {\r\n\r\n        // 1. Get the conversation by provided Sys ID\r\n        var conversation = sn_connect.Conversation.get(this.conversationId);\r\n\r\n        // 2. Send the message\r\n        conversation.sendMessage({\r\n            body: body\r\n        });\r\n\t\t\r\n    },\r\n\r\n    // Since the Conversation API does not provide a GlideRecord object or Sys ID,\r\n    // look up the most recently created conversation by subject and return the Sys ID\r\n    _getConversation: function(subject) {\r\n        var conversationId;\r\n        var grConvo = new GlideRecord('live_group_profile');\r\n        grConvo.addQuery('name', 'CONTAINS', subject);\r\n        grConvo.orderByDesc('sys_created_on');\r\n        grConvo.query();\r\n\r\n        if (grConvo.next()) {\r\n            conversationId = grConvo.getValue('sys_id');\r\n        }\r\n\r\n        return conversationId;\r\n    },\r\n\r\n    type: 'ConversationUtils'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/ConversationUtils",
        "scriptFiles": [
          "ConversationUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/ConversationUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/ConversationUtils/ConversationUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.587Z",
    "updatedAt": "2025-09-21T08:58:58.237Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 215,
    "type": "script_include",
    "name": "ConnectionCredentialsUtils",
    "description": "Retrieve Connection and Credentials Information using Connection Alias (sysid) in a Scoped Application I've created a Script Include that enables users to retrieve connection and credentials details associated with a Scoped Application. In addition to providing this information, the Script Include also decrypts and returns the value of the password2 field. It supports a wide range of credential...",
    "script": "//A script include to retrieve Connection and Credentials Information using Connection Alias (sys_id) in a Scoped Application\r\n(function () {\r\n\r\n    var provider = new sn_cc.ConnectionInfoProvider();\r\n    var connectionInfo = provider.getConnectionInfo(\"<sys_id of sys_alias record\");\r\n    if (!gs.nil(connectionInfo)) {\r\n        // get Connection Record Information (for ex: connection_url)\r\n        gs.info(\"Connection URL: \" + connectionInfo.getAttribute(\"connection_url\")); // to get other information, replace the connection_url with other field_name available in connection table.\r\n\r\n        // get Credential Record Information (for ex: password)\r\n        gs.info(\"Password: \"+ connectionInfo.getCredentialAttribute(\"password\")); // to get other information, replace password with other field_name available in credenitals table.\r\n    }\r\n})();",
    "metadata": {
      "application": "I",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/ConnectionCredentialsUtils",
        "scriptFiles": [
          "ConnectionCredentialUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/ConnectionCredentialsUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/ConnectionCredentialsUtils/ConnectionCredentialUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.584Z",
    "updatedAt": "2025-09-21T08:58:58.234Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 214,
    "type": "script_include",
    "name": "Collect Field Values from Any One Table Record",
    "description": "",
    "script": "var HM_Record_Details = Class.create();\r\nDV_Record_Details.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n    getDetails: function() {\r\n        var table = this.getParameter('sysparm_table');\r\n        var recordID = this.getParameter('sysparm_recordID');\r\n        var fieldNames = this.getParameter('sysparm_fieldNames');\r\n\t\t\r\n\tvar fields = fieldNames.split(',');\r\n\t\t\r\n        var targetRecord = new GlideRecordSecure(table);\r\n        targetRecord.addQuery('sys_id', recordID);\r\n        targetRecord.query();\r\n\r\n        var obj = {};\r\n\r\n        if (targetRecord.next()) {\r\n            for (var i = 0; i < fields.length; i++) {\r\n                if (targetRecord.isValidField(fields[i])) {\r\n                    obj[fields[i]] = targetRecord.getValue(fields[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return JSON.stringify(obj);\r\n    },\r\n\r\n    type: 'DV_Record_Details'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Collect Field Values from Any One Table Record",
        "scriptFiles": [
          "universalRecordCollector.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Collect%20Field%20Values%20from%20Any%20One%20Table%20Record",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Collect%20Field%20Values%20from%20Any%20One%20Table%20Record/universalRecordCollector.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.581Z",
    "updatedAt": "2025-09-21T08:58:58.230Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 213,
    "type": "script_include",
    "name": "Client and Server Callable Script Include",
    "description": "Client and Server Callable Script Include Example of a script include that can be called via both client and server.",
    "script": "//Ensure Client is marked as true\r\n\r\nvar My_Functions = Class.create();\r\nMy_Functions.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\tlog_info: function(x0){\r\n\t\tvar results = {};\r\n\t\tvar x = this.getParameter('sysparm_x') || x0;\r\n\t\tgs.info(x);\r\n\t\tresults.message = 'success';\r\n\t\treturn JSON.stringify(results);\r\n\t},\r\n\t\r\n    type: 'My_Functions'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Client and Server Callable Script Include",
        "scriptFiles": [
          "script include.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Client%20and%20Server%20Callable%20Script%20Include",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Client%20and%20Server%20Callable%20Script%20Include/script%20include.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.577Z",
    "updatedAt": "2025-09-21T08:58:58.227Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 212,
    "type": "script_include",
    "name": "Check writer",
    "description": "RegexUtils I am sure ServiceNow users need a check right? This Script Include gets a number and converts to an English style check. e.g. 123456789 is printed as:",
    "script": "var CheckWriter = Class.create();\r\nCheckWriter.prototype = {\r\n    initialize: function () {\r\n        this.numberWords = {\r\n            0: \"zero\",\r\n            1: \"one\",\r\n            2: \"two\",\r\n            3: \"three\",\r\n            4: \"four\",\r\n            5: \"five\",\r\n            6: \"six\",\r\n            7: \"seven\",\r\n            8: \"eight\",\r\n            9: \"nine\",\r\n            10: \"ten\",\r\n            11: \"eleven\",\r\n            12: \"twelve\",\r\n            13: \"thirteen\",\r\n            14: \"fourteen\",\r\n            15: \"fifteen\",\r\n            16: \"sixteen\",\r\n            17: \"seventeen\",\r\n            18: \"eighteen\",\r\n            19: \"nineteen\",\r\n            20: \"twenty\",\r\n            30: \"thirty\",\r\n            40: \"forty\",\r\n            50: \"fifty\",\r\n            60: \"sixty\",\r\n            70: \"seventy\",\r\n            80: \"eighty\",\r\n            90: \"ninety\",\r\n            100: \"one hundred\",\r\n            1000: \"one thousand\",\r\n            1000000: \"one million\",\r\n            1000000000: \"one billion\",\r\n            1000000000000: \"one trillion\",\r\n            10000000000000: \"one quadrillion\"\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Writes a check in English\r\n     * @param {a number to write as check} number \r\n     * @returns English representation of the number as English words\r\n     */\r\n    write: function (number) {\r\n        return this._numberToWords(number);\r\n    },\r\n\r\n    _numberToWords: function (num) {\r\n        if (num < 0) return \"minus \" + this._numberToWords(-num);\r\n        if (num < 20) return this.numberWords[num];\r\n        if (num < 100)\r\n            return (\r\n                this.numberWords[Math.floor(num / 10) * 10] + (num % 10 ? \"-\" + this._numberToWords(num % 10) : \"\")\r\n            );\r\n        if (num < 1000)\r\n            return (\r\n                this.numberWords[Math.floor(num / 100)] + \" hundred\" + (num % 100 ? \" and \" + this._numberToWords(num % 100) : \"\")\r\n            );\r\n        if (num < 1000000)\r\n            return (\r\n                this._numberToWords(Math.floor(num / 1000)) + \" thousand\" + (num % 1000 ? \", \" + this._numberToWords(num % 1000) : \"\")\r\n            );\r\n        if (num < 1000000000)\r\n            return (\r\n                this._numberToWords(Math.floor(num / 1000000)) + \" million\" + (num % 1000000 ? \", \" + this._numberToWords(num % 1000000) : \"\")\r\n            );\r\n        if (num < 1000000000000)\r\n            return (\r\n                this._numberToWords(Math.floor(num / 1000000000)) + \" billion\" + (num % 1000000000 ? \", \" + this._numberToWords(num % 1000000000) : \"\")\r\n            );\r\n        if (num < 1000000000000000)\r\n            return (\r\n                this._numberToWords(Math.floor(num / 1000000000000)) + \" trillion\" + (num % 1000000000000 ? \", \" + this._numberToWords(num % 1000000000000) : \"\")\r\n            );\r\n        if (num < 1000000000000000000)\r\n            return (\r\n                this._numberToWords(Math.floor(num / 1000000000000000)) + \" quadrillion\" + (num % 1000000000000000 ? \", \" + this._numberToWords(num % 1000000000000000) : \"\")\r\n            );\r\n        return \"number too large\";\r\n    },\r\n\r\n    type: 'CheckWriter'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Check writer",
        "scriptFiles": [
          "CheckWriter.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Check%20writer",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Check%20writer/CheckWriter.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.573Z",
    "updatedAt": "2025-09-21T08:58:58.223Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 211,
    "type": "script_include",
    "name": "Check Valid Choice",
    "description": "Introduction : This script include is a client callable script include which can be used to check if the value of a choice field is valid, optionally given a dependent value. This is helpful when you do transforms and when you want to do some validations in your REST inbound messages. Inputs and Outputs :",
    "script": "var GenericUtils = Class.create();\r\nGenericUtils.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n   /**\r\n     * Checks if the value of a choice field is valid, optionally given a dependent value\r\n     * @param {object} current - GlideRecord object containing the current record\r\n     * @param {string} The name of the choice field\r\n     * @returns {bool}         - Boolean indicating whether the value of a choice field is valid\r\n     */\r\n    isChoiceValid: function(current, choiceField) {\r\n        // Checking if we get valid params\r\n        if (JSUtil.nil(current) || JSUtil.nil(choiceField)) {\r\n            return false;\r\n        }\r\n\r\n        var arrUtil = new ArrayUtil();\r\n        var choiceValue = current.getValue(choiceField);\r\n        var field = current.getElement(choiceField);\r\n        var dependentField = field.getDependent();\r\n        var dependentValue = \"\";\r\n        if (dependentField != null) {\r\n            dependentValue = current.getValue(dependentField);\r\n        }\r\n\r\n        var validValues = field.getChoices(dependentValue);\r\n\r\n        // Return a boolean indicating whether of not the specific field has a value or not.\r\n        return (arrUtil.indexOf(validValues, choiceValue) >= 0) ? true : false;\r\n    },\r\n  type: \"GenericUtils\"\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Check Valid Choice",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Check%20Valid%20Choice",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Check%20Valid%20Choice/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.570Z",
    "updatedAt": "2025-09-21T08:58:58.220Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 210,
    "type": "script_include",
    "name": "Check User Has Role",
    "description": "User Has Role This script checks whether the user has a role or not. This script takes two arguments",
    "script": "var UserHasRole = Class.create();\r\nUserHasRole.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n    isPublic: function() {\r\n        return true;\r\n    },\r\n\r\n    userHasRole: function(userId, roleId) {\r\n        try {\r\n\t\t\t\r\n\t\t\tuserId = (userId == '' || userId == undefined) ? gs.getUserID() : userId; \r\n\r\n            var grUserHasRole = new GlideRecord('sys_user_has_role');\r\n            grUserHasRole.addQuery('role', roleId);\r\n            grUserHasRole.addQuery('user', userId);\r\n            grUserHasRole.setLimit(1);\r\n            grUserHasRole.query();\r\n\t\t\t\r\n            return sysUserHasRole.hasNext();\r\n\r\n        } catch (exception) {\r\n            gs.info('UserHasRole.userHasRole() - ' + exception);\r\n        }\r\n    },\r\n\r\n    type: 'UserHasRole'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Check User Has Role",
        "scriptFiles": [
          "UserHasRole.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Check%20User%20Has%20Role",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Check%20User%20Has%20Role/UserHasRole.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.567Z",
    "updatedAt": "2025-09-21T08:58:58.216Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 209,
    "type": "script_include",
    "name": "Check User Criteria for Catalog Item",
    "description": "CheckCriteria Script Include This script include is used to check if a user has access to a specific catalog item based on \"Available for\" and \"Not Available for\" user criteria in ServiceNow. It supports admin overrides and custom user checks. Usage",
    "script": "var CheckCriteria = Class.create();\r\nCheckCriteria.prototype = {\r\n    initialize: function() {},\r\n\r\n    /**\r\n     * Checks if the user meets the criteria to access the catalog item.\r\n     * \r\n     * @param {string} item - The sys_id of the catalog item.\r\n     * @param {boolean} [adminOverride] - Optional. Whether admin role should override the criteria check. Defaults to false if not provided.\r\n     * @param {string} [userToCheck] - Optional. The user ID of the user whose access is being checked. Defaults to the current user if not specified.\r\n     * \r\n     * @returns {boolean} - True if the user has access to the catalog item, otherwise false.\r\n     */\r\n    itemCriteria: function(item, adminOverride, userToCheck) {\r\n        // Set default value for adminOverride if not provided\r\n        adminOverride = (typeof adminOverride !== 'undefined') ? adminOverride : false;\r\n\r\n        // Early exit if item is nil or missing\r\n        if (gs.nil(item)) {\r\n            gs.error('CheckCriteria().itemCriteria() failed: item parameter is missing or null, item: ' + item);\r\n            return false;\r\n        }\r\n\r\n        // Get the user object and user ID, defaulting to the current user if userToCheck is not provided\r\n        var userObj = !gs.nil(userToCheck) ? gs.getUser().getUserByID(userToCheck) : gs.getUser();\r\n        var userId = userObj.getID();\r\n\r\n        // Admin override: if the user is an admin and adminOverride is true, return true\r\n        if (adminOverride && userObj.hasRole('admin')) {\r\n            return true;\r\n        }\r\n\r\n        // Fetch \"Available for\" and \"Not Available for\" user criteria\r\n        var availableForUC = this.getUserCritria(item, true);\r\n        var notAvailableForUC = this.getUserCritria(item, false);\r\n\r\n        // Check if the user matches the \"Not Available for\" criteria first\r\n        if (sn_uc.UserCriteriaLoader.userMatches(userId, notAvailableForUC)) {\r\n            return false;\r\n        }\r\n\r\n        // Check if the user matches the \"Available for\" criteria\r\n        return sn_uc.UserCriteriaLoader.userMatches(userId, availableForUC);\r\n    },\r\n\r\n    /**\r\n     * Retrieves the user criteria for a catalog item.\r\n     * \r\n     * @param {string} item - The sys_id of the catalog item.\r\n     * @param {boolean} available - If true, fetch the \"Available for\" criteria. If false, fetch the \"Not Available for\" criteria.\r\n     * \r\n     * @returns {Array<string>} - An array of user criteria sys_ids for the catalog item.\r\n     */\r\n    getUserCritria: function(item, available) {\r\n        // Early exit if item is nil or missing\r\n        if (gs.nil(item)) {\r\n            gs.error('CheckCriteria().getUserCritria() failed: item parameter is missing or null, item: ' + item);\r\n            return [];\r\n        }\r\n\r\n        // Define table name constants\r\n        var TABLE_AVAILABLE = 'sc_cat_item_user_criteria_mtom';\r\n        var TABLE_NOT_AVAILABLE = 'sc_cat_item_user_criteria_no_mtom';\r\n\r\n        // Select appropriate table based on availability flag\r\n        var tableToCheck = available ? TABLE_AVAILABLE : TABLE_NOT_AVAILABLE;\r\n\r\n        // Query user criteria from the appropriate table\r\n        var ucCheckGr = new GlideRecord(tableToCheck);\r\n        ucCheckGr.addQuery('sc_cat_item', item);\r\n        ucCheckGr.query();\r\n\r\n        // Store user criteria sys_ids in an array\r\n        var returnArr = [];\r\n        while (ucCheckGr.next()) {\r\n            returnArr.push(ucCheckGr.getValue('user_criteria'));\r\n        }\r\n\r\n        return returnArr;\r\n    },\r\n\r\n    type: 'CheckCriteria'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Check User Criteria for Catalog Item",
        "scriptFiles": [
          "checkUserCriteria.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Check%20User%20Criteria%20for%20Catalog%20Item",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Check%20User%20Criteria%20for%20Catalog%20Item/checkUserCriteria.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.563Z",
    "updatedAt": "2025-09-21T08:58:58.213Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 208,
    "type": "script_include",
    "name": "CatalogUtils",
    "description": "CatalogUtils This Script Include is a helper class for dealing with Service Catalog Items and Requested Items.",
    "script": "var CatalogUtils = Class.create();\r\n\r\n/**\r\n * Helper class for dealing with catalogs and catalog items.\r\n * All methods can be called both server-side and client-side.\r\n *\r\n * @class CatalogUtils\r\n * @author Maik Skoddow\r\n */\r\nCatalogUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\r\n    /**\r\n     * Returns all variables of a given RITM as stringified array of JSON objectss.\r\n     *\r\n     * @param {Object} objParameter Valid `sc_req_item` record or String-based Sys ID of a RITM.\r\n     * @return {String} Stringified array of JSON objects with various variable values and information or an empty array if no valid data could be found.\r\n     */\r\n    getVariables: function(objParameter) {\r\n        var _grRITM = null;\r\n\r\n        //server-side call with Sys ID\r\n        if (typeof objParameter == 'string' && objParameter.length == 32) {\r\n            _grRITM = new GlideRecord('sc_req_item');\r\n\r\n            if (!_grRITM.get(objParameter)) {\r\n                _grRITM = null;\r\n            } \r\n        }\r\n\r\n        //server-side call with initialized RITM GlideRecord \r\n        if (typeof objParameter == 'object' && objParameter instanceof GlideRecord) {\r\n            if (objParameter.isValidRecord() && objParameter.getTableName() == 'sc_req_item') {\r\n                _grRITM = objParameter;\r\n            }\r\n        }\r\n\r\n        //client-side Ajax call with RITM Sys ID as parameter\r\n        if (this.getParameter('sysparm_ritm_sys_id')) {\r\n            var _strSysID = String(this.getParameter('sysparm_ritm_sys_id')).trim();\r\n\r\n            if (_strSysID.length == 32) {\r\n                _grRITM = new GlideRecord('sc_req_item');\r\n\r\n                if (!_grRITM.get(_strSysID)) {\r\n                    _grRITM = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        //no valid RITM could be loaded\r\n        if (_grRITM == null) {\r\n            return '[]';\r\n        }\r\n\r\n        //could be improved by offering a configuration method for excluded variable types\r\n        var _strExcludedTypes = '|11|12|14|15|17|19|20|24|'; \r\n        var _arrResult        = [];\r\n        var _grVariables      = new GlideRecord('sc_item_option_mtom');\r\n\r\n        //load all catalog variables for given RITM\r\n        _grVariables.addQuery('request_item', _grRITM.sys_id);\r\n        _grVariables.orderBy('sc_item_option.order');\r\n        _grVariables.query();\r\n\r\n        while (_grVariables.next()) {\r\n            var _strType         = _grVariables.sc_item_option.item_option_new.type.toString();\r\n            var _strName         = _grVariables.sc_item_option.item_option_new.name.toString();\r\n            var _strQuestionText = _grVariables.sc_item_option.item_option_new.question_text.toString();\r\n            var _strValue        = _grVariables.sc_item_option.value.toString();\r\n            var _strDisplayValue = _grRITM.getDisplayValue('variables.' + _strName);\r\n\r\n            //if type is not excluded fill result array with variable values\r\n            if (_strExcludedTypes.indexOf('|' + _strType + '|') == -1) {\r\n                _arrResult.push({\r\n                    strType:         _strType,\r\n                    strName:         _strName,\r\n                    strQuestionText: _strQuestionText,\r\n                    strValue:        _strValue,\r\n                    strDisplayValue: _strDisplayValue,\r\n                });\r\n            }\r\n        }\r\n\r\n        return JSON.stringify(_arrResult);\r\n    },\r\n\r\n    /**SNDOC\r\n    @name _variablesToText\r\n    @description Parses over the variables of a given record, returning Question Label and Display Value of answers\r\n    @param {object} [pRecord] GlideRecord object with variables key\r\n    @returns {string} A formatted string of variable questions and corresponding answer\r\n    */\r\n    variablesToText: function (pRecord) {\r\n        var oVariables = pRecord.variables;\r\n        var aPayload = [];\r\n        for (key in oVariables) {\r\n            var sQuestion = oVariables[key].getLabel();\r\n            var sAnswer = oVariables[key].getDisplayValue();\r\n            if (JSUtil.notNil(sQuestion) && JSUtil.notNil(sAnswer)) {\r\n                aPayload.push(sQuestion + ':\\n>>' + sAnswer);\r\n            }\r\n        }\r\n        return aPayload.join('\\n\\n');\r\n    },\r\n\r\n    type: 'CatalogUtils',\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/CatalogUtils",
        "scriptFiles": [
          "CatalogUtils.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/CatalogUtils",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/CatalogUtils/CatalogUtils.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.559Z",
    "updatedAt": "2025-09-21T08:58:58.209Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 207,
    "type": "script_include",
    "name": "Catalog Item Pricing",
    "description": "Catalog Item Pricing Description: This script includes provides a dynamic and configurable approach to calculating the final price of catalog items in ServiceNow.",
    "script": "var calculateCatalogItemPrice = Class.create();\r\n/**\r\n * Helper class for dealing with catalogs Item Pricing.\r\n * @class calculateCatalogItemPrice\r\n * @author ankit shukla \r\n */\r\ncalculateCatalogItemPrice.prototype = {\r\n    initialize: function() {\r\n    },\r\n    /**\r\n     * Returns the final price for the catalog.\r\n     *\r\n     * @param {catalogItem} Represents the base catalog item record.\r\n     * @return {integer} rwhich represents the final calculated price of the catalog item.\r\n     */\r\n    calculatePrice: function(catalogItem, currentItem) {\r\n        var basePrice = catalogItem.price;\r\n        var finalPrice = basePrice;\r\n\r\n        // Get system properties for dynamic pricing configuration\r\n        var enterpriseDiscount = gs.getProperty('catalog_item_enterprise_discount'); // Discount for Enterprise customers\r\n        var quantityDiscountThreshold = gs.getProperty('catalog_item_quantity_discount_threshold'); // Quantity threshold for discount\r\n        var quantityDiscountPercentage = gs.getProperty('catalog_item_quantity_discount_percentage'); // Discount percentage for qualifying quantities\r\n        var installationCost = gs.getProperty('catalog_item_installation_cost'); // Cost of installation service\r\n\r\n        // Apply discounts based on customer type\r\n        if (currentItem.customer.type == 'Enterprise') {\r\n            finalPrice = finalPrice * (1 - enterpriseDiscount); // Apply Enterprise discount\r\n        }\r\n\r\n        // Apply quantity-based discounts\r\n        if (currentItem.quantity > quantityDiscountThreshold) {\r\n            finalPrice = finalPrice * (1 - quantityDiscountPercentage); // Apply quantity-based discount\r\n        }\r\n\r\n        // Add costs for additional services\r\n        if (currentItem.additional_services.includes('Installation')) {\r\n            finalPrice += installationCost; // Add installation cost\r\n        }\r\n\r\n        // Set the final price on the current item\r\n        currentItem.price = finalPrice;\r\n        currentItem.update();\r\n\r\n        return finalPrice;\r\n    }\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Catalog Item Pricing",
        "scriptFiles": [
          "calculate_catalog_item_price.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Catalog%20Item%20Pricing",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Catalog%20Item%20Pricing/calculate_catalog_item_price.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.554Z",
    "updatedAt": "2025-09-21T08:58:58.206Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 206,
    "type": "script_include",
    "name": "CacheHelper",
    "description": "BenchmarkRunner Just a wrapper around GlideCacheManager with methods to enable validation of Cache key and data and ability to use the GlideCacheManager easily. Example server-side call (background script)",
    "script": "var CacheHelper = Class.create();\r\nCacheHelper.prototype = {\r\n\r\n    logIt : false,\r\n\r\n    initialize: function(log) {\r\n        this.logIt = log;\r\n    },\r\n\r\n    /**\r\n     * Adds data to the cache\r\n     * \r\n     * @param {string} cacheName : cache name\r\n     * @param {string} key : unique cache key \r\n     * @param {any} data : any data to be cached\r\n     */\r\n    addToCache: function(cacheName, key, data) {\r\n        this._validateCacheName(cacheName);\r\n        this._validateCacheKey(key);\r\n\r\n        GlideCacheManager.put(cacheName, key, data);\r\n    },\r\n\r\n    /**\r\n     * Removes data from cache\r\n     * \r\n     * @param {string} cacheName : cache name\r\n     * @param {string} key : unique cache key \r\n     * @returns cached data\r\n     */\r\n    getFromCache: function(cacheName, key) {\r\n        this._validateCacheName(cacheName);\r\n        this._validateCacheKey(key);\r\n\r\n        var data = GlideCacheManager.get(cacheName, key);\r\n        return data;\r\n    },\r\n\r\n    removeFromCache: function(cacheName) {\r\n        this._validateCacheName(cacheName);\r\n        \r\n        GlideCacheManager.flush(cacheName);\r\n    },\r\n\r\n    /**\r\n     * Either gets the data from cache or calls the callback functions, get the data and then adds it to the cache\r\n     * @param {string} cacheName : cache name\r\n     * @param {string} key : unique cache key \r\n     * @param {function} dataCallBack : call back function that returns the data to be cached\r\n     * @returns data from the cache or based on call back function\r\n     */\r\n    getOrAddToCache: function(cacheName, key, dataCallBack) {\r\n        this._validateCacheName(cacheName);\r\n        this._validateCacheKey(key);\r\n\r\n        var data = GlideCacheManager.get(cacheName, key);\r\n\r\n        if (gs.nil(data)) {\r\n            data = dataCallBack();\r\n            GlideCacheManager.put(cacheName, key, data);\r\n            if(this.logIt) gs.debug(\"Data from source.\");\r\n            return data;\r\n        }\r\n\r\n        if(this.logIt) gs.debug(\"Data from cache.\");\r\n        return data;\r\n    },\r\n\r\n    _validateCacheName :function(cacheName){\r\n        if(!cacheName) throw new Error(\"cacheName is required\");\r\n    },\r\n\r\n    _validateCacheKey :function(cacheKey){\r\n        if(!cacheKey) throw new Error(\"cacheKey is required\");\r\n    },\r\n\r\n    type: 'CacheHelper'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/CacheHelper",
        "scriptFiles": [
          "CacheHelper.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/CacheHelper",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/CacheHelper/CacheHelper.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.551Z",
    "updatedAt": "2025-09-21T08:58:58.202Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 205,
    "type": "script_include",
    "name": "BenchmarkRunner",
    "description": "BenchmarkRunner This Script Include is a tool for benchmarking individual functions, or comparing the execution time or two functions, to determine whether one method of doing something is faster than another, and by how much. For example (as you can see in the example below), comparing whether it's faster to stringify an object, or parse a JSON string into an object.",
    "script": "var BenchmarkRunner = Class.create();\r\nBenchmarkRunner.prototype = {\r\n\tinitialize : function () {\r\n\t\tthis.timers = {};\r\n\t},\r\n\t\r\n\t/**\r\n\t * Execute two functions with the specified arguments, and get info about which was faster\r\n\t *  (and by how much).\r\n\t *\r\n\t * @param {function} methodOne - The first method to test, for comparison with the second.\r\n\t * @param {function} methodTwo - The second method to test, for comparison with the first.\r\n\t * @param {number} iterations - The number of times to run each function. Very quick functions,\r\n\t *  you might want to run hundreds or even thousands of times.\r\n\t * This is to make sure that the average duration is meaningful by eliminating any random\r\n\t *  variations in performance.\r\n\t * @param {Array} [args=[]] - An optional array of arguments to pass into your test functions.\r\n\t * The same array will be passed to both test function. You can have your function accept an\r\n\t *  argument called args, and access its elements in your test function like so:\r\n\t * var grSomeRecord = args[0];\r\n\t * @param {boolean} [runToCache=true] - If runToCache is set to true (or unspecified), run each\r\n\t *  function one time BEFORE beginning the timer, in order to ensure that any cachable data is\r\n\t *  cached.\r\n\t * There are times when you may not want to do this, such as if it's the \"first-run\" time of\r\n\t * each function that you want to compare.\r\n\t * @return {{method_two : {duration_ms : number, ms_per_iteration : number, begin_ms : number,\r\n\t *     end_ms : number, duration_sec : number}, comparison : {iteration_faster_by_ms : number,\r\n\t *     which_was_faster : number, slower_multiple : number, total_faster_by_ms : number},\r\n\t *     method_one : {duration_ms : number, ms_per_iteration : number, begin_ms : number, end_ms\r\n\t *     : number, duration_sec : number}}}\r\n\t *\r\n\t * method_one/method_two:\r\n\t *\r\n\t *  begin_ms: The current epoch time (in ms) at which the test of that function began.\r\n\t *\r\n\t *  end_ms: The current epoch time (in ms) at which the test of that function ended.\r\n\t *\r\n\t *  duration_ms: The total number of milliseconds it took to run the passed function\r\n\t *   the specified number of times.\r\n\t *\r\n\t *  duration_sec: The total number of seconds it took to run the passed function the\r\n\t *   specified number of times.\r\n\t *\r\n\t *  ms_per_iteration: The average time (in ms) it took to run the function one time.\r\n\t *\r\n\t * comparison:\r\n\t *\r\n\t *  which_was_faster: Will be integer 0, 1, or 2. If 1, the first passed function\r\n\t *   was faster. If 1, the function in the first argument was faster; if 2, the\r\n\t *   second was faster. If this is set to zero, then either something went wrong,\r\n\t *   or both functions took EXACTLY the same amount of time. This would be... rare,\r\n\t *   even when passing the exact same function in twice, just due to random variations.\r\n\t *\r\n\t *   iteration_faster_by_ms: The number of milliseconds by which the faster method was\r\n\t *    faster. This may well be set to zero or near zero if the difference per-iteration\r\n\t *    is relatively negligible, but that doesn't mean that there is literally no\r\n\t *    difference between the two. For example, if the specific operation you're testing\r\n\t *    is very fast, the faster method may be faster by only 0.1ms, but if it's a\r\n\t *    commonly used function, you may end up doing it tens of thousands of times per day.\r\n\t *\r\n\t *  total_faster_by_ms: The TOTAL number of milliseconds by which the faster method was\r\n\t *   faster, compounded across all iterations. For example, if the second method was\r\n\t *   faster by 2ms per iteration and you specified 100 iterations, then which_was_faster\r\n\t *   would be set to 2, iteration_faster_by_ms would be set to 2, and total_faster_by_ms\r\n\t *   would be set to 200.\r\n\t */\r\n\tcompareFunctions : function (methodOne, methodTwo, iterations, args, runToCache) {\r\n\t\tvar benchmarkData = {\r\n\t\t\t'method_one' : {\r\n\t\t\t\t'begin_ms' : 0,\r\n\t\t\t\t'end_ms' : 0,\r\n\t\t\t\t'duration_ms' : 0,\r\n\t\t\t\t'duration_sec' : 0,\r\n\t\t\t\t'ms_per_iteration' : 0\r\n\t\t\t},\r\n\t\t\t'method_two' : {\r\n\t\t\t\t'begin_ms' : 0,\r\n\t\t\t\t'end_ms' : 0,\r\n\t\t\t\t'duration_ms' : 0,\r\n\t\t\t\t'duration_sec' : 0,\r\n\t\t\t\t'ms_per_iteration' : 0\r\n\t\t\t},\r\n\t\t\t'comparison' : {\r\n\t\t\t\t'which_was_faster' : 0,\r\n\t\t\t\t'iteration_faster_by_ms' : 0,\r\n\t\t\t\t'total_faster_by_ms' : 0,\r\n\t\t\t\t'slower_multiple' : 0\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t//Set default args value if not set\r\n\t\targs = (typeof args == 'undefined') ? [] : args;\r\n\t\trunToCache = (typeof runToCache == 'undefined') ? true : runToCache;\r\n\t\t\r\n\t\tbenchmarkData.method_one = this.benchmarkSingleFunction(\r\n\t\t\tmethodOne,\r\n\t\t\titerations,\r\n\t\t\targs,\r\n\t\t\trunToCache\r\n\t\t);\r\n\t\tbenchmarkData.method_two = this.benchmarkSingleFunction(\r\n\t\t\tmethodTwo,\r\n\t\t\titerations,\r\n\t\t\targs,\r\n\t\t\trunToCache\r\n\t\t);\r\n\t\t\r\n\t\tbenchmarkData.comparison.which_was_faster = this._calculateWhichWasFaster(\r\n\t\t\tbenchmarkData\r\n\t\t);\r\n\t\tbenchmarkData.comparison.total_faster_by_ms = Math.abs(\r\n\t\t\tbenchmarkData.method_one.duration_ms - benchmarkData.method_two.duration_ms\r\n\t\t);\r\n\t\tbenchmarkData.comparison.iteration_faster_by_ms = (\r\n\t\t\tbenchmarkData.comparison.total_faster_by_ms / iterations\r\n\t\t);\r\n\t\tbenchmarkData.comparison.slower_multiple = this._calculateSlowerMultiple(benchmarkData);\r\n\t\t\r\n\t\treturn benchmarkData;\r\n\t},\r\n\t\r\n\tbenchmarkSingleFunction : function (functionToBenchmark, iterations, args) {\r\n\t\tvar i;\r\n\t\tvar benchmarkData = {\r\n\t\t\t'begin_ms' : 0,\r\n\t\t\t'end_ms' : 0,\r\n\t\t\t'duration_ms' : 0,\r\n\t\t\t'duration_sec' : 0,\r\n\t\t\t'ms_per_iteration' : 0\r\n\t\t};\r\n\t\t\r\n\t\t//Set default args value if not set\r\n\t\targs = (typeof args == 'undefined') ? [] : args;\r\n\t\t//runToCache = (typeof runToCache == 'undefined') ? true : runToCache;\r\n\t\t\r\n\t\t/* SETUP\r\n\t\t* If runToCache is set to true (or unspecified), run the method one time BEFORE\r\n\t\t*  beginning the timer, in order to ensure that any cachable data is cached.\r\n\t\t* There are times when you may not want to do this, such as if it's the \"first-run\"\r\n\t\t*  time of each function that you want to compare.\r\n\t\t* */\r\n\t\tfunctionToBenchmark(args);\r\n\t\t\r\n\t\t//Set begin_ms to begin benchmark\r\n\t\tbenchmarkData.begin_ms = new GlideDateTime().getNumericValue();\r\n\t\t\r\n\t\t//Run the passed function however many times indicated in the iterations arg.\r\n\t\tfor (i = 0; i < iterations; i++) {\r\n\t\t\tfunctionToBenchmark(args);\r\n\t\t}\r\n\t\t\r\n\t\t//Set end_ms to end benchmark\r\n\t\tbenchmarkData.end_ms = new GlideDateTime().getNumericValue();\r\n\t\t\r\n\t\t//Calculate durations\r\n\t\tbenchmarkData.duration_ms = benchmarkData.end_ms - benchmarkData.begin_ms;\r\n\t\tbenchmarkData.duration_sec = benchmarkData.duration_ms / 1000;\r\n\t\tbenchmarkData.ms_per_iteration = benchmarkData.duration_ms / iterations;\r\n\t\t\r\n\t\treturn benchmarkData;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Pass in the info about the comparison you just did, and have that info printed to the\r\n\t *  info logs.\r\n\t * @param {Object} benchmarkData - The benchmark data, as returned from calling the\r\n\t *  .compareFunctions() method.\r\n\t * @param {Number} iterations - The number of iterations this comparison was done for\r\n\t *  (passed in as the third argument to .compareFunctions()).\r\n\t * @returns {string} The message to be logged (which will also be logged using gs.info()).\r\n\t */\r\n\tprintComparisonResults : function (benchmarkData, iterations) {\r\n\t\tvar logMsg;\r\n\t\t\r\n\t\tif (benchmarkData.comparison.which_was_faster === 0) {\r\n\t\t\tlogMsg = 'Both methods took the exact same amount of time.\\n' +\r\n\t\t\t\t'Complete benchmark details: \\n' +\r\n\t\t\t\tJSON.stringify(\r\n\t\t\t\t\tbenchmarkData, null, 2\r\n\t\t\t\t);\r\n\t\t\tgs.info(logMsg);\r\n\t\t\treturn logMsg;\r\n\t\t}\r\n\t\tlogMsg = '\\nMethod 1 took ' + benchmarkData.method_one.duration_ms + 'ms. Method 2 took ' +\r\n\t\t\tbenchmarkData.method_two.duration_ms + 'ms.\\n' +\r\n\t\t\t'Method ' + benchmarkData.comparison.which_was_faster + ' was faster by ' +\r\n\t\t\tbenchmarkData.comparison.total_faster_by_ms + 'ms total, over ' + iterations +\r\n\t\t\t' iterations (or ' + benchmarkData.comparison.iteration_faster_by_ms +\r\n\t\t\t'ms faster per-iteration). \\nThe slower function takes ' +\r\n\t\t\tbenchmarkData.comparison.slower_multiple + ' times as long as the faster function ' +\r\n\t\t\t'to run.\\n\\n' +\r\n\t\t\t'Complete benchmark details: \\n' +\r\n\t\t\tJSON.stringify(\r\n\t\t\t\tbenchmarkData, null, 2\r\n\t\t\t);\r\n\t\tgs.info(logMsg);\r\n\t\t\r\n\t\treturn logMsg;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Starts the specified timer by ID (or the default timer if timer ID is not specified)\r\n\t * @param {string} [timerID=\"default\"] The ID of the timer to start or stop.\r\n\t * If an ID is not specified, it will be set to \"default\".\r\n\t * @return {BenchmarkRunner}\r\n\t */\r\n\tstartTimer : function (timerID) {\r\n\t\ttimerID = (typeof timerID == 'undefined') ? 'default' : timerID;\r\n\t\t\r\n\t\tif (this.timers.hasOwnProperty(timerID)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'Timer with ID ' + timerID + ' already exists. Unable to start ' +\r\n\t\t\t\t'multiple times with the same ID.'\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\tthis.timers[timerID] = new this._Timer(timerID);\r\n\t\tthis.timers[timerID].startTimer();\r\n\t\treturn this;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Stops the specified timer by ID (or the default timer if timer ID is not specified)\r\n\t * @param {string} [timerID=\"default\"] The ID of the timer to start or stop.\r\n\t * If an ID is not specified, it will be set to \"default\".\r\n\t * @return {this._Timer} An instance of the _Timer class, on which you can call\r\n\t *  .getDurationMS() or .getDurationSec() to get the timer duration.\r\n\t */\r\n\tstopTimer : function (timerID) {\r\n\t\ttimerID = (typeof timerID == 'undefined') ? 'default' : timerID;\r\n\t\t\r\n\t\tif (!this.timers.hasOwnProperty(timerID)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'Timer with ID ' + timerID + ' does not exist. Unable to stop ' +\r\n\t\t\t\t'a timer that has not been created. Please call the .startTimer() ' +\r\n\t\t\t\t'method to start a new timer.'\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\tthis.timers[timerID].stopTimer();\r\n\t\treturn this.timers[timerID];\r\n\t},\r\n\t\r\n\t_calculateWhichWasFaster : function (benchmarkData) {\r\n\t\t//If method one duration was more than method 2 duration, return 2.\r\n\t\tif (benchmarkData.method_one.duration_ms > benchmarkData.method_two.duration_ms) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//If method one duration was less than method 2 duration, return 1.\r\n\t\tif (benchmarkData.method_one.duration_ms < benchmarkData.method_two.duration_ms) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\t//If method 1 and 2 durations were identical (or if something has gone terribly wrong),\r\n\t\t// return 0.\r\n\t\treturn 0;\r\n\t},\r\n\t\r\n\t_calculateSlowerMultiple : function (benchmarkData) {\r\n\t\tvar msFasterDuration, msSlowerDuration;\r\n\t\t\r\n\t\tvar comparisonData = benchmarkData.comparison;\r\n\t\tvar methodOneData = benchmarkData.method_one;\r\n\t\tvar methodTwoData = benchmarkData.method_two;\r\n\t\t\r\n\t\tif (benchmarkData.comparison.which_was_faster === 0) {\r\n\t\t\t//If both were the same speed, multiple is 1.\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\tmsFasterDuration = (comparisonData.which_was_faster === 1) ? methodOneData.duration_ms : methodTwoData.duration_ms;\r\n\t\tmsSlowerDuration = (comparisonData.which_was_faster === 1) ? methodTwoData.duration_ms : methodOneData.duration_ms;\r\n\t\t\r\n\t\treturn (msSlowerDuration / msFasterDuration);\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t * @param {string} [timerID=\"default\"] The ID of the timer. Used for reference later.\r\n\t * @private\r\n\t * @constructor\r\n\t */\r\n\t_Timer : function (timerID) {\r\n\t\tthis.timer_id = timerID || 'default';\r\n\t\tthis.start_ms = 0;\r\n\t\tthis.stop_ms = 0;\r\n\t\tthis.duration_ms = 0;\r\n\t\tthis.duration_sec = 0;\r\n\t\tthis.timer_running = false;\r\n\t\t\r\n\t\tthis.startTimer = function () {\r\n\t\t\tthis.start_ms = new GlideDateTime().getNumericValue();\r\n\t\t\tthis.timer_running = true;\r\n\t\t};\r\n\t\tthis.stopTimer = function () {\r\n\t\t\tif (!this.timer_running || !this.start_ms) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t'Attempted to stop a timer that either isn\\'t running, or that has ' +\r\n\t\t\t\t\t'an invalid start time.'\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.stop_ms = new GlideDateTime().getNumericValue();\r\n\t\t\tthis.duration_ms = (this.stop_ms - this.start_ms);\r\n\t\t\tthis.duration_sec = (this.duration_ms / 1000);\r\n\t\t\tthis.timer_running = false;\r\n\t\t\t\r\n\t\t\treturn this;\r\n\t\t};\r\n\t\t\r\n\t\t//Getters\r\n\t\tthis.getDurationMS = function () {\r\n\t\t\treturn this.duration_ms;\r\n\t\t};\r\n\t\tthis.getDurationSec = function () {\r\n\t\t\treturn this.duration_sec;\r\n\t\t};\r\n\t\tthis.getTimerID = function () {\r\n\t\t\treturn this.timer_id;\r\n\t\t};\r\n\t\t\r\n\t\t//Setters\r\n\t\tthis.setTimerID = function (timerID) {\r\n\t\t\tthis.timer_id = timerID;\r\n\t\t\treturn this;\r\n\t\t};\r\n\t},\r\n\t\r\n\t__example : function (iterations) {\r\n\t\tvar benchmarkUtil, benchmarkData;\r\n\t\tvar methodOne = function (args) {\r\n\t\t\t//Testing \"=\" query without setLimit\r\n\t\t\tvar grAudit = new GlideRecord('sys_audit');\r\n\t\t\tgrAudit.addEncodedQuery('newvalue=Random number: ' + args[0] + '^oldvalue=Random number: ' + args[1]);\r\n\t\t\tgrAudit.query();\r\n\t\t};\r\n\t\tvar methodTwo = function (args) {\r\n\t\t\t//Testing \"CONTAINS\" query without setLimit\r\n\t\t\tvar grAudit = new GlideRecord('sys_audit');\r\n\t\t\tgrAudit.addEncodedQuery('newvalueLIKE' + args[0] + '^oldvalueLIKE' + args[1]);\r\n\t\t\tgrAudit.query();\r\n\t\t};\r\n\t\titerations = iterations || 10;\r\n\t\t\r\n\t\tbenchmarkUtil = new BenchmarkRunner();\r\n\t\tbenchmarkData = benchmarkUtil.compareFunctions(\r\n\t\t\tmethodOne,\r\n\t\t\tmethodTwo,\r\n\t\t\titerations,\r\n\t\t\t[271, 488], //Random #s in audit table that match a contrived record for this test\r\n\t\t\ttrue\r\n\t\t);\r\n\t\t\r\n\t\treturn benchmarkUtil.printComparisonResults(benchmarkData, iterations);\r\n\t},\r\n\t\r\n\t__example2 : function () {\r\n\t\tvar bmr;\r\n\t\tvar argsArray = [\r\n\t\t\t{\r\n\t\t\t\t\"some_object\": {\r\n\t\t\t\t\t\"some_object\": {\r\n\t\t\t\t\t\t\"some_object\": {\r\n\t\t\t\t\t\t\t\"some_number\": 123,\r\n\t\t\t\t\t\t\t\"some_string\": \"abc123\",\r\n\t\t\t\t\t\t\t\"some_boolean\": 123,\r\n\t\t\t\t\t\t\t\"some_null\": null,\r\n\t\t\t\t\t\t\t\"some_method\": function() {\r\n\t\t\t\t\t\t\t\treturn \"some_string\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t];\r\n\t\t\r\n\t\targsArray.push(JSON.stringify(argsArray[0]));\r\n\t\t\r\n\t\t/*\r\n\t\t\targsArray[0] now contains the object, and argsArray[1] contains the\r\n\t\t\t stringified object.\r\n\t\t\tWe'll test whether it's faster to stringify an object, or to parse an\r\n\t\t\t object string.\r\n\t\t */\r\n\t\t\r\n\t\tbmr = new BenchmarkRunner()\r\n\t\t\r\n\t\tbmr.printComparisonResults(\r\n\t\t\tbmr.compareFunctions(\r\n\t\t\t\tthingOne,\r\n\t\t\t\tthingTwo,\r\n\t\t\t\t20000,\r\n\t\t\t\targsArray\r\n\t\t\t),\r\n\t\t\t20000\r\n\t\t);\r\n\t\t\r\n\t\tfunction thingOne(arrArgs) {\r\n\t\t\tvar strObj = JSON.stringify(arrArgs[0]);\r\n\t\t\treturn strObj;\r\n\t\t}\r\n\t\t\r\n\t\tfunction thingTwo(arrArgs) {\r\n\t\t\tvar objObj = JSON.parse(arrArgs[1]);\r\n\t\t\treturn objObj;\r\n\t\t}\r\n\t\t\r\n\t},\r\n\t\r\n\ttype : 'BenchmarkRunner'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/BenchmarkRunner",
        "scriptFiles": [
          "BenchmarkRunner.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/BenchmarkRunner",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/BenchmarkRunner/BenchmarkRunner.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.546Z",
    "updatedAt": "2025-09-21T08:58:58.199Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 204,
    "type": "script_include",
    "name": "BackfillAssignmentGroup",
    "description": "BackFillAssignmentGroup This script include is an advanced reference qualifier for the Assignment group field. It restricts the Assignment group choices to only relevant groups of which the current Assigned to user is a member. Current Configuration",
    "script": "var BackfillAssignmentGroup = Class.create();\r\nBackfillAssignmentGroup.prototype = {\r\n  initialize: function () {},\r\n\r\n  BackfillAssignmentGroup: function () {\r\n    var groups = \" \";\r\n    var assignee = current.assigned_to;\r\n\r\n    //return all relevant groups (active, itil) if the assigned_to value is empty\r\n\r\n    if (!assignee) {\r\n      var allGrp = new GlideRecord(\"sys_user_group\");\r\n      allGrp.addActiveQuery();\r\n      allGrp.addEncodedQuery(\"typeLIKE1cb8ab9bff500200158bffffffffff62\"); //group is constrained to 'itil' type. You can change this to meet your requirements\r\n      allGrp.query();\r\n      while (allGrp.next()) {\r\n        //build a comma separated string of groups if there is more than one\r\n        if (groups.length > 0) {\r\n          groups += \",\" + rgrp.sys_id;\r\n        } else {\r\n          groups = rgrp.sys_id;\r\n        }\r\n      }\r\n      return \"sys_idIN\" + groups;\r\n    }\r\n    //sys_user_grmember has the user to group relationship\r\n    var userGrp = new GlideRecord(\"sys_user_grmember\");\r\n    userGrp.addQuery(\"user\", assignee);\r\n    userGrp.addEncodedQuery(\"group.typeLIKE1cb8ab9bff500200158bffffffffff62\"); //group is constrained to 'itil' type. You can change this to meet your requirements\r\n    userGrp.query();\r\n    while (userGrp.next()) {\r\n      if (groups.length > 0) {\r\n        //build a comma separated string of groups if there is more than one\r\n        groups += \",\" + userGrp.group;\r\n      } else {\r\n        groups = userGrp.group;\r\n      }\r\n    }\r\n    // return Groups where assigned to is in those groups we use IN for lists\r\n    return \"sys_idIN\" + groups;\r\n  },\r\n  type: \"BackfillAssignmentGroup\",\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/BackfillAssignmentGroup",
        "scriptFiles": [
          "BackfillAssignmentGroup.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/BackfillAssignmentGroup",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/BackfillAssignmentGroup/BackfillAssignmentGroup.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.543Z",
    "updatedAt": "2025-09-21T08:58:58.195Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 203,
    "type": "script_include",
    "name": "Autopopulate caller location in short description",
    "description": "GlideAjax: This is a ServiceNow-specific class used to make asynchronous calls to server-side scripts (Script Includes). Script Include: 'getCallerLocation' is the name of the Script Include being called. Parameters:",
    "script": "// File: getCallerLocation.js\n//The client script related to this script include is added under Glide Ajax folder named updateCallerLocationinShortDesc\r\nvar getCallerLocation = Class.create();\r\ngetCallerLocation.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n    getLocation: function() {\r\n        var userId = this.getParameter('sysparm_user');\r\n        var gr = new GlideRecord('sys_user');  //user table\r\n        gr.addQuery('sys_id', userId); //Adding query for sys ID of user's ID\r\n        gr.query();\r\n        if (gr.next()) {\r\n            var a = gr.location.name; //Fetching the current record location\r\n            return a;\r\n        }\r\n    },\r\n    type: 'getCallerLocation'\r\n});\n\n// File: updateCallerLocationinShortDesc.js\nfunction onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n\r\n    var ga = new GlideAjax('getCallerLocation'); //Script include function call\r\n    ga.addParam('sysparm_name', 'getLocation');\r\n    ga.addParam('sysparm_user', newValue);\r\n    ga.getXML(setLocation);\r\n}\r\n\r\nfunction setLocation(response) {\r\n\tvar answer = response.responseXML.documentElement.getAttribute(\"answer\");\r\n    g_form.setValue('short_description',answer);\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Autopopulate caller location in short description",
        "scriptFiles": [
          "getCallerLocation.js",
          "updateCallerLocationinShortDesc.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Autopopulate%20caller%20location%20in%20short%20description"
      }
    },
    "createdAt": "2025-09-20T08:42:18.534Z",
    "updatedAt": "2025-09-21T08:58:58.191Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 202,
    "type": "script_include",
    "name": "Auto Execute Import Set on File Attachment",
    "description": "Auto Execute Import Set on File Attachment You have to create a data source and a transform map first. After that you can use Flow Designer with the trigger condition Attachment is added to the data source. Once the flow triggers, it will call the action which in turn will trigger the Script Include to create an Import Set and Transform Map.",
    "script": "// File: CreateImportSetAndRunTransform.js\nvar createImportSet = Class.create();\r\ncreateImportSet.prototype = {\r\n    initialize: function() {\r\n    },\r\n\r\n  //The below function can be called from an Action/Business Rule or a Script Action\r\n\tloadImportSet: function(dataSourceID) {  \r\n        // Get Datasource Record  \r\n        var dataSource = new GlideRecord(\"sys_data_source\");  \r\n        dataSource.get(dataSourceID);  \r\n          \r\n        // Process data source file  \r\n        var loader = new GlideImportSetLoader();  \r\n        var importSetRec = loader.getImportSetGr(dataSource);  \r\n        var ranload = loader.loadImportSetTable(importSetRec, dataSource);  \r\n        importSetRec.state = \"loaded\";  \r\n        importSetRec.update();  \r\n          \r\n        // Transform import set  \r\n        this._doTransform(importSetRec); \r\n    },  \r\n      \r\n    _doTransform: function(set){\r\n        var importSetRun = new GlideImportSetRun(set.getUniqueValue());\r\n        var importLog = new GlideImportLog(importSetRun, set.data_source.name);\r\n        var ist = new GlideImportSetTransformer();\r\n\r\n        ist.setLogger(importLog);\r\n        ist.setImportSetRun(importSetRun);\r\n        ist.transformAllMaps(set);\r\n     },\r\n    type: 'createImportSet'\r\n};\n\n// File: CreateSysTrigger.js\n(function execute(inputs, outputs) {\r\n// ... code ...\r\n  var schRec = new GlideRecord(\"sys_trigger\");  \r\n        schRec.name = \"Load Data Source: \" + inputs.dataSourceID;  \r\n        schRec.trigger_type = 0; // Run Once  \r\n        schRec.script = \"new global.LoadIncidents().loadImportSet('\" + inputs.dataSourceID + \"')\";  \r\n          \r\n        var nextAction = new GlideDateTime();  \r\n        nextAction.addSeconds(30); \r\n        schRec.next_action = nextAction;  \r\n        schRec.insert();  \r\n  \r\n  \r\n})(inputs, outputs);",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Auto Execute Import Set on File Attachment",
        "scriptFiles": [
          "CreateImportSetAndRunTransform.js",
          "CreateSysTrigger.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Auto%20Execute%20Import%20Set%20on%20File%20Attachment"
      }
    },
    "createdAt": "2025-09-20T08:42:18.530Z",
    "updatedAt": "2025-09-21T08:58:58.188Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 201,
    "type": "script_include",
    "name": "attachments",
    "description": "Little utility for attachment types Example Script var att = new Attachment(current);",
    "script": "var Attachment = Class.create();\r\n\r\nAttachment.prototype = {\r\n\tinitialize: function(arg) {\r\n\t\tthis.current = arg;\r\n\t},\r\n\r\n\thasImage : function() {\r\n\r\n\t\tvar attGr = new GlideRecord(Constants.ATTACHMENT_TABLE);\r\n\t\tattGr.addQuery('table_name', this.current.getTableName());\r\n\t\tattGr.addQuery('table_sys_id', this.current.getUniqueValue());\r\n\t\tattGr.addQuery('content_type', 'STARTSWITH', 'image');\r\n\t\tattGr.setLimit(1);\r\n\t\tattGr.query();\r\n\r\n\t\tif (attGr.hasNext()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\tgetImageID : function() {\r\n\r\n\t\tvar attGr = new GlideRecord(Constants.ATTACHMENT_TABLE);\r\n\t\tattGr.addQuery('table_name', this.current.getTableName());\r\n\t\tattGr.addQuery('table_sys_id', this.current.getUniqueValue());\r\n\t\tattGr.addQuery('content_type', 'STARTSWITH', 'image');\r\n\t\tattGr.setLimit(1);\r\n\t\tattGr.query();\r\n\r\n\t\tif (attGr.next()) {\r\n\t\t\treturn attGr.getUniqueValue();\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t},\r\n\r\n\ttype: 'Attachment'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/attachments",
        "scriptFiles": [
          "attachment.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/attachments",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/attachments/attachment.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.526Z",
    "updatedAt": "2025-09-21T08:58:58.184Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 200,
    "type": "script_include",
    "name": "Assign role for a day Util",
    "description": "Utility: AssignRoleToUserForADay.js Overview AssignRoleToUserForADay.js is a utility script designed to temporarily assign a role to a user for a single day. This can be useful for granting temporary permissions or access within an application.",
    "script": "function assignRoleToUserForADay(userSysId, roleSysId) {\r\n    try {\r\n        var user = getUserById(userSysId);\r\n        var role = getRoleById(roleSysId);\r\n        var userRoleSysId = assignRoleToUser(user.sys_id, role.sys_id);\r\n        scheduleRoleRemoval(userRoleSysId, 1); // Schedule for 1 day later\r\n    } catch (error) {\r\n        gs.error(error.message);\r\n    }\r\n}\r\n\r\nfunction getUserById(userSysId) {\r\n    var user = new GlideRecord('sys_user');\r\n    if (!user.get(userSysId)) {\r\n        throw new Error('User not found: ' + userSysId);\r\n    }\r\n    return user;\r\n}\r\n\r\nfunction getRoleById(roleSysId) {\r\n    var role = new GlideRecord('sys_user_role');\r\n    if (!role.get(roleSysId)) {\r\n        throw new Error('Role not found: ' + roleSysId);\r\n    }\r\n    return role;\r\n}\r\n\r\nfunction assignRoleToUser(userSysId, roleSysId) {\r\n    var userRole = new GlideRecord('sys_user_has_role');\r\n    userRole.initialize();\r\n    userRole.user = userSysId;\r\n    userRole.role = roleSysId;\r\n\r\n    var userRoleSysId = userRole.insert();\r\n    if (!userRoleSysId) {\r\n        throw new Error('Failed to assign role to user');\r\n    }\r\n    return userRoleSysId;\r\n}\r\n\r\nfunction scheduleRoleRemoval(userRoleSysId, days) {\r\n    var job = new GlideRecord('sys_trigger');\r\n    job.initialize();\r\n    job.name = 'Remove user role after ' + days + ' days';\r\n    job.script = 'var userRole = new GlideRecord(\"sys_user_has_role\"); userRole.get(\"' + userRoleSysId + '\"); userRole.deleteRecord();';\r\n    job.next_action = new GlideDateTime();\r\n    job.next_action.addDaysUTC(days);\r\n    job.insert();\r\n}",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Assign role for a day Util",
        "scriptFiles": [
          "AssignRoleToUserForADay.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Assign%20role%20for%20a%20day%20Util",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Assign%20role%20for%20a%20day%20Util/AssignRoleToUserForADay.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.521Z",
    "updatedAt": "2025-09-21T08:58:58.181Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 199,
    "type": "script_include",
    "name": "ArrayUtil",
    "description": "ArrayUtil API is a script include with useful functions for working with JavaScript arrays. The example shared helps removes duplicate items from an array using the 'unique' method",
    "script": "//Example Usage of the Script Include ArrayUtil  \r\nvar obj=[];\t\r\n\tvar arrayUtil = new ArrayUtil();\r\n\tvar gr= new GlideRecord('incident');\t\r\n\tgr.addOrderBy('category');\r\n\tgr.query();\r\n\twhile(gr.next()){\t\t\t\r\n\t\tobj.push(gr.getValue('category'));\r\n\t}\r\n\tobj = arrayUtil.unique(obj);\r\n\tgs.info(obj);",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/ArrayUtil",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/ArrayUtil",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/ArrayUtil/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.517Z",
    "updatedAt": "2025-09-21T08:58:58.177Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 198,
    "type": "script_include",
    "name": "Array prototypes",
    "description": "Add many helpful helper functions to array object How to use it? Create a new Script Include",
    "script": "(function() {\r\n\r\n    function DefaultEqualityComparer(a, b) {\r\n        return a === b || a.valueOf() === b.valueOf();\r\n    };\r\n\r\n    function DefaultSortComparer(a, b) {\r\n        if (a === b) return 0;\r\n        if (a == null) return -1;\r\n        if (b == null) return 1;\r\n        if (typeof a == \"string\") return a.toString().localeCompare(b.toString());\r\n        return a.valueOf() - b.valueOf();\r\n    };\r\n\r\n    function DefaultPredicate() {\r\n        return true;\r\n    };\r\n\r\n    function DefaultSelector(t) {\r\n        return t;\r\n    };\r\n\r\n\r\n    Array.prototype.select = Array.prototype.map || function(selector, context) {\r\n        context = context || this;\r\n        var arr = [];\r\n        var l = this.length;\r\n        for (var i = 0; i < l; i++)\r\n            arr.push(selector.call(context, this[i], i, this));\r\n        return arr;\r\n    };\r\n\r\n    Array.prototype.take = function(c) {\r\n        return this.slice(0, c);\r\n    };\r\n\r\n    Array.prototype.skip = function(c) {\r\n        return this.slice(c);\r\n    };\r\n\r\n    Array.prototype.first = function(predicate, def) {\r\n        var l = this.length;\r\n        if (!predicate) return l ? this[0] : def == null ? null : def;\r\n        for (var i = 0; i < l; i++)\r\n            if (predicate(this[i], i, this))\r\n                return this[i];\r\n        return def == null ? null : def;\r\n    };\r\n\r\n    Array.prototype.last = function(predicate, def) {\r\n        var l = this.length;\r\n        if (!predicate) return l ? this[l - 1] : def == null ? null : def;\r\n        while (l-- > 0)\r\n            if (predicate(this[l], l, this))\r\n                return this[l];\r\n        return def == null ? null : def;\r\n    };\r\n\r\n    Array.prototype.union = function(arr) {\r\n        return this.concat(arr).distinct();\r\n    };\r\n\r\n    Array.prototype.where = Array.prototype.filter || function(predicate, context) {\r\n        context = context || window;\r\n        var arr = [];\r\n        var l = this.length;\r\n        for (var i = 0; i < l; i++)\r\n            if (predicate.call(context, this[i], i, this) === true) arr.push(this[i]);\r\n        return arr;\r\n    };\r\n\r\n    Array.prototype.contains = function(o, comparer) {\r\n        comparer = comparer || DefaultEqualityComparer;\r\n        var l = this.length;\r\n        while (l-- > 0)\r\n            if (comparer(this[l], o) === true) return true;\r\n        return false;\r\n    };\r\n\r\n    Array.prototype.distinct = function(comparer) {\r\n        var arr = [];\r\n        var l = this.length;\r\n        for (var i = 0; i < l; i++) {\r\n            if (!arr.contains(this[i], comparer))\r\n                arr.push(this[i]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    Array.prototype.intersect = function(arr, comparer) {\r\n        comparer = comparer || DefaultEqualityComparer;\r\n        return this.distinct(comparer).where(function(t) {\r\n            return arr.contains(t, comparer);\r\n        });\r\n    };\r\n\r\n    Array.prototype.except = function(arr, comparer) {\r\n        if (!(arr instanceof Array)) arr = [arr];\r\n        comparer = comparer || DefaultEqualityComparer;\r\n        var l = this.length;\r\n        var res = [];\r\n        for (var i = 0; i < l; i++) {\r\n            var k = arr.length;\r\n            var t = false;\r\n            while (k-- > 0) {\r\n                if (comparer(this[i], arr[k]) === true) {\r\n                    t = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!t) res.push(this[i]);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    Array.prototype.indexOf = Array.prototype.indexOf || function(o, index) {\r\n        var l = this.length;\r\n        for (var i = Math.max(Math.min(index, l), 0) || 0; i < l; i++)\r\n            if (this[i] === o) return i;\r\n        return -1;\r\n    };\r\n\r\n\r\n    Array.prototype.remove = function(item) {\r\n        var i = this.indexOf(item);\r\n        if (i != -1)\r\n            this.splice(i, 1);\r\n    };\r\n\r\n    Array.prototype.removeAll = function(predicate) {\r\n        var item;\r\n        var i = 0;\r\n        while (item = this.first(predicate)) {\r\n            i++;\r\n            this.remove(item);\r\n        }\r\n        return i;\r\n    };\r\n\r\n    Array.prototype.orderBy = function(selector, comparer) {\r\n        comparer = comparer || DefaultSortComparer;\r\n        var arr = this.slice(0);\r\n        var fn = function(a, b) {\r\n            return comparer(selector(a), selector(b));\r\n        };\r\n\r\n        arr.thenBy = function(selector, comparer) {\r\n            comparer = comparer || DefaultSortComparer;\r\n            return arr.orderBy(DefaultSelector, function(a, b) {\r\n                var res = fn(a, b);\r\n                return res === 0 ? comparer(selector(a), selector(b)) : res;\r\n            });\r\n        };\r\n\r\n        arr.thenByDescending = function(selector, comparer) {\r\n            comparer = comparer || DefaultSortComparer;\r\n            return arr.orderBy(DefaultSelector, function(a, b) {\r\n                var res = fn(a, b);\r\n                return res === 0 ? -comparer(selector(a), selector(b)) : res;\r\n            });\r\n        };\r\n\r\n        return arr.sort(fn);\r\n    };\r\n\r\n\r\n    Array.prototype.orderByDescending = function(selector, comparer) {\r\n        comparer = comparer || DefaultSortComparer;\r\n        return this.orderBy(selector, function(a, b) {\r\n            return -comparer(a, b)\r\n        });\r\n    };\r\n\r\n\r\n    Array.prototype.innerJoin = function(arr, outer, inner, result, comparer) {\r\n        comparer = comparer || DefaultEqualityComparer;\r\n        var res = [];\r\n\r\n        this.forEach(function(t) {\r\n            arr.where(function(u) {\r\n                    return comparer(outer(t), inner(u));\r\n                })\r\n                .forEach(function(u) {\r\n                    res.push(result(t, u));\r\n                });\r\n        });\r\n\r\n        return res;\r\n    };\r\n\r\n\r\n\r\n    Array.prototype.groupBy = function(selector, comparer) {\r\n        var grp = [];\r\n        var l = this.length;\r\n        comparer = comparer || DefaultEqualityComparer;\r\n        selector = selector || DefaultSelector;\r\n\r\n        for (var i = 0; i < l; i++) {\r\n            var k = selector(this[i]);\r\n            var g = grp.first(function(u) {\r\n                return comparer(u.key, k);\r\n            });\r\n\r\n            if (!g) {\r\n                g = [];\r\n                g.key = k;\r\n                grp.push(g);\r\n            }\r\n\r\n            g.push(this[i]);\r\n        }\r\n        return grp;\r\n    };\r\n\r\n    Array.prototype.toDictionary = function(keySelector, valueSelector) {\r\n        var o = {};\r\n        var l = this.length;\r\n        while (l-- > 0) {\r\n            var key = keySelector(this[l]);\r\n            if (key == null || key == \"\") continue;\r\n            o[key] = valueSelector(this[l]);\r\n        }\r\n        return o;\r\n    };\r\n\r\n    Array.prototype.min = function(s) {\r\n        s = s || DefaultSelector;\r\n        var l = this.length;\r\n        var min = s(this[0]);\r\n        while (l-- > 0)\r\n            if (s(this[l]) < min) min = s(this[l]);\r\n        return min;\r\n    };\r\n\r\n    Array.prototype.max = function(s) {\r\n        s = s || DefaultSelector;\r\n        var l = this.length;\r\n        var max = s(this[0]);\r\n        while (l-- > 0)\r\n            if (s(this[l]) > max) max = s(this[l]);\r\n        return max;\r\n    };\r\n\r\n    Array.prototype.sum = function(s) {\r\n        s = s || DefaultSelector;\r\n        var l = this.length;\r\n        var sum = 0;\r\n        while (l-- > 0) sum += s(this[l]);\r\n        return sum;\r\n    };\r\n\r\n\r\n    Array.prototype.any = function(predicate, context) {\r\n        ;\r\n        var f = this.some || function(p, c) {\r\n            var l = this.length;\r\n            if (!p) return l > 0;\r\n            while (l-- > 0)\r\n                if (p.call(c, this[l], l, this) === true) return true;\r\n            return false;\r\n        };\r\n        return f.apply(this, [predicate, context]);\r\n    };\r\n\r\n    Array.prototype.all = function(predicate, context) {\r\n        context = context || window;\r\n        predicate = predicate || DefaultPredicate;\r\n        var f = this.every || function(p, c) {\r\n            return this.length == this.where(p, c).length;\r\n        };\r\n        return f.apply(this, [predicate, context]);\r\n    };\r\n\r\n\r\n    Array.prototype.takeWhile = function(predicate) {\r\n        predicate = predicate || DefaultPredicate;\r\n        var l = this.length;\r\n        var arr = [];\r\n        for (var i = 0; i < l && predicate(this[i], i) === true; i++)\r\n            arr.push(this[i]);\r\n\r\n        return arr;\r\n    };\r\n\r\n    Array.prototype.skipWhile = function(predicate) {\r\n        predicate = predicate || DefaultPredicate;\r\n        var l = this.length;\r\n        var i = 0;\r\n        for (i = 0; i < l; i++)\r\n            if (predicate(this[i], i) === false) break;\r\n\r\n        return this.skip(i);\r\n    };\r\n\r\n    Array.prototype.defaultIfEmpty = function(val) {\r\n        return this.length == 0 ? [val == null ? null : val] : this;\r\n    };\r\n\r\n})();",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Array prototypes",
        "scriptFiles": [
          "ArrayPrototypes.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Array%20prototypes",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Array%20prototypes/ArrayPrototypes.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.513Z",
    "updatedAt": "2025-09-21T08:58:58.174Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 197,
    "type": "script_include",
    "name": "Approval Rule Builder",
    "description": "Approval Rule Builder for Flow Designer This script was originally posted on the Share site but thought it useful to post here as well. Overview",
    "script": "var ApprovalRuleBuilder = Class.create();\r\n\r\n// Valid Rulesets\r\nApprovalRuleBuilder.RULESET_APPROVES = \"Approves\";\r\nApprovalRuleBuilder.RULESET_REJECTS = \"Rejects\";\r\nApprovalRuleBuilder.RULESET_APPROVEREJECTS = \"ApproveReject\";\r\n\r\n// Valid Rules\r\nApprovalRuleBuilder.RULE_ANY = \"Any\";  // Anyone approves\r\nApprovalRuleBuilder.RULE_ALL = \"All\";  // All users approve\r\nApprovalRuleBuilder.RULE_RESPONDED = \"Res\";  // All responded and anyone approves\r\nApprovalRuleBuilder.RULE_PERCENT = \"%\";  // % of users approve\r\nApprovalRuleBuilder.RULE_NUMBER = \"#\";  // number of users approve\r\n\r\nApprovalRuleBuilder.prototype = {\r\n\r\n    /**\r\n     * Main ApprovalRuleBuilder class\r\n     * @example\r\n     * var query = new ApprovalRuleBuilder();\r\n     * @constructor\r\n     * @param {boolean} (optional) Enable debug output\r\n     */\r\n    initialize: function (debug) {\r\n        this._debug = debug | false;\r\n        this._approval_rules = '';\r\n\r\n        // keep track of required steps\r\n        this._ruleset_added = false;  // additional rulesets can be added once the current ruleset is complete (has rules and users/groups)\r\n        this._rule_added = false;  // rule can only be added to an open ruleset, Or/And rules can be added once users/groups have been set for current rule\r\n        this._users_added = false;  // users/groups can only be added to an open rule but not if manual users has been set\r\n        this._manual_users = false;  // manual users cannot be added to a rule if users/groups already applied\r\n\r\n        this._users = [];  // temporary store for users, allows multiple .addUsers calls\r\n        this._groups = [];  // temporary store for groups, allows multiple .addGroups calls\r\n    },\r\n\r\n    /**\r\n     * Starts a new ruleset\r\n     * @example\r\n     * var rules = new ApprovalRuleBuilder()\r\n     *                 .addRuleSet(ApprovalRuleBuilder.RULESET_APPROVES)\r\n     * @param {string} ruleset to create (APPROVES|REJECTS|APPROVEREJECTS)\r\n     * @returns {ApprovalRuleBuilder} New ApprovalRuleBuilder containing approval rules\r\n     */\r\n    addRuleSet: function (ruleset) {\r\n\r\n        if (!this._isValidRuleSet(ruleset)) {\r\n            NiceError.raise('Unknown ruleset (' + ruleset + ')');\r\n        }\r\n\r\n        if (this._approval_rules != '' && !this._users_added) {\r\n            NiceError.raise('Cannot add ruleset (' + ruleset + ') as previous set not complete');\r\n        }\r\n\r\n        this._commitUsersAndGroups();\r\n\r\n        if (this._approval_rules != '') {\r\n            if (this._debug) gs.info('- [RuleSet] Or' + ruleset);\r\n            this._approval_rules += \"Or\";\r\n        } else {\r\n            if (this._debug) gs.info('- [RuleSet] ' + ruleset);\r\n        }\r\n\r\n        this._approval_rules += ruleset;\r\n\r\n        this._ruleset_added = true;\r\n        this._rule_added = false;\r\n        this._users_added = false;\r\n        this._manual_users = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Starts a new rule\r\n     * @example\r\n     * var rules = new ApprovalRuleBuilder()\r\n     *                 .addRuleSet(ApprovalRuleBuilder.RULESET_APPROVES)\r\n     *                 .addRule(ApprovalRuleBuilder.RULE_ANY)\r\n     * @param {string} rule to create (ANY|ALL|RES|%|#)\r\n     * @param {integer} number to use for percentage and number of users rule (optional)\r\n     * @returns {ApprovalRuleBuilder} New ApprovalRuleBuilder containing approval rules\r\n     */\r\n    addRule: function (rule, value) {\r\n        value = value | 0;\r\n\r\n        if (!this._isValidRule(rule)) {\r\n            NiceError.raise('Unknown rule (' + rule + ')');\r\n        }\r\n\r\n        if (!this._ruleset_added) {\r\n            NiceError.raise('Cannot add rule (' + rule + ') as no ruleset defined.');\r\n        }\r\n\r\n        if (this._rule_added) {\r\n            NiceError.raise('Cannot add rule (' + rule + '), use addAndRule or addOrRule instead');\r\n        }\r\n\r\n        if (rule == ApprovalRuleBuilder.RULE_PERCENT || rule == ApprovalRuleBuilder.RULE_NUMBER) {\r\n            if (value > 0) {\r\n                this._approval_rules += value;\r\n            } else {\r\n                NiceError.raise(\"Cannot add rule (' + rule + ') as no value specified\");\r\n            }\r\n        }\r\n\r\n        if (this._debug) gs.info('-- [Rule] ' + (value > 0 ? value : '') + rule);\r\n\r\n        this._approval_rules += rule;\r\n\r\n        this._rule_added = true;\r\n        this._users_added = false;\r\n        this._manual_users = false;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds users to a rule\r\n     * @example\r\n     * var rules = new ApprovalRuleBuilder()\r\n     *                 .addRuleSet(ApprovalRuleBuilder.RULESET_APPROVES)\r\n     *                 .addRule(ApprovalRuleBuilder.RULE_ANY)\r\n     *                 .addUsers(['a8f98bb0eb32010045e1a5115206fe3a','a2826bf03710200044e0bfc8bcbe5ded'])\r\n     * @param {array} sys_id's of users to add\r\n     * @returns {ApprovalRuleBuilder} New ApprovalRuleBuilder containing approval rules\r\n     */\r\n    addUsers: function (user_sys_id_list) {\r\n        if (this._rule_added) {\r\n            if (!this._manual_users) {\r\n                if (this._debug) gs.info('--- [Users] (temporary) ' + user_sys_id_list.join(','));\r\n                var au = new ArrayUtil();\r\n                this._users = au.union(this._users, user_sys_id_list);\r\n                this._users_added = this._users_added || this._users.length > 0;\r\n            } else {\r\n                NiceError.raise('Cannot add groups as manual users have already been added.');\r\n            }\r\n        } else {\r\n            NiceError.raise('Cannot add users as no rule in progress');\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds groups to a rule\r\n     * @example\r\n     * var rules = new ApprovalRuleBuilder()\r\n     *                 .addRuleSet(ApprovalRuleBuilder.RULESET_APPROVES)\r\n     *                 .addRule(ApprovalRuleBuilder.RULE_ANY)\r\n     *                 .addGroups(['a8f98bb0eb32010045e1a5115206fe3a','a2826bf03710200044e0bfc8bcbe5ded'])\r\n     * @param {array} sys_id's of groups to add\r\n     * @returns {ApprovalRuleBuilder} New ApprovalRuleBuilder containing approval rules\r\n     */\r\n    addGroups: function (group_sys_id_list) {\r\n        if (this._rule_added) {\r\n            if (!this._manual_users) {\r\n                if (this._debug) gs.info('--- [Groups] (temporary)' + group_sys_id_list.join(','));\r\n                var au = new ArrayUtil();\r\n                this._groups = au.union(this._groups, group_sys_id_list);\r\n                this._users_added = this._users_added || this._groups.length > 0;\r\n\r\n            } else {\r\n                NiceError.raise('Cannot add groups as manual users have already been added.');\r\n            }\r\n        } else {\r\n            NiceError.raise('Cannot add groups as no rule in progress');\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds manual users to a rule\r\n     * @example\r\n     * var rules = new ApprovalRuleBuilder()\r\n     *                 .addRuleSet(ApprovalRuleBuilder.RULESET_APPROVES)\r\n     *                 .addRule(ApprovalRuleBuilder.RULE_ANY)\r\n     *                 .addManualUsers()\r\n     * @returns {ApprovalRuleBuilder} New ApprovalRuleBuilder containing approval rules\r\n     */\r\n    addManualUsers: function () {\r\n        if (this._rule_added) {\r\n            if (this._debug) gs.info('--- [Manual Users]');\r\n            if (!this._users_added) {\r\n                this._approval_rules += 'M';\r\n                this._users_added = true;\r\n                this._manual_users = true;\r\n            } else {\r\n                NiceError.raise('Cannot add manual users as users/groups have already been added.');\r\n            }\r\n        } else {\r\n            NiceError.raise('Cannot add manual users as no rule in progress');\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds an Or rule to a ruleset\r\n     * @example\r\n     * var rules = new ApprovalRuleBuilder()\r\n     *                 .addRuleSet(ApprovalRuleBuilder.RULESET_APPROVES)\r\n     *                 .addRule(ApprovalRuleBuilder.RULE_ANY)\r\n     *                 .addGroups(['a8f98bb0eb32010045e1a5115206fe3a','a2826bf03710200044e0bfc8bcbe5ded'])\r\n     *                 .addOrRule(ApprovalRuleBuilder.RULE_RESPONDED)\r\n     *                 .addGroups(['a8f98bb0eb32010045e1a5115206fe3a','a2826bf03710200044e0bfc8bcbe5ded'])\r\n     * @param {string} rule to create (ANY|ALL|RES|%|#)\r\n     * @param {integer} number to use for percentage and number of users rule (optional)\r\n     * @returns {ApprovalRuleBuilder} New ApprovalRuleBuilder containing approval rules\r\n     */\r\n    addOrRule: function (rule, value) {\r\n        if (this._rule_added && this._users_added) {\r\n            this._commitUsersAndGroups();\r\n            this._rule_added = false;\r\n            this._approval_rules += '|';\r\n            if (this._debug) gs.info('-- [Or]');\r\n            return this.addRule(rule, value);\r\n        } else {\r\n            NiceError.raise('Cannot add Or rule as previous rule not complete');\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds an And rule to a ruleset\r\n     * @example\r\n     * var rules = new ApprovalRuleBuilder()\r\n     *                 .addRuleSet(ApprovalRuleBuilder.RULESET_APPROVES)\r\n     *                 .addRule(ApprovalRuleBuilder.RULE_ANY)\r\n     *                 .addGroups(['a8f98bb0eb32010045e1a5115206fe3a','a2826bf03710200044e0bfc8bcbe5ded'])\r\n     *                 .addAndRule(ApprovalRuleBuilder.RULE_RESPONDED)\r\n     *                 .addGroups(['a8f98bb0eb32010045e1a5115206fe3a','a2826bf03710200044e0bfc8bcbe5ded'])\r\n     * @param {string} rule to create (ANY|ALL|RES|%|#)\r\n     * @param {integer} number to use for percentage and number of users rule (optional)\r\n     * @returns {ApprovalRuleBuilder} New ApprovalRuleBuilder containing approval rules\r\n     */\r\n    addAndRule: function (rule, value) {\r\n        if (this._rule_added && this._users_added) {\r\n            this._commitUsersAndGroups();\r\n            this._rule_added = false;\r\n            this._approval_rules += '&';\r\n            if (this._debug) gs.info('-- [And]');\r\n            return this.addRule(rule, value);\r\n        } else {\r\n            NiceError.raise('Cannot add And rule as previous rule not complete');\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the built approval rule\r\n     * @example\r\n     * ApprovesAllU[a8f98bb0eb32010045e1a5115206fe3a,a2826bf03710200044e0bfc8bcbe5ded]G[b85d44954a3623120004689b2d5dd60a,287ee6fea9fe198100ada7950d0b1b73] \r\n     *     |10%G[db53580b0a0a0a6501aa37c294a2ba6b,74ad1ff3c611227d01d25feac2af603f]\r\n     * @returns {string} encoded rule string for use in Flow Designer\r\n     */\r\n    getApprovalRules: function () {\r\n        this._commitUsersAndGroups();\r\n        return this._approval_rules;\r\n    },\r\n\r\n    /*\r\n     * Internal methods\r\n     */\r\n\r\n    _isValidRuleSet: function (ruleset) {\r\n        return (ruleset == ApprovalRuleBuilder.RULESET_APPROVES ||\r\n            ruleset == ApprovalRuleBuilder.RULESET_REJECTS ||\r\n            ruleset == ApprovalRuleBuilder.RULESET_APPROVEREJECT);\r\n    },\r\n\r\n    _isValidRule: function (rule) {\r\n        return (rule == ApprovalRuleBuilder.RULE_ANY ||\r\n            rule == ApprovalRuleBuilder.RULE_ALL ||\r\n            rule == ApprovalRuleBuilder.RULE_RESPONDED ||\r\n            rule == ApprovalRuleBuilder.RULE_PERCENT ||\r\n            rule == ApprovalRuleBuilder.RULE_NUMBER);\r\n    },\r\n\r\n    _commitUsersAndGroups: function () {\r\n        if (this._users.length > 0) {\r\n            this._approval_rules += 'U[' + this._users.join(',') + ']';\r\n            if (this._debug) gs.info('--- [Users] ' + this._users.join(','));\r\n            this._users = [];\r\n        }\r\n\r\n        if (this._groups.length > 0) {\r\n            if (this._debug) gs.info('--- [Groups] ' + this._groups.join(','));\r\n            this._approval_rules += 'G[' + this._groups.join(',') + ']';\r\n            this._groups = [];\r\n        }\r\n    },\r\n\r\n    type: 'ApprovalRuleBuilder'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Approval Rule Builder",
        "scriptFiles": [
          "ApprovalRuleBuilder.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Approval%20Rule%20Builder",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Approval%20Rule%20Builder/ApprovalRuleBuilder.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.507Z",
    "updatedAt": "2025-09-21T08:58:58.170Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 196,
    "type": "script_include",
    "name": "API Model Template for New Application",
    "description": "Application Baseline Pattern Use this Script Include to extend into your new API model and provide a set of re-usable and extendable methods to enhance your application design Create the new Script Include in your SN instance in the relevant scope, using the matching filename",
    "script": "// File: AbstractStrategy.js\nvar AbstractStrategy = Class.create();\r\nAbstractStrategy.prototype = Object.extendsObject(AbstractStrategyBase, {\r\n    /** Baseline Application \r\n    * Please override any base functionality here \r\n    * ---\r\n    * All vendor changes will be made to the *Base classes\r\n    * This will ensure you can track changes to future upgrades\r\n    * \r\n    * Copy existing methods to this file and make changes here\r\n    * **/\r\n    type: 'AbstractStrategy'\r\n});\n\n// File: AbstractStrategyBase.js\nvar AbstractStrategyBase = Class.create();\r\nAbstractStrategyBase.prototype = Object.extendsObject(ApplicationCore, {\r\n    initialize: function (/* expected */) {},\r\n    run: function() {\r\n        /**\r\n         * do something here\r\n         */\r\n    },\r\n\r\n    type: 'AbstractStrategyBase'\r\n});\n\n// File: ApplicationCore.js\nvar ApplicationCore = Class.create();\r\nApplicationCore.prototype = Object.extendsObject(ApplicationCoreBase, {\r\n\r\n\t/** Baseline Application \r\n     * Please override any base functionality here \r\n     * ---\r\n     * All vendor changes will be made to the *Base classes\r\n     * This will ensure you can track changes to future upgrades\r\n     * \r\n     * Copy existing methods to this file and make changes here\r\n     * **/\r\n\r\n    type: 'ApplicationCore'\r\n});\n\n// File: ApplicationCoreBase.js\nvar ApplicationCoreBase = Class.create();\r\nApplicationCoreBase.prototype = {\r\n    initialize: function () { },\r\n\r\n    /**\r\n     * skeleton\r\n     */\r\n    _init: function() {},\r\n\r\n    /**\r\n     * Constants for Defaults which should be set at the Application level\r\n     */\r\n    C_DEFAULT_NOUN1: gs.getProperty('', ''), // always use a 2nd parm default on gs.getProperty to avoid null\r\n\r\n    /**\r\n     * Constants for Tables\r\n     */\r\n    C_TBL_USER: 'sys_user',\r\n    C_TBL_GROUP: 'sys_user_group',\r\n\r\n    /**\r\n     * Constants for Property names, which will be called by gs.getProperty(this.C_PROP_N1, '');\r\n     */\r\n    C_PROP_NOUN1: '',\r\n\r\n    /** EXAMPLE OF HOW _getGr() can be consumed, only pass sys_id to endpoint based on class\r\n     * get a GlideRecord of the Group based on ID\r\n     * @param {string} id sys_id of the record\r\n     * @returns GlideRecord, if it exists\r\n     */\r\n    _getGrGroup: function (id) {\r\n        return this._getGr(this.C_TBL_GROUP, id);\r\n    },\r\n\r\n    /** EXAMPLE OF HOW _getGr() can be consumed, only pass sys_id to endpoint based on class\r\n     * get a GlideRecord of the User based on ID\r\n     * @param {string} id sys_id of the record\r\n     * @returns GlideRecord, if it exists\r\n     */\r\n    _getGrUser: function (id) {\r\n        return this._getGr(this.C_TBL_USER, id);\r\n    },\r\n\r\n    /**\r\n     * get a GlideRecord of the specified table \r\n     * @param {string} strTableName name of table\r\n     * @param {string} strFieldName name of field // OPTIONAL\r\n     * @param {string} id sys_id of the record\r\n     * @returns GlideRecord of record, if it exists\r\n     */\r\n     _getGr: function(strTableName, strFieldName /* optional */ , id) {\r\n        if (!strTableName || !strFieldName) return;\r\n        id = id ? id : strFieldName;\r\n        var wrGr = new GlideRecord(strTableName);\r\n        if (wrGr.isValidField(strFieldName)) {\r\n            if (!wrGr.get(strFieldName, id)) return;\r\n        } else {\r\n            if (!wrGr.get(id)) return;\r\n        }\r\n        return wrGr;\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {GlideRecord} wrGr record to be updated\r\n     * @param {Object} objFieldValues name value pair of fieldname and value e.g {'short_description': 'record title'}\r\n     * @returns string sys_id of the record being updated, if it exists\r\n     */\r\n    _setGr: function (wrGr, objFieldValues) {\r\n        if (!wrGr || typeof wrGr != 'object' || !wrGr.isValidRecord()) return;\r\n        objFieldValues = objFieldValues || {};\r\n        if (typeof objFieldValues != 'object') return;\r\n        for (var key in objFieldValues) {\r\n            if (wrGr.getElement(key) != null)\r\n                wrGr.setValue(key, objFieldValues[key]);\r\n        }\r\n        return wrGr.update();\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {String} strTableName name of table\r\n     * @param {String} id sys_id of the record\r\n     * @param {Object} objFieldValues name value pair of fieldname and value e.g {'short_description': 'record title'}\r\n     * @returns string sys_id of the record being updated, if it exists\r\n     */\r\n     _setRecordFieldValuesFromTableNameAndId: function (strTableName, id, objFieldValues) {\r\n        var wrGr = this._getGr(strTableName, id);\r\n        if (!wrGr) return;\r\n        return this._setGr(wrGr, objFieldValues);\r\n    },\r\n\r\n    type: 'ApplicationCoreBase'\r\n};\n\n// File: Engine.js\nvar Engine = Class.create();\r\nEngine.prototype = Object.extendsObject(EngineBase, {\r\n    /** Baseline Application \r\n      * Please override any base functionality here \r\n      * ---\r\n      * All vendor changes will be made to the *Base classes\r\n      * This will ensure you can track changes to future upgrades\r\n      * \r\n      * Copy existing methods to this file and make changes here\r\n      * **/\r\n\r\n    type: 'Engine'\r\n});\n\n// File: EngineBase.js\nvar EngineBase = Class.create();\r\nEngineBase.prototype = Object.extendsObject(ApplicationCore, {\r\n    initialize: function (/* expected */) {},\r\n\r\n    process: function() {\r\n        return this._process();\r\n    },\r\n\r\n    _process: function() {\r\n        try {\r\n            var strategy = this._getStrategy(/* expected */);\r\n            if (!strategy) return;\r\n            strategy.run();\r\n        } catch (ex) {\r\n            gs.error(ex.getMessage());\r\n        }\r\n    },\r\n\r\n    _getStrategy: function(grRecord) {\r\n        grRecord = grRecord || this.grRecord || null;\r\n        if(!grRecord) return;\r\n        var strType = this._getType(grRecord) || ''; // method needs to be defined\r\n        switch (strType) {\r\n            case '1':\r\n                return new ExampleStrategy1(/* expected */);\r\n            case '2':\r\n                return new ExampleStrategy2(/* expected */);\r\n        }\r\n    },\r\n\r\n    type: 'EngineBase'\r\n});\n\n// File: ExampleObject.js\nvar ExampleObject = Class.create();\r\nExampleObject.prototype = Object.extendsObject(ExampleObjectBase, {\r\n\t/** Baseline Object\r\n     * All application calls should be made directly to this API\r\n     *  \r\n     * Please override any base functionality here \r\n     * ---\r\n     * All vendor changes will be made to the *Base classes\r\n     * This will ensure you can track changes to future upgrades\r\n     * \r\n     * Copy existing methods to this file and make changes here\r\n     * **/\r\n\r\n    type: 'ExampleObject'\r\n});\n\n// File: ExampleObjectBase.js\nvar ExampleObjectBase = Class.create();\r\nExampleObjectBase.prototype = Object.extendsObject(ApplicationCore, {\r\n    /**\r\n     * Typically the constructor function will be required on the new Object base\r\n     * if every object would be constructed in same way, move this to the core ? \r\n     * or move to the core, and let it be overridden - might be better\r\n     */\r\n    initialize: function (grRecord) {\r\n        if (!this._init(grRecord)) return; // stop dead, but only to prevent further errors. object still created. validate caller.\r\n        // some other dependent behaviour\r\n    },\r\n\r\n    /**\r\n     * use JSDOC , VSCode4life TLA IDST\r\n     * @returns <3\r\n     */\r\n    _anyFunctionYouWant: function() {\r\n        if (!this.grRecord) return; // use a guard clause on every function to ensure class is correctly constructed\r\n    },\r\n\r\n    /**\r\n     * pass off the main constructor function and abstract complexity to keep things tidy\r\n     * just some ideas about how to handle the instantiation validation complication\r\n     */\r\n    _init: function (grRecord) {\r\n        // set-up your prototype here\r\n        if (!grRecord) return;\r\n        if (typeof grRecord == 'object' && grRecord.isValidRecord()) {\r\n            this.grRecord = grRecord;\r\n        } else if (typeof grRecord == 'string' && grRecord.length == 32) {\r\n            // + assuming we knew what table:\r\n            var strTableName = '';\r\n            var id = grRecord; // it is a 32 char string\r\n            this.grRecord = this._getGr(strTableName, id);\r\n        }       \r\n        // some other dependent behaviour\r\n        // here\r\n        // turn on & validate object specific settings\r\n        // here, e.g this._setLogLevel() \r\n        return this.grRecord; // prove success\r\n    },\r\n\r\n    type: 'ExampleObjectBase'\r\n});\n\n// File: ExampleStrategy1.js\nvar ExampleStrategy1 = Class.create();\r\nExampleStrategy1.prototype = Object.extendsObject(ExampleStrategy1Base, {\r\n    /** Baseline Application \r\n    * Please override any base functionality here \r\n    * ---\r\n    * All vendor changes will be made to the *Base classes\r\n    * This will ensure you can track changes to future upgrades\r\n    * \r\n    * Copy existing methods to this file and make changes here\r\n    * **/\r\n    type: 'ExampleStrategy1'\r\n});\n\n// File: ExampleStrategy1Base.js\nvar ExampleStrategy1Base = Class.create();\r\nExampleStrategy1Base.prototype = Object.extendsObject(AbstractStrategy, {\r\n    initialize: function (/* expected */) {},\r\n    run: function() {\r\n        /**\r\n         * do something here\r\n         */\r\n    },\r\n\r\n    type: 'ExampleStrategy1Base'\r\n});\n\n// File: ExampleStrategy2.js\nvar ExampleStrategy2 = Class.create();\r\nExampleStrategy2.prototype = Object.extendsObject(ExampleStrategy2Base, {\r\n    /** Baseline Application \r\n    * Please override any base functionality here \r\n    * ---\r\n    * All vendor changes will be made to the *Base classes\r\n    * This will ensure you can track changes to future upgrades\r\n    * \r\n    * Copy existing methods to this file and make changes here\r\n    * **/\r\n    type: 'ExampleStrategy2'\r\n});\n\n// File: ExampleStrategy2Base.js\nvar ExampleStrategy2Base = Class.create();\r\nExampleStrategy2Base.prototype = Object.extendsObject(AbstractStrategy, {\r\n    initialize: function (/* expected */) {},\r\n    run: function() {\r\n        /**\r\n         * do something here\r\n         */\r\n    },\r\n\r\n    type: 'ExampleStrategy2Base'\r\n});",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/API Model Template for New Application",
        "scriptFiles": [
          "AbstractStrategy.js",
          "AbstractStrategyBase.js",
          "ApplicationCore.js",
          "ApplicationCoreBase.js",
          "Engine.js",
          "EngineBase.js",
          "ExampleObject.js",
          "ExampleObjectBase.js",
          "ExampleStrategy1.js",
          "ExampleStrategy1Base.js",
          "ExampleStrategy2.js",
          "ExampleStrategy2Base.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/API%20Model%20Template%20for%20New%20Application"
      }
    },
    "createdAt": "2025-09-20T08:42:18.503Z",
    "updatedAt": "2025-09-21T08:58:58.167Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 195,
    "type": "script_include",
    "name": "Add and Remove Group Member",
    "description": "Add and Remove Group Member I've developed a script include that facilitates the addition and removal of members from a group. Both the \"addMember\" and \"removeMember\" functions in this script include require the sysid of the group and the user as input parameters.",
    "script": "//A script include to add and remove member from a group. We need to pass the sys_id of the group and user to both addMember and removeMember function.\r\nvar GroupMember = Class.create();\r\nGroupMember.prototype = {\r\n    initialize: function() {},\r\n\r\n    addMember: function(groupSysId, userSysId) {\r\n        var groupMemberGR = new GlideRecord('sys_user_grmember');\r\n        groupMemberGR.initialize();\r\n        groupMemberGR.setValue('group', groupSysId);\r\n        groupMemberGR.setValue('user', userSysId);\r\n        groupMemberGR.insert();\r\n    },\r\n\r\n    removeMember: function(groupSysId, userSysId) {\r\n        var groupMemberGR = new GlideRecord('sys_user_grmember');\r\n        groupMemberGR.addQuery('group', groupSysId);\r\n        groupMemberGR.addQuery('user', userSysId);\r\n        groupMemberGR.query();\r\n        if (groupMemberGR.next()) {\r\n            groupMemberGR.deleteRecord();\r\n        }\r\n    },\r\n\r\n    type: 'GroupMember'\r\n};",
    "metadata": {
      "application": "Global",
      "accessibleFrom": "All application scopes",
      "clientCallable": false,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Script Includes/Add and Remove Group Member",
        "scriptFiles": [
          "groupMember.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Script%20Includes/Add%20and%20Remove%20Group%20Member",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Script%20Includes/Add%20and%20Remove%20Group%20Member/groupMember.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.498Z",
    "updatedAt": "2025-09-21T08:58:58.161Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 194,
    "type": "ui_action",
    "name": "View in Portal Page",
    "description": "code-snippet used in UI Action SCript to view the current record in Service Portal Page using a redirect Example: //to view a KB article in the Service Portal:",
    "script": "function goToPortal(){\r\n\tvar url = '<pageToRedirect>?<parameter>=<value>';\r\n\tg_navigation.openPopup(url);\r\n\treturn false;\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/View in Portal Page",
        "scriptFiles": [
          "View in Portal Page.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/View%20in%20Portal%20Page",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/View%20in%20Portal%20Page/View%20in%20Portal%20Page.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.494Z",
    "updatedAt": "2025-09-21T08:58:58.158Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 193,
    "type": "ui_action",
    "name": "UI Action to Mark Incident as Escalated",
    "description": "Description: This UI Action allows users to mark an incident as escalated, indicating that it requires immediate attention. By changing the incident's state to \"Escalated,\" the action not only helps prioritize the incident but also notifies the relevant support group to take prompt action. This functionality is essential in incident management, ensuring that critical issues are addressed withou...",
    "script": "// UI Action: Mark as Escalated\r\n// Table: incident\r\n// Condition: current.state != 7 // Not Closed\r\n// Client: false\r\n\r\n(function executeAction(current) {\r\n    current.state = 3; // Set to Escalated (assuming 3 represents Escalated state)\r\n    current.update(); // Update the record\r\n\r\n    // Optionally notify the support group\r\n    var notification = new GlideRecord('sysevent_email');\r\n    notification.initialize();\r\n    notification.recipients = 'support_group_email@example.com';\r\n    notification.subject = 'Incident ' + current.number + ' has been escalated';\r\n    notification.body = 'The incident has been marked as escalated. Please address it promptly.';\r\n    notification.insert();\r\n\r\n    gs.addInfoMessage('Incident ' + current.number + ' has been marked as escalated.');\r\n})(current);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/UI Action to Mark Incident as Escalated",
        "scriptFiles": [
          "Script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/UI%20Action%20to%20Mark%20Incident%20as%20Escalated",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/UI%20Action%20to%20Mark%20Incident%20as%20Escalated/Script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.490Z",
    "updatedAt": "2025-09-21T08:58:58.154Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 192,
    "type": "ui_action",
    "name": "Try Catalog item in Portal view",
    "description": "UI action code  which will help developers to test the same catalog item in serviceportal view  by Clicking on the action . OOB we have try it which will preview the catalog item in ITIl view but some time we may miss few configurations which needs to bes tested in service portal. While doping testng its take to test the each item in serviceportal uisng this UI action we can test in portal itself.",
    "script": "tryitinsp();\r\nfunction tryitinsp() {\r\n    var portal = \"sp\";  //the portal you want to use for testing\t\r\n\tvar page = g_form.getTableName();\r\n    var gUrl = new GlideURL(portal); \r\n    gUrl.addParam(\"id\", page); \r\n\tgUrl.addParam(\"sys_id\", g_form.getUniqueValue()); //add the sys_id of this Catalog Item to render\r\n\r\n    //and then display the Catalog Item in a new tab/window\r\n    g_navigation.open (gUrl.getURL(), \"_blank\");\r\n}",
    "metadata": {
      "application": "Global",
      "table": "sc_cat_item",
      "showInsert": true,
      "showUpdate": true,
      "client": true,
      "formLink": false,
      "onClick": "tryitinsp()",
      "condition": "current.active == true && current.canWrite()&&new CatalogItemTypeProcessor().canTryIt(current.getRecordClassName()) && !(current.getRecordClassName() == \"sc_cat_item_content\" && current.content_type == \"external\")",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Try Catalog item in Portal view",
        "scriptFiles": [
          "TryItInSP.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Try%20Catalog%20item%20in%20Portal%20view",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Try%20Catalog%20item%20in%20Portal%20view/TryItInSP.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.486Z",
    "updatedAt": "2025-09-21T08:58:58.151Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 191,
    "type": "ui_action",
    "name": "Test and Debug Scheduled Scripts",
    "description": "<h4Test and Debug Scheduled Scripts using the Script Debugger</h4 This UI Action will run the script in the current session, so that it can be run and debugged in the script debugger. <h4Steps to Add:</h4",
    "script": "try{\r\n\t\t\r\n\tvar evaluator = new GlideScopedEvaluator();  \r\n\tevaluator.evaluateScript(current, 'script');\r\n\taction.setRedirectURL(current);\r\n\t\r\n}\t\r\ncatch(e){\r\n\tgs.addInfoMessage(e);\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Scheduled",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Test and Debug Scheduled Scripts",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Test%20and%20Debug%20Scheduled%20Scripts",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Test%20and%20Debug%20Scheduled%20Scripts/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.482Z",
    "updatedAt": "2025-09-21T08:58:58.148Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 190,
    "type": "ui_action",
    "name": "Show Today Emails Logs",
    "description": "Show Today Emails Logs The UI Action simplifies the debugging of ServiceNow notifications by redirecting you from the notification definition to the email log list view with the predefined filter. Setting:",
    "script": "function openEmailLogList() {\r\n\tvar query = '';\r\n\tquery += 'sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()';\r\n\tquery += '^notification=' + g_form.getUniqueValue();\r\n\tquery += '^ORDERBYDESCsys_created_on';\r\n\t\r\n\tvar url = new GlideURL('sys_email_log_list.do');\r\n\turl.addParam('sysparm_query' , query);\r\n\tg_navigation.open(url.getURL(), '_blank');\r\n}",
    "metadata": {
      "application": "Global",
      "table": "sysevent_email_action",
      "showInsert": false,
      "showUpdate": true,
      "client": true,
      "formLink": true,
      "onClick": "openEmailLogList()",
      "condition": "new GlideRecord('sys_email_log').canRead()",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Show Today Emails Logs",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Show%20Today%20Emails%20Logs",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Show%20Today%20Emails%20Logs/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.478Z",
    "updatedAt": "2025-09-21T08:58:58.144Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 189,
    "type": "ui_action",
    "name": "Set Incident Priority Critical",
    "description": "Set Incident Priority Critical This UI Action sets current incident record as priority as Critical. When clicked",
    "script": "// Call this function from OnClick field of UI Action form\r\nfunction ClientSideScript() {\r\n    var answer = confirm(\"Are you sure you want to set priority as Critical?\");\r\n    if (answer == true) {\r\n        g_form.setValue('assigned_to', g_user.userID);\r\n        g_form.setValue('impact', 1);\r\n        g_form.setValue('urgency', 1);\r\n        g_form.setValue('description', g_form.getValue('description') + \"\\nPriority is set to Critical by \" + g_user.getFullName());\r\n    }",
    "metadata": {
      "application": "Global",
      "table": "records.",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Set Incident Priority Critical",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Set%20Incident%20Priority%20Critical",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Set%20Incident%20Priority%20Critical/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.474Z",
    "updatedAt": "2025-09-21T08:58:58.141Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 188,
    "type": "ui_action",
    "name": "Send notification to the assigned user",
    "description": "Please note - Users should endeavor to use Flow, Notifications, etc., but UI Action option is also available. ------------------------------------------------------------------------------------------------------------------------------------------- A UI Action in ServiceNow is a script that defines an action or button within the platform's user interface. It enables users to perform specific o...",
    "script": "//Servver Side Script to send notification to the assigned to user\r\nvar assignedToEmail = current.getValue('assigned_to'); // Fetches the sys_id of the assigned_to field\r\nif (assignedToEmail) {\r\n    var userGR = new GlideRecord('sys_user'); // Access the sys_user table\r\n    var txt_email = \"\";\r\n    if (userGR.get(assignedToEmail)) {\r\n        txt_email = userGR.getValue('email'); // Retrieves the email field from the sys_user record\r\n    }\r\n    if (txt_email) {\r\n        var gr_sys_email = new GlideRecord('sys_email');\r\n        gr_sys_email.initialize();\r\n        gr_sys_email.setValue('type', 'send-ready');\r\n        gr_sys_email.setValue('subject', 'UI Action Notification from Incident ' + current.number);\r\n        gr_sys_email.setValue('recipients', txt_email);\r\n        gr_sys_email.setValue('body', 'As the incident ' + current.number + ' is assigned to you, this UI Action Notification has been sent. Please review the incident.');\r\n        gr_sys_email.insert();\r\n    }\r\n\telse\r\n\t{\r\n\t\t\tgs.addInfoMessage(\"The email address for the user \" + userGR.getValue('name') + \" is missing. As a result, the email could not be sent.\");\r\n\t}\r\n}\r\nelse\r\n{\r\n\tgs.addInfoMessage(\"The incident \" + current.number + \" has not been assigned to any user. Therefore, the email could not be sent.\");\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Send notification to the assigned user",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Send%20notification%20to%20the%20assigned%20user",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Send%20notification%20to%20the%20assigned%20user/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.470Z",
    "updatedAt": "2025-09-21T08:58:58.137Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 187,
    "type": "ui_action",
    "name": "Send notification if the incident remains unassigned",
    "description": "This is a UI Action script that adds a button to the Incident form. When clicked, it will check if the incident has been unassigned for more than 5 days. If this condition is met, the button will trigger a notification to the manager of the incident's assignment group, informing them that the incident is still unassigned. Below are the conditions when UI action will be created:",
    "script": "// Check if the incident has been unassigned for more than 5 days\r\nvar unassignedDuration = gs.daysAgo(current.sys_created_on);\r\nif (unassignedDuration < 5) {\r\n    gs.addErrorMessage(\"The incident has been unassigned for less than 5 days.\");\r\n    action.setRedirectURL(current);\r\n    return;\r\n}\r\n\r\n// Check if the incident has an assignment group\r\nif (current.assignment_group.nil()) {\r\n    gs.addErrorMessage(\"No assignment group is set for this incident.\");\r\n    action.setRedirectURL(current);\r\n    return;\r\n}\r\n\r\n// Get the assignment group's manager\r\nvar assignmentGroup = new GlideRecord('sys_user_group');\r\nif (assignmentGroup.get(current.assignment_group)) {\r\n    var manager = assignmentGroup.getValue('manager');\r\n\r\n    if (manager) {\r\n        // Create a notification\r\n        var notification = new GlideEmailOutbound();\r\n        notification.setFrom('no-reply@xyz.com');\r\n        notification.setSubject(\"Alert! Incident \" + current.number + \" is still unassigned\");\r\n        notification.setBody(\"The incident \" + current.number + \" has been unassigned for more than 5 days. Please assign it promptly.\");\r\n        notification.setTo(manager);\r\n\r\n        // Send the email\r\n        notification.send();\r\n\r\n        gs.addInfoMessage(\"Notification sent to the assignment group's manager.\");\r\n    } else {\r\n        gs.addErrorMessage(\"The assignment group has no manager defined.\");\r\n    }\r\n} else {\r\n    gs.addErrorMessage(\"Could not find the assignment group.\");\r\n}\r\n\r\naction.setRedirectURL(current);",
    "metadata": {
      "application": "Global",
      "table": "Incident",
      "showInsert": false,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "current.assigned_to.nil() && current.assignment_group",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Send notification if the incident remains unassigned",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Send%20notification%20if%20the%20incident%20remains%20unassigned",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Send%20notification%20if%20the%20incident%20remains%20unassigned/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.466Z",
    "updatedAt": "2025-09-21T08:58:58.134Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 186,
    "type": "ui_action",
    "name": "Select Random User From Group",
    "description": "Random User Assignment This function allows you to select a random user from a specified group. Use case could be on all task-like records that need to be worked on by someone and you want to select the person randomly.",
    "script": "/**\r\n * Get a random user from a specific user group\r\n *\r\n * @param {string} group - The sys_id of the group to select a user from\r\n * @returns {string|null} - The sys_id of a randomly selected user from the specified group or null if no user is found\r\n */\r\n\r\nfunction getRandomUserFromGroup(group) {\r\n\r\n    var users = [];\r\n\r\n    var grMember = new GlideRecord(\"sys_user_grmember\");\r\n    grMember.addNotNullQuery(\"user\");\r\n    grMember.addQuery(\"group\", group);\r\n    grMember.query();\r\n\r\n    while (grMember.next()) {\r\n        users.push(grMember.getValue(\"user\"));\r\n    }\r\n\r\n    if (users.length > 0) {\r\n        // Select a random user from the \"users\" array\r\n        return users[Math.floor(Math.random() * users.length)];\r\n    } else {\r\n        // Return null if no user is found in the specified group\r\n        return null;\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Select Random User From Group",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Select%20Random%20User%20From%20Group",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Select%20Random%20User%20From%20Group/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.462Z",
    "updatedAt": "2025-09-21T08:58:58.131Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 185,
    "type": "ui_action",
    "name": "Preview context record during approval",
    "description": "While approving any request it was very hard until now to preview the record for which the approval was required. This UI action created on sysapprovalapprover table will enable previewing the record before approval so that the approver can make an easy informed decision.",
    "script": "// File: TestScriptInclude.js\nvar TestScriptInclude = Class.create();\r\nTestScriptInclude.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n\tgetDocumentClass: function(){\r\n\t\tvar sysId = this.getParameter(\"sysparm_sys_id\");\r\n\t\tvar gr = new GlideRecord(\"sysapproval_approver\");\r\n\t\tif(gr.get(sysId)){\r\n\t\t\treturn JSON.stringify({\r\n\t\t\t\t\"table\": gr.source_table.toString(),\r\n\t\t\t\t\"document\": gr.document_id.toString(),\r\n\t\t\t\t\"title\": gr.document_id.getDisplayValue()\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\r\n    type: 'TestScriptInclude'\r\n});\n\n// File: UI_Action.js\n/*\r\nThis script should be placed in the UI action on the table sysapproval_approver.\r\nThis UI action should be marked as client callable script include.\r\nUse openContextRecord() function in the Onclick field.\r\n*/\r\n\r\nfunction openContextRecord() {\r\n    var rec = g_form.getDisplayValue(\"document_id\");\r\n    var gaSi = new GlideAjax(\"TestScriptInclude\");\r\n    gaSi.addParam(\"sysparm_name\", \"getDocumentClass\");\r\n    gaSi.addParam(\"sysparm_sys_id\", g_form.getUniqueValue());\r\n    gaSi.getXMLAnswer(function(response) {\r\n        var answer = JSON.parse(response);\r\n        var gp = new GlideModalForm(answer.title, answer.table, function(){});\r\n        gp.addParm('sys_id', answer.document);\r\n        gp.render();\r\n    });\r\n}",
    "metadata": {
      "application": "Global",
      "table": "will",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Preview context record during approval",
        "scriptFiles": [
          "TestScriptInclude.js",
          "UI_Action.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Preview%20context%20record%20during%20approval"
      }
    },
    "createdAt": "2025-09-20T08:42:18.458Z",
    "updatedAt": "2025-09-21T08:58:58.127Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 184,
    "type": "ui_action",
    "name": "Open Record producer from Form Button In Configurable workspace",
    "description": "When we want to open a catalog item with details from current record and map it to the opened catalog form then we can use this code. This UI Action and catalog client script Redirects you to the record producer or catalog item( based on the sys id provided) and auto-populates the fields from the parent record to the catalog item/record producer variables. 1. UI Action",
    "script": "// File: OpenItem.js\n/* \r\nUI Action\r\n   Client - true\r\n   action name - open_item\r\n   show update - true ( As per your requirement)\r\n   onClick - openItem();\r\n   Workspace Form button - true\r\n   Format for Configurable Workspace - true \r\n*/\r\n\r\n//Workspace client script: \r\nfunction onClick() {\r\n    var result = g_form.submit('open_item');\r\n    if (!result) {\r\n        return;\r\n    }\r\n    result.then(function() {\r\n        var params = {};\r\n        params.sysparm_parent_sys_id = g_form.getUniqueValue();\r\n        params.sysparm_shortDescription = g_form.getValue('short_description');\r\n        //add params as required, These params can be parsed and used in the record producer.\r\n        g_service_catalog.openCatalogItem('sc_cat_item', 'recordproducer_sysid_here', params); \r\n        //Use the record producer sys_id in second parameter.\r\n    });\r\n}\n\n// File: ParseUrl.js\n/*\r\nCatalog Client script on the record producer/catalog item you want to open from ui action\r\n   Name - ParseURL\r\n   Type - Onload\r\n   Applies on catalog item view - true\r\n*/\r\n\r\nfunction onLoad() {\r\n\r\n  \r\n\tg_form.setValue('task',parseURL('sysparm_parent_sys_id'));\r\n\tg_form.setValue('description',parseURL('sysparm_description));\r\n\t\r\n\tfunction parseURL(paramName) {\r\n\t\t\r\n\t\tvar url = decodeURIComponent(top.location.href); //Get the URL and decode it\r\n\t\tvar workspaceParams = url.split('extra-params/')[1]; //Split off the url on Extra params\r\n\t\tvar allParams = workspaceParams.split('/'); //The params are split on slashes '/'\r\n\t\t\r\n\t\t//Search for the parameter requested\r\n\t\tfor (var i=0; i< allParams.length; i++) {\r\n\t\t\tif(allParams[i] == paramName) {\r\n\t\t\t\treturn allParams[i+1];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n/*\r\npass the parameter name which was used in the ui action to parse the value here.\r\nExample - parseURL('sysparm_description) as I am passing description value in the params from ui action.\r\n*/",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Open Record producer from Form Button In Configurable workspace",
        "scriptFiles": [
          "OpenItem.js",
          "ParseUrl.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Open%20Record%20producer%20from%20Form%20Button%20In%20Configurable%20workspace"
      }
    },
    "createdAt": "2025-09-20T08:42:18.454Z",
    "updatedAt": "2025-09-21T08:58:58.123Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 183,
    "type": "ui_action",
    "name": "Open LIST UI Action",
    "description": "This UI Action opens the LIST view for the current table in another tab. UI action will run on Onclick openinLIST()",
    "script": "function openinLIST() {\r\n    var taskTable = g_form.getTableName();\r\n\r\n    // Construct the hardcoded LIST URL\r\n    var listURL = '/' + taskTable + '_list.do?sysparm_clear_stack=true';\r\n\r\n    // Open in new window\r\n    var w = getTopWindow();\r\n    w.window.open(listURL, '_blank');\r\n}",
    "metadata": {
      "application": "Global",
      "table": "in",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Open LIST UI Action",
        "scriptFiles": [
          "UIActionscript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Open%20LIST%20UI%20Action",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Open%20LIST%20UI%20Action/UIActionscript.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.450Z",
    "updatedAt": "2025-09-21T08:58:58.120Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 182,
    "type": "ui_action",
    "name": "Open in Service Operations Workspace",
    "description": "Open in Service Operation Workspace Create UI Action with: Table: Task",
    "script": "function openInServiceOperationWorkspace() {\r\n    var taskSysID = g_form.getUniqueValue();\r\n    var taskTable = g_form.getTableName();\r\n    \r\n    // Construct the hardcoded Service Operation Workspace URL\r\n    var workspaceURL = '/now/sow/record/' + taskTable + '/' + taskSysID;\r\n    \r\n    // Open in new window\r\n    var w = getTopWindow();\r\n    w.window.open(workspaceURL, '_blank');\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Task",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "onClick": "`openInServiceOperationWorkspace()`",
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Open in Service Operations Workspace",
        "scriptFiles": [
          "ui_action_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Open%20in%20Service%20Operations%20Workspace",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Open%20in%20Service%20Operations%20Workspace/ui_action_script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.446Z",
    "updatedAt": "2025-09-21T08:58:58.116Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 181,
    "type": "ui_action",
    "name": "Open Email Client using UI Action",
    "description": "When an agent needs a button on the form to open Email Client in a single click, This UI action can be used, which works similar to the out of box Email button. Some user may not prefer the out of box button because it is two clicks. To use this UI action, mark the UI action as Client and add the openEmailClient function in the onClick Field in the UI action. Then use the script provided in the...",
    "script": "// This is a Client UI action. In the onClick field, call the function openEmailClient() and use below script in the script section.\r\nfunction openEmailClient(){\r\n  emailClientOpenPop('<table_name>');\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Open Email Client using UI Action",
        "scriptFiles": [
          "open_email_client.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Open%20Email%20Client%20using%20UI%20Action",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Open%20Email%20Client%20using%20UI%20Action/open_email_client.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.442Z",
    "updatedAt": "2025-09-21T08:58:58.113Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 180,
    "type": "ui_action",
    "name": "Open a new blank form",
    "description": "UI Action - This script is server side script add it to the UI action to create a new blank form. When clicked on it will create a New Blank form and will redirect user to this newly created blank form. incident.do is used as URL paramenter will open new blank form for incident , we can change this to any other table ( for example - problem.do  will open new blank problem form)",
    "script": "//Create New blank incident form\r\n//Server side Script\r\n\r\nvar newFormURL = new GlideURL('incident.do');\r\nnewFormURL.addParam('sys_id', '-1');  // Open a new blank form\r\naction.setRedirectURL(newFormURL.toString());",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Open a new blank form",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Open%20a%20new%20blank%20form",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Open%20a%20new%20blank%20form/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.439Z",
    "updatedAt": "2025-09-21T08:58:58.110Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 179,
    "type": "ui_action",
    "name": "Mark Records Inactive - List Action",
    "description": "Above two scripts will help you to select records in list view and mark them inactive. You can create your UI action(list action) on any table and then you should be able to mark the records as inactive by calling the reusable script include. Process is pretty simple as shown below: 1. Create a List action - list banner button or list choice.",
    "script": "// File: listAction.js\n// Create a List Action. Make it as List Banner Button or List choice. Keep the client checkbox checked and the use the below script.\r\n\r\nvar selRecords;\r\n\r\nfunction markInactive() {\r\n    selRecords = g_list.getChecked(); //Get the sysIds of selected records from list view\r\n\r\n    var ga_inactive = new GlideAjax('MarkRecordsInactive'); // call the script include for the same\r\n\r\n    ga_inactive.addParam('sysparm_name', 'markInactiveRecords');\r\n    ga_inactive.addParam('sysparm_ids', selRecords);\r\n    ga_inactive.addParam('sysparm_table', g_list.getTableName());\r\n\r\n    ga_inactive.getXML(ResponseFunction);\r\n\r\n    function ResponseFunction(response) {\r\n        var answer = response.responseXML.documentElement.getAttribute(\"answer\");\r\n        //alert(answer.toString());\r\n        // Commented above code and replaced it with GlideModal\r\n        var gm = new GlideModal(\"glide_alert_standard\", false, 600);\r\n        gm.setTitle(\"Info Message\");\r\n        gm.setPreference(\"title\", answer.toString());\r\n        gm.setPreference(\"warning\", \"false\");\r\n        gm.render();\r\n    }\r\n}\n\n// File: scriptInclude.js\nvar MarkRecordsInactive = Class.create();\r\nMarkRecordsInactive.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n    markInactiveRecords: function() {\r\n        var sysIds = this.getParameter('sysparm_ids');\r\n        var tableName = this.getParameter('sysparm_table');\r\n        \r\n\t\tvar recs = new GlideRecordSecure(tableName);\r\n\t\trecs.addEncodedQuery('sys_idIN'+sysIds);\r\n\t\trecs.query();\r\n\t\twhile(recs.next())\r\n\t\t\t{\r\n\t\t\t\trecs.active = false;\r\n\t\t\t\trecs.update();\r\n\t\t\t}\r\n\t\treturn 'All the selected records are marked Inactive';\r\n    },\r\n    type: 'MarkRecordsInactive'\r\n});",
    "metadata": {
      "application": "Global",
      "table": "and",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Mark Records Inactive - List Action",
        "scriptFiles": [
          "listAction.js",
          "scriptInclude.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Mark%20Records%20Inactive%20-%20List%20Action"
      }
    },
    "createdAt": "2025-09-20T08:42:18.435Z",
    "updatedAt": "2025-09-21T08:58:58.107Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 178,
    "type": "ui_action",
    "name": "Go to Agent Workspace Home Page",
    "description": "",
    "script": "function onClick() {\r\n\ttop.window.location ='now/workspace/agent/home';\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Go to Agent Workspace Home Page",
        "scriptFiles": [
          "ui_action_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Go%20to%20Agent%20Workspace%20Home%20Page",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Go%20to%20Agent%20Workspace%20Home%20Page/ui_action_script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.431Z",
    "updatedAt": "2025-09-21T08:58:58.103Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 177,
    "type": "ui_action",
    "name": "GlideModalUiPagePopUp",
    "description": "Overview Modal alerts and confirmations in ServiceNow are interactive user interface elements that allow users to receive important messages or confirm actions before proceeding. These modals enhance the user experience by providing clear feedback during key interactions, ensuring that users are well-informed before performing potentially critical actions, such as closing a record or saving cha...",
    "script": "function onClick(g_form) {\r\n    // Check if the current user is the assigned user\r\n    if (g_user.userID != g_form.getValue('assigned_to')) {\r\n        // Alert if the user is not the assigned user\r\n        g_modal.alert('Only the assigned user can perform this action.');\r\n        return;\r\n    }\r\n\r\n    // Confirmation message\r\n    var msg = getMessage(\"Are you sure you want to take this action?\");\r\n    \r\n    // Confirmation modal before closing the task\r\n    g_modal.confirm(getMessage(\"Confirmation\"), msg, function (confirmed) {\r\n        if (confirmed) {\r\n            // If confirmed, close the task\r\n            g_form.setValue('state', 'closed_complete');\r\n            g_form.save();\r\n        }\r\n    });\r\n\r\n    return false;\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/GlideModalUiPagePopUp",
        "scriptFiles": [
          "glide_modal_ui_pop_up.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/GlideModalUiPagePopUp",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/GlideModalUiPagePopUp/glide_modal_ui_pop_up.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.427Z",
    "updatedAt": "2025-09-21T08:58:58.100Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 176,
    "type": "ui_action",
    "name": "GlideModalForm - Open New Record and Pass Query",
    "description": "This is an example of using the GlideModalForm API to open a brand new record on a specific table, passing along query parameters to it to assist with loading filling out the form Within the UI Action settings it's recommended to ensure: - Active is true",
    "script": "function functionName() { //specify the function name you listed within the UI Action \"onClick\" field\r\nvar tableName = \"table_name\"; //specify what table the new record should be created on\r\nvar dialog = new GlideModalForm('modal_form_title', tableName); //set your modal form title here\r\ndialog.setSysID(-1); //sys_id -1 will open a brand new record\r\ndialog.addParm('sysparm_view', 'view_name'); //optional: you can specify a specific view name here\r\ndialog.addParm('sysparm_view_forced', 'true'); //optional: you can force the view so it overrides\r\ndialog.addParm('sysparm_form_only', 'true'); //optional: you can specify to show the form only, removing related lists from the screen\r\nvar sDesc = g_form.getValue('short_description'); //example retrieving the short description on the current record\r\nvar query = \"short_description=\" + sDesc; //example setting the query JavaScript variable to the sDesc JavaScript variable that contains our current record's short description\r\ndialog.addParm('sysparm_query', query); //sets the query to the JavaScript variable from the line above, this will populate the related field(s) on the new form with the values specified\r\ndialog.render(); //displays the modal form to the user\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/GlideModalForm - Open New Record and Pass Query",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/GlideModalForm%20-%20Open%20New%20Record%20and%20Pass%20Query",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/GlideModalForm%20-%20Open%20New%20Record%20and%20Pass%20Query/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.424Z",
    "updatedAt": "2025-09-21T08:58:58.097Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 175,
    "type": "ui_action",
    "name": "Force to Update Set",
    "description": "Introduction Manually Add a Record to an Update Set 1. Check to make sure the current table isnâ€™t already recording updates",
    "script": "//Check to make sure the table isn't synchronized already\r\nvar tbl = current.getTableName();\r\nif(tbl.startsWith('wf_') || tbl.startsWith('sys_ui_') || tbl == 'sys_choice' || current.getED().getBooleanAttribute('update_synch') || current.getED().getBooleanAttribute('update_synch_custom')){\r\n   gs.addErrorMessage('Updates are already being recorded for this table.');\r\n   action.setRedirectURL(current); \r\n}\r\nelse{\r\n   //Push the update into the current update set\r\n   var um = new GlideUpdateManager2();\r\n   um.saveRecord(current);\r\n\r\n   //Query for the current update set to display info message\r\n   var setID = gs.getPreference('sys_update_set');\r\n   var us = new GlideRecord('sys_update_set');\r\n   us.get(setID);\r\n\r\n   //Display info message and reload the form\r\n   gs.addInfoMessage('Record included in <a href=\"sys_update_set.do?sys_id=' + setID + '\">' + us.name + '</a> update set.');\r\n   action.setRedirectURL(current);\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Wherever",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": true,
      "condition": "gs.hasRole(â€˜adminâ€™)",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Force to Update Set",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Force%20to%20Update%20Set",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Force%20to%20Update%20Set/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.420Z",
    "updatedAt": "2025-09-21T08:58:58.093Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 174,
    "type": "ui_action",
    "name": "Display a 2-choice confirmation dialog",
    "description": "Display a 2-choice confirmation dialog When you press the button on the Form screen, a two-choice dialog is displayed. Click the Complete button to execute Serverside processing.",
    "script": "// Display a 2-choice confirmation dialog.\r\n// When you press the button on the Form screen, a two-choice dialog is displayed.\r\n// Click the Complete button to execute Serverside processing.\r\n// Please set the following values.\r\n// * UI Action\r\n// * Name: Example Dialog\r\n// * Table: incident (anything)\r\n// * Action name: example_dialog\r\n// * Client: ture\r\n// * Form button: ture\r\n// * Onclick: onClickExampleDialog()\r\n// * Script\r\nfunction onClickExampleDialog() {\r\n    var dialogClass = typeof GlideModal != 'undefined' ? GlideModal : GlideDialogWindow;\r\n    var dialog = new dialogClass('glide_modal_confirm');\r\n    dialog.setTitle('Dialog title');\r\n    dialog.setPreference(\"focusTrap\", true); // Restrict focus from moving out of Dialog\r\n    dialog.setPreference('body', 'Approve this change?');\r\n    dialog.setPreference('buttonLabelCancel', 'Cancel'); // Cancel button label\r\n    dialog.setPreference('buttonLabelComplete', 'Complete'); // Complete button label\r\n    dialog.setPreference('buttonClassComplete', 'btn btn-destructive'); // Complete button CSS\r\n    dialog.setPreference('onPromptComplete', dialogComplete.bind(this)); // Complete button function\r\n    dialog.setPreference('onPromptCancel', dialogCancel.bind(this)); // Cancel button function\r\n    dialog.render();\r\n    return true;\r\n}\r\n\r\n// Complete button function\r\nfunction dialogComplete() {\r\n    //Press Submit Button and call UIAction(Server side 'example_dialog') again.\r\n    gsftSubmit(null, g_form.getFormElement(), 'example_dialog');\r\n}\r\n// Cancel button function\r\nfunction dialogCancel() {\r\n    //alert('Dialog Cancel');\r\n}\r\n\r\n//Judge Server side\r\nif (typeof window == 'undefined') {\r\n    serversideTask();\r\n}\r\n// Server side function\r\nfunction serversideTask() {\r\n    current.update();\r\n    gs.info('Serverside Task');\r\n    action.setRedirectURL(current);\r\n}",
    "metadata": {
      "application": "Global",
      "table": "incident",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "onClick": "onClickExampleDialog()",
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Display a 2-choice confirmation dialog",
        "scriptFiles": [
          "choice_dialog.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Display%20a%202-choice%20confirmation%20dialog",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Display%20a%202-choice%20confirmation%20dialog/choice_dialog.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.416Z",
    "updatedAt": "2025-09-21T08:58:58.090Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 173,
    "type": "ui_action",
    "name": "Create Update Set on DEV",
    "description": "Create Update Set on DEV A client UI Action for the Story form that opens up a new browser window with the Create New Update Set form on a specified DEV instance with Update Set name pre-filled with the Story number and short description. Helps reducing copy/paste work and to keep up with Update Set naming standards.",
    "script": "function openDevUpdateSetForm() {\r\n\r\n    // Name of the DEV instance where Update sets should be created:\r\n    var dev_instance_name = 'my_org_dev_instance';\r\n    // Update set name format:\r\n    var update_set_name = g_form.getValue('number') + ' ' + g_form.getValue('short_description');\r\n\r\n    var instanceURL = 'https://' + dev_instance_name + '.service-now.com/nav_to.do?uri=';\r\n    var updatesetURL = '/sys_update_set.do?sys_id=-1&sysparm_query=name=' + update_set_name;\r\n    var encodedUpdateSetURL = encodeURIComponent(updatesetURL);\r\n    var gotoURL = instanceURL + encodedUpdateSetURL;\r\n\r\n    g_navigation.open(gotoURL, '_blank');\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Create Update Set on DEV",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Create%20Update%20Set%20on%20DEV",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Create%20Update%20Set%20on%20DEV/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.412Z",
    "updatedAt": "2025-09-21T08:58:58.087Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 172,
    "type": "ui_action",
    "name": "Create story",
    "description": "Code Snippet for UI Action to create an Agile Story from another task.  For example Incident - Story, Task - Story, Requested Item - Story",
    "script": "createStory();\r\n\r\nfunction createStory() {\r\n\r\n  // (1) Copy item fields into a new story\r\n  var story = new GlideRecord(\"rm_story\");\r\n  story.priority = current.priority;\r\n  story.short_description = current.short_description;\r\n  story.assignment_group = current.assignment_group;\r\n  story.assigned_to = current.assigned_to;\r\n  story.description = current.description;\r\n  story.work_notes = current.work_notes;\r\n  story.type=\"Development\";\r\n  story.opened = current.opened;\r\n  story.opened_by = current.opened_by;\r\n  story.product = null;\r\n  story.state = -6;  //default to draft\r\n  story.original_task = current.sys_id;\r\n  var storySysID = story.insert();\r\n  \r\n  current.agile_story = storySysID;\r\n  current.update();\r\n\r\n  // (2) Redirect webpage to the new story (Ensure story displayed in scrum view)\r\n  gs.addInfoMessage(gs.getMessage(\"Story {0} created\", story.number)); \r\n  action.setRedirectURL(story);\r\n  var redirectURL = action.getRedirectURL();\r\n  redirectURL = redirectURL.replace(\"sysparm_view=\", \"sysparm_view=scrum\");\r\n  action.setRedirectURL(redirectURL);\r\n  action.setReturnURL(current);\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Create story",
        "scriptFiles": [
          "Create story from other task.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Create%20story",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Create%20story/Create%20story%20from%20other%20task.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.408Z",
    "updatedAt": "2025-09-21T08:58:58.083Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 171,
    "type": "ui_action",
    "name": "Create Problem Task from the Problem",
    "description": "UI Action Create Problem Task from the Problem A UI Action in ServiceNow is a script that defines an action or button within the platform's user interface. It enables users to perform specific operations on forms and lists, such as creating, updating, or deleting records, or executing custom scripts.",
    "script": "//UI Action - Create a Problem task from a Problem. Problem Task Type is General\r\n\r\nvar gr = new GlideRecord('problem_task');\r\ngr.initialize();\r\ngr.short_description = \"Problem Task Created for problem \" + current.number;\r\ngr.description = current.short_description;\r\ngr.problem = current.sys_id;\r\ngr.problem_task_type = 'general';\r\ngr.insert();",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Create Problem Task from the Problem",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Create%20Problem%20Task%20from%20the%20Problem",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Create%20Problem%20Task%20from%20the%20Problem/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.405Z",
    "updatedAt": "2025-09-21T08:58:58.080Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 170,
    "type": "ui_action",
    "name": "Create Problem Record from any Table",
    "description": "This UI action helps in creating a problem record from an incident or even from a change table, and we can modify this code by changing the table name we can use it for any sort of table to create a problem record.",
    "script": "//This UI action helps in generating a problem record from a chnage or an incident form\r\nvar createPrb = new GlideRecord(\"problem\"); // Gliding the problem table\r\ncreatePrb.initialize();\r\ncreatePrb.short_description = current.short_description; // taking current records short description as problem short description(problem statement)\r\ncreatePrb.first_reported_by_task = current.getUniqueValue();\r\ncreatePrb.cmdb_ci = current.cmdb_ci; //taking the affected in configuration item\r\ncreatePrb.insert(); //inserting the record into the problem table\r\ngs.addInfoMessage(\"problem number\" + createPrb.number.getDisplayValue()); // informing the user with the created problem record number for easy reference.\r\naction.setRedirectURL(current);",
    "metadata": {
      "application": "Global",
      "table": "we",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Create Problem Record from any Table",
        "scriptFiles": [
          "CreateProblemRecord.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Create%20Problem%20Record%20from%20any%20Table",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Create%20Problem%20Record%20from%20any%20Table/CreateProblemRecord.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.401Z",
    "updatedAt": "2025-09-21T08:58:58.077Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 169,
    "type": "ui_action",
    "name": "Create New blank incident from the incident",
    "description": "A UI Action in ServiceNow is a script that defines an action or button within the platform's user interface. It enables users to perform specific operations on forms and lists, such as creating, updating, or deleting records, or executing custom scripts. UI Actions enhance the user experience by providing functional buttons, links, or context menus.",
    "script": "//UI Action - Create New blank incident from the incident.\r\n\r\nvar newFormURL = new GlideURL('incident.do');\r\nnewFormURL.addParam('sys_id', '-1');  // Open a new blank form\r\naction.setRedirectURL(newFormURL.toString());",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Create New blank incident from the incident",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Create%20New%20blank%20incident%20from%20the%20incident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Create%20New%20blank%20incident%20from%20the%20incident/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.398Z",
    "updatedAt": "2025-09-21T08:58:58.074Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 168,
    "type": "ui_action",
    "name": "Create incident task and relate to incident",
    "description": "This UI Action loads a modal for to create a new incident task that is linked to the incident that you generated it from. Suggested values: Name: Create Incident Task",
    "script": "function createIncidentTask() {\r\n\t\r\n\tvar sysID = g_form.getUniqueValue();\r\n\t\r\n\tvar gm = new GlideModalForm('Create Incident Task', 'incident_task');\r\n\tgm.setPreference('focusTrap', true);\r\n\tgm.setPreference('table', 'incident_task');\r\n\tgm.setPreference('sysparm_query', 'incident='+sysID);\r\n\tgm.setWidth(650);\r\n\r\n\t//Opens the dialog\r\n\tgm.render();\r\n\t\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Incident",
      "showInsert": true,
      "showUpdate": true,
      "client": true,
      "formLink": true,
      "onClick": "createIncidentTask()",
      "condition": "current.state != 7",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Create incident task and relate to incident",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Create%20incident%20task%20and%20relate%20to%20incident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Create%20incident%20task%20and%20relate%20to%20incident/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.394Z",
    "updatedAt": "2025-09-21T08:58:58.071Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 167,
    "type": "ui_action",
    "name": "Create Incident from Record - Open in both Platform and Workspace",
    "description": "Script that can be used in the Script section of a UI Action to create an Incident, or any record type, from another record and will open the record that was just created. This script will work both in Platform UI and Workspace UI, as long as one of the Workspace Form/Menu buttons are checked. This reduced the need to create a script for both Platform and Workspace within one UI Action.  For mo...",
    "script": "//Placed in the Script field of the UI Action, in order to work on Workspace the Workspace Form Action button/or menu must be checked\r\nvar incGr = new GlideRecord('incident');\r\nincGr.newRecord();\r\nincGr.setValue('caller_id', current.getValue('contact')); //This can be whatever field your record is housing the user in, this example is from the Case record.\r\nincGr.setValue('short_description', current.short_description);\r\nincGr.insert();\r\naction.openGlideRecord(incGr);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Create Incident from Record - Open in both Platform and Workspace",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Create%20Incident%20from%20Record%20-%20Open%20in%20both%20Platform%20and%20Workspace",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Create%20Incident%20from%20Record%20-%20Open%20in%20both%20Platform%20and%20Workspace/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.391Z",
    "updatedAt": "2025-09-21T08:58:58.067Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 166,
    "type": "ui_action",
    "name": "Copy Variable Set",
    "description": "This UI action will help create a copy of the Variable set, including the Catalog Client Script, Catalog UI actions and Variable. Below Configurations need to be performed on the UI action form on creation Table : Variable Set",
    "script": "/****************Client Code****************/\r\n\r\nfunction clientConfirm() {\r\n\r\n        var actionCallbackOK = function() {\r\n        \t gsftSubmit(null, g_form.getFormElement(), 'copyQuestionSet');\r\n    \t};\r\n    \tvar actionCallbackCancel = function() {\r\n         \treturn false;\r\n    \t};\r\n\r\n\t    var gm = new GlideModal('glide_confirm_basic',false); //UI page with logic to confirm\r\n    \tgm.setTitle(\"This will create a copy of this variable set including all variables, choices, UI policies, UI policy actions and client scripts. Do you want to proceed?\"); // confirm message to ask for confirmation\r\n\t    gm.setPreference('onPromptComplete', actionCallbackOK.bind(this)); //bind to local function to take action when selected Ok\r\n    \tgm.setPreference('onPromptCancel', actionCallbackCancel.bind(this)); //bind to local function to take action when selected Cancel\r\n    \tgm.render();\r\n}\r\n\r\n/****************Server Code****************/\r\n//set some new default values\r\nvar name = current.title;\r\ncurrent.title = 'Copy of ' + name;\r\n\r\n//insert a copy of the variable set\r\nvar oldid = current.sys_id.toString();\r\nvar newid = current.insert();\r\nvar allVars = {};\r\n\r\nif (typeof window == 'undefined') {\r\n    main(oldid, newid);\r\n}\r\n\r\nfunction main(oldid, newid) {\r\n\r\n    createVariables(oldid, newid);\r\n    createCatalogClientScript(oldid, newid);\r\n    createCatalogUiPolicy(oldid, newid);\r\n}\r\n\r\n//creates a copy of the variables and associates them to the new variable set\r\nfunction createVariables(oldid, newid) {\r\n    var vars = new GlideRecord('item_option_new');\r\n    vars.addQuery('variable_set', oldid);\r\n    vars.query();\r\n    while (vars.next()) {\r\n        var varoldid = vars.sys_id.toString();\r\n        vars.variable_set = newid;\r\n        var varnewid = vars.insert();\r\n        allVars['IO:' + varoldid] = 'IO:' + varnewid.toString();\r\n\r\n        var qc = new GlideRecord('question_choice');\r\n        qc.addQuery('question', varoldid);\r\n        qc.query();\r\n        while (qc.next()) {\r\n            qc.question = varnewid;\r\n            qc.insert();\r\n        }\r\n    }\r\n}\r\n\r\n//creates a copy of the client scripts and associates to the variable set.\r\nfunction createCatalogClientScript(oldid, newid) {\r\n    var ccs = new GlideRecord('catalog_script_client');\r\n    ccs.addQuery('variable_set', oldid);\r\n    ccs.query();\r\n    while (ccs.next()) {\r\n        if (ccs.type == 'onChange') {\r\n            var cv = ccs.cat_variable;\r\n            ccs.cat_variable = allVars[cv];\r\n        }\r\n        ccs.variable_set = newid;\r\n        ccs.insert();\r\n    }\r\n}\r\n\r\n//creates a copy of the UI Policies and associates them to the new variable set\r\nfunction createCatalogUiPolicy(oldid, newid) {\r\n    var cup = new GlideRecord('catalog_ui_policy');\r\n    cup.addQuery('variable_set', oldid);\r\n    cup.query();\r\n    while (cup.next()) {\r\n        var uipoldid = cup.sys_id.toString();\r\n        cup.variable_set = newid;\r\n        var newuip = cup.insert();\r\n\r\n        var cupa = new GlideRecord('catalog_ui_policy_action');\r\n        cupa.addQuery('ui_policy', uipoldid);\r\n        cupa.query();\r\n        while (cupa.next()) {\r\n            cupa.ui_policy = newuip;\r\n            cupa.variable_set = newid;\r\n            var cv = cupa.catalog_variable;\r\n            cupa.catalog_variable = allVars[cv];\r\n            cupa.insert();\r\n        }\r\n    }\r\n}\r\n\r\n//Return the user to the new variable set record\r\naction.setRedirectURL(current);",
    "metadata": {
      "application": "Global",
      "table": "Variable",
      "showInsert": true,
      "showUpdate": true,
      "client": true,
      "formLink": false,
      "onClick": "clientConfirm()",
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Copy Variable Set",
        "scriptFiles": [
          "scripts.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Copy%20Variable%20Set",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Copy%20Variable%20Set/scripts.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.387Z",
    "updatedAt": "2025-09-21T08:58:58.064Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 165,
    "type": "ui_action",
    "name": "Copy incident details and create a child incident",
    "description": "Copy incident details and create a child incident Use case : A button on the header of incident form to copy details(fields) of current incident and create a child incident with those copied details. Solution : Added a code snippet for UI action script that copies few fields of current incident and creates a child for the current incident with those details.",
    "script": "var gr = new GlideRecord('incident');\r\ngr.initialize();\r\ngr.short_description = current.short_description;  //copy short description field\r\ngr.caller_id = current.caller_id;  //copy caller id field\r\n//you can copy few more fields as per requirement\r\ngr.parent_incident = current.sys_id;\r\ngr.work_notes = \"This incident is a child and copy of \" + current.number;  //you can customize work notes if needed\r\ngr.insert();\r\n\r\naction.setRedirectURL(gr);  //use this line if you want to redirect to newly created child incident after execution\r\naction.setRedirectURL(current)  //use this line if you want to stay in parent incident after execution.",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Copy incident details and create a child incident",
        "scriptFiles": [
          "ui_action_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Copy%20incident%20details%20and%20create%20a%20child%20incident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Copy%20incident%20details%20and%20create%20a%20child%20incident/ui_action_script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.383Z",
    "updatedAt": "2025-09-21T08:58:58.061Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 164,
    "type": "ui_action",
    "name": "Convert Request to Incident",
    "description": "This is a UI Action that creates an Incident using the field values of the current Request and closes the Request as \"Closed Skipped\". It also compliles all the worknotes and comments into a single worknote on the Incident. This action has an OnClick function as well as a server-side function that runs using:",
    "script": "//Prompts confirmation window on click\r\nfunction ReqWarning() {\r\n    var answer = confirm(\"Please confirm Request to Incident Action. \\n This will set the current Request to 'Closed Skipped' and create a new Incident.\");\r\n\r\n    if (answer == false) {\r\n        return false;\r\n    }\r\n\r\n    gsftSubmit(null, g_form.getFormElement(), 'create_inc_cancel_req');\r\n\r\n}\r\n\r\n// Ensure this runs on the server side\r\nif (typeof current != 'undefined') {\r\n    // Create a new incident record\r\n    var inc = new GlideRecord('incident');\r\n    inc.initialize();\r\n\r\n    // Map fields from the task to the incident\r\n    inc.short_description = current.short_description;\r\n\tinc.description = current.special_instructions;\r\n    inc.caller_id = current.requested_for;\r\n\tinc.watch_list = current.watch_list;\r\n\tinc.assigned_to = current.assigned_to;\r\n\tinc.state = 1; // Sets state to 'New'\r\n\tinc.contact_type = 'self-service';\r\n\tinc.assignment_group = 'group_sys_id'; // Assign to your preferred assignment group's sys_id\r\n\r\n\t// Construct the initial work note for the Incident with a link back to the original\r\n\tvar callerName = current.requested_for.getDisplayValue();\r\n\tvar currentLink = \"[code]<a href='\" + current.getLink() + \"'>\" + current.number + \"</a>[/code]\";\r\n\tvar initialJournalEntry = gs.getMessage(\"This incident was converted from {0} on behalf of {1}\" , [currentLink, callerName]);\r\n\tinc.work_notes = initialJournalEntry;\r\n\t\r\n    // Initialize a variable to compile the work notes and comments\r\n    var compiledEntries = \"Compiled Work Notes and Comments:\\n=================================\\n\\n\";\r\n\t\r\n    // Query combined work notes and comments from the current task\r\n    var journal = new GlideRecord('sys_journal_field');\r\n    journal.addQuery('element_id', current.sys_id);\r\n    journal.addQuery('element', 'IN', 'work_notes,comments'); // Fetch work notes and comments\r\n    journal.orderBy('sys_created_on'); // Ensures chronological order\r\n    journal.query();\r\n\r\n    while (journal.next()) {\r\n\t\tvar entryType = journal.element == 'work_notes' ? 'Work Note' : 'Comment';\r\n\t\tvar entryTimestamp = journal.sys_created_on.getDisplayValue();\r\n\r\n\t\tvar userRecord = new GlideRecord('sys_user');\r\n\t\tvar entryCreatedBy = 'Unknown User';  // Default value in case user is not found\r\n\r\n\t\t// Query the sys_user table based on the user_name stored in sys_created_by\r\n\t\tuserRecord.addQuery('user_name', journal.sys_created_by);\r\n\t\tuserRecord.query();\r\n\r\n\t\tif (userRecord.next()) {\r\n\t\t\tvar firstName = userRecord.first_name;\r\n\t\t\tvar lastName = userRecord.last_name;\r\n\r\n\t\t\t// Concatenate first name and last name to form the full name\r\n\t\t\tentryCreatedBy = firstName + ' ' + lastName;\r\n\t\t}\r\n\t\tvar entryText = journal.value;\r\n\r\n\t\t// Format the entry with structured and visually separated format\r\n\t\t\tcompiledEntries += entryType + \" - \" + entryTimestamp + \" - \" + entryCreatedBy + \":\\n\" +\r\n\t\t\t\t\t\t\t\"--------------------------------------------------------\\n\" +\r\n\t\t\t\t\t\t\t\"\\\"\" + entryText + \"\\\"\\n\" +\r\n\t\t\t\t\t\t\t\"--------------------------------------------------------\\n\\n\";\t\r\n\t}\r\n\r\n    // Add the compiled entries as a work note to the new incident\r\n    if (compiledEntries != \"Compiled Work Notes and Comments:\\n=================================\\n\\n\") {\r\n        inc.work_notes = compiledEntries;\r\n    }\r\n\r\n    // Insert the new incident record to get a sys_id for work notes and comments transfer\r\n    var incSysId = inc.insert();\r\n\r\n    // Check if successful incident record creation, set closing fields, and inform user\r\n    if (incSysId) {\r\n\t\t// Set fields on current record\r\n\t\tcurrent.request_state = 'closed_cancelled';\r\n\t\tcurrent.state = 7; // Sets state to 'Closed Skipped'\r\n\t\tvar incLink = \"[code]<a href='\" + inc.getLink() + \"'>\" + inc.number + \"</a>[/code]\";\r\n\t\tcurrent.work_notes = gs.getMessage(\"Converted to Incident: \" + incLink);\r\n\t\tcurrent.update();\r\n\r\n        gs.addInfoMessage(\"Incident created from Request: \" + inc.number);\r\n\r\n\t\t// Redirect to the newly created incident\r\n\t\taction.setRedirectURL(inc);\r\n    } else {\r\n\t\tgs.addErrorMessage(\"Failed to convert\");\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Convert Request to Incident",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Convert%20Request%20to%20Incident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Convert%20Request%20to%20Incident/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.379Z",
    "updatedAt": "2025-09-21T08:58:58.057Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 163,
    "type": "ui_action",
    "name": "Close child incident",
    "description": "This is a ui actions that close the child incident directly from the parent incident Two actions for this : 1. Client side ui action from which button is shown and onClick of that button server side action will be performed",
    "script": "// File: clientScript.js\nfunction popUpClientScript(){\r\n\t\r\n\tvar actionCallbackOK = function() {\r\n        \tgsftSubmit(null,g_form.getFormElement(),'sys_demoaction'); // calling server ui action to update state\r\n    \t};\r\n    \tvar actionCallbackCancel = function() {\r\n         \t//do nothing\r\n    \t};\r\n\r\n\tvar gm = new GlideModal('glide_confirm_basic',false); //UI page with logic to confirm\r\n    \tgm.setTitle(\"Are you sure you want to close the attached child incident\"); // confirm message to ask for confirmation\r\n\tgm.setPreference('onPromptComplete', actionCallbackOK.bind(this)); //bind to local function to take action when selected Ok\r\n    \tgm.setPreference('onPromptCancel', actionCallbackCancel.bind(this)); //bind to local function to take action when selected Cancel\r\n    \tgm.render();\r\n}\n\n// File: serverScript.js\nvar gr = new GlideRecord('incident');\r\ngr.addQuery('parent_incident',current.sys_id); //querying over particular parent incident\r\ngr.query();\r\nwhile(gr.next()){\r\n\tgr.state = '7'; //updating the state of the child incident to closed\r\n\tgr.update();\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Close child incident",
        "scriptFiles": [
          "clientScript.js",
          "serverScript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Close%20child%20incident"
      }
    },
    "createdAt": "2025-09-20T08:42:18.373Z",
    "updatedAt": "2025-09-21T08:58:58.053Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 162,
    "type": "ui_action",
    "name": "Clone incident on Agent Workspace",
    "description": "Agent can use this UI Action on incident form to clone/copy any existing incident. This UI Action will create a copy of incident once agent confirm the action. Caller field will not be copeied to newly created incident, only basic information of ticket like Company, Short Description, Category, Sub-Category",
    "script": "// File: clone_incident.js\nfunction cloneIncident() {\r\n    var answer = confirm(getMessage(\"Are you sure you want to Clone this Incident?\"));\r\n    if (answer)\r\n        gsftSubmit(null, g_form.getFormElement(), 'clone_incident');\r\n    else\r\n        return false;\r\n}\r\n\r\nif (typeof window == 'undefined') {\r\n    //Clone Incident\r\n    var grInc = new GlideRecord('incident');\r\n    grInc.initialize();\r\n    grInc.company = current.company;\r\n    grInc.short_description = current.short_description;\r\n    grInc.description = current.description;\r\n    grInc.contact_type = \"Self-service\";\r\n    grInc.category = current.category;\r\n    grInc.subcategory = current.subcategory;\r\n    grInc.setDisplayValue('assignment_group', \"Assignment Group Name\"); // or use grInc.assignment_group = current.assignment_group.toString();\r\n    /*\r\n\tuncomment this code if comments need to be copied\r\n    //Remove Timestamp from Comments\r\n    var getComments = current.comments.getJournalEntry(1);\r\n    var regex = new RegExp(\"\\n\");\r\n    var returnComments = getComments;\r\n    var getRegex = getComments.search(regex);\r\n    if (getRegex > 0) {\r\n        returnComments = getComments.substring(getRegex + 1, getComments.length);\r\n    }\r\n    gr.comments = returnComments;\r\n    */\r\n    grInc.insert();\r\n    action.setRedirectURL(grInc);\r\n}\n\n// File: workspace_client_script.js\nfunction onClick() {\r\ngetMessage(\"Are you sure you want to Clone this Incident?\", function (msg) {\r\n\t\tg_modal.confirm(getMessage(\"Confirmation\"), msg, function (confirmed) {\r\n\t\t\tif (confirmed) {\r\n\t\t\t\tg_form.submit('clone_incident');\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Incident",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Clone incident on Agent Workspace",
        "scriptFiles": [
          "clone_incident.js",
          "workspace_client_script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Clone%20incident%20on%20Agent%20Workspace"
      }
    },
    "createdAt": "2025-09-20T08:42:18.369Z",
    "updatedAt": "2025-09-21T08:58:58.050Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 161,
    "type": "ui_action",
    "name": "Cancel Incident",
    "description": "This is a ui action run on incident table which is client callable, run on condition current.state == '1' which means when state is new.It cancel the incident through the form.",
    "script": "function cancelIncident(){\r\n\tvar gm = new GlideModal(\"glide_ask_standard\", false, 600); // glide modal to get the confirmation\r\n\tgm.setPreference(\"title\", \"Are you sure you wanna cancel incident!!!\");\r\n\tgm.setPreference(\"onPromptComplete\", function() {\r\n\t\tgsftSubmit(null,g_form.getFormElement(),'cancel_incident');}); //calling same ui action\r\n\tgm.render();\r\n\t\r\n}\r\n\r\nif(typeof window == 'undefined'){\r\n\tserverCancel();\r\n}\r\n\r\nfunction serverCancel(){\r\n\tcurrent.state = '8'; //setting the state to canceled\r\n\tcurrent.update();\r\n}",
    "metadata": {
      "application": "Global",
      "table": "which",
      "showInsert": true,
      "showUpdate": true,
      "client": true,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Cancel Incident",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Cancel%20Incident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Cancel%20Incident/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.364Z",
    "updatedAt": "2025-09-21T08:58:58.046Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 160,
    "type": "ui_action",
    "name": "CallingPopUpBoxInListView",
    "description": "Overview This document explains how to implement a custom UI action that triggers a UI page from the list view of a table in ServiceNow. Specifically, it demonstrates how to open a modal dialog when multiple items are selected in the list view. The modal dialog will display a UI page and pass the selected record sysids as parameters. This allows users to update multiple records simultaneously t...",
    "script": "function showExceptiondialog() {\r\n    // Alert to display the checked records\r\n    alert(g_list.getChecked());\r\n    \r\n    // Check if any records are selected in the list\r\n    if ((g_list.getChecked()).length > 0) {\r\n        var title = getMessage(\"Remediation Task\");\r\n        var dialogClass = GlideModal || GlideDialogWindow;\r\n        \r\n        // Initialize the modal dialog with a custom UI page\r\n        var dialog = new dialogClass(\"incident_pop_up\", true, 750);\r\n        dialog.setTitle(title);\r\n        \r\n        // Pass selected record sys_ids as parameters to the UI page\r\n        dialog.setPreference(\"sysparm_sys_id\", g_list.getChecked());\r\n        \r\n        // Render the modal dialog\r\n        dialog.render();\r\n    } else {\r\n        // Show error messages if no records are selected\r\n        g_form.addErrorMessage(getMessage('Please Select Vulnerable Items before creating remediation'));\r\n        alert('Please Select Vulnerable Items before creating remediation');\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "in",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/CallingPopUpBoxInListView",
        "scriptFiles": [
          "calling_pop_up_box_in_list_view.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/CallingPopUpBoxInListView",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/CallingPopUpBoxInListView/calling_pop_up_box_in_list_view.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.360Z",
    "updatedAt": "2025-09-21T08:58:58.043Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 159,
    "type": "ui_action",
    "name": "Call Subflow",
    "description": "Call Subflow from UI Action This UI Action enables calling a subflow from ServiceNow Flow Designer using the FlowAPI. Instruction",
    "script": "(function() {\r\n\t\r\n\ttry {\r\n    \t\t// Provide subflow inputs\r\n\t\tvar inputs = {};\r\n\t\tinputs['incident'] = current; //the current incident record can be provided as input to the subflow\r\n    \r\n    \t\t//The subflow can either be executed synchronously (running in foreground) or asynchronously (running in background)\r\n    \t\t//If the flow runs asynchronously the FlowAPI will not provide the outputs of the subflow\r\n    \r\n    \t\t//Asynchronous call\r\n\t\t// sn_fd.FlowAPI.getRunner().subflow('global.subflow_name').inBackground().withInputs(inputs).run();\r\n    \r\n    \t\t//Synchronous call\r\n\t\t// sn_fd.FlowAPI.getRunner().subflow('global.subflow_name').inForeground().withInputs(inputs).run();\r\n    \r\n    \t\t//In this case we are calling the subflow global.create_problem_from_incident synchronously and then access the subflow outputs\r\n\t\tvar result = sn_fd.FlowAPI.getRunner().subflow('global.create_problem_from_incident').inForeground().withInputs(inputs).run();\r\n\t\tvar outputs = result.getOutputs();\r\n\r\n\t\t// Get subflow outputs:\r\n\t\tvar problem_number = outputs['problem_number'];\r\n\t\tvar assignment_group = outputs['assignment_group'];\r\n\t\t\r\n\t} catch (ex) {\r\n\t\tvar message = ex.getMessage();\r\n\t\tgs.error(message);\r\n\t}\r\n\t\r\n})();",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Call Subflow",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Call%20Subflow",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Call%20Subflow/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.356Z",
    "updatedAt": "2025-09-21T08:58:58.040Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 158,
    "type": "ui_action",
    "name": "Add Show Workflow Related link",
    "description": "There are many cases where,we would have workflows on custom tables or non task tables , where we would like to see the \"Show Workflow\" Related Link for ease of accessibility to the workflow. The shared code will help show this related link on any rable record that has a workflow associated with it. Below has to be set for this to work on UI action form:",
    "script": "// -----------------------------\r\n// Open workflow in a new window\r\n// -----------------------------\r\nfunction showWorkflow() {\r\n    var url = new GlideURL('/context_workflow.do');\r\n    url.addParam('sysparm_stack', 'no');\r\n    url.addParam('sysparm_document', g_form.getUniqueValue());\r\n\turl.addParam('sysparm_table', g_form.getTableName());\r\n\tg_navigation.open(url.getURL(), \"_blank\");\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": true,
      "formLink": true,
      "onClick": "showWorkflow()",
      "condition": "new global.Workflow().hasWorkflow(current)",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Add Show Workflow Related link",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Add%20Show%20Workflow%20Related%20link",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/UI%20Actions/Add%20Show%20Workflow%20Related%20link/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.353Z",
    "updatedAt": "2025-09-21T08:58:58.036Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 157,
    "type": "ui_action",
    "name": "Add collapsible element in knowledge article",
    "description": "This code snippet will allow you to use collapsible element within knowledge atricle which will make articles clean, organized and effective. Please check out the above demo on how this code-snippet can be used.",
    "script": "// File: add_collapsible.js\n******HTML*****\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<j:jelly trim=\"false\" xmlns:j=\"jelly:core\" xmlns:g=\"glide\" xmlns:j2=\"null\" xmlns:g2=\"null\">\r\n\r\n\t<style>\r\n\t\t.hide{\r\n\t\t\tvisibility: hidden;\r\n\t\t}\r\n\t\t.show{\r\n\t\t\tvisibility: visible;\r\n\t\t}\r\n\t</style>\r\n\r\n\t<label for=\"collapsibleTitle\">Title</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"collapsibleTitle\" placeholder=\"Your collapsible title goes here\" />\r\n\r\n\t<br />\r\n\r\n\t<label for=\"collapsibleContent\">Content body</label>\r\n    <textarea class=\"form-control\" id=\"collapsibleContent\" rows=\"3\"></textarea>\r\n\r\n\t<br />\r\n\r\n\t<div class=\"alert alert-danger hide\" id=\"alert\" role=\"alert\">\r\n\t\t<b>Title</b> and <b>Content body</b> should not be empty.\r\n\t</div>\r\n\r\n\t<br/>\r\n\t\r\n\t<button type=\"button\" class=\"btn btn-primary\" style=\"float: right;\" onclick=\"updateForm()\">Add collapsible</button>\r\n</j:jelly>\r\n****************\r\n\r\n**Client Script**\r\nfunction updateForm() {\r\n    $j(\"#alert\").removeClass(\"show\");\r\n    $j(\"#alert\").addClass(\"hide\");\r\n\r\n    var title = $j(\"#collapsibleTitle\").val();\r\n    var content = $j(\"#collapsibleContent\").val();\r\n\r\n    if (title.trim() == \"\" || content.trim() == \"\") {\r\n        $j(\"#alert\").removeClass(\"hide\");\r\n        $j(\"#alert\").addClass(\"show\");\r\n\r\n        return;\r\n    }\r\n\r\n    var articleText = g_form.getValue(\"text\");\r\n    var collapsibleElement = \"<details style='width: 100%; border: 1px solid #ccc;'><summary style='cursor: pointer; padding: 15px; background: #e8e8e8;'>\" + title.trim() + \"</summary><div style='padding: 15px;'>\" + content.trim() + \"</div></details>\";\r\n\r\n\tg_form.setValue(\"text\", articleText + collapsibleElement);\r\n\tGlideDialogWindow.get().destroy()\r\n}\n\n// File: UI_Action.js\n/*\r\nThis script should be placed in the UI action on the table kb_knowledge form view.\r\nThis UI action should be marked as client.\r\nUse addCollapsible() function in the Onclick field.\r\n*/\r\n\r\nfunction addCollapsible() {\r\n    var gm = new GlideModal(\"add_collapsible\");\r\n    gm.setTitle('Add collapsible');\r\n    gm.setWidth(1000);\r\n    gm.render();\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "showInsert": true,
      "showUpdate": true,
      "client": false,
      "formLink": false,
      "condition": "",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "UI Actions/Add collapsible element in knowledge article",
        "scriptFiles": [
          "add_collapsible.js",
          "UI_Action.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/UI%20Actions/Add%20collapsible%20element%20in%20knowledge%20article"
      }
    },
    "createdAt": "2025-09-20T08:42:18.348Z",
    "updatedAt": "2025-09-21T08:58:58.033Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 156,
    "type": "client_script",
    "name": "Whitespace Validation",
    "description": "This Client Script will validate whether the field contains any whitespace.",
    "script": "// Client Script to Validate Whitespaces\r\nvar reg = /\\s/;\r\nvar value = g_form.getValue('field_name');\r\nvar k = reg.test(value);\r\n\r\nif (k == true) {\r\n    alert('Field Name cannot have spaces!'); // Alert if field contains whitespace\r\n    g_form.setValue('field_name', ''); // Empty field for any whitespaces\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Whitespace Validation",
        "scriptFiles": [
          "whitespaceValidation.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Whitespace%20Validation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Whitespace%20Validation/whitespaceValidation.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.344Z",
    "updatedAt": "2025-09-21T08:58:58.029Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 155,
    "type": "client_script",
    "name": "Verify whether a date falls within a hour range",
    "description": "A code snippet that verifies whether a date falls within a specific hour range.",
    "script": "/**\r\n * Verify whether a date falls within a hour range\r\n */\r\nfunction onChange() {\r\n  var dateNow = new Date();\r\n\tvar dateOpenedAt = new Date(g_form.getValue('opened_at'));\r\n\tvar differenceInMilliseconds = dateOpenedAt.getTime() - dateNow.getTime();\r\n\tvar differenceInHours = diffInMs / (1000 * 60 * 60);\r\n\t\r\n\tif (differenceInHours < 24) {\r\n\t  g_form.showFieldMsg('opened_at', 'Please choose a date and time that is at least 24 hours in the future.');\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\treturn true;\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Verify whether a date falls within a hour range",
        "scriptFiles": [
          "verifyWhetherADateFallsWithinAHourRange.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Verify%20whether%20a%20date%20falls%20within%20a%20hour%20range",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Verify%20whether%20a%20date%20falls%20within%20a%20hour%20range/verifyWhetherADateFallsWithinAHourRange.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.341Z",
    "updatedAt": "2025-09-21T08:58:58.025Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 154,
    "type": "client_script",
    "name": "Verify if e-mail already exists with Ajax call",
    "description": "Client Script Client script for verification if changed e-mail adders on user record is not already existing in sysuser table (real-time information about duplicated e-mail). Check is performed using asynchronous Ajax call and processed in callback function. In case e-mail already exists in sysuser table, message is displayed under email field with information which has have that e-mail. How to...",
    "script": "// File: clientScript.js\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n\r\n    //Return if page is loading or new value of e-mail is empty\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n\r\n    //Make Ajax call to check if e-mail already exists in sys_user table\r\n    var ga = new GlideAjax('user_CheckEmail'); //user_CheckEmail - Script Include name\r\n    ga.addParam('sysparm_name', 'validateEmail'); //sysparm_name - Parameter with function name in Script Include\r\n    ga.addParam('sysparm_emailString', newValue); //sysparm_emailString - Parameter with new value of e-mail \r\n    ga.getXMLAnswer(verifyDuplicates); //verifyDuplicates - Name of asynchronous callback function \r\n\r\n    //Asynchronous callback function to process response\r\n    function verifyDuplicates(response) {\r\n\r\n        //If repsonse is not null (in case if e-mail was not find)\r\n        if (response) {\r\n\r\n            //Parse response and show message about found duplicate\r\n            var data = JSON.parse(response);\r\n            g_form.showFieldMsg('email', 'User with that e-mail already exists: ' + data.name + '(' + data.sys_id + ')', 'error');\r\n        }\r\n    }\r\n}\n\n// File: scriptInclude.js\nvar user_CheckEmail = Class.create();\r\nuser_CheckEmail.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n    validateEmail: function() {\r\n\r\n        //Get new value of e-mail field\r\n        var emailString = this.getParameter('sysparm_emailString');\r\n\r\n        //Query user table to verify if new e-mail already exists\r\n        var user = new GlideRecord('sys_user');\r\n        user.addQuery('email', emailString);\r\n        user.query();\r\n\r\n        //If e-mail already exists, return user name and sys_id\r\n        if (user.next()) {\r\n\r\n            var results = {\r\n                \"sys_id\": user.getValue(\"sys_id\"),\r\n                \"name\": user.getValue(\"name\")\r\n            };\r\n            return JSON.stringify(results);\r\n\r\n        //If e-mail not exists, return null\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n});",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Verify if e-mail already exists with Ajax call",
        "scriptFiles": [
          "clientScript.js",
          "scriptInclude.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Verify%20if%20e-mail%20already%20exists%20with%20Ajax%20call"
      }
    },
    "createdAt": "2025-09-20T08:42:18.337Z",
    "updatedAt": "2025-09-21T08:58:58.022Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 153,
    "type": "client_script",
    "name": "Validate Short Description",
    "description": "This Client Script validates the \"Short Description\" field before the form is submitted. If the description is more than 100 characters, it displays an alert and prevents submission. This helps maintain data quality by ensuring adequate information is provided.",
    "script": "// File: ShortDescriptionLength.js\nfunction onSubmit() {\r\n    var shortDescription = g_form.getValue('short_description');\r\n    if (shortDescription.length > 100) {\r\n        alert('Short Description must be not be more than 100 characters long.');\r\n        return false; // Prevent form submission\r\n    }\r\n    return true; // Allow form submission\r\n}\n\n// File: validateSpecialChar.js\n// Client Script to Validate Special Charecters\r\nfunction onSubmit() {\r\n    var shortDescription = g_form.getValue('short_description');\r\n  var specialCharsRegex = /[^a-zA-Z0-9\\s]/g;\r\nvar specialChars = description.match(specialCharsRegex);\r\n  if (specialChars) {\r\n        alert('Description contains invalid characters: ' + specialChars.join(', '));\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\n\n// File: validShortDescription.js\nfunction onSubmit() {\r\n    var shortDescription = g_form.getValue('short_description');\r\n    if (shortDescription.length < 10) {\r\n        alert('Short Description must be at least 10 characters long.');\r\n        return false; // Prevent form submission\r\n    }\r\n    return true; // Allow form submission\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Validate Short Description",
        "scriptFiles": [
          "ShortDescriptionLength.js",
          "validateSpecialChar.js",
          "validShortDescription.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Validate%20Short%20Description"
      }
    },
    "createdAt": "2025-09-20T08:42:18.334Z",
    "updatedAt": "2025-09-21T08:58:58.018Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 152,
    "type": "client_script",
    "name": "validate phone number",
    "description": "Purpose: Ensures that users enter their phone numbers in a specific format. Phone number must be in format(123) 456-7890. The regex:- 1) ^\\(\\d{3}\\) \\d{3}-\\d{4}$ validates phone numbers in the format:",
    "script": "// Client Script: Validate Phone Number\r\n// Table: sys_user\r\n// Type: onChange\r\n// Field: phone\r\n\r\nfunction onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading || newValue === '') return;\r\n\r\n    var phoneRegex = /^\\(\\d{3}\\) \\d{3}-\\d{4}$/; // Format: (123) 456-7890\r\n    if (!phoneRegex.test(newValue)) {\r\n        g_form.showFieldMsg('phone', 'Phone number must be in the format (123) 456-7890', 'error');\r\n        g_form.setValue('phone', '');\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/validate phone number",
        "scriptFiles": [
          "validate phone number.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/validate%20phone%20number",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/validate%20phone%20number/validate%20phone%20number.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.330Z",
    "updatedAt": "2025-09-21T08:58:58.015Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 151,
    "type": "client_script",
    "name": "Validate Email Format",
    "description": "onSubmit Function: This client script validates the email format when the form is submitted. Regular Expression: It uses a regex pattern to check if the entered email matches a standard email format. Error Message: If the email is invalid, an error message is displayed, and form submission is prevented.",
    "script": "// Client Script: Validate Email Format on User Record\r\n\r\nfunction onSubmit() {\r\n    var emailField = g_form.getValue('email');\r\n    var emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n    if (!emailPattern.test(emailField)) {\r\n        g_form.addErrorMessage('Please enter a valid email address.');\r\n        return false; // Prevent form submission\r\n    }\r\n    return true; // Allow form submission\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Validate Email Format",
        "scriptFiles": [
          "ValidateEmailFormat.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Validate%20Email%20Format",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Validate%20Email%20Format/ValidateEmailFormat.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.326Z",
    "updatedAt": "2025-09-21T08:58:58.011Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 150,
    "type": "client_script",
    "name": "Validate date is in future without GlideAjax",
    "description": "Client Script - Date in future A client script that validates that a specified date is in future without the need for a GlideAjax and Script Include Usage",
    "script": "/*\r\n    Client script that validates a date is in future without the need of a GlideAjax and Script Include\r\n*/\r\n\r\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n\r\n    var fieldToValidate = '<your_field_name>'\r\n\r\n    var currentDate = formatDate(new Date(), g_user_date_format);\r\n    var currentDateInMs = getDateFromFormat(currentDate, g_user_date_format);\r\n    var dateToValidateInMs = getDateFromFormat(g_form.getValue(fieldToValidate), g_user_date_format);\r\n\r\n    if (dateToValidateInMs <= currentDateInMs) {\r\n        g_form.showFieldMsg(fieldToValidate, \"Enter a valid future date.\", 'error');\r\n        return false;\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Validate date is in future without GlideAjax",
        "scriptFiles": [
          "OnChange Client Script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Validate%20date%20is%20in%20future%20without%20GlideAjax",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Validate%20date%20is%20in%20future%20without%20GlideAjax/OnChange%20Client%20Script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.323Z",
    "updatedAt": "2025-09-21T08:58:58.008Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 149,
    "type": "client_script",
    "name": "Use case of addOption() and removeOption()",
    "description": "onChange client script for table 'changerequest' where field is 'priority' if priority is critical, impact can be high and medium i.e, low will be removed from choice list using removeOption() and for other priority ,impact can be high, medium and low i.e, low option will be added, using addOption()",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n   if (isLoading || newValue === '') {\r\n\treturn;\r\n   }\r\n   if(newValue == 1) {\r\n\tg_form.removeOption('impact',3); // 3 is the value for impact 'low'\r\n   } else {\r\n\tg_form.addOption('impact',3,'3 - Low');\r\n   }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "change_request",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Use case of addOption() and removeOption()",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Use%20case%20of%20addOption()%20and%20removeOption()",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Use%20case%20of%20addOption()%20and%20removeOption()/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.319Z",
    "updatedAt": "2025-09-21T08:58:58.004Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 148,
    "type": "client_script",
    "name": "Update Category from Short Description Keywords",
    "description": "Client Script that looks for category keywords in the Short Description updates the category field Name: Set Category From Desc Keyword Table: Incident",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n    if (isLoading || newValue === '')\r\n        return;\r\n    //Query the short description field\r\n\r\n    var x = g_form.getValue('short_description');\r\n    var shortDescription = x.toLowerCase();\r\n\r\n\r\n\r\n    //Define a mapping of keywords to assignment groups\r\n    var keywordMapping = {\r\n        \"network\": \"network\",\r\n        \"ip\": \"network\",\r\n        \"software\": \"software\",\r\n        \"adobe\": \"software\",\r\n        \"outlook\": \"software\",\r\n        \"hardware\": \"hardware\",\r\n        \"laptop\": \"hardware\",\r\n        \"printer\": \"hardware\",\r\n        \"database\": \"database\",\r\n        \"oracle\": \"database\",\r\n        \"how\": \"inquiry\",\r\n        \"support\": \"inquiry\",\r\n\r\n    };\r\n\r\n    //Loop through the keywords and check if they are present in the short description\r\n    for (var keyword in keywordMapping) {\r\n        if (shortDescription.indexOf(keyword) !== -1) {\r\n            //Set the Category based on the matching keyword\r\n            g_form.setValue('category', keywordMapping[keyword]);\r\n            break;\r\n        }\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Incident",
      "type": "onChange",
      "active": true,
      "field": "Short Description",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Update Category from Short Description Keywords",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Update%20Category%20from%20Short%20Description%20Keywords",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Update%20Category%20from%20Short%20Description%20Keywords/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.315Z",
    "updatedAt": "2025-09-21T08:58:58.001Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 147,
    "type": "client_script",
    "name": "Translate Message",
    "description": "Translate your messages in client script using getMessage method getMessage.js https://docs.servicenow.com/bundle/rome-platform-administration/page/administer/localization/task/tTranslateAClientScriptMessage.html",
    "script": "/* Translate messages according to the logged in user's preferred language in client script using getMessage() method.\r\n   Note: Make sure to add an entry under [sys_ui_message] table and add the key in your client script Message fied (Not available in form by default) for preventing an extra round trip to server for fetching the message.\r\n\r\n Code :- */\r\n\r\nvar msg = getMessage('message_key'); //message_key defined in [sys_ui_message] table and added to the Message field of the client script. Fetching and storing the translated message to msg variable.\r\ng_form.addInfoMessage(msg); // Showing the translated message as an info message.",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Translate Message",
        "scriptFiles": [
          "getMessage.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Translate%20Message",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Translate%20Message/getMessage.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.308Z",
    "updatedAt": "2025-09-21T08:58:57.997Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 146,
    "type": "client_script",
    "name": "Toggle form section visibility",
    "description": "Toggle Form Section Visibility Client Script Overview This client script enhances the user experience in ServiceNow by providing a dynamic way to toggle the visibility of a form section based on the state of a checkbox or switch field. It simplifies complex forms and allows users to control which sections they want to view, making the form more user-friendly.",
    "script": "// Client Script to Toggle Form Section Visibility\r\n\r\nfunction toggleFormSection() {\r\n    var checkboxField = g_form.getControl('checkbox_field'); // Replace 'checkbox_field' with your field name\r\n    var section = gel('section_id'); // Replace 'section_id' with the ID of the section to toggle\r\n\r\n    if (checkboxField.checked) {\r\n        section.style.display = 'block'; // Show the section when the checkbox is checked\r\n    } else {\r\n        section.style.display = 'none'; // Hide the section when the checkbox is unchecked\r\n    }\r\n}\r\n\r\n// Attach the toggleFormSection function to the checkbox field's change event\r\ng_form.observe('change', 'checkbox_field', toggleFormSection);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Toggle form section visibility",
        "scriptFiles": [
          "toggleFormSection.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Toggle%20form%20section%20visibility",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Toggle%20form%20section%20visibility/toggleFormSection.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.304Z",
    "updatedAt": "2025-09-21T08:58:57.994Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 145,
    "type": "client_script",
    "name": "Toggle Annotation On Forms With Script",
    "description": "Use Case This method can be used to show/hide/toggle form annotations through client-side script. Limitation",
    "script": "// Show form annotations\r\nSN.formAnnotations.show();\r\n\r\n// Hide form annotations\r\nSN.formAnnotations.hide();\r\n\r\n// Toggle form annotations\r\nSN.formAnnotations.toggle();",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Toggle Annotation On Forms With Script",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Toggle%20Annotation%20On%20Forms%20With%20Script",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Toggle%20Annotation%20On%20Forms%20With%20Script/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.299Z",
    "updatedAt": "2025-09-21T08:58:57.990Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 144,
    "type": "client_script",
    "name": "Sync Ajax with no getXMLWait",
    "description": "onSubmit Ajax validation with no getXMLWait Using getXMLWait() ensures the order of execution, but can cause the application to seem unresponsive, significantly degrading the user experience of any application that uses it. Also, the getXMLWait method is not available in scoped applications.",
    "script": "function onSubmit() {\r\n\tif (g_scratchpad.isFormValid) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tvar actionName = g_form.getActionName();\r\n\tvar ga = new GlideAjax('scriptIncludeName');\r\n\tga.addParam('sysparm_name', 'methodName');\r\n\tga.addParam('sysparm_additional_parm', 'parmValue');\r\n\tga.getXMLAnswer(function (answer) {\r\n\t\tif (answer == 'true') {\r\n\t\t\tg_scratchpad.isFormValid = true;\r\n\t\t\t// It will trigger the same UI action that was used to submit the form\r\n\t\t\tg_form.submit(actionName);\r\n\t\t}\r\n\t});\r\n\r\n\treturn false;\r\n}",
    "metadata": {
      "application": "to",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Sync Ajax with no getXMLWait",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Sync%20Ajax%20with%20no%20getXMLWait",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Sync%20Ajax%20with%20no%20getXMLWait/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.295Z",
    "updatedAt": "2025-09-21T08:58:57.987Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 143,
    "type": "client_script",
    "name": "state-edit-for-grpmem",
    "description": "This code will make state field editable only for group members, with the help of scratchpad variable that returns true or false from display business rule.",
    "script": "//Create a Display Business Rule with the following code and then the following code on \"On-Load\" client script\r\n\r\n//Display Business Rule Code:\r\n/*****\r\ng_scratchpad.grpmember = gs.getUser().isMemberOf(current.assignment_group); //This returns true or false . If user is part of the group it returns true, if user is not part of the group it returns false and assign it to scratchpad variable.\r\n*****/\r\n\r\nif(g_scratchpad.grpmember == false)\r\n{\r\ng_form.setReadonly(\"state\", true);\r\n}",
    "metadata": {
      "application": "Global",
      "table": "only",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/state-edit-for-grpmem",
        "scriptFiles": [
          "grpmemstateedit.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/state-edit-for-grpmem",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/state-edit-for-grpmem/grpmemstateedit.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.291Z",
    "updatedAt": "2025-09-21T08:58:57.984Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 142,
    "type": "client_script",
    "name": "State changes to On Hold then worknotes should be mandatory",
    "description": "This is OnChange client Script whenever the 'State' on incident table will change to 'on Hold' the 'work notes' will become mandatory While using this script the table should be selected as 'incident' and type should be 'onChange' and field should be selected as 'State'. then write the script.",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n   if (isLoading || newValue === '') {\r\n      return;\r\n   }\r\nif(newValue == '3') // here 3 is the value of On Hold\r\n{\r\n\tg_form.setMandatory('work_notes',true);\r\n}\r\n   else {\r\n\tg_form.setMandatory('work_notes',false);\r\n   }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "will",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/State changes to On Hold then worknotes should be mandatory",
        "scriptFiles": [
          "worknotes.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/State%20changes%20to%20On%20Hold%20then%20worknotes%20should%20be%20mandatory",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/State%20changes%20to%20On%20Hold%20then%20worknotes%20should%20be%20mandatory/worknotes.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.287Z",
    "updatedAt": "2025-09-21T08:58:57.980Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 141,
    "type": "client_script",
    "name": "Show Message On Both Form and List",
    "description": "Use Case The OOB GlideForm (gform) API has documentation on displaying messages of info, warning and error types on form view, but lack a success message. Moreover, this gform API is not accessible on lists and hence makes it difficult to display list level messages. However, SN provides another client-side method GlideUI.get().addOutputMessage({options}) that can be used to display messages in...",
    "script": "// Success Message\r\nGlideUI.get().addOutputMessage({\r\n    msg: 'Success',\r\n    type: 'success',\r\n    preventDuplicates: true\r\n});\r\n\r\n// Warning Message\r\nGlideUI.get().addOutputMessage({\r\n    msg: 'Warning',\r\n    type: 'warning',\r\n    preventDuplicates: true\r\n});\r\n\r\n// Error Message\r\nGlideUI.get().addOutputMessage({\r\n    msg: 'Error',\r\n    type: 'error',\r\n    preventDuplicates: true\r\n});\r\n\r\n// Info Message\r\nGlideUI.get().addOutputMessage({\r\n    msg: 'Info',\r\n    type: 'info',\r\n    preventDuplicates: true\r\n});",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Show Message On Both Form and List",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Show%20Message%20On%20Both%20Form%20and%20List",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Show%20Message%20On%20Both%20Form%20and%20List/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.283Z",
    "updatedAt": "2025-09-21T08:58:57.977Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 140,
    "type": "client_script",
    "name": "Show field if x things are checked",
    "description": "Use this script to show a field after n checkboxes are checked and not before. Tested in Global scope You can't make mandatory fields as readonly",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n    //Set the mandatory checkbox variable names and total mandatory count here\r\n    var mandatoryVars = ['option1', 'option2', 'option3', 'option4', 'option5'];\r\n    var variableToShow = 'someothervariable';\r\n    var requiredCount = 2;\r\n    var actualCount = 0;\r\n    for (var x = 0; x < mandatoryVars.length; x++) {\r\n        if (g_form.getValue(mandatoryVars[x]) == 'true') {\r\n            actualCount++;\r\n        }\r\n    }\r\n    if (requiredCount <= actualCount) {\r\n        g_form.setDisplay(variableToShow, true);\r\n    } else {\r\n        g_form.setDisplay(variableToShow, false);\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Show field if x things are checked",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Show%20field%20if%20x%20things%20are%20checked",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Show%20field%20if%20x%20things%20are%20checked/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.279Z",
    "updatedAt": "2025-09-21T08:58:57.974Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 139,
    "type": "client_script",
    "name": "Set Urgency to High onChange of caller field",
    "description": "This is a client script that change urgency to high automatically when changing caller field with the caller name whose vip is true",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n   if (isLoading || newValue === '') {\r\n      return;\r\n   }\r\n\r\n   var vipalert = g_form.getReference('caller_id',vipFunction);\r\n   function vipFunction(vipAlert){\r\n\t if(vipAlert.vip == 'true'){\r\n       g_form.setValue('urgency','1');\r\n\t  }\r\n  }\r\n   \r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Set Urgency to High onChange of caller field",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Set%20Urgency%20to%20High%20onChange%20of%20caller%20field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Set%20Urgency%20to%20High%20onChange%20of%20caller%20field/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.275Z",
    "updatedAt": "2025-09-21T08:58:57.970Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 138,
    "type": "client_script",
    "name": "Set Severity, state & assigned to",
    "description": "Use the script provided in scriptinclude.js and script.js to set fetch multiple values from server to client side by passing an object from server to the client side and setting values on your form. This can be used to pass multiple parameters from server to client side.",
    "script": "// File: script_include.js\n//Client callable script include\r\nvar getSIRDetails = Class.create();\r\ngetSIRDetails.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\r\n    getDetails: function() {\r\n        var sir = this.getParameter('sysparm_sir'); //getting the newValue of Security Inc from onChange client script\r\n        var obj = {}; //declare an object\r\n        var gr = new GlideRecord('sn_si_incident');\r\n        gr.addQuery('sys_id', sir); //Query to security incident table with the newValue\r\n        gr.query();\r\n        if (gr.next()) {\r\n            obj.severity = gr.severity.getDisplayValue();  //Setting values in the obj\r\n            obj.state = gr.state.getDisplayValue();\r\n            obj.assignedto = gr.assigned_to.getDisplayValue();\r\n        }\r\n        return JSON.stringify(obj); //passing the object to client script\r\n    },\r\n    type: 'getSIRDetails'\r\n});\n\n// File: script.js\n//onChange client script\r\n\r\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n    if (isLoading || newValue === '') {\r\n        \r\n        return;\r\n    }\r\n\r\n\r\n    //Type appropriate comment here, and begin script below\r\n    var ga = new GlideAjax('getSIRDetails'); // calling script include\r\n    ga.addParam('sysparm_name', 'getDetails');\r\n    ga.addParam('sysparm_sir', newValue); //passing newValue to the script include\r\n    ga.getXMLAnswer(callBackFunction);\r\n\r\n\r\n    function callBackFunction(response) {\r\n        var ans = JSON.parse(response);\r\n        g_form.setValue('severity', ans.severity); // setting values from the obj to appropriate fields\r\n        g_form.setValue('soc_sir_state', ans.state);\r\n        g_form.setValue('soc_sir_assigned_to', ans.assignedto);\r\n\r\n\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Set Severity, state & assigned to",
        "scriptFiles": [
          "script.js",
          "script_include.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Set%20Severity%2C%20state%20%26%20assigned%20to"
      }
    },
    "createdAt": "2025-09-20T08:42:18.271Z",
    "updatedAt": "2025-09-21T08:58:57.967Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 137,
    "type": "client_script",
    "name": "Set field style like font and background",
    "description": "Client Script - Change field style A client script that changes field font, and background based on some condition And example would be if the currently raised incident is by a VIP user and hightlight the caller...",
    "script": "// your condition to apply the style e.g. user is a VIP user\r\nvar condition = true; // Set the condition as needed\r\n\r\n// Find the control\r\nvar fieldToSetStyle = g_form.getControl('sys_display.incident.caller_id');\r\n\r\n\r\nif (condition == true) {\r\n    fieldToSetStyle.style.fontWeight = 'bold';\r\n    fieldToSetStyle.style.backgroundColor = 'red';\r\n} else  {\r\n    fieldToSetStyle.style.fontWeight = 'normal';\r\n    fieldToSetStyle.style.backgroundColor = 'white';\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Set field style like font and background",
        "scriptFiles": [
          "OnLoad client script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Set%20field%20style%20like%20font%20and%20background",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Set%20field%20style%20like%20font%20and%20background/OnLoad%20client%20script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.267Z",
    "updatedAt": "2025-09-21T08:58:57.964Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 136,
    "type": "client_script",
    "name": "Restrict Creation of P1, P2 Incidents",
    "description": "The code snippet can be used to restrict the creation of priority P1, P2 incidents except for the admins and a particular group members. To achieve this requirement, I have created a onChange client script for the field name \"Priority\" and also created a script include to get the necessary data from the server side.",
    "script": "//Client Script\r\n\r\n//Type onChnage, Field name: Priority\r\n\r\n// To restrict creation of priority P1, P2 incidents except for the admins and a particular group members\r\n\r\nvar checkAjax = '';\r\n// if logged in user is admin then skip the code execution\r\nif(!g_user.hasRole('admin')){\r\n\tif(newValue == 1 || newValue == 2){\r\n\t\tif(g_form.isNewRecord()){\r\n\t\r\n\t\tcheckAjax = new GlideAjax('checkMemberOfGroup');\r\n\t\tcheckAjax.addParm('sysparm_name', 'checkAccessNew');\r\n\t\tcheckAjax.getXMLWait();\r\n\t\tvar ans = checkAjax.getAnswer();\r\n\t\tif(and == 'false'){\r\n\t\t\tg_form.setValue('impact', 3);\r\n\t\t\tg_form.setValue('urgency', 3);\r\n\t\t\tg_form.addErrorMessage('Creation of P1, P2 incidents is restricted to Admins and IT ServiceDesk');\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar incNumber = g_form.getValuye('number');\t\r\n\t\t\tcheckAjax = newGlideAjax('checkMemberOfGroup');\r\n\t\t\tcheckAjax.addParm('sysparm_name', 'checkAccess');\r\n\t\t\tcheckAjax.addParm('sysparm_number', incNumber); // passing the current incident number so that if the logged in user is an end user, then get the previous values of impact and urgency values.\r\n\t\t\tcheckAjax.getXMLWait();\r\n\t\t\tvar ans = checkAjax.getAnswer();\r\n\t\t\tans = ans.split(\",\");\r\n\t\t\t// if value returned false, then logged in user is neither admin nor member of a particluar gorup, \r\n\t\t\tif(ans[2] == 'false'){\r\n\t\t\t\tvar imp = parseInt(ans[0]);\r\n\t\t\t\tvar urg = parseInt(ans[1]);\r\n\t\t\t\t// setting back the impact and urgency values to their previous values if logged in user is not part of a particular group and not an admin.\r\n\t\t\t\tg_form.setValue('impact', imp);\r\n\t\t\t\tg_form.setValue('urgency', urg);\r\n\t\t\t\tg_form.addErrorMessage('Creation of P1, P2 incidents is restricted to Admins and IT ServiceDesk');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n//Script Include\r\n\r\nvar checkMemberOfGroup = Class.create();\r\ncheckMemberOfGroup.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n// The below method is used to restrict the creation of P1, P2 incidents for existing incidents\r\ncheckAccess: function(){\r\n \tvar arr = [];\r\n\tvar number = this.getParameter('sysparm_number');\r\n\tvar glideInc = new GlideRecord('incident');\r\n\tglideInc.addquery('number', number);\r\n\tglideInc.query();\r\n\tif(glideInc.next()){\r\n\t\tarr.push(glideInc.impact);\r\n\t\tarr.push(glideInc.urgency);\r\n\t}\r\n\tvar checkGroupMember = gs.getUser().isMemberOf('Group_Name');\r\n\tif(checkGroupMember){\r\n\t\tarr.push('true');\r\n\t}\r\n\telse{\r\n\t\tarr.push('false');\r\n\t}\r\n\treturn arr.toString();\r\n},\r\n// The below function is used to restict the creation of priority P1, P2 incidents for new incidents\r\n\r\ncheckAccessNew: function(){\r\n\t\r\n\tvar checkGroupMember = gs.getUser().isMemberOf('Group_Name');\r\n\tif(checkGroupMember){\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n},\r\ntype: 'checkMemberOfGroup\r\n});",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Restrict Creation of P1, P2 Incidents",
        "scriptFiles": [
          "Restrict_Creation_Of_P1_P2_Incidents.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Restrict%20Creation%20of%20P1%2C%20P2%20Incidents",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Restrict%20Creation%20of%20P1%2C%20P2%20Incidents/Restrict_Creation_Of_P1_P2_Incidents.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.263Z",
    "updatedAt": "2025-09-21T08:58:57.960Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 135,
    "type": "client_script",
    "name": "Remove Option from Choice List",
    "description": "Purpose: This onChange function automatically reacts when the \"Category\" field is changed. If the new category selected is \"inquiry,\" the function removes the options for \"Impact\" and \"Urgency\" that have a value of 1. Whenever a user selects a new category, the script checks if itâ€™s set to \"inquiry.\" If so, it removes the specified options for \"Impact\" and \"Urgency\".",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\nif (isLoading || newValue == '') {\r\nreturn;\r\n}\r\nif (newValue == 'inquiry') { //Onchange of Category\r\ng_form.removeOption('impact', '1');\r\ng_form.removeOption('urgency', '1');\r\n}\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Remove Option from Choice List",
        "scriptFiles": [
          "Remove Options from Choice List.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Remove%20Option%20from%20Choice%20List",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Remove%20Option%20from%20Choice%20List/Remove%20Options%20from%20Choice%20List.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.259Z",
    "updatedAt": "2025-09-21T08:58:57.957Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 134,
    "type": "client_script",
    "name": "Redact Sensitive Information",
    "description": "Redact Sensitive Information When users create an incident or HR case via the self-service portal, they may occasionally enter sensitive information (e.g., personal identifiers, account numbers). To prevent misuse of such data, fulfillers can redact sensitive information from the short description or description fields.",
    "script": "function onSubmit() {\r\n    var redact = g_form.getValue(\"u_redact\"); //custom field on the form to redact information\r\n    if (redact == true) {\r\n        var answer = confirm(getMessage('Do you want to redact sensitive information')); //Confirm the user who wants to redact information \r\n        if (answer) {\r\n            g_form.setValue('short_description', 'Short Description is redacted as it contained sensitive information'); //Custom short_description post redacting\r\n            g_form.setValue('description', 'Description is redacted as it contained sensitive information'); //Custom description post redacting\r\n            g_form.setValue('work_notes', 'The Description and Short Description has been redacted.'); //Adding work notes to track who redacted the short_description and description\r\n            g_form.setReadOnly('short_description', true);\r\n            g_form.setReadOnly('description', true);\r\n            g_form.setReadOnly('u_redact', true)\r\n        } else {\r\n            g_form.setValue('u_redact', false);\r\n            return false;\r\n        }\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Redact Sensitive Information",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Redact%20Sensitive%20Information",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Redact%20Sensitive%20Information/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.255Z",
    "updatedAt": "2025-09-21T08:58:57.954Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 133,
    "type": "client_script",
    "name": "Populate Jelly Slushbucket with Values",
    "description": "This code is used to populate the <g:uislushbucket updown=\"true\"/ Jelly tag within a UI Page. In the UI Page, must ensure that this tag is located in the HTML section. Then in the client script, include the code provided in the example.",
    "script": "//Called when the form loads\r\naddLoadEvent(function () {\r\n  //Load the groups when the form loads\r\n  slush.clear();\r\n  var ajax = new GlideAjax(\"example_ajax_call\"); // Can use this to get values to fill the slushbucket\r\n  ajax.addParam(\"sysparm_example\", \"example\");\r\n  ajax.getXML(loadResponse);\r\n  return false;\r\n});\r\n\r\n//Called when we get a response from the 'addLoadEvent' function\r\nfunction loadResponse(response) {\r\n  //Process the return XML document and add groups to the left select\r\n  var xml = response.responseXML;\r\n  var e = xml.documentElement;\r\n  var items = xml.getElementsByTagName(\"item\");\r\n  if (items.length == 0) return;\r\n  //Loop through item elements and add each item to left slushbucket\r\n  for (var i = 0; i < items.length; i++) {\r\n    var item = items[i];\r\n    slush.addLeftChoice(\r\n      item.getAttribute(\"example\"),\r\n      item.getAttribute(\"example_2\") +\r\n        \": \" +\r\n        item.getAttribute(\"example_3\") +\r\n        \": \" +\r\n        item.getAttribute(\"example_4\")\r\n    ); //This is what will be displayed in the left side of the slushbucket\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Populate Jelly Slushbucket with Values",
        "scriptFiles": [
          "ClientScript.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Populate%20Jelly%20Slushbucket%20with%20Values",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Populate%20Jelly%20Slushbucket%20with%20Values/ClientScript.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.251Z",
    "updatedAt": "2025-09-21T08:58:57.951Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 132,
    "type": "client_script",
    "name": "Open Record in Agne Workspace Tab",
    "description": "This code helps to open a record in readonly mode irrespective of ACLS, UI Policies via client script in a Agent workspace tab. Here we are opening a story that is stored in the parent field on the incident record in the agent workspace.",
    "script": "// Opens a Story attached to a Incident record in the parent field in the readonly mode.\r\n  function onLoad(g_form) {\r\ng_aw.openRecord('rm_story', g_form.getValue('parent'), {readOnlyForm: true}); \r\n  }",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Open Record in Agne Workspace Tab",
        "scriptFiles": [
          "openrecawtab.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Open%20Record%20in%20Agne%20Workspace%20Tab",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Open%20Record%20in%20Agne%20Workspace%20Tab/openrecawtab.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.246Z",
    "updatedAt": "2025-09-21T08:58:57.947Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 131,
    "type": "client_script",
    "name": "Only number validation for input",
    "description": "Client Script - Input is number only A client script that validates that the input entry is number only Usage",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n\t\t\t\r\n\tif (isLoading || newValue === '') {\r\n\t\treturn;\r\n\t}\r\n\r\n    // Change the name of the field to your field name\r\n    var FIELD_NAME = '<your field name>'; \r\n\r\n\t// allow number only\r\n\tvar reg = new RegExp(/^\\d+$/);\r\n\t\r\n\tif (!reg.test(newValue)) {\r\n\t\tg_form.hideFieldMsg(FIELD_NAME);\r\n\t\tg_form.showFieldMsg(FIELD_NAME, g_form.getLabelOf(FIELD_NAME) + ' may contain digits only.', 'error');\r\n\t\t\r\n\t} else {\r\n\t\tg_form.hideFieldMsg(FIELD_NAME);\r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Only number validation for input",
        "scriptFiles": [
          "OnChange.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Only%20number%20validation%20for%20input",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Only%20number%20validation%20for%20input/OnChange.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.242Z",
    "updatedAt": "2025-09-21T08:58:57.944Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 130,
    "type": "client_script",
    "name": "onfocus and onblur",
    "description": "Using \"onfocus\" & \"onblur\" Show/Hide field messages while updating a field. Example:On load Client script on the incident form Quick video how it works:",
    "script": "g_form.getElement(\"Field Name\").onfocus = focus;\r\ng_form.getElement(\"Field Name\").onblur = blur;\r\n}\r\n\r\n//function definition \r\n\r\nfunction focus() {\r\n  g_form.showFieldMsg(\"Field Name\", \"Message you want to display\");\r\n}\r\n\r\nfunction blur() {\r\n  g_form.hideFieldMsg(\"Field Name\");\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/onfocus and onblur",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/onfocus%20and%20onblur",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/onfocus%20and%20onblur/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.238Z",
    "updatedAt": "2025-09-21T08:58:57.941Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 129,
    "type": "client_script",
    "name": "On load Switch-Case Testing",
    "description": "This is code snippet of switch case, and it will easily help to understand the usage of switch case and how we can implement it into the environment as per our requirements.",
    "script": "function onLoad() {\r\n  // Switch Case code snippet using in ServiceNow\r\n\r\nvar category = g_form.getValue(\"category\"); // It will capture the value of category field.\r\n\r\nswitch(category){\r\ncase \"hardware\": // if the value would be 'hardware' in category field.\r\ng_form.addInfoMessage(\"Yes category is hardware\") // This function will add a infomessage.\r\nbreak; //This keyword is used to stop the execution inside a switch block.\r\n\r\ncase \"software\": // if the value would be 'software' in category field.\r\ng_form.addInfoMessage(\"Yes category is software\") // This function will add a infomessage.\r\nbreak;\r\n\r\ncase \"network\": // if the value would be 'Network' in category field.\r\ng_form.addInfoMessage(\"Yes category is Network\") // This function will add a infomessage.\r\nbreak;\r\n\r\ncase \"database\": // if the value would be 'Database' in category field.\r\ng_form.addInfoMessage(\"Yes category is Database\") // This function will add a infomessage.\r\nbreak;\r\ndefault: // This will execute only if the category field have the value apart from mentioned cases.\r\ng_form.addInfoMessage(\"Oh! no category is something else\") // This function will add a infomessage.\r\n}\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/On load Switch-Case Testing",
        "scriptFiles": [
          "Switch-Case code snippet.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/On%20load%20Switch-Case%20Testing",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/On%20load%20Switch-Case%20Testing/Switch-Case%20code%20snippet.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.235Z",
    "updatedAt": "2025-09-21T08:58:57.938Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 128,
    "type": "client_script",
    "name": "MRVS variables validations",
    "description": "Multi Row Variable Set (MRVS) variables validations which are based on variables out of MRVS for this we need to use \"gservicecatalog\" client side API of ServiceNow Example:",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading || newValue == '') {\r\n        return;\r\n    }\r\n\r\n    //Type appropriate comment here, and begin script below\r\n    if (g_form.getValue('extended_leave_start') <= g_service_catalog.parent.getValue(\"last_working_date\")) { // extended leave start date is earlier or equal to last working date\r\n        g_form.clearValue('extended_leave_start');\r\n        g_form.showFieldMsg('extended_leave_start', \"Entended leave start can't be earlier or equal to last working day\", 'error');\r\n    }\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/MRVS variables validations",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/MRVS%20variables%20validations",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/MRVS%20variables%20validations/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.231Z",
    "updatedAt": "2025-09-21T08:58:57.935Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 127,
    "type": "client_script",
    "name": "Make Variable Editor Read Only for Catalog Items containing MRVS",
    "description": "Make Variable Editor Read Only for Catalog Items which have a Multi Row Variable Set Create an onLoad Client Script which would call a Script Include and pass in the Catalog Item sysid to check if the Catalog Item contains a MRVS. The script has been tailored to work with the Requested Item table. To make it work for any other table which has the Variable Editor replace the field \"catitem\" with...",
    "script": "// File: CheckMRVSDetails.js\nvar CheckMRVSDetails = Class.create();\r\nCheckMRVSDetails.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n\tcheckMRVS: function(){\r\n\t\tvar itemID = this.getParameter('sysparm_itemID');\r\n\t\tvar grMultiRow = new GlideRecord('io_set_item');\r\n\t\tgrMultiRow.addEncodedQuery('variable_set.type=one_to_many'); // Variable Set is MRVS\r\n\t\tgrMultiRow.addQuery('sc_cat_item',itemID);\r\n\t\tgrMultiRow.setLimit(1);\r\n\t\tgrMultiRow.query();\r\n\t\tif(grMultiRow.next()){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\t\r\n\t\r\n\t\r\n    type: 'CheckMRVSDetails'\r\n});\n\n// File: MakeVariableSetReadOnly.js\nfunction onLoad() {\r\n    //Type appropriate comment here, and begin script below\r\n    var catItem = g_form.getValue('cat_item'); //Sys Id of the Catalog Item\r\n\r\n    var ga = new GlideAjax('CheckMRVSDetails'); // SI Name\r\n    ga.addParam('sysparm_name', 'checkMRVS'); // Function Name\r\n    ga.addParam('sysparm_itemID', catItem);\r\n    ga.getXML(checkMRVS);\r\n\r\n    function checkMRVS(response) {\r\n\r\n        var answer = response.responseXML.documentElement.getAttribute(\"answer\");\r\n        if (answer == 'true') {\r\n            g_form.setVariablesReadOnly(true);\r\n        }\r\n\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": ".",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Make Variable Editor Read Only for Catalog Items containing MRVS",
        "scriptFiles": [
          "CheckMRVSDetails.js",
          "MakeVariableSetReadOnly.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Make%20Variable%20Editor%20Read%20Only%20for%20Catalog%20Items%20containing%20MRVS"
      }
    },
    "createdAt": "2025-09-20T08:42:18.225Z",
    "updatedAt": "2025-09-21T08:58:57.931Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 126,
    "type": "client_script",
    "name": "Make fields read only in specific states",
    "description": "",
    "script": "function onLoad() {\r\n    var getStateValue = g_form.getValue('state');\r\n    if (getStateValue == '3') {\r\n        var fields = g_form.getEditableFields();\r\n        for (var fieldLength = 0; fieldLength < fields.length; fieldLength++) {\r\n            g_form.setReadOnly(fields[fieldLength], true);\r\n        }\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Make fields read only in specific states",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Make%20fields%20read%20only%20in%20specific%20states",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Make%20fields%20read%20only%20in%20specific%20states/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.220Z",
    "updatedAt": "2025-09-21T08:58:57.924Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 125,
    "type": "client_script",
    "name": "Make all fields read only",
    "description": "Use this script to make all fields readonly via client script. Tested in Global scope You can't make mandatory fields as readonly",
    "script": "function onLoad() {\r\n    var fields = g_form.getEditableFields();\r\n    \r\n    var skippedFields = [\r\n        'sys_created_on',\r\n        'sys_created_by',\r\n        'sys_updated_on',\r\n        'sys_updated_by',\r\n    ];\r\n\r\n    for (var i = 0; i < fields.length; i++) {\r\n        var field = fields[i];\r\n\r\n        // Skip fields in the designated array\r\n        if (skippedFields.indexOf(field) !== -1) {\r\n            continue;\r\n        }\r\n\r\n        g_form.setMandatory(fields[i], false);\r\n        g_form.setReadOnly(fields[i], true);\r\n\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Make all fields read only",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Make%20all%20fields%20read%20only",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Make%20all%20fields%20read%20only/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.214Z",
    "updatedAt": "2025-09-21T08:58:57.921Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 124,
    "type": "client_script",
    "name": "Major Incident Proposal",
    "description": "<h1Major Incident Proposal - Client Script & Script Include</h1 <pThis solution asks the users to propose an incident as a <strongMajor Incident</strong candidate. The process is initiated from the <strongIncident</strong form when the priority is set to <strong1 (Critical)</strong, and the system checks if the incident has already been proposed as a Major Incident. If not, the user is prompted...",
    "script": "// File: Client_Script.js\nfunction onSubmit() {\r\n    var priority = g_form.getValue('priority');\r\n\r\n    if (priority == '1') {\r\n        // is already a Major Incident\r\n        var gaCheck = new GlideAjax('CreateMajorIncident');\r\n        gaCheck.addParam('sysparm_name', 'isAlreadyMajorIncident');\r\n        gaCheck.addParam('sysparm_sysid', g_form.getUniqueValue());\r\n\r\n        var response = gaCheck.getXMLWait();\r\n        var isMajorIncident = response.documentElement.getAttribute('answer'); \r\n        \r\n        // not yet a Major Incident\r\n        if (isMajorIncident == 'false') {\r\n            var resp = confirm(getMessage('Please confirm that you would like to propose a Major Incident Candidate?'));\r\n\r\n            if (resp) {\r\n                // propose the Major Incident\r\n                var ga = new GlideAjax('CreateMajorIncident');\r\n                ga.addParam('sysparm_name', 'majorIncCreate');\r\n                ga.addParam('sysparm_sysid', g_form.getUniqueValue());\r\n\r\n                var majorIncidentResponse = ga.getXMLWait(); \r\n                var incidentNumber = majorIncidentResponse.documentElement.getAttribute('answer');\r\n\r\n                alert(\"Incident \" + incidentNumber + \" has been proposed as a Major Incident candidate.\");\r\n            } else {\r\n                // cancels\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true; // Allow if priority is not 1 or after processing\r\n}\n\n// File: Script_Include.js\nvar CreateMajorIncident = Class.create();\r\nCreateMajorIncident.prototype = Object.extendsObject(AbstractAjaxProcessor, {\r\n\r\n    majorIncCreate: function() {\r\n\r\n        var incSysId = this.getParameter('sysparm_sysid');\r\n\r\n        var ginc = new GlideRecord('incident');\r\n\r\n        if (ginc.get(incSysId)) {\r\n\r\n            ginc.major_incident_state = 'proposed';\r\n            ginc.proposed_by = gs.getUserID();\r\n            ginc.proposed_on = new GlideDateTime();\r\n            ginc.work_notes = \"Hello World! \" + new GlideDateTime();\r\n            ginc.update();\r\n\r\n            return ginc.number.toString();\r\n        }\r\n\r\n        return 'false';\r\n    },\r\n\r\n\r\n    isAlreadyMajorIncident: function() {\r\n        var incSysId = this.getParameter('sysparm_sysid');\r\n        var ginc = new GlideRecord('incident');\r\n\r\n        if (ginc.get(incSysId)) {\r\n            return ginc.major_incident_state == 'proposed' ? 'true' : 'false';\r\n        }\r\n\r\n        return 'false';\r\n    },\r\n\r\n    type: 'CreateMajorIncident'\r\n});",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Major Incident Proposal",
        "scriptFiles": [
          "Client_Script.js",
          "Script_Include.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Major%20Incident%20Proposal"
      }
    },
    "createdAt": "2025-09-20T08:42:18.210Z",
    "updatedAt": "2025-09-21T08:58:57.917Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 123,
    "type": "client_script",
    "name": "How to adjust the Date format within a client script to align with the User Date format",
    "description": "When getting a date from another table, it's usually in the format (YYYY-MM-DD). To display it in the user's preferred format on the client side, use the method below. If date is fetched from a query(like GlideAjax), date returned from query pass that date object into \"new Date()\" Example",
    "script": "var currentDateObj = new Date();\r\nvar currentDateUsr = formatDate(currentDateObj, g_user_date_format);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/How to adjust the Date format within a client script to align with the User Date format",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/How%20to%20adjust%20the%20Date%20format%20within%20a%20client%20script%20to%20align%20with%20the%20User%20Date%20format",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/How%20to%20adjust%20the%20Date%20format%20within%20a%20client%20script%20to%20align%20with%20the%20User%20Date%20format/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.206Z",
    "updatedAt": "2025-09-21T08:58:57.914Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 122,
    "type": "client_script",
    "name": "Hide Work Notes section",
    "description": "Client Script Client Script for hiding work notes section on incident form. In this example it is configured to hide work notes section, when incident is in state new, but you can adjust condition to fit your requirements. Example configuration of Client Script",
    "script": "function onLoad() {\r\n    //Script to hide work notes section, when incident is in state NEW\r\n\r\n    //Get incident state\r\n    var state = g_form.getValue('state');\r\n\r\n    //Check if incident is in state NEW (value = 1)\r\n    if (state == 1) {\r\n\r\n        //Hide work notes section \r\n        g_form.setSectionDisplay('notes', false);\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Hide Work Notes section",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Hide%20Work%20Notes%20section",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Hide%20Work%20Notes%20section/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.202Z",
    "updatedAt": "2025-09-21T08:58:57.910Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 121,
    "type": "client_script",
    "name": "g_form console access in workspace",
    "description": "Access gform instance inside Agent Workspace from DevTools Console When developing forms in ServiceNow it can be useful to try stuff out directly in the DevTools Console. In UI16 this was pretty straightforward because gform was available globally, Agent Workspace makes this a little bit more complicated.",
    "script": "function getGlideFormAW() {\r\n    document.getElementsByTagName(\"sn-workspace-content\")[0].shadowRoot.querySelectorAll(\"now-record-form-connected\")[0]\r\n\r\n    var firstContentChild = document.getElementsByTagName(\"sn-workspace-content\")[0].shadowRoot\r\n        .querySelectorAll(\".chrome-tab-panel.is-active\")[0].firstChild;\r\n\r\n    var snWorkspaceFormEl;\r\n    if (firstContentChild.tagName == \"NOW-RECORD-FORM-CONNECTED\") {\r\n        snWorkspaceFormEl = firstContentChild.shadowRoot.querySelectorAll(\".sn-workspace-form\")[0];\r\n    } else {\r\n        snWorkspaceFormEl = firstContentChild.shadowRoot.querySelectorAll(\"now-record-form-connected\")[0]\r\n            .shadowRoot.querySelectorAll(\".sn-workspace-form\")[0];\r\n    }\r\n    if (!snWorkspaceFormEl) throw \"Couldn't find sn-workspace-form\";\r\n\r\n    var reactInternalInstanceKey = Object.keys(snWorkspaceFormEl).find(function (objKey) {\r\n        if (objKey.indexOf(\"__reactInternalInstance$\") >= 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    return snWorkspaceFormEl[reactInternalInstanceKey].return.stateNode.props.glideEnvironment._gForm;\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/g_form console access in workspace",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/g_form%20console%20access%20in%20workspace",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/g_form%20console%20access%20in%20workspace/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.199Z",
    "updatedAt": "2025-09-21T08:58:57.907Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 120,
    "type": "client_script",
    "name": "Get Value from URL Parameter",
    "description": "Script that can be used in Client scripts to get URL parameter value. Isolate script should be false",
    "script": "//Isolate Script should be false\r\nfunction onLoad() {\r\n\r\n    var getUrlParameter = function(url, parameterName) {\r\n        return new URLSearchParams(url).get();\r\n    };\r\n    //should not use top.location, in UI16 this will \"break out\" of the iFrame and return the \"nav_to.do?uri=xyz\" URL.\r\n    var winURL = window.location.href;\r\n    console.log(getUrlParameter(winURL, \"<parameter_name>\"));\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Get Value from URL Parameter",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Get%20Value%20from%20URL%20Parameter",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Get%20Value%20from%20URL%20Parameter/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.195Z",
    "updatedAt": "2025-09-21T08:58:57.903Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 119,
    "type": "client_script",
    "name": "Get URL Parameters",
    "description": "Get URL Parameters in Global,Scoped Application for Record & Catalog Item Many times there is a need to grab parameters from URL. This could be required at table form load or catalog item load and either in Global scope or custom scope application when redirection happened. Given script will help you in achieving this: script.js",
    "script": "function onLoad() {\r\n    //Type appropriate comment here, and begin script below\r\n\r\n    if (typeof spModal != \"undefined\") { // For Service Portal\r\n        var url = top.location.href;\r\n        var value = new URLSearchParams(url).get(\"sys_id\"); //provide the parameter name\r\n        console.log(value);\r\n    } else { //For Native UI\r\n        var glideURL = new GlideURL();\r\n        glideURL.setFromCurrent();\r\n        var id = glideURL.getParam(\"sysparm_id\"); // provide the parameter name\r\n        console.log(id);\r\n    }\r\n}",
    "metadata": {
      "application": "for",
      "table": "form",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Get URL Parameters",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Get%20URL%20Parameters",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Get%20URL%20Parameters/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.192Z",
    "updatedAt": "2025-09-21T08:58:57.899Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 118,
    "type": "client_script",
    "name": "Get Field Value From List on Client",
    "description": "Use Case Let;s consider a scenario. Some validation logic needs to be executed on click of a list banner button. The field values to be validated are present right on the screen, so why bother writing a GlideAjax code + client-callable Script Include to call the server and run the same validation on the server. Client-side  API provides the  method to fetch visible cell values from the list. Usage",
    "script": "/* g_list.getCell(rowSysId, <field_name>) - Accepts two parameters\r\n * recordSysID (to identify the row) - For example: 23d7584c977a611056e8b3e6f053af6b\r\n * field_name - name of the field whose value is to be fetched\r\n */\r\n\r\nvar recSysId = g_list.getChecked(); // 23d7584c977a611056e8b3e6f053af6b - Can be modified to pass Sys ID by other means\r\nvar fieldName = 'short_description'; // Modify as per requirement\r\n\r\nvar cellVal = g_list.getCell(recSysId, fieldName).innerText;\r\n\r\ng_GlideUI.addOutputMessage({\r\n    msg: cellVal,\r\n    type: 'success',\r\n    preventDuplicates: true\r\n}); // Using this fancy notification trick because g_form is not supported on list view",
    "metadata": {
      "application": "Global",
      "table": "CellElement",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Get Field Value From List on Client",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Get%20Field%20Value%20From%20List%20on%20Client",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Get%20Field%20Value%20From%20List%20on%20Client/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.188Z",
    "updatedAt": "2025-09-21T08:58:57.895Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 117,
    "type": "client_script",
    "name": "Field Validation",
    "description": "Field valiation for Special Characters on any table With this onChange Client script you can validate if there are any special characters present in the input given by user in a particular field and show an error message below the field and clear the field value. Although we have various methods to do this, it is much easier and you can customize your error message.",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n\r\n    //In the below regex, you can add or remove any special characters as per your requirement\r\n    var special_chars = /[~@|$^<>\\*+=;?`')[\\]]/;   \r\n\r\n    if (special_chars.test(newValue)) {\r\n        g_form.clearValue('<give your field name for which you are validating>');\r\n        g_form.showErrorBox('<give your field name for which you are validating>','Special Characters are not allowed');  \r\n    }\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "table": "With",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Field Validation",
        "scriptFiles": [
          "specialcharacter.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Field%20Validation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Field%20Validation/specialcharacter.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.185Z",
    "updatedAt": "2025-09-21T08:58:57.892Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 116,
    "type": "client_script",
    "name": "Field Placeholder",
    "description": "Hint that appears inside an input field to indicate the type of data the user should enter. It is typically shown in a lighter font colour and disappears once the user starts typing. This helps guide users by providing an example or context without taking up additional space on the form.",
    "script": "function onLoad() {\r\n   //Type appropriate comment here, and begin script below\r\n   var shortDescription = g_form.getControl(\"short_description\");\r\n   shortDescription.placeholder = \"Please give the issue details here\";\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Field Placeholder",
        "scriptFiles": [
          "fieldplaceholder.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Field%20Placeholder",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Field%20Placeholder/fieldplaceholder.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.181Z",
    "updatedAt": "2025-09-21T08:58:57.888Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 115,
    "type": "client_script",
    "name": "Expanding Info Message",
    "description": "This is an expanding info message. It can even run a script when an element is clicked.",
    "script": "function onLoad() {\r\n    var message = '';\r\n\r\n    message += 'This is an expanding info message. It can even run code! Click \"Show more\" to see!';\r\n    message += '<div>';\r\n    message += '<p><a href=\"#\" onclick=\"javascript: jQuery(this.parentNode).next().toggle(200);\">Show more</a></p>';\r\n    message += '<div style=\"display: none;\">';\r\n    message += '<ul style=\"list-style: none\">';\r\n    message += '<li>This is the expanded info in the message.</li>';\r\n    message += '<li>You can include any details you like here, including info retreived from a script like the sys_id of the current record: ' + g_form.getUniqueValue() + '</li>';\r\n    message += '</ul>';\r\n    message += '<p>You can even run a script when an element is clicked <a href=\"#\" onclick=\"javascript: alert(\\'See?\\');\">like this</a>. You just have to escape your code in the HTML.</p>';\r\n    message += '</div>';\r\n    message += '</div>';\r\n\r\n    g_form.addInfoMessage(message);\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Expanding Info Message",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Expanding%20Info%20Message",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Expanding%20Info%20Message/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.178Z",
    "updatedAt": "2025-09-21T08:58:57.885Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 114,
    "type": "client_script",
    "name": "End Date can't be before Start Date",
    "description": "This script is for an onChange client script This is using an example where you have two date variables and need to ensure the user does not choose an end date that's before the start date 1. replace 'startdate' in the script with your actual start date field name",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading || newValue == '') {\r\n        return;\r\n    }\r\n    var sDate = g_form.getValue('start_date'); //this gets the value from your start date field\r\n\tif (sDate == '') { //if the start date hasn't been populated then clear the end-date and inform user to please choose a stating date first\r\n\t\tg_form.clearValue('end_date');\r\n\t\tg_form.showFieldMsg('end_date', \"Please choose a starting date first\");\r\n\t}\r\n    if (newValue < sDate) { //if the end date is before the start date, clear the field value, and inform the user that the end date cannot be before the start date\r\n        g_form.clearValue('end_date');\r\n\t\tg_form.showErrorBox('end_date', \"End date cannot be before the Start date\");\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/End Date can't be before Start Date",
        "scriptFiles": [
          "code.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/End%20Date%20can't%20be%20before%20Start%20Date",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/End%20Date%20can't%20be%20before%20Start%20Date/code.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.174Z",
    "updatedAt": "2025-09-21T08:58:57.881Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 113,
    "type": "client_script",
    "name": "Dynamic UI Actions",
    "description": "Dynamic Visible UI Actions This code snippet can be used to dynamically change the visibility of an UI action via a Client Script or UI Policy. As this happens on the client, it happens without the need of saving/reloading the form like you'd have to do if controlled via the UI Action's condition field (server-side).",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n\r\n    // Adjust condition to your needs\r\n    if (newValue === \"true\") { \r\n        $$('button[data-action-name^=action_name').each(function(e) { // replace action_name with the action name of the UI Action\r\n            e.hide();\r\n        });\r\n    } else {\r\n        $$('button[data-action-name^=action_name').each(function(e) { // replace action_name with the action name of the UI Action\r\n            e.show();\r\n        });\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Dynamic UI Actions",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Dynamic%20UI%20Actions",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Dynamic%20UI%20Actions/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.170Z",
    "updatedAt": "2025-09-21T08:58:57.878Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 112,
    "type": "client_script",
    "name": "Display Section on State",
    "description": "Display Section Based on State Overview This client script dynamically displays specific sections on a form based on the selected State field value. It improves user experience by hiding or showing relevant sections as needed.",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n   if (isLoading || newValue === '') {\r\n      return;\r\n   }\r\n\r\n   if (newValue == 6)  //State on which section needs to be displayed\r\n\t\t g_form.setSectionDisplay('resolution_information', true);  //Section which needs to be display\r\n\telse\r\n\t\tg_form.setSectionDisplay('resolution_information', false);   \r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Display Section on State",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Display%20Section%20on%20State",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Display%20Section%20on%20State/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.167Z",
    "updatedAt": "2025-09-21T08:58:57.874Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 111,
    "type": "client_script",
    "name": "Control Form Behaviour from Reference Lookup",
    "description": "Use Case Clicking the lookup icon on a reference field opens the list view for the referenced table. On clicking the 'New' button to create new records on the reference table, 'Default' form view for that table is displayed. There might be a requirement to control the form's behaviour when the new record form is opened from a designated field on a specific table. Usage",
    "script": "var url = new GlideURL();\r\nurl.setFromCurrent();\r\nvar source = url.getParam('sysparm_nameofstack'); // Always 'reflist' when opening from Reference Lookup Icon\r\nvar field = url.getParam('sysparm_target'); //Dot-walked path to the field (Example: cmdb_ci field on change_request form - change_request.cmdb_ci)\r\n\r\nif (source === 'reflist' && field === 'change_request.cmdb_ci') {\r\n\t// Add form control logic here\r\n\tg_form.setMandatory('name', true);\r\n}",
    "metadata": {
      "application": "Global",
      "table": ".",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Control Form Behaviour from Reference Lookup",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Control%20Form%20Behaviour%20from%20Reference%20Lookup",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Control%20Form%20Behaviour%20from%20Reference%20Lookup/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.163Z",
    "updatedAt": "2025-09-21T08:58:57.870Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 110,
    "type": "client_script",
    "name": "Conditional Form Section based on Role",
    "description": "Conditional Form Sections Based on User Role Overview This client script dynamically shows or hides specific sections of a form based on the logged-in userâ€™s role. It ensures that only authorized users, such as managers, can view and interact with sensitive sections (e.g., budget approvals).",
    "script": "function onLoad() {\r\n  var userHasRole = g_user.hasRole('case_manager'); // Check if user has specific role\r\n\r\n  if (userHasRole) {\r\n    g_form.setSectionDisplay('budget_approval', true);  // Show section if user has specific role\r\n  } else {\r\n    g_form.setSectionDisplay('budget_approval', false);\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Conditional Form Section based on Role",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Conditional%20Form%20Section%20based%20on%20Role",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Conditional%20Form%20Section%20based%20on%20Role/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.159Z",
    "updatedAt": "2025-09-21T08:58:57.866Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 109,
    "type": "client_script",
    "name": "Client script using getMessage() function without filling Messages field",
    "description": "Client scripts using getMessage() function without filling Messages field Problem scenario : Developers while writing a client script uses getMessage() function but there are no messages preloaded in the 'Messages' field in client script form",
    "script": "function onSubmit() {\r\n   \r\n\tvar messages = g_form.getValue('messages');\r\n\tvar script = g_form.getValue('script');\r\n\tvar count = 0;\r\n\tif(messages == '' && script.includes('getMessage'))\r\n\t\t{\r\n\t\t\tg_form.addErrorMessage(\"Please add any message in the Messages field before using getMessage() function\");\r\n\t\t\treturn false;\r\n\t\t}\r\n   \r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Client script using getMessage() function without filling Messages field",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Client%20script%20using%20getMessage()%20function%20without%20filling%20Messages%20field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Client%20script%20using%20getMessage()%20function%20without%20filling%20Messages%20field/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.155Z",
    "updatedAt": "2025-09-21T08:58:57.862Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 108,
    "type": "client_script",
    "name": "Check all mandatory fields using mandatoryCheck()",
    "description": "Client Script Client script which is showing how to use gform.mandatoryCheck() function, which allows to easily detect if any of mandatory field is not filled on record. Example configuration",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n\r\n    //Client script, which shows how to use mandatoryCheck() function\r\n    //mandatoryCheck() allows validating if all mandatory fields are filled\r\n    //If all mandatory fields are filled it return true, otherwise it returns false\r\n\r\n    //Check if all mandatory fields are filled on record\r\n    if (!g_form.mandatoryCheck()) {\r\n\r\n        //Example action when not all mandatory fields are filled - display message and remove state field\r\n        var missing = g_form.getMissingFields();\r\n        g_form.addInfoMessage(\"State field removed, because not all mandatory fields are filled: \" + missing);\r\n        g_form.setDisplay('state', false);\r\n    }\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Check all mandatory fields using mandatoryCheck()",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Check%20all%20mandatory%20fields%20using%20mandatoryCheck()",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Check%20all%20mandatory%20fields%20using%20mandatoryCheck()/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.151Z",
    "updatedAt": "2025-09-21T08:58:57.858Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 107,
    "type": "client_script",
    "name": "Change Label of Field",
    "description": "Change Label of Field â€¢ Modify field labels dynamically in the ServiceNow platform. â€¢ Change labels through the UI form designer or through client/server-side scripts.",
    "script": "function onLoad() {\r\n    //Type appropriate comment here, and begin script below\r\n    if (g_form.getValue('priority') == '1') {\r\n        g_form.setLabelOf('description', 'Please Explain Briefly');\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Change Label of Field",
        "scriptFiles": [
          "Change Label of Field.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Change%20Label%20of%20Field",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Change%20Label%20of%20Field/Change%20Label%20of%20Field.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.147Z",
    "updatedAt": "2025-09-21T08:58:57.854Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 3,
    "type": "client_script",
    "name": "Auto-populate watch_list based on company",
    "description": "Table: Incident Type: onChange field: callerid",
    "script": "function onChange(control, oldValue, newValue, isLoading) {\r\n    if (isLoading) {\r\n        return;\r\n    }\r\n    var callerID = g_form.getReference('caller_id', getUserCompany);\r\n}\r\n\r\nfunction getUserCompany(callerID) {\r\n    switch (callerID.company) {\r\n        case 'company_1_sys_id':\r\n            g_form.setValue('watch_list', 'PEOPLE_TO_ADD');\r\n            //PEOPLE_TO_ADD is a comma separated list of user sys_id\r\n            //and external email addresses\r\n            break;\r\n        case 'company_2_sys_id':\r\n            g_form.setValue('watch_list', 'PEOPLE_TO_ADD');\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Incident",
      "type": "onChange",
      "active": true,
      "field": "caller_id",
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Auto-populate watch_list based on company",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Auto-populate%20watch_list%20based%20on%20company",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Auto-populate%20watch_list%20based%20on%20company/script.js"
      }
    },
    "createdAt": "2025-09-19T20:19:49.587Z",
    "updatedAt": "2025-09-21T08:58:57.851Z",
    "owner": {
      "email": "simenstaabyknudsen@gmail.com"
    },
    "canManage": false
  },
  {
    "id": 106,
    "type": "client_script",
    "name": "Auto-Populate Short Discription",
    "description": "Auto-Populate Short Description Client Script Overview This client script is designed to enhance the user experience in ServiceNow by automatically populating the 'Short Description' field when a user selects a category for an incident or request. It simplifies the data entry process, ensures consistency in short descriptions, and saves time for users.",
    "script": "// Client Script to Auto-Populate Short Description based on Category\r\n\r\nfunction onChangeCategory() {\r\n    var categoryField = g_form.getValue('category'); // Get the selected category\r\n    var shortDescriptionField = g_form.getValue('short_description'); // Get the Short Description field\r\n\r\n    // Define mappings for categories and corresponding short descriptions\r\n    var categoryToShortDescription = {\r\n        'Hardware': 'Hardware Issue - ',\r\n        'Software': 'Software Issue - ',\r\n        'Network': 'Network Issue - ',\r\n        'Other': 'Other Issue - '\r\n    };\r\n\r\n    // Update Short Description based on the selected category\r\n    if (categoryToShortDescription.hasOwnProperty(categoryField)) {\r\n        var newShortDescription = categoryToShortDescription[categoryField] + shortDescriptionField;\r\n        g_form.setValue('short_description', newShortDescription);\r\n    }\r\n}\r\n\r\n// Attach the onChangeCategory function to the 'category' field\r\ng_form.observe('change', 'category', onChangeCategory);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Auto-Populate Short Discription",
        "scriptFiles": [
          "autoPopulateSD.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Auto-Populate%20Short%20Discription",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Auto-Populate%20Short%20Discription/autoPopulateSD.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.129Z",
    "updatedAt": "2025-09-21T08:58:57.846Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 105,
    "type": "client_script",
    "name": "Adding Placeholder on Resolution Notes",
    "description": "Adding Placeholder Text in Resolution Notes To maintain consistency and ensure specific information is captured in resolution notes, process owners may require fulfillers to follow a predefined format when resolving tickets. By adding placeholder text in the resolution notes, fulfillers are reminded of the required information(e.g., Root cause, Steps taken, Resolution provided), reducing the ri...",
    "script": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\r\n    if (isLoading || newValue === '') {\r\n        return;\r\n    }\r\n    var res = g_form.getElement('close_notes');\r\n    if (newValue == 6)\r\n        res.placeholder = \"1. Root Cause\" + \"\\n\" + \"2. Steps taken\" + \"\\n\" + \"3. Resolution provided\"; //Placeholder text as required\r\n    else\r\n        res.placeholder = \"\";\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Adding Placeholder on Resolution Notes",
        "scriptFiles": [
          "script.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Adding%20Placeholder%20on%20Resolution%20Notes",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Adding%20Placeholder%20on%20Resolution%20Notes/script.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.124Z",
    "updatedAt": "2025-09-21T08:58:57.842Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 104,
    "type": "client_script",
    "name": "Add Image to Field Based on Company",
    "description": "Add Image to Field Based on Company From the User Profile get the Company associated to the User using a Display Business Rule and putting the value in the scratchpad. After that use the scratchpad value in the Client Script to check the company name and then associate the image accordingly. You would need to add all your images to the ServiceNow instance first with the correct names.",
    "script": "// File: AddImageToFieldBasedOnCompany.js\nfunction onLoad() {\r\n    //Type appropriate comment here, and begin script below\r\n\t\r\n\t//Get element of the field\r\n    var requestedForLabel = $('element.sc_req_item.request.requested_for');\r\n\tvar company = g_scratchpad.company;\r\n\r\n\t//Set the Position of the image\r\n\tvar bgPosition = \"5% 45%\";\r\n\t\r\n\tvar image = '';\r\n\t\r\n\t//Set the image based on the Company\r\n\tswitch (company) {\r\n            case 'company 1':\r\n                image = 'url(company1.png)';\r\n                break;\r\n            case 'company 2':\r\n                image = 'url(company2.png)';\r\n                break;\r\n            case 'company 3':\r\n                image = 'url(company3.png)';\r\n                break;\r\n            default:\r\n                image = '';\r\n        }\r\n\t\r\n\t//Update the Field Label\r\n    requestedForLabel.down('label').setStyle({\r\n        backgroundImage: image,\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: bgPosition,\r\n        paddingLeft: '30px'\r\n    });\r\n\r\n}\n\n// File: SetCompanyScratchPadValue.js\n(function executeRule(current, previous /*null when async*/) {\r\n\r\n\t// Set the Scratchpad value for Company which would be used in the Client Script\r\n\tg_scratchpad.company = current.request.requested_for.company.getDisplayValue();\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Add Image to Field Based on Company",
        "scriptFiles": [
          "AddImageToFieldBasedOnCompany.js",
          "SetCompanyScratchPadValue.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Add%20Image%20to%20Field%20Based%20on%20Company"
      }
    },
    "createdAt": "2025-09-20T08:42:18.119Z",
    "updatedAt": "2025-09-21T08:58:57.838Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 103,
    "type": "client_script",
    "name": "Add Field Decoration",
    "description": "Client Script - Add Field Decoration A client script that added field decoration. Usage",
    "script": "function onLoad() {\r\n    // Adding Field Decorators\r\n    g_form.addDecoration(\"caller_id\", \"icon-user-profile\", \"The Requester\");\r\n}",
    "metadata": {
      "application": "Global",
      "table": "Unknown",
      "type": "Unspecified",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Client Scripts/Add Field Decoration",
        "scriptFiles": [
          "Add Field Decoration.js"
        ],
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Client%20Scripts/Add%20Field%20Decoration",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Client%20Scripts/Add%20Field%20Decoration/Add%20Field%20Decoration.js"
      }
    },
    "createdAt": "2025-09-20T08:42:18.097Z",
    "updatedAt": "2025-09-21T08:58:57.812Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 102,
    "type": "business_rule",
    "name": "Warn for changed OOTB artifacts",
    "description": "Description Changing OOTB artifacts like Script Includes or Business Rules is never a good idea, as you will get so called skipped records in the next upgrade/patch you have to care about. Otherwise, you can get into big trouble and risk broken functionalities as well as unpredictable behavior. But many developers are not aware about the consequences when playing around with OOTB artifacts or h...",
    "script": "(function executeRule(current) {\r\n\r\n\tvar _strCurrentTable = String(current.getTableName() || '');\r\n\tvar _strCurrentURL   = String(gs.action.getGlideURI() || '');\r\n\r\n\tif (_strCurrentTable.length === 0) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t//only continue with form views in the Classic UI\r\n\tif (!_strCurrentURL.startsWith(_strCurrentTable + '.do')) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t//determine the unique artifact ID\r\n\tvar _strUpdateName = \r\n\t\tString(\r\n\t\t\tcurrent.getValue('sys_update_name') || \r\n\t\t\tnew GlideUpdateManager2().getUpdateName(current) ||\r\n\t\t\t''\r\n\t\t);\r\n\r\n\t//Is this artifact tracked with versions?\r\n\tif (_strUpdateName.length > 0) {\r\n\t\tvar _grUpdateXml = new GlideRecord('sys_update_xml');\r\n\r\n\t\t//query all versions\r\n\t\t_grUpdateXml.addQuery('name', _strUpdateName);\r\n\t\t_grUpdateXml.orderByDesc('sys_updated_on');\r\n\t\t_grUpdateXml.setLimit(1);\r\n\t\t_grUpdateXml.query();\r\n\r\n\t\t//was the artifact changed and has a baseline version available?\r\n\t\tif (_grUpdateXml.next() && !_grUpdateXml.replace_on_upgrade) {\t\t\r\n\t\t\tvar _isOOTB    = false;\r\n\t\t\tvar _grVersion = new GlideRecord('sys_update_version');\r\n\r\n\t\t\t_grVersion.addQuery('name', _strUpdateName);\r\n\t\t\t_grVersion.orderByDesc('sys_recorded_at');\r\n\t\t\t_grVersion.query();\r\n\r\n\t\t\t//iterate the versions to check whether this is an OOTB artifact\r\n\t\t\twhile (!_isOOTB && _grVersion.next()) {\r\n\t\t\t\tvar _strSource = _grVersion.getValue('source_table') || '';\r\n\r\n\t\t\t\t_isOOTB = _strSource === 'sys_upgrade_history' || _strSource === 'sys_store_app';\r\n\t\t\t}\r\n\r\n\t\t\tif (_isOOTB) {\r\n\t\t\t\tgs.addErrorMessage(\r\n\t\t\t\t\t'This OOTB artifact was changed and thus will create an skipped record during the next ' +\r\n\t\t\t\t\t'upgrade!<br><br>In case the change was done accidentally, you should revert to the <a href=\"' + \r\n          _grVersion.getLink(true) + '\" target=\"_blank\">most recent OOTB version.</a>'\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n})(current);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Warn for changed OOTB artifacts",
        "scriptFile": "warn_for_changed_ootb_artifacts.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Warn%20for%20changed%20OOTB%20artifacts",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Warn%20for%20changed%20OOTB%20artifacts/warn_for_changed_ootb_artifacts.js"
      },
      "when": "display",
      "table": "sys_metadata"
    },
    "createdAt": "2025-09-20T06:44:53.696Z",
    "updatedAt": "2025-09-20T06:49:05.871Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 101,
    "type": "business_rule",
    "name": "Validate JSON Property",
    "description": "Usage : Executes a business rule to verify if the JSON object saved in the property is a valid JSON. Steps for Creating the Business Rule: Navigate to Business Rules:",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    // This BR will check if the property has a valid JSON object and will only allow save if the JSON is syntactically correct\r\n    try {\r\n        var regex =/\\s*(['\"])([^'\"]+)\\1\\s*[:;]\\s*(?:(['\"])([^'\"]*)\\3|true|false|null|\\d+)(?:\\s*[;,]\\s*(['\"])([^'\"]+)\\5\\s*[:;]\\s*(?:(['\"])([^'\"]*)\\7|true|false|null|\\d+))*?\\s*\\}|\\[\\{(?:\\s*(['\"])([^'\"]+)\\9\\s*[:;]\\s*(?:(['\"])([^'\"]*)\\11|true|false|null|\\d+)(?:\\s*[;,]\\s*(['\"])([^'\"]+)\\13\\s*[:;]\\s*(?:(['\"])([^'\"]*)\\15|true|false|null|\\d+))*?\\s*\\}\\s*(?:[;,]\\s*(?:\\{(?:\\s*(['\"])([^'\"]+)\\17\\s*[:;]\\s*(?:(['\"])([^'\"]*)\\19|true|false|null|\\d+)(?:\\s*[;,]\\s*(['\"])([^'\"]+)\\21\\s*[:;]\\s*(?:(['\"])([^'\"]*)\\23|true|false|null|\\d+))*?\\s*\\})\\s*)*)*\\s*\\])$/;\r\n\t\t\r\n        if (regex.test(current.value)) {\r\n            JSON.parse(current.value);\r\n        }\r\n    } catch (ex) {\r\n        gs.addErrorMessage(\"Invalid JSON format\");\r\n        current.setAbortAction(true);\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Validate JSON Property",
        "scriptFile": "jsonPropertyValidator.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Validate%20JSON%20Property",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Validate%20JSON%20Property/jsonPropertyValidator.js"
      },
      "when": "before",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.693Z",
    "updatedAt": "2025-09-20T06:49:05.867Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 100,
    "type": "business_rule",
    "name": "Validate Email on Import",
    "description": "This business rule can be implemented on any table which is having email type field and we want to validate the email when we are using the import feature from the list view to upload some data via spreadsheet. This business rule can be used to validate the email address when",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    //[u_email_address],this field backend value needs to be replaced with the email field in which you want to implement the business rule.\r\n    //Example: In the [sys_user] table, the field will be 'email'\r\n        \r\n    var getEmail = current.u_email_address;\r\n\r\n    if (/\\s/.test(getEmail)) {\r\n        current.u_email_address = getEmail.trim().replace(/\\s/g, '');\r\n        getEmail.update();\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Validate Email on Import",
        "scriptFile": "validateEmailOnImport.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Validate%20Email%20on%20Import",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Validate%20Email%20on%20Import/validateEmailOnImport.js"
      },
      "when": "before",
      "table": "which"
    },
    "createdAt": "2025-09-20T06:44:53.689Z",
    "updatedAt": "2025-09-20T06:49:05.864Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 99,
    "type": "business_rule",
    "name": "User Profile Field Validation",
    "description": "Overview This JavaScript code snippet is designed to validate user profile fields in ServiceNow before submission. It is particularly useful for ServiceNow developers looking to implement robust data validation mechanisms in user profiles. How It Works",
    "script": "// Script for validating user profile fields on submit\r\n(function executeRule(current, previous /*null when async*/) {\r\n    var phoneNumberPattern = /^[0-9]{10}$/; // Modify as needed\r\n    var emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n    // Validate phone number\r\n    if (!phoneNumberPattern.test(current.phone)) {\r\n        gs.addErrorMessage(\"Phone number must be a 10-digit number.\");\r\n        current.setAbortAction(true);\r\n    }\r\n    \r\n    // Validate email format\r\n    if (!emailPattern.test(current.email)) {\r\n        gs.addErrorMessage(\"Invalid email format.\");\r\n        current.setAbortAction(true);\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/User Profile Field Validation",
        "scriptFile": "userProfileValidation.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/User%20Profile%20Field%20Validation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/User%20Profile%20Field%20Validation/userProfileValidation.js"
      },
      "when": "before",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.686Z",
    "updatedAt": "2025-09-20T06:49:05.860Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 98,
    "type": "business_rule",
    "name": "User Activity Log Tracking",
    "description": "Overview This script logs specific user actions (e.g: record updates and approvals) in ServiceNow into a custom table uuseractivitylog. This provides audit capabilities and allowing developers to track user actions for compliance or analytics.",
    "script": "// Script to log user actions (updates, approvals) into a custom table\r\n(function executeRule(current, previous /*null when async*/) {\r\n    // Check if key fields are modified (customize as needed)\r\n    if (current.state.changes() || current.approval.changes()) {\r\n        var logEntry = new GlideRecord('u_user_activity_log');\r\n        logEntry.initialize();\r\n\r\n        // Populate log details\r\n        logEntry.u_user = gs.getUserID();\r\n        logEntry.u_action = current.state.changes() ? \"State Change\" : \"Approval Change\";\r\n        logEntry.u_record_id = current.sys_id;\r\n        logEntry.u_record_table = current.getTableName();\r\n        logEntry.u_description = \"User \" + gs.getUserDisplayName() + \" updated \" + logEntry.u_action;\r\n\r\n        logEntry.insert();\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/User Activity Log Tracking",
        "scriptFile": "userActivityLog.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/User%20Activity%20Log%20Tracking",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/User%20Activity%20Log%20Tracking/userActivityLog.js"
      },
      "table": "u_user_activity_log"
    },
    "createdAt": "2025-09-20T06:44:53.682Z",
    "updatedAt": "2025-09-20T06:49:05.847Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 97,
    "type": "business_rule",
    "name": "UpdateFavouritedKnowledgeArticleWhenItIsUpgradedToNewVersion",
    "description": "Problem Statement When a knowledge article saved in a userâ€™s favorites is updated to a new version, the favorites section continues to display the older version, leading to potential misinformation and inefficiencies. To address this, a solution has been implemented that automatically updates the knowledge articles in users' favorites to the latest version whenever a new one is published. This...",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\nvar firstKbSysId = \"\"; // Store the sys_id of the first KB article\r\nvar secondKbSysId = \"\"; // Store the sys_id of the second KB article\r\n\r\n// Query the kb_knowledge table for articles with the same number as the current record, ordered by version in descending order\r\nvar kbRecord = new GlideRecord(\"kb_knowledge\");\r\nkbRecord.addEncodedQuery(\"numberSTARTSWITH\" + current.number); // Filter based on KB number\r\nkbRecord.orderByDesc(\"version\"); // Order by version in descending order\r\nkbRecord.setLimit(2); // Limit to 2 records (first and second version)\r\nkbRecord.query();\r\n\r\nvar count = 0;\r\nwhile (kbRecord.next()) {\r\n    count++;\r\n    if (count == 1) {\r\n        // Get the sys_id of the first KB article (latest version)\r\n        firstKbSysId = kbRecord.getValue(\"sys_id\");\r\n    }\r\n    if (count == 2) {\r\n        // Get the version number and sys_id of the second KB article (previous version)\r\n        secondVersionNumber = kbRecord.getValue(\"version\");\r\n        secondKbSysId = kbRecord.getValue(\"sys_id\");\r\n        break; // Stop the loop after fetching the second record\r\n    }\r\n}\r\n\r\n// Get the instance URL from system properties\r\nvar instanceURL = gs.getProperty('glide.servlet.uri');\r\n\r\n// Query the sys_ui_bookmark table to check if a bookmark exists with a URL containing the second KB article's sys_id\r\nvar bookmarkRecord = new GlideRecord(\"sys_ui_bookmark\");\r\nbookmarkRecord.addEncodedQuery(\"urlLIKE\" + secondKbSysId); // Filter for URLs containing the second KB sys_id\r\nbookmarkRecord.query();\r\n\r\n\r\nif (bookmarkRecord.next()) {\r\n    // If a bookmark is found, update the URL to point to the first KB article (latest version)\r\n    var newUrl = instanceURL + \"kb_knowledge.do?sys_id=\" + firstKbSysId +\r\n                 \"&sysparm_record_target=kb_knowledge&sysparm_record_row=2\" +\r\n                 \"&sysparm_record_rows=5&sysparm_record_list=numberSTARTSWITHKB99999999%5EORDERBYDESCversion\";\r\n    \r\n    // Set the new URL in the bookmark record\r\n    bookmarkRecord.setValue('url', newUrl);\r\n    \r\n    // Update the bookmark record\r\n    bookmarkRecord.update(); \r\n}\r\n\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/UpdateFavouritedKnowledgeArticleWhenItIsUpgradedToNewVersion",
        "scriptFile": "update_favourited_knowledge_artice.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/UpdateFavouritedKnowledgeArticleWhenItIsUpgradedToNewVersion",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/UpdateFavouritedKnowledgeArticleWhenItIsUpgradedToNewVersion/update_favourited_knowledge_artice.js"
      },
      "when": "after",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.679Z",
    "updatedAt": "2025-09-20T06:49:05.843Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 96,
    "type": "business_rule",
    "name": "Update worknotes of Ptask to parent Problem record",
    "description": "If user update work notes of problem task then it should update the same worknotes in parent problem record as well with highlighting problem task number. this business rule run after updation when worknote changes.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n\tvar workNotes = current.work_notes.getJournalEntry(1);\r\n\r\n\tvar parentProblem = new GlideRecord('problem'); \r\n\tparentProblem.get(current.getValue('problem')); //fetching current problem record from the problem record\r\n\tif(parentProblem) {\r\n\tparentProblem.work_notes = 'This worknote is updated in' + current.getValue('number') + '\\n' + workNotes; //updating worknotes from problem task to parent problem\r\n\t}\r\n\tparentProblem.update();\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Update worknotes of Ptask to parent Problem record",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Update%20worknotes%20of%20Ptask%20to%20parent%20Problem%20record",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Update%20worknotes%20of%20Ptask%20to%20parent%20Problem%20record/script.js"
      },
      "when": "after"
    },
    "createdAt": "2025-09-20T06:44:53.675Z",
    "updatedAt": "2025-09-20T06:49:05.839Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 95,
    "type": "business_rule",
    "name": "Update Locked Out field when Active field changes on User record",
    "description": "Use Case <br/ As per OOB, the \"Locked out\" field will be set to true if Active field set to false. But, the vice-versa case is not implemented. For example, If Employee is on long leave like maternity leave etc., then the user account will be set inactive temporarily and reactivated upon his/arrival to office. This causes, user account to be Active and Locked out as true which makes the login t...",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n\tcurrent.locked_out = !current.active; \r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Update Locked Out field when Active field changes on User record",
        "scriptFile": "update_locked_out_field.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Update%20Locked%20Out%20field%20when%20Active%20field%20changes%20on%20User%20record",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Update%20Locked%20Out%20field%20when%20Active%20field%20changes%20on%20User%20record/update_locked_out_field.js"
      },
      "when": "before",
      "table": "User"
    },
    "createdAt": "2025-09-20T06:44:53.672Z",
    "updatedAt": "2025-09-20T06:49:05.835Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 94,
    "type": "business_rule",
    "name": "Update Child Incident based on Parent Incident",
    "description": "UseCase : Update child incident when parent incident is updated. What do we want to achieve ? -- Real-time update of child incident based on parent incident update What fields do we want to update? -- We can dynamically configure it out in my script I have created an array called 'monitorFields' which will hold all the fields which should get updated when it gets updated on the parent record (I...",
    "script": "/**\r\n* @Description : On After Business Rule to Update Child incident based on parent incident\r\n* @monitorFields : Fields to be moniter to be updated on the child record\r\n* @changedFields : Fields which are getting updated\r\n* @changedMnitorFields : Array of monitor fields which got changed\r\n**/\r\n\r\n(function executeRule(current, previous /*null when async*/) {\r\n\r\n\tvar monitorFields = ['caller_id','state','impact','description']; // Fields to be moniter to be updated on the child record\r\n\t\r\n\tvar changedFields = []; // Fields which are getting updated\r\n\tfor (var x in current){\r\n\t\tif (current[x] != previous[x]) {\r\n\t\t\tchangedFields.push(x);\r\n\t\t}\r\n\t}\r\n\r\n\tvar changedMnitorFields = changedFields.filter(function (ele) { // Get the array of monitor fields which got changed\r\n\t\treturn monitorFields.indexOf(ele) != -1;\r\n\t});\r\n\r\n\tvar grIncident = new GlideRecord('incident');\r\n\tvar query = gs.getMessage('parent_incident={0}^active=true',[current.getUniqueValue()]); // Get all the Active child incident\r\n\tgrIncident.addEncodedQuery(query);\r\n\tgrIncident.query();\r\n\twhile (grIncident.next()) {\r\n\t\tchangedFields.forEach (function (ele) {\r\n\t\t\tgrIncident[ele] = current[ele];\r\n\t\t});\r\n\t\tgrIncident.update();\r\n\t} \r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Update Child Incident based on Parent Incident",
        "scriptFile": "Update_Child_Incident.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Update%20Child%20Incident%20based%20on%20Parent%20Incident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Update%20Child%20Incident%20based%20on%20Parent%20Incident/Update_Child_Incident.js"
      },
      "when": "after",
      "table": "Define"
    },
    "createdAt": "2025-09-20T06:44:53.668Z",
    "updatedAt": "2025-09-20T06:49:05.831Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 93,
    "type": "business_rule",
    "name": "Trigger Event when a member is added to a list",
    "description": "Scenario: You are wanting to send a notification to someone whenever they are added to a list of people. Application: Create an event in the event registry. Then, create a business rule. Set the name and table, advanced = true. When to run:",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n   \r\n    // Ensure the 'watch_list' (replace with applicable field name) field has been modified\r\n    if (current.watch_list != previous.watch_list) {\r\n        \r\n        // Split the current and previous watch lists into arrays\r\n        var newWatchers = current.watch_list.split(',');\r\n        var oldWatchers = previous.watch_list ? previous.watch_list.split(',') : [];\r\n\r\n        // Identify the newly added users to the watch list\r\n        var addedUsers = newWatchers.filter(function (user) {\r\n            return oldWatchers.indexOf(user) === -1;\r\n        });\r\n\r\n        // Loop through the added users to trigger the event for each\r\n        addedUsers.forEach(function(userID) {\r\n            var email;\r\n            var firstName;\r\n\r\n            // Try to get the user record by user ID (sys_id)\r\n            var userGr = new GlideRecord('sys_user');\r\n            if (userGr.get(userID)) {\r\n                firstName = userGr.first_name;\r\n                email = userGr.email;\r\n            } else {\r\n                \r\n                // If no user record is found, assume the userID is an email address\r\n                email = userID;\r\n                firstName = \"Team\";\r\n            }\r\n\r\n            // Trigger the event (replace \"new_member\") with the current case and user information\r\n            gs.eventQueue('new_member', current, email, firstName);\r\n        });\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Trigger Event when a member is added to a list",
        "scriptFile": "Trigger an event when user is added to field.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Trigger%20Event%20when%20a%20member%20is%20added%20to%20a%20list",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Trigger%20Event%20when%20a%20member%20is%20added%20to%20a%20list/Trigger%20an%20event%20when%20user%20is%20added%20to%20field.js"
      },
      "when": "after"
    },
    "createdAt": "2025-09-20T06:44:53.664Z",
    "updatedAt": "2025-09-20T06:49:05.827Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 92,
    "type": "business_rule",
    "name": "Transform Data from Attachment",
    "description": "Loading data into ServiceNow without needing admin privileges This BR script enables any user to process data from an excel file by attaching that file to a record. Pre-requisites:",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\t\r\n\r\n\tvar file_load_gr = new GlideRecord('name_of_table_to_house_loaded_file');\r\n\tfile_load_gr.addQuery('sys_id', current.sys_id);\r\n\tfile_load_gr.query();\r\n\tif (file_load_gr.next()) {\r\n\t\t//found the record\r\n\t} else {\r\n\t\treturn;\r\n\t}\r\n\r\n\t//update filename field on custom table with name of attached file\r\n\t\r\n\tvar attachment = new GlideSysAttachment();\r\n\tvar agr = attachment.getAttachments('name_of_table_to_house_loaded_file', file_load_gr.sys_id.toString());\r\n\tif (agr.next()) {\r\n\t\t//has an attachment and found it\r\n\t\tvar LoadFileName = agr.getValue('file_name');\r\n\r\n\t\tfile_load_gr.file_name = LoadFileName;\r\n\t\tfile_load_gr.update();\r\n\r\n\t\tvar importSetTableName = \"name_of_importset_table\";\r\n\t\tvar transformMapIDs = \"sys_id of transform map\"; //Amazon weekly DSP file load\r\n\t\tvar applicatonScope = \"name of application scope\"; //if creating this inside a specific scope or else Global\r\n\t\tvar dataSourceName = 'name_of_dataource';\r\n\t\tvar dataSourceID = null;\r\n\r\n\t\tvar dataSource = new GlideRecord('sys_data_source');\r\n\t\tdataSource.addQuery('name', dataSourceName);\r\n\t\tdataSource.query();\r\n\t\tif (dataSource.next()) {\r\n\t\t\tvar attach = new GlideSysAttachment();\r\n\t\t\tvar attachList = attach.getAttachments('sys_data_source', dataSource.sys_id.toString());\r\n\t\t\twhile (attachList.next()) {\r\n\t\t\t\tattach.deleteAttachment(attachList.getValue('sys_id'));\r\n\t\t\t}\r\n\t\t\tattach.copy('name_of_table_to_house_loaded_file', file_load_gr.sys_id.toString(), 'sys_data_source', dataSource.sys_id.toString());\r\n\t\t\tdataSourceID = dataSource.sys_id;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t// Schedule Load of Attachment\r\n\t\t// This Script Include below initiates the data load from the attachment and is provided by SN\r\n\t\t*/\r\n\r\n\t\tnew global.EmailFileImportUtil().scheduleImport(dataSourceID, transformMapIDs);\r\n\t} else {\r\n\t\treturn;\r\n\t}\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Transform Data from Attachment",
        "scriptFile": "data_xform_from_attachment.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Transform%20Data%20from%20Attachment",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Transform%20Data%20from%20Attachment/data_xform_from_attachment.js"
      },
      "table": "2."
    },
    "createdAt": "2025-09-20T06:44:53.660Z",
    "updatedAt": "2025-09-20T06:49:05.821Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 91,
    "type": "business_rule",
    "name": "Sync CI operational status with child related CIs",
    "description": "Sync CI operational status with child related CIs Use case : Whenever any configuration item becomes operational or non-operational, then all the CIs which are related to the current CI as a child in cmdbrelci table will also update their operational status info : This method is to achieve the above use-case just with business rule",
    "script": "var ciRel = new GlideRecord('cmdb_rel_ci');\r\nciRel.addQuery('parent', current.sys_id);\r\nciRel.query();\r\nwhile(ciRel.next())\r\n{\r\n  var ci = new GlideRecord('cmdb_ci');\r\n  ci.addQuery('sys_id', ciRel.child);\r\n  ci.query();\r\n  if(ci.next())\r\n  {\r\n    ci.operational_status = current.operational_status;\r\n    ci.update();\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Sync CI operational status with child related CIs",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Sync%20CI%20operational%20status%20with%20child%20related%20CIs",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Sync%20CI%20operational%20status%20with%20child%20related%20CIs/script.js"
      },
      "when": "async",
      "table": "cmdb_ci"
    },
    "createdAt": "2025-09-20T06:44:53.657Z",
    "updatedAt": "2025-09-20T06:49:05.817Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 90,
    "type": "business_rule",
    "name": "setting future week dates",
    "description": "So the script \"setting future week dates\" is used to set a date field on a record to a future value and use that to trigger reminders to end users or external customers. The script addresses the use case where the first reminder is expected to be sent 14 days from case create and the rest of the reminders every 3 days, and should be sent only on weekdays.",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n \r\n    var notdt = new GlideDateTime();\r\n\t\r\n// Setting next notification date (NND) to 14 days from record create date or any other state that your record begins with\r\n\t//change state value per your needs\r\n\r\n        if (current.state == 602) {                                             \r\n            notdt.addDaysLocalTime(14);\r\n            current.next_notification_date = notdt.getLocalDate();\r\n        } else if (current.state == 603 || current.state == 18) {               // In Progress, Awaiting Info  or any other state\r\n            /* Setting the first \"Next Notification Date\" (NND) to 3 weekdays from current day\r\n               If adding 3 days makes it a Sat we need to add two more days so that the NND is a Monday. \r\n\t       If adding 3 days makes it a Sat then add two more days so that the NND is a Monday. \r\n\t       If adding 3 days makes it a Sun then add 1 more day so that the NND is a Monday */\r\n            notdt.addDaysLocalTime(3);\r\n            if (notdt.getDayOfWeekLocalTime() == 6) {\r\n                notdt.addDaysLocalTime(2);\r\n                current.next_notification_date = notdt.getLocalDate();\r\n            } else {\r\n                if (notdt.getDayOfWeekLocalTime() == 7) {\r\n                    notdt.addDaysLocalTime(1);\r\n                    current.next_notification_date = notdt.getLocalDate();\r\n                } else {\r\n                    current.next_notification_date = notdt.getLocalDate();\r\n                }\r\n            }\r\n        }\r\n    \r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/setting future week dates",
        "scriptFile": "setting future dates.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/setting%20future%20week%20dates",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/setting%20future%20week%20dates/setting%20future%20dates.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.653Z",
    "updatedAt": "2025-09-20T06:49:05.811Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 89,
    "type": "business_rule",
    "name": "Set program business duration",
    "description": "OOTB the project records exclude weekends and public holidays when calculating the duration, whereas program does not exclude these things. This business rule and associated script include address this issue and ensure that the duration field on the program record are calculated in the same way as projects.",
    "script": "/***\r\n     * getProgramDate      - Finds min/max planned start for a program from child projects and program tasks and sets planned start/end on program\r\n     *\r\n     * @param recordGr     - gliderecord for passed in record that has link to a program\r\n     * @param pgmGetField  - the field that relates recordGr to a program\r\n     * @return             - NA\r\n     ***/\r\n    setProgramDates: function(recordGr, pgmGetField) {\r\n\r\n        var updated = false;\r\n        var pgmGr = new GlideRecord('pm_program');\r\n        pgmGr.get(recordGr.getValue(pgmGetField));\r\n\r\n        // find out of the program has child records that set it's planned start/end dates\r\n        if (pgmGr.getValue('sys_class_name') == 'pm_program') {\r\n            var children = this._isProgramChildren(pgmGr.getValue('sys_id'));\r\n        }\r\n\r\n        // find the minimum start date for the program\r\n        var minDate = this._getProgramDate(pgmGr.getValue('sys_id'), 'start_date');\r\n        if (minDate.compareTo(pgmGr.getDisplayValue('start_date')) != 0) { // the new task date is different to current program start\r\n            pgmGr.setDisplayValue('start_date', minDate);\r\n            updated = true;\r\n        }\r\n\r\n        // if it has changed then check if it is the lowest program date\r\n        var maxDate = this._getProgramDate(pgmGr.getValue('sys_id'), 'end_date');\r\n        if (maxDate.compareTo(pgmGr.getDisplayValue('end_date')) != 0) { // the new project end date is different to current program end date\r\n            pgmGr.setDisplayValue('end_date', maxDate);\r\n            updated = true;\r\n        }\r\n\r\n        // if min or max date has changed then update the program record\r\n        if (updated) {\r\n            // if the dates have changed, re-calculate the business duration and update program record\r\n            var pgmBusDuration = this._getBusinessDuration(pgmGr.start_date, pgmGr.end_date);\r\n            if (pgmBusDuration) {\r\n                pgmGr.business_duration = pgmBusDuration;\r\n            }\r\n            pgmGr.update();\r\n        }\r\n    },\r\n\r\n/***\r\n     * _getProgramDate - gets either min or max start/end date for a program\r\n     *\r\n     * @param pgmSysId - sys_id of a program record\r\n     * @param orderBy  - the field on the planned task table you want to order the records by - must be a date/time field\r\n     * @return         - glide date time of the order by field\r\n     ***/\r\n    _getProgramDate: function(pgmSysId, orderBy) {\r\n        var taskGr = new GlideRecord('planned_task');\r\n        taskGr.addEncodedQuery('sys_class_name=pm_project^ORsys_class_name=pm_program_task^parent=' + pgmSysId + '^ORtop_program=' + pgmSysId);\r\n        if (orderBy == 'start_date') {\r\n            taskGr.orderBy(orderBy);\r\n        } else taskGr.orderByDesc(orderBy);\r\n        taskGr.setLimit(1);\r\n        taskGr.query();\r\n        if (taskGr.next()) {\r\n            return taskGr.getDisplayValue(orderBy);\r\n        }\r\n    }, \r\n      \r\n /***\r\n     * _isProgramChildren - returns true if a program has child projects or program tasks\r\n     *\r\n     * @param programId - sys id of a program record\r\n     * @return          - duration in date time format from 1970\r\n     ***/\r\n    _isProgramChildren: function(programId) {\r\n\r\n        var taskGr = new GlideRecord('planned_task');\r\n        taskGr.getEncodedQuery('sys_class_name=pm_project^ORsys_class_name=pm_program_task^top_program=' + programId);\r\n        taskGr.setLimit(1);\r\n        taskGr.query();\r\n        if (taskGr.next()) {\r\n            return true;\r\n        } else return false;\r\n\r\n    },     \r\n      \r\n    /***\r\n     * _getBusinessDuration - uses min/max program dates to calculate business duration of a record\r\n     *\r\n     * @param startDate - date in glide date time format\r\n     * @param endDate   - date in glide date time format\r\n     * @return          - duration in date time format from 1970\r\n     ***/\r\n    _getBusinessDuration: function(startDate, endDate) {\r\n\r\n        var start = startDate.toString();\r\n        var end = endDate.toString();\r\n\r\n        /*excluding weekends date diff calculations*/\r\n        var dc = new DurationCalculator();\r\n        var sched = gs.getProperty('sn_hr_core.schedule_8_to_5_weekdays');\r\n        dc.setSchedule(sched);\r\n\r\n        // get the duration\r\n        var dur = Number(dc.calcScheduleDuration(start, end));\r\n        dur = Math.round(dur / 60 / 60 / 9);\r\n\r\n        // convert duration into days\r\n        var totalSeconds = dur * 86400;\r\n        var durationInMs = totalSeconds * 1000;\r\n        var gDuration = new GlideDuration(durationInMs);\r\n\r\n        return gDuration.getDurationValue();\r\n    },",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Set program business duration",
        "scriptFile": "PPM_Utils.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Set%20program%20business%20duration",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Set%20program%20business%20duration/PPM_Utils.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.649Z",
    "updatedAt": "2025-09-20T06:49:05.807Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 88,
    "type": "business_rule",
    "name": "SCTASK_to_RITM",
    "description": "This business rule script copies the additional comments from SCTASK to all associated RITM when additional comments are changed on the SCTASK.",
    "script": "/*\r\nTable: sc_task\r\nWhen to Run: after update\r\nCondition: current.comments.changes() && gs.isInteractive()\r\n*/\r\n\r\n//Script to update comments on RITM.\r\n\r\nvar ritmGr = new GlideRecord('sc_req_item');\r\nif(ritmGr.get(current.request_item.sys_id)){\r\n  ritmGr.comments = current.comments;\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/SCTASK_to_RITM",
        "scriptFile": "SCTASK_to_RITM.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/SCTASK_to_RITM",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/SCTASK_to_RITM/SCTASK_to_RITM.js"
      },
      "when": "after",
      "table": "sc_task"
    },
    "createdAt": "2025-09-20T06:44:53.645Z",
    "updatedAt": "2025-09-20T06:49:05.801Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 87,
    "type": "business_rule",
    "name": "RoleUpdateOnGroupManagerChange",
    "description": "This business rule will update the group manager role on group manager change on Insert, Update, Delete Steps: 1. When new manager is updated from for the current group",
    "script": "/**\r\n HACKTOBERFEST2022\r\n Description: Adds the role_delegator role to a user when made the manager of a group.\r\n              Removes the role when removed as manager of a group.\r\n**/ \r\n//On Change of CUrrent Group Manager\r\nif (current.operation() == \"delete\") { \r\n  removeRoleFromCurrentManager();\r\n} else {\r\n  processGroupManagerRole();\r\n}\r\n\r\nfunction removeRoleFromCurrentManager() {\r\n  var role = new GlideRecord(\"sys_user_role\");\r\n  if (!role.get(\"name\",\"role_delegator\")) {\r\n    gs.log(\"Cannot grant or remove role_delegator role because it does not exist\");\r\n    return;\r\n  }\r\n\r\n  var gr = newGlideRecord(\"sys_user_has_role\");\r\n  if (!current.manager.nil()) {\r\n    gr.initialize();\r\n    gr.addQuery(\"user\", current.manager);\r\n    gr.addQuery(\"role\", role.sys_id);\r\n    gr.addQuery(\"granted_by\", current.sys_id);\r\n    gr.query();\r\n    if (!gr.hasNext()) {\r\n      gs.log(current.manager.getDisplayValue() + \" did not have the role_delegator role for the \" + current.name + \" group - not removing\");\r\n    } else {\r\n      while (gr.next()) {\r\n        gr.deleteRecord();\r\n      }      \r\n    }\r\n  }\r\n}\r\n\r\nfunction processGroupManagerRole(user) {\r\n  var role = new GlideRecord(\"sys_user_role\");\r\n  if (!role.get(\"name\",\"role_delegator\")) {\r\n    gs.log(\"Cannot grant or remove role_delegator role because it does not exist\");\r\n    return;\r\n  }\r\n\r\n  // add role to new manager\r\n  var gr = new GlideRecord(\"sys_user_has_role\");\r\n  if (!current.manager.nil()) {\r\n    gr.addQuery(\"user\", current.manager);\r\n    gr.addQuery(\"role\", role.sys_id);\r\n    gr.addQuery(\"granted_by\", current.sys_id);\r\n    gr.query();\r\n    if (gr.next())\r\n      gs.log(current.manager.getDisplayValue() + \" already has the role_delegator role for the \" + current.name + \" group - not adding\");\r\n    else {\r\n      gr.initialize();\r\n      gr.user = current.manager;\r\n      gr.role = role.sys_id;\r\n      gr.granted_by = current.sys_id;\r\n      gr.inherited = false;\r\n      gr.insert();\r\n      gs.addInfoMessage(gs.getMessage(\"role_delegator role granted to\") + \" \" + \r\n         current.manager.getDisplayValue() + \" \" + gs.getMessage(\"in\") + \" \" + current.name + \r\n         \" \" + gs.getMessage(\"group\"));\r\n    }\r\n  }\r\n\r\n  // remove role from old manager\r\n  if (!previous.manager.nil()) {\r\n    gr.initialize();\r\n    gr.addQuery(\"user\", previous.manager);\r\n    gr.addQuery(\"role\", role.sys_id);\r\n    gr.addQuery(\"granted_by\", current.sys_id);\r\n    gr.query();\r\n    if (!gr.hasNext())\r\n      gs.log(previous.manager.getDisplayValue() + \" did not have the role_delegator role for the \" + current.name + \" group - not removing\");\r\n    else {\r\n      while (gr.next())\r\n        gr.deleteRecord();\r\n      gs.addInfoMessage(gs.getMessage(\"role_delegator role removed from\") + \" \" + \r\n         previous.manager.getDisplayValue() + \" \" + gs.getMessage(\"in\") + \" \" + current.name + \r\n         \" \" + gs.getMessage(\"group\"));\r\n    }\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/RoleUpdateOnGroupManagerChange",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/RoleUpdateOnGroupManagerChange",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/RoleUpdateOnGroupManagerChange/script.js"
      },
      "when": "after",
      "table": "Group"
    },
    "createdAt": "2025-09-20T06:44:53.642Z",
    "updatedAt": "2025-09-20T06:49:05.797Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 86,
    "type": "business_rule",
    "name": "RITM_to_SCTASK",
    "description": "This business rule script copies the additional comments from RITM to all associated SCTASKs when additional comments are changed on the RITM.",
    "script": "/*\r\nTable: sc_req_item\r\nWhen to run: after update\r\nCondition: current.comments.changes() && gs.isInteractive() \r\n*/\r\n\r\nvar sc_task_gr = new GlideRecord('sc_task');\r\n\r\n//Retrieve all the SCTASKs with the current RITM is aprent.\r\nsc_task_gr.addQuery('request_item',current.sys_id);\r\nsc_task_gr.query();\r\n\r\nwhile(sc_task_gr.next()){\r\n  sc_task_gr.comments = current.comments;\r\n  sc_task_gr.update();\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/RITM_to_SCTASK",
        "scriptFile": "RITM_to_SCTASK.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/RITM_to_SCTASK",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/RITM_to_SCTASK/RITM_to_SCTASK.js"
      },
      "when": "after",
      "table": "sc_req_item"
    },
    "createdAt": "2025-09-20T06:44:53.638Z",
    "updatedAt": "2025-09-20T06:49:05.794Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 85,
    "type": "business_rule",
    "name": "RITM state change",
    "description": "Create before insert/update business rule business rule on screqitem table and give condition if state changes to 2 OR catitem.sc.catalogs is \"yourchoice\"  and run this script. This business is to set state on sctask table when state changes on screqitem based on condition.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n    var OPEN_STATE = 1;\r\n    var WORK_IN_PROGRESS_STATE = 2;\r\n\r\n    var gr = new GlideRecord(\"sc_task\");\r\n    gr.addQuery('request_item', current.sys_id);\r\n    gr.addQuery('state', OPEN_STATE);  // Only fetch tasks in Open state\r\n    gr.query();\r\n\r\n    while (gr.next()) {\r\n        gr.setValue('state', WORK_IN_PROGRESS_STATE);  // Update the task to Work in Progress\r\n        gr.update();\r\n        gs.log('Task ' + gr.number + ' updated from Open to Work in Progress');\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/RITM state change",
        "scriptFile": "Related_task_state_update.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/RITM%20state%20change",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/RITM%20state%20change/Related_task_state_update.js"
      },
      "when": "before",
      "table": "and"
    },
    "createdAt": "2025-09-20T06:44:53.635Z",
    "updatedAt": "2025-09-20T06:49:05.791Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 84,
    "type": "business_rule",
    "name": "RITM Assignment Sync",
    "description": "Script Explanation: This script is written for a Business Rule in ServiceNow. The purpose of this rule is to assign the same assignedto value (typically a user) from the request to all related requested items (RITMs) in the same catalog for a specific catalog item.",
    "script": "// create business rule on sc_request table \r\n(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    var grRITM = new GlideRecord('sc_req_item');\r\n    grRITM.addQuery('request', current.sys_id);\r\n    grRITM.addQuery(\"cat_item.sc_catalogs\", \"791b6df48798d9100072960d3fbb35be\"); //sys_id of catalog \r\n    grRITM.query();\r\n    while (grRITM.next()) {\r\n        grRITM.assigned_to = current.assigned_to;\r\n        grRITM.update();\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/RITM Assignment Sync",
        "scriptFile": "Populate_Assigned _To_on_RITMs_for_Specific_Catalog_Item.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/RITM%20Assignment%20Sync",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/RITM%20Assignment%20Sync/Populate_Assigned%20_To_on_RITMs_for_Specific_Catalog_Item.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.631Z",
    "updatedAt": "2025-09-20T06:49:05.787Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 83,
    "type": "business_rule",
    "name": "Restrict Service Account to Query data",
    "description": "//The business rule is on [incident] table and 'when to run' - before + query //The table could be replaced with other Servicenow tables according to the requirements. var restrictedUserSysId = gs.getProperty('restricted.service.account.id');",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    // Calling the property which contains the sysId of restricted user account\r\n    var restrictedUserSysId = gs.getProperty('restricted.service.account.id'); //Propery 'restricted.service.account.id' is having the userId of Service Account\r\n\r\n    // Checking if the user who is querying is same as the restricted user\r\n    if (gs.getUserID() === restrictedUserSysId) {\r\n\t\t\r\n        // Calculating date 10 years ago from current/today date\r\n        var tenYearsAgoFromToday = new GlideDateTime();\r\n        tenYearsAgoFromToday.addYears(-10);\r\n\r\n        //Limit records to the last 10 years\r\n        current.addQuery('sys_created_on', '>=', tenYearsAgoFromToday);\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Restrict Service Account to Query data",
        "scriptFile": "restrictedDataQuery.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Restrict%20Service%20Account%20to%20Query%20data",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Restrict%20Service%20Account%20to%20Query%20data/restrictedDataQuery.js"
      },
      "when": "before",
      "table": "and"
    },
    "createdAt": "2025-09-20T06:44:53.628Z",
    "updatedAt": "2025-09-20T06:49:05.784Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 82,
    "type": "business_rule",
    "name": "ReRank item",
    "description": "Business rule for on after to re-rank a field spaced by 10 in each entry it updates itself and any larger numbered rank item to keep them all in sync",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t\r\n\treRank('rank', current.rank); \r\n\t\r\n})(current, previous);\r\n\r\nfunction reRank(rank, currentRank) {\r\n    var roundedRank Math.round(parseInt(currentRank) / 10) * 10; \r\n\r\n\tvar grRank = new GlideRecord(current.getTableName()); \r\n\tgrRank.addNotNullQuery(rank); \r\n    grRank.addQuery(rank, '>=', currentRank);\r\n\tgrRank.orderBy(rank); \r\n\tgrRank.query();\r\n\t\r\n\twhile (grRank.next()) {\r\n\t\tgrRank.autoSysFields(false); \r\n\t\tgrRank.setWorkflow(false); \r\n\t\tgrRank.rank = currentRank; \r\n\t\tgrRank.update(); \r\n\t\tcurrentRank += 10; \r\n\t}\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/ReRank item",
        "scriptFile": "rerank.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/ReRank%20item",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/ReRank%20item/rerank.js"
      },
      "when": "after"
    },
    "createdAt": "2025-09-20T06:44:53.624Z",
    "updatedAt": "2025-09-20T06:49:05.781Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 81,
    "type": "business_rule",
    "name": "Replace KB Author with Manager",
    "description": "This business rule help to replace the KB author of knowledge article to Knowledge base manager, if the author of that article leaves the organization. This is a kind of logic which helps to assign the knowledge article to knowledge base manager.",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n    var test_kb_manager;\r\n    var test_arr_kb_manager;\r\n    if (active == false) {  // This will check if user is inactive.\r\n        var kb_gr = new GlideRecord(\"kb_knowledge\");\r\n        kb_gr.addEncodedQuery(\"author=\" + current.sys_id);  // This will query the knowledge article.\r\n        kb_gr.query();\r\n        while (kb_gr.next()) {\r\n            if (test_kb_manager != \"\") {\r\n                test_kb_manager = kb_gr.kb_knowledge_base.kb_manager;\r\n                test_arr_kb_manage = test_kb_manager.split(\",\");  // This will seperate the list of manager by (,).\r\n                kb_gr.author = test_arr_kb_manager[0];  // This will assign the article author to knowledge manager.\r\n                kb_gr.update();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Replace KB Author with Manager",
        "scriptFile": "Replace Script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Replace%20KB%20Author%20with%20Manager",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Replace%20KB%20Author%20with%20Manager/Replace%20Script.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.620Z",
    "updatedAt": "2025-09-20T06:49:05.777Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 80,
    "type": "business_rule",
    "name": "Reduce syslog query",
    "description": "Description Unexperienced users open large tables like syslog, sysevent or any CMDB table with several millions of records just by entering TABLENAME.list into the application navigator - wondering why it takes minutes to load the results. The reason: Without any reduction to a time window a so-called \"full table scan\" is performed behin the scenes to determine the the number of records in that...",
    "script": "(function executeRule(current) {\r\n\r\n\tvar _strCurrentTable = (current.getTableName() || '').toString();\r\n\tvar _strCurrentURL   = (gs.action.getGlideURI() || '').toString();\r\n\t\r\n\t//only continue with list views in the Classic UI\r\n\tif (!_strCurrentURL.startsWith(_strCurrentTable + '_list.do')) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tvar strEncodedQuery  = current.getEncodedQuery() || '';\r\n\tvar numStartPosition = \r\n\t\tstrEncodedQuery.endsWith('ORDERBYDESCsys_created_on') || \r\n\t\tstrEncodedQuery.endsWith('ORDERBYsys_created_on')  ? \r\n\t\t\tstrEncodedQuery.length - 15 : \r\n\t\t\tstrEncodedQuery.length;\r\n\t\r\n\tif (strEncodedQuery.lastIndexOf('sys_created_on', numStartPosition) === -1) {\r\n\t\tcurrent.addEncodedQuery(\r\n\t\t\t'sys_created_onONLast 15 minutes@javascript:gs.beginningOfLast15Minutes()' +\r\n\t\t\t'@javascript:gs.endOfLast15Minutes()'\r\n\t\t);\r\n\t\t\t\r\n\t\tgs.addInfoMessage(\r\n\t\t\t'For performance reasons your query was extended by an expression to narrow ' +\r\n\t\t\t'down the result list to entries which have been created in the last 15 min. ' +\r\n\t\t\t'You can override this setting by using a dedicated query expression for the ' +\r\n\t\t\t'\"Created on\" field. But be careful: If the query result set is very large, ' +\r\n\t\t\t'it will cause a performance decrease!'\r\n\t\t);\r\n\t}\r\n\r\n})(current);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Reduce syslog query",
        "scriptFile": "reduce_syslog_query.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Reduce%20syslog%20query",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Reduce%20syslog%20query/reduce_syslog_query.js"
      },
      "table": "with"
    },
    "createdAt": "2025-09-20T06:44:53.616Z",
    "updatedAt": "2025-09-20T06:49:05.773Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 79,
    "type": "business_rule",
    "name": "Recursive logic",
    "description": "Using this Recursive BR, when you select the CMDB CI on incident then it would automatically add all level of affected CIs and when you change the new cmdbci then its corresponding affected CIs will get added and old affected CIs will get deleted.",
    "script": "removePreviousCI();\r\n\r\nvar ci = [];\r\nvar ret;\r\nvar array = new ArrayUtil();\r\n\r\n//call checkingCi funciton\r\ncheckingCI(current.cmdb_ci);\r\n\r\n//â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢ Adding Infected CIâ€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢\r\nfunction checkingCI(id) {\r\n  //we push the first value\r\n  ci.push(id);\r\n  var gr = new GlideRecord('cmdb_rel_ci');\r\n  gr.addQuery('child', id);\r\n  gr.query();\r\n  while (gr.next()) {\r\n    ret = array.unique(recursive(gr.parent.toString()));\r\n  }\r\n  if (ret) {\r\n    callInfectedCI(ret, current);\r\n  } else {\r\n    var rec = new GlideRecord('task_ci');\r\n    rec.addQuery('task', current.sys_id);\r\n    rec.addQuery('ci_item', current.cmdb_ci);\r\n    rec.query();\r\n    if (!rec.next()) {\r\n      rec.initialize();\r\n      rec.task = current.sys_id;\r\n      rec.ci_item = current.cmdb_ci;\r\n      rec.insert();\r\n    }\r\n  }\r\n}\r\n\r\nfunction recursive(id) {\r\n  ci.push(id);\r\n\r\n  var gr = new GlideRecord('cmdb_rel_ci');\r\n  gr.addQuery('child', id);\r\n  gr.query();\r\n  while (gr.next()) {\r\n    recursive(gr.parent.toString());\r\n  }\r\n\r\n  return ci;\r\n}\r\nfunction callInfectedCI(cmdb, incident) {\r\n  for (var x in cmdb) {\r\n    var gr = new GlideRecord('task_ci');\r\n    gr.newRecord();\r\n    gr.task = current.sys_id.toString();\r\n    gr.ci_item = cmdb[x];\r\n    gr.insert();\r\n\r\n    gs.info('Infected CI ' + gr.sys_id());\r\n  }\r\n}\r\n\r\n//â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢Removal of infected CIâ€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢\r\n\r\nfunction removePreviousCI() {\r\n  // Delete Affected CI records for this task and previous CI\r\n  var rec = new GlideRecord('task_ci');\r\n  rec.addQuery('task', current.sys_id);\r\n  rec.query();\r\n  while (rec.next()) {\r\n    rec.deleteRecord();\r\n  }\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Recursive logic",
        "scriptFile": "Recursive BR.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Recursive%20logic",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Recursive%20logic/Recursive%20BR.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.613Z",
    "updatedAt": "2025-09-20T06:49:05.770Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 78,
    "type": "business_rule",
    "name": "Read Workspace URL",
    "description": "Display BR that reads the callerid parameter from the Workspace URL (agent or sow) for creating a new record/interaction and seearches for the corresponding user to set it in the gscratchpad to be used as default value in the new Interaction form. eg url https://instance-name.service-now.com/now/sow/record/interaction/-1uid1/params/query/active%3Dtrue%5Ecallerid=<email",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t// for new record\r\n    if (current.isNewRecord()) {\r\n        // read the URL\r\n\t\tvar txn = GlideTransaction.get();\r\n\t\tif (!txn)\r\n\t\t\treturn;\r\n\t\tvar request = txn.getRequest();\r\n\t\tif (!request)\r\n\t\t\treturn;\r\n\t\tvar referer = decodeURIComponent(request.getHeader(\"Referer\"));\r\n\t\t\r\n\t\tif (GlideStringUtil.nil(referer))\r\n\t\t\treturn;\r\n\t\t// use regular expression to read the parameters from the referer - we just need the last group\t\r\n\t\tvar matches = referer.match(/\\/(agent|sow)\\/(chat|record\\/interaction)\\/-1_uid_1\\/params\\/query\\/(.*)/);\r\n\t\tif (!matches || matches.length < 4)\r\n\t\t\treturn;\t\t\r\n\t\t// if there is no caller_id in the query parameters, dont do anything\r\n\t\tif (matches[3].indexOf('caller_id') < 0)\r\n\t\t\treturn;\r\n\t\t// parse the parameters and when encountering caller_id, get the user's unique identifier - in this case the email address - and set it in the scratchpad\r\n\t\tvar params = matches[3].split('^');\r\n\t\tfor (var i=0; i<params.length;i++) {\r\n\t\t\t// the parameters are key=name value pairs\r\n\t\t\tvar param = params[i].split('=');\t\t\t\r\n\t\t\tif (param.length == 2 && param[0] == 'caller_id') {\r\n\t\t\t\tvar grUser = new GlideRecord('sys_user');\r\n\t\t\t\tif (grUser.get('email', param[1])) {\r\n\t\t\t\t\tg_scratchpad.caller_id = grUser.getUniqueValue();\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Read Workspace URL",
        "scriptFile": "ReadWS_URL.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Read%20Workspace%20URL",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Read%20Workspace%20URL/ReadWS_URL.js"
      },
      "when": "display"
    },
    "createdAt": "2025-09-20T06:44:53.609Z",
    "updatedAt": "2025-09-20T06:49:05.766Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 77,
    "type": "business_rule",
    "name": "Randomly distrubite events between custom queues",
    "description": "This business rule helps generate multiple events, which are randomly and almost perfetly even distributed by a specified number of custom queues.",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\t\r\n  //define the queues array\r\n\tvar event_queues = ['custom_queue_1', 'custom_queue_2','custom_queue_3','custom_queue_4']\r\n\r\n  //initialize glide record and do some filtering if necessary\r\n\tvar grSomeContainer = new GlideRecord('container_table');\r\n\tgrSomeContainer.addQuery('column', 'value'); //do some filtering if necessary\r\n\tgrSomeContainer.query();\r\n\r\n  //for each one of the elements log an event with 5th parameter distributing it a specific queue from the array above\r\n\twhile (grSomeContainer.next()) {\r\n\t\tgs.eventQueue('scope.event_name', grSomeContainer,  null, null, event_queues[Math.floor(Math.random()*event_queues.length)]);\r\n\t}\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Randomly distrubite events between custom queues",
        "scriptFile": "DistrubuteEvents.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Randomly%20distrubite%20events%20between%20custom%20queues",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Randomly%20distrubite%20events%20between%20custom%20queues/DistrubuteEvents.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.606Z",
    "updatedAt": "2025-09-20T06:49:05.762Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 76,
    "type": "business_rule",
    "name": "QueryBR-restrict users to see their company records",
    "description": "This script is used to restrict logged in users to see only their company records. This is a generic script and can be used in any table where there is a Company field present which is associated to the User table. Query BR contains below specifications:",
    "script": "// This is a before Query BR script.\r\n(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    // Add your code here\r\n    var enq = 'company=javascript:gs.getUser().getCompanyID()'; // query to get the records of logged in user's company. \r\n    current.addEncodedQuery(enq); // add the encoded query so that it can be applied in the query BR\r\n    \r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/QueryBR-restrict users to see their company records",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/QueryBR-restrict%20users%20to%20see%20their%20company%20records",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/QueryBR-restrict%20users%20to%20see%20their%20company%20records/script.js"
      },
      "when": "before",
      "table": "where"
    },
    "createdAt": "2025-09-20T06:44:53.602Z",
    "updatedAt": "2025-09-20T06:49:05.759Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 75,
    "type": "business_rule",
    "name": "Previous Approval Check",
    "description": "Previous Approval Check Business rule to check for any approval requests by previous approvers and auto approve them.  If an approver had already approved a request, and is later asked to approve the same request again, usually in a different capacity, then the approval will be set as approved by the system automatically. Business rule settings:",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    // Add your code here\r\n\r\n    var appr = []; // initiate an array for use later\r\n    var gra = new GlideRecord(\"sysapproval_approver\"); // check if any approved approval records exist for the current request\r\n    gra.addQuery('sysapproval', current.getValue('sys_id'));\r\n    gra.addQuery('state', 'approved'); \r\n    gra.query();\r\n    if (!gra.hasNext()) { // if no approved records, exit script\r\n        return;\r\n    } else {\r\n        while (gra.next()) { // if there are approved records, add them to an array\r\n            appr.push(' ' + gra.approver.getDisplayValue());\r\n        }\r\n    }\r\n    appr = appr.toString(); // convert the array to a string for indexing\r\n    var grr = new GlideRecord(\"sysapproval_approver\"); // check for any pending approval requests\r\n    grr.addQuery('sysapproval', gra.getValue('sysapproval'));\r\n    grr.addQuery('state', 'requested');\r\n    grr.query();\r\n    while (grr.next()) { // compare the requested approvals against the list of approved records\r\n        if (appr.indexOf(grr.approver.getDisplayValue()) > -1) {  // if one exists, set it's state to approved and add a comment\r\n            grr.comments = grr.approver.getDisplayValue() + ' already approved this request during a previous approval step.  System will now auto approve on their behalf.';\r\n            grr.setValue('state', 'approved');\r\n            grr.update();\r\n            break;\r\n        }\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Previous Approval Check",
        "scriptFile": "previous_approval_check.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Previous%20Approval%20Check",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Previous%20Approval%20Check/previous_approval_check.js"
      },
      "when": "async",
      "table": "sc_req_item"
    },
    "createdAt": "2025-09-20T06:44:53.599Z",
    "updatedAt": "2025-09-20T06:49:05.756Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 74,
    "type": "business_rule",
    "name": "Prevent RITM to get closed",
    "description": "This is a code snippet which can be used in a Business rule to prevent the closure of RITM when there is any active catalog task attached to that RITM. Below are the conditions of Business rule mostly suited. When: Before",
    "script": "//This script is used to prevent an RITM to get closed if there is any active catalog task.\r\n(function executeRule(current, previous /*null when async*/) {\r\n\r\n\t// Add your code here\r\nvar scTask = new GlideRecord('sc_task');\r\n\tscTask.addActiveQuery();\r\n\tscTask.addQuery('request_item',current.sys_id);\r\n\tscTask.query();\r\n\tif(scTask.next()){\r\n\t\tcurrent.setAbortAction(true);\r\n\t}\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Prevent RITM to get closed",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Prevent%20RITM%20to%20get%20closed",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Prevent%20RITM%20to%20get%20closed/script.js"
      },
      "when": "before",
      "table": "names"
    },
    "createdAt": "2025-09-20T06:44:53.595Z",
    "updatedAt": "2025-09-20T06:49:05.752Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 73,
    "type": "business_rule",
    "name": "Prevent invalid fiscal period in cost plan breakdown",
    "description": "Simple business rule that will ensure a cost plan breakdowns fiscal period will remain within the start and end period of the parent cost plan. If a cost plan breakdown is added ousdide of the start/end fiscal periods then rollups do not work correctly.",
    "script": "//before update\r\n//table cost_plan_breakdown\r\n//condition:\r\nfiscal_periodVALCHANGES^fiscal_period.fiscal_end_date_timeMORETHANcost_plan.end_fiscal_period.fiscal_end_date_time@hour@after@0^ORfiscal_period.fiscal_start_date_timeMORETHANcost_plan.start_fiscal_period.fiscal_start_date_time@hour@before@0^EQ",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Prevent invalid fiscal period in cost plan breakdown",
        "scriptFile": "Prevent invalid fiscal period on cost plan breakdown.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Prevent%20invalid%20fiscal%20period%20in%20cost%20plan%20breakdown",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Prevent%20invalid%20fiscal%20period%20in%20cost%20plan%20breakdown/Prevent%20invalid%20fiscal%20period%20on%20cost%20plan%20breakdown.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.592Z",
    "updatedAt": "2025-09-20T06:49:05.749Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 72,
    "type": "business_rule",
    "name": "Prevent duplicate update sets",
    "description": "This Business Rule will help to prevent duplicate names for update set. And this will display error message when there is duplicate name found for update set name.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n    \r\n    var updateSetName = current.name.toString().trim();\r\n    var grUpdateSet = new GlideRecord('sys_update_set');\r\n    grUpdateSet.addQuery('name', updateSetName);\r\n    grUpdateSet.addQuery('sys_id', '!=', current.sys_id);\r\n    grUpdateSet.query();\r\n    \r\n    if (grUpdateSet.hasNext()) {\r\n        gs.addErrorMessage('An update set with this name already exists. Please choose a different name.');\r\n        current.setAbortAction(true);\r\n    }\r\n    \r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Prevent duplicate update sets",
        "scriptFile": "preventDuplcateUpdateSets.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Prevent%20duplicate%20update%20sets",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Prevent%20duplicate%20update%20sets/preventDuplcateUpdateSets.js"
      },
      "when": "display"
    },
    "createdAt": "2025-09-20T06:44:53.588Z",
    "updatedAt": "2025-09-20T06:49:05.746Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 71,
    "type": "business_rule",
    "name": "Prevent adding user to group if manager is inactive",
    "description": "Prevent adding user to group Use case : Whenever any user is getting added to any group, if the group manager is inactive then it should prevent the adding of user to the group info : This method is to achieve the above use-case just with business rule",
    "script": "var user = new GlideRecord('sys_user');\r\nuser.addQuery('sys_id', current.group.manager.sys_id);\r\nuser.addQuery('active', 'false');\r\nuser.query();\r\nif(user.next())\r\n{\r\n    gs.info(\"Group Manager is inactive\");\r\n    current.setAbortAction(true);\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Prevent adding user to group if manager is inactive",
        "scriptFile": "Script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Prevent%20adding%20user%20to%20group%20if%20manager%20is%20inactive",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Prevent%20adding%20user%20to%20group%20if%20manager%20is%20inactive/Script.js"
      },
      "when": "before",
      "table": "sys_user_grmember"
    },
    "createdAt": "2025-09-20T06:44:53.585Z",
    "updatedAt": "2025-09-20T06:49:05.743Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 70,
    "type": "business_rule",
    "name": "Preserve enhancement when deleting project",
    "description": "Stops the related enhancement records being cascade deleted from a project record when they also belong to a demand (i.e. we're deleting the project, but want to re-evaluate the original demand with it's associated enhancements). IF you want all enhancements to be preserved then just adjust the filter conditions to suit. Table: pmproject When: before",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t\t\r\n\t\t// Chris E; 4 Oct 2019\r\n\t\t// If child enhancement(s) of a project originated from a demand record, set the enhancement parent to NULL from project record\r\n\t\t// so that the enhancement is not cascade deleted when it's parent project is deleted and is still available via the original demand record\r\n\t\t\r\n\t\ttry {\r\n\t\t\tvar enhGR = new GlideRecord('rm_enhancement');\r\n\t\t\tenhGR.addQuery('parent', current.getValue('sys_id'));\r\n\t\t\tenhGR.query();\r\n\t\t\twhile(enhGR.next()){\r\n\t\t\t\tenhGR.setValue('parent', 'NULL');\r\n\t\t\t\tenhGR.update();\r\n\t\t\t}\r\n\t\t} catch (e){\r\n\t\t\tif(gs.isInteractive() && gs.hasRole('admin')){\r\n\t\t\t\tgs.addInfoMessage('Preserve enhancement on delete - '+ e.message);\r\n\t\t\t}\r\n\t\t\tgs.error(e.message);\r\n\t\t}\r\n\t\t\r\n\t})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Preserve enhancement when deleting project",
        "scriptFile": "Preserve enhancement when deleting project.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Preserve%20enhancement%20when%20deleting%20project",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Preserve%20enhancement%20when%20deleting%20project/Preserve%20enhancement%20when%20deleting%20project.js"
      },
      "when": "before",
      "table": "pm_project"
    },
    "createdAt": "2025-09-20T06:44:53.581Z",
    "updatedAt": "2025-09-20T06:49:05.739Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 69,
    "type": "business_rule",
    "name": "Pass server info to client",
    "description": "This BR can be used to pass any server information to the client side using the gscratchpad variable. BR Type:  Display business rule Usage Scenario: We want to apply some logic based",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n\t/* \r\n\t * All of the below variables will be avialable in the client script\r\n\t * under the g_scratchpad variable for use.\r\n\t */\r\n    g_scratchpad.css = gs.getProperty('css.base.color');\r\n    g_scratchpad.hasAttachments = current.hasAttachments();\r\n    g_scratchpad.managerName = current.caller_id.manager.getDisplayValue();\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Pass server info to client",
        "scriptFile": "passServerInfo.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Pass%20server%20info%20to%20client",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Pass%20server%20info%20to%20client/passServerInfo.js"
      },
      "when": "display"
    },
    "createdAt": "2025-09-20T06:44:53.577Z",
    "updatedAt": "2025-09-20T06:49:05.736Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 68,
    "type": "business_rule",
    "name": "Notification",
    "description": "Trigger: This business rule runs after a new incident is inserted into the Incident table. Check: It checks if the record is new using current.isNewRecord(). User Lookup: It retrieves the assigned userâ€™s record using GlideRecord.",
    "script": "// Business Rule: Send Notification on New Incident Creation\r\n// When: After Insert and Table: Incident\r\n(function executeRule(current, previous /*null when async*/) {\r\n    // Only send notification for newly created incidents\r\n    if (current.isNewRecord()) {\r\n        var gr = new GlideRecord('sys_user');\r\n        gr.get(current.assigned_to);\r\n        // Prepare the notification message\r\n        var message = 'A new incident has been assigned to you: ' + current.number;\r\n        // Send the notification\r\n        gs.eventQueue('incident.new', current, gr.sys_id, message);\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Notification",
        "scriptFile": "Send Notification on New Incident Creation.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Notification",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Notification/Send%20Notification%20on%20New%20Incident%20Creation.js"
      },
      "when": "after",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.574Z",
    "updatedAt": "2025-09-20T06:49:05.732Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 67,
    "type": "business_rule",
    "name": "Name Change Profile Update",
    "description": "This business rule is being used to update the liveprofile record for a user if their first or last name changes. When a sysuser record is updated it runs a query against the liveprofile table to match the document field with the sys ID of the user and then updates the name field of the liveprofile record with the name value from the sysuser record.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t\r\n\r\n\t// This business rule is being used to update the live_profile record\r\n\t// for a user if their first or last name changes. When a sys_user record\r\n\t// is updated it runs a query against the live_profile table to match the\r\n\t// document field with the sys ID of the user and then updates the name\r\n\t// field of the live_profile record with the name value from the sys_user\r\n\t// record.\t\r\n\t\r\n\tvar userLiveProfile = new GlideRecord(\"live_profile\");\r\n\tuserLiveProfile.addQuery(\"document\", current.sys_id);\r\n\tuserLiveProfile.query();\r\n\tif (userLiveProfile.next()) {\r\n\t\tuserLiveProfile.name = current.name;\r\n\t\tuserLiveProfile.update();\r\n\t}\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Name Change Profile Update",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Name%20Change%20Profile%20Update",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Name%20Change%20Profile%20Update/script.js"
      },
      "table": "to"
    },
    "createdAt": "2025-09-20T06:44:53.570Z",
    "updatedAt": "2025-09-20T06:49:05.729Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 66,
    "type": "business_rule",
    "name": "Manipulating system properties values",
    "description": "Business Rule Script which allows getting value of specific system property and manipulate these values. In this example, true/false property is got to determine if script should be executed. Then value of system property which is keeping last created user which gets 'admin' role is updated. Create new system property",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n    //Script to read and update specific system properties (in this example to update last created user name with role admin)\r\n\r\n    //Get value of property which you would like to verify\r\n    var updateAdminUser = gs.getProperty('user.updateNewAdminUsers');\r\n\r\n    //Verify if property is set to true\r\n    if (updateAdminUser) {\r\n\r\n        //Get property which you would like to update\r\n        var property = new GlideRecord('sys_properties');\r\n        property.addQuery('name', 'user.lastCreatedAdmin');\r\n        property.query();\r\n        if (property.next()) {\r\n\r\n            //Update value of choosed property\r\n            property.value = current.user.getDisplayValue();\r\n            property.update();\r\n        }\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Manipulating system properties values",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Manipulating%20system%20properties%20values",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Manipulating%20system%20properties%20values/script.js"
      },
      "when": "before",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.564Z",
    "updatedAt": "2025-09-20T06:49:05.722Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 65,
    "type": "business_rule",
    "name": "Mandatory Attachment",
    "description": "Example code to make attachement mandatory. It can be reusabel on any table uisng before Business rule,on addition we can add addAggregate to  make two attachements mandatory. https://developer.servicenow.com/dev.do!/reference/api/tokyo/server/no-namespace/cGlideAggregateScopedAPI",
    "script": "// Add below code to Before BR\r\n    var grSA = new GlideAggregate('sys_attachment');\r\n    grSA.addAggregate('COUNT');\r\n    grSA.addQuery('table_name', current.getTableName());\r\n    grSA.addQuery('table_sys_id', current.sys_id);\r\n    grSA.query();\r\n    var attachementCount= 0;\r\n    if (grSA.next()) {\r\n        attachementCount = grSA.getAggregate('COUNT');\r\n        if (attachementCount <2) {\r\n              gs.addErrorMessage(\"Please attach the Approvals and Invoice details to submit the request. \");\r\n            current.setAbortAction(true);\r\n        }\r\n    }",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Mandatory Attachment",
        "scriptFile": "threeAttachementsMandatory.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Mandatory%20Attachment",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Mandatory%20Attachment/threeAttachementsMandatory.js"
      },
      "when": "before",
      "table": "uisng"
    },
    "createdAt": "2025-09-20T06:44:53.560Z",
    "updatedAt": "2025-09-20T06:49:05.719Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 64,
    "type": "business_rule",
    "name": "Make Attachment Mandatory",
    "description": "This simple code snippet will help in making attachments mandotary. Can be used in Before BR/Script Inculde.",
    "script": "// Add below code to Before BR\r\nvar attach = new GlideRecord('sys_attachment');\r\nattach.addQuery('table_sys_id', current.sys_id);\r\nattach.addQuery('table_name', current.getTableName());\r\nattach.query();\r\nif (!attach.next()) {\r\n\t\tgs.addErrorMessage(\"Cannot submit without an attachment.\");\r\n\t\tcurrent.setAbortAction(true);\r\n\t}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Make Attachment Mandatory",
        "scriptFile": "MakeAttachmentMandatory.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Make%20Attachment%20Mandatory",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Make%20Attachment%20Mandatory/MakeAttachmentMandatory.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.557Z",
    "updatedAt": "2025-09-20T06:49:05.715Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 63,
    "type": "business_rule",
    "name": "If Conflicts are there restrict change resquest to move further",
    "description": "This is a before Business rule with update(checked) When we try to move the record from new to assess state it will check for the possible conficts which are available in the record. even if it finds a single match. It restricts the record to move further and it pops an error message to the user indicating that there are conficts to resolve before moving to the assess State This code helps in r...",
    "script": "//This code helps in restricting the change from moving new to assess state in case of any conflicts are there in the new state.\r\n//This is a business rule in which, i used before business rules and update(checked)\r\n//when to run condition is state changes to Assess\r\n//change_request Table\r\n\r\n(function executeRule(current, previous /*null when async*/) {\r\n  var conflictStop = new GlideRecord(\"conflict\"); //gliding conflict table\r\n  //get any existing conflicts from the current record\r\n  conflictStop.addQuery(\"change\", current.getUniqueValue());\r\n  conflictStop.addQuery(\"configuration_item\", current.cmdb_ci);\r\n  conflictStop.query();\r\n  // if any conflict is found from the current record then will stop the record from moving further and will show an error message to the user.\r\n  if (conflictStop.hasNext()) {\r\n    gs.addErrorMessage(\r\n      \"state cannot be moved from new to assess without clearing the conflicts, conflicts should not crossed but need to scheduled.\"\r\n    );\r\n    current.setAbortAction(true);\r\n  }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/If Conflicts are there restrict change resquest to move further",
        "scriptFile": "ifConflictStopChangeRequestToAssessState.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/If%20Conflicts%20are%20there%20restrict%20change%20resquest%20to%20move%20further",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/If%20Conflicts%20are%20there%20restrict%20change%20resquest%20to%20move%20further/ifConflictStopChangeRequestToAssessState.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.553Z",
    "updatedAt": "2025-09-20T06:49:05.712Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 62,
    "type": "business_rule",
    "name": "Generate event",
    "description": "Business Rule Script to generate new custom event, which can be used on any conditions, on insert/update/delete of a record. In this example Business Rule is configured to generate custom event when any user get 'admin' role. Event Registration",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n    //Business rule to generate new event\r\n\r\n    //Adding new event to queue\r\n    //Parameters: Event name, GlideRecord Object, parm1, parm2\r\n    gs.eventQueue('custom_event.adminRoleAssigned', current, current.user, current.sys_created_by);\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Generate event",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Generate%20event",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Generate%20event/script.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.550Z",
    "updatedAt": "2025-09-20T06:49:05.708Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 61,
    "type": "business_rule",
    "name": "Fetching reference field value from higher-level parents",
    "description": "This is a \"before insert/update\" Business Rule We are fetching a reference field value from higher-level parents in hierarchy when there is a field containing the parent record in the children and",
    "script": "// In this before insert or update Business Rule, we are fetching a reference field value from higher-level parents in hierarchy when there is a field containing the parent record in the children and our use-case reference field is present in all the tables in hierarchy\r\n// I would be referring to \"reference field name we want to populate\" as \"r1\"\r\n// I would be referring to \"reference field containing parent record\" as \"parent\"\r\n\r\n\r\n(function executeRule(current, previous /*null when async*/ ) {\r\n    if (current.r1 == \"\" && !JSUtil.nil(current.parent.r1)) // Populate 'use-case reference field' from parent's value for the reference field'\r\n        current.r1 = current.parent.r1;\r\n    else if (current.< reference field name we want to populate > == \"\" && !JSUtil.nil(current.parent.parent.r1)) // Populate 'use-case reference field' from 'parent of parent' \r\n        current.r1 = current.parent.parent.r1;\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Fetching reference field value from higher-level parents",
        "scriptFile": "Fetching reference field value from higher-level parents.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Fetching%20reference%20field%20value%20from%20higher-level%20parents",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Fetching%20reference%20field%20value%20from%20higher-level%20parents/Fetching%20reference%20field%20value%20from%20higher-level%20parents.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.546Z",
    "updatedAt": "2025-09-20T06:49:05.705Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 60,
    "type": "business_rule",
    "name": "Exclude Redundant Email Recipients",
    "description": "Exclude Redundant Email Recipients This business rule is designed to intercept new comment notifications and modify the recipients to mitigate redundant notifications in response to email replies that users were previously included on as a direct or copied recipient. Initial Settings (modify as needed for your purposes)",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    // This inspects each of the recipient fields (To, CC, BCC) and strips out any\r\n    // email addresses that were present on the most recently recieved email reply\r\n\r\n    // stripRecipients() returns an object with two key/value pairs:\r\n    // newList - List of \"safe\" addresses, checked against the prevRecipients\r\n    // badAddress - True/false, true if any \"bad\" addresses were removed. - (not currently used)\r\n    function stripRecipients(targetField, blackList) {\r\n\r\n        // Establish an array of current recipients:\r\n        var arrRecipients = [];\r\n        arrRecipients = targetField.toLowerCase().split(',');\r\n\r\n        // Establish an array of revised recipients:\r\n        var revisedRecipients = new ArrayUtil();\r\n        revisedRecipients = revisedRecipients.diff(arrRecipients, blackList);\r\n\r\n        // Flag if we have \"bad\" recipients:\r\n        var foundBad = false; // Not currently used\r\n\r\n        // Return the results as an object:\r\n        var objResults = {\r\n            \"newList\": revisedRecipients,\r\n            \"badAddress\": foundBad // Not currently used\r\n        };\r\n\r\n        return objResults;\r\n    }\r\n\r\n    // Check if current email is triggered from an email reply:\r\n    var table = current.getValue('target_table');\r\n    var ticket = new GlideRecord(table);\r\n    ticket.get(current.getValue('instance'));\r\n\r\n    var notes = ticket.comments.getJournalEntry(1).split('\\n'); // gather most recent comment and split each new line into a new array\r\n    if (notes[1].indexOf('reply from:') == 0) { // check first new line and if it starts with 'reply from:', do the following...\r\n\r\n        // Get the previous recipients we want to exclude:\r\n        var prevRecipients = [];\r\n        var inboundEmail = new GlideRecord('sys_email');\r\n        inboundEmail.addQuery('instance', current.getValue('instance'));\r\n        inboundEmail.addQuery('type', 'received');\r\n        inboundEmail.orderByDesc('sys_created_on');\r\n        inboundEmail.setLimit(1);\r\n        inboundEmail.query();\r\n        if (inboundEmail.next()) {\r\n            prevRecipients = inboundEmail.getValue('recipients').toLowerCase().split(',');\r\n        }\r\n\r\n        // Take a copy of the original recipients for use later:\r\n        var curRecipients = 'TO:' + current.getValue('direct') +\r\n            ', CC:' + current.getValue('copied') +\r\n            ', BCC:' + current.getValue('blind_copied');\r\n\r\n        // Check each recipient field, and strip out duplicate addresses:\r\n        var toResults;\r\n        var ccResults;\r\n        var bccResults;\r\n        var recipientResults;\r\n\r\n        if (current.direct) {\r\n            toResults = stripRecipients(current.getValue('direct'), prevRecipients);\r\n            current.setValue('direct', toResults.newList.toString());\r\n        }\r\n        if (current.copied) {\r\n            ccResults = stripRecipients(current.getValue('copied'), prevRecipients);\r\n            current.setValue('copied', ccResults.newList.toString());\r\n        }\r\n        if (current.blind_copied) {\r\n            bccResults = stripRecipients(current.getValue('blind_copied'), prevRecipients);\r\n            current.setValue('blind_copied', bccResults.newList.toString());\r\n        }\r\n        if (current.recipients) {\r\n            recipientResults = stripRecipients(current.getValue('recipients'), prevRecipients);\r\n            current.setValue('recipients', recipientResults.newList.toString());\r\n        }\r\n\r\n        // If no recipients remain, don't send the email:\r\n        if (!current.recipients && !current.blind_copied && !current.copied && !current.direct) {\r\n\t    current.setValue('state', 'ignored');\r\n            current.setValue('type', 'send-ignored');\r\n        }\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Exclude Redundant Email Recipients",
        "scriptFile": "exclude_redundant_email_recipients.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Exclude%20Redundant%20Email%20Recipients",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Exclude%20Redundant%20Email%20Recipients/exclude_redundant_email_recipients.js"
      },
      "when": "before",
      "table": "sys_email"
    },
    "createdAt": "2025-09-20T06:44:53.543Z",
    "updatedAt": "2025-09-20T06:49:05.701Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 59,
    "type": "business_rule",
    "name": "Enforce Unique Rank",
    "description": "Before Business rule for keeping a rank field unique. Conditions: current.rank.changes() && !current.rank.nil()",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t// Prevent submission if a record already exists with this rank\r\n\tvar grCheckRank = new GlideRecord(current.getTableName()); \r\n\tgrCheckRank.addQuery('rank', current.rank); \r\n\tgrCheckRank.query(); \r\n\tif (grCheckRank.hasNext()) {\r\n\t\tcurrent.setAbortAction(true);\r\n\t\tgs.addErrorMessage('Another record exists with this rank. Set the rank to a value above or below ' + current.rank + '.'); \r\n\t}\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Enforce Unique Rank",
        "scriptFile": "UniqueRank.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Enforce%20Unique%20Rank",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Enforce%20Unique%20Rank/UniqueRank.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.540Z",
    "updatedAt": "2025-09-20T06:49:05.698Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 58,
    "type": "business_rule",
    "name": "Enforce Single Attachment Rule for HR Core Tasks",
    "description": "This code checks if there is more than one attachment for a specific task in ServiceNow. If there are multiple attachments, it displays an error message and prevents further processing of the current record to ensure compliance with the rule that only one attachment is permitted.",
    "script": "var attachmentRecord = new GlideRecord('sys_attachment');\r\nattachmentRecord.addQuery('table_name', 'sn_hr_core_task');\r\nattachmentRecord.addQuery('table_sys_id', current.sys_id);\r\nattachmentRecord.query();\r\n\r\nif (attachmentRecord.getRowCount() > 1) { // Check if more than one attachment exists\r\n    gs.addErrorMessage('Only one attachment is permitted for this task: ' + current.sys_id); // Specific error message\r\n    current.setAbortAction(true); // Abort the action\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Enforce Single Attachment Rule for HR Core Tasks",
        "scriptFile": "codingfile.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Enforce%20Single%20Attachment%20Rule%20for%20HR%20Core%20Tasks",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Enforce%20Single%20Attachment%20Rule%20for%20HR%20Core%20Tasks/codingfile.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.536Z",
    "updatedAt": "2025-09-20T06:49:05.695Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 57,
    "type": "business_rule",
    "name": "Enforce Percentage",
    "description": "Objective A Business Entity has multiple owners who are individuals. Each indivisual owns a percentage of the business.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n    var tableName = current.getTableName();\r\n    gs.info('Validate Ownership Percentage');\r\n    var individual = current.individual;\r\n    gs.info(' current individual  = ' + current.individual.getDisplayValue());\r\n    gs.info(' current ownership % = ' + current.ownership_percentage.getDisplayValue());\r\n    gs.info('previous ownership % = ' + previous.ownership_percentage.getDisplayValue());\r\n\r\n    /** \r\n     * The aggregate function calculates the sum by using the values that are stored in the database. \r\n     * However we need to calculate the sum using the values that are in the database for all owners \r\n     * and use the value that the user is trying to update for the owner that is currently being \r\n     * udpated.\r\n      */\r\n\r\n    var query = 'business_entity=' + current.business_entity;\r\n    var sum_with_previous_values = new x_snc_ecms.Calculator().getSum(tableName, 'ownership_percentage', query);\r\n    gs.info('SUM ownership % with previous value = ' + sum_with_previous_values);\r\n    var sum_with_current_values = sum_with_previous_values - previous.ownership_percentage + current.ownership_percentage;\r\n    gs.info('SUM ownership % CURRENT= ' + sum_with_current_values);\r\n\r\n    if (sum_with_current_values > 100) {\r\n        gs.addErrorMessage(\"Sum of all ownerships can not be greater than 100%\");\r\n        current.setAbortAction(true);\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Enforce Percentage",
        "scriptFile": "enforce_percentage.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Enforce%20Percentage",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Enforce%20Percentage/enforce_percentage.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.533Z",
    "updatedAt": "2025-09-20T06:49:05.691Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 56,
    "type": "business_rule",
    "name": "Enforce File Upload Restrictions for HR Document Submission",
    "description": "This code ensures that when a user uploads a document related to a specific HR task, the uploaded file meets certain criteria: it must be in JPG or JPEG format and must not exceed 2 MB in size. If either condition is violated, the upload is halted, and an appropriate error message is displayed to the user, maintaining the integrity of the data",
    "script": "var hrTask = new GlideRecord('sn_hr_core_task');\r\n\r\nif (hrTask.get(current.table_sys_id) && \r\n    hrTask.hr_Task_type == 'upload_documents' && \r\n    hrTask.short_description == 'submit photo identification') {\r\n\r\n    var fileName = current.file_name.toString();\r\n    var fileSize = current.size_bytes.toString();\r\n    var fileType = fileName.split('.').pop().toLowerCase();\r\n\r\n    // Check file size (must not exceed 2MB)\r\n    if (parseInt(fileSize) > 2000000) { // 2MB in bytes\r\n        gs.addErrorMessage('Maximum file size is 2 MB');\r\n        current.setAbortAction(true); // Abort if file size exceeds 2 MB\r\n        return;\r\n    }\r\n\r\n    // Check file type (must be JPG or JPEG)\r\n    if (fileType !== 'jpg' && fileType !== 'jpeg') {\r\n        gs.addErrorMessage('File must be in JPG or JPEG format');\r\n        current.setAbortAction(true); // Abort if not JPG or JPEG\r\n        return;\r\n    }\r\n        }",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Enforce File Upload Restrictions for HR Document Submission",
        "scriptFile": "Code.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Enforce%20File%20Upload%20Restrictions%20for%20HR%20Document%20Submission",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Enforce%20File%20Upload%20Restrictions%20for%20HR%20Document%20Submission/Code.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.524Z",
    "updatedAt": "2025-09-20T06:49:05.688Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 55,
    "type": "business_rule",
    "name": "Enforce a 1-1 relationship",
    "description": "Enforce a 1:1 relationship between two tables ServiceNow does not provide a direct means of establishing a one-to-one relationship between two tables. Even so, you can enforce a 1:1 relationship with a remote table using business rules. When the local reference field is changed, add the current record reference to the new remote record if applicable and remove the current record reference from...",
    "script": "( function( current, previous /*null when async*/ ) {\r\n\r\n    var remote_record,\r\n        local_field_name = 'u_my_local_field',\r\n        remote_field_name = 'u_the_remote_field';\r\n\r\n    // Set the reference on the current remote record.\r\n    if ( !current[ local_field_name ].nil() ){\r\n        remote_record = current[ local_field_name ].getRefRecord();\r\n        remote_record.setValue( remote_field_name, current.getUniqueValue() );\r\n        remote_record.update();\r\n    }\r\n\r\n    // Clear the reference on the previous remote record.\r\n    if ( !previous[ local_field_name ].nil() ) {\r\n        remote_record = previous[ local_field_name ].getRefRecord();\r\n        remote_record.setValue( remote_field_name, '' );\r\n        remote_record.update();\r\n    }\r\n    \r\n} )( current, previous );",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Enforce a 1-1 relationship",
        "scriptFile": "enforce_1_1.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Enforce%20a%201-1%20relationship",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Enforce%20a%201-1%20relationship/enforce_1_1.js"
      },
      "when": "before",
      "table": "using"
    },
    "createdAt": "2025-09-20T06:44:53.520Z",
    "updatedAt": "2025-09-20T06:49:05.684Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 54,
    "type": "business_rule",
    "name": "Emergency Change Cannot be closed without AttachedIncident",
    "description": "1. This is a Before-Busines rule created on Change Request Table 2. I used GlideAggregate API. 3. only update is checked",
    "script": "//before business rule is used and update only checked\r\n//conditions were type is emergency AND State changes to closed\r\n// if these conditions met and there is no attached incidents to this emergency change request then, we don't let the user to close the Change request\r\n\r\n(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    var inc = new GlideAggregate('incident');//we glide the incident table to get the value of current change request having any incidents or not\r\n    inc.addQuery(\"rfc\", current.getUniqueValue()); //instead of sys_id we used getUniqueValue\r\n    inc.query();\r\n\t//if any incident found then its fine and we can move it to close state\r\n  ..if No incident found then we will abort the action and send's a pop-up message to the user\r\n    if (!inc.hasNext()){\r\n        gs.addErrorMessage('Emergency change cannot be moved from review to close without an attached incident in Incidents Fixed by change');\r\n        current.setAbortAction(true);\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Emergency Change Cannot be closed without AttachedIncident",
        "scriptFile": "Review to Close Without Incident.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Emergency%20Change%20Cannot%20be%20closed%20without%20AttachedIncident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Emergency%20Change%20Cannot%20be%20closed%20without%20AttachedIncident/Review%20to%20Close%20Without%20Incident.js"
      },
      "when": "before",
      "table": "2."
    },
    "createdAt": "2025-09-20T06:44:53.517Z",
    "updatedAt": "2025-09-20T06:49:05.681Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 53,
    "type": "business_rule",
    "name": "Dynamic Business Rule to Update User Roles Based on Department Changes",
    "description": "Purpose This business rule automatically updates user roles in ServiceNow whenever a user's department changes. By ensuring that users have the appropriate roles based on their current department, the rule helps maintain data integrity and enhances access control within the organization. Complete Business Rule Configuration",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n        \r\n        var newDepartment = current.department.getDisplayValue();\r\n\r\n        // Clear existing roles\r\n        var roleGR = new GlideRecord('sys_user_has_role');\r\n        roleGR.addQuery('user', current.sys_id);\r\n        roleGR.deleteMultiple(); // Remove existing roles\r\n\r\n        // Assign new roles based on the new department\r\n        var newRoleGR = new GlideRecord('sys_role');\r\n        newRoleGR.addQuery('name', 'LIKE', newDepartment); // Assuming role names follow department names\r\n        newRoleGR.query();\r\n\r\n        while (newRoleGR.next()) {\r\n            var userRoleGR = new GlideRecord('sys_user_has_role');\r\n            userRoleGR.initialize();\r\n            userRoleGR.user = current.sys_id;\r\n            userRoleGR.role = newRoleGR.sys_id;\r\n            userRoleGR.insert();\r\n        }\r\n\r\n        gs.info('Updated roles for user ' + current.user_name + ' based on new department: ' + newDepartment);\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Dynamic Business Rule to Update User Roles Based on Department Changes",
        "scriptFile": "Dynamic Business Rule to Update User Roles Based on Department Changes.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Dynamic%20Business%20Rule%20to%20Update%20User%20Roles%20Based%20on%20Department%20Changes",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Dynamic%20Business%20Rule%20to%20Update%20User%20Roles%20Based%20on%20Department%20Changes/Dynamic%20Business%20Rule%20to%20Update%20User%20Roles%20Based%20on%20Department%20Changes.js"
      },
      "when": "before",
      "table": "sys_user"
    },
    "createdAt": "2025-09-20T06:44:53.513Z",
    "updatedAt": "2025-09-20T06:49:05.677Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 52,
    "type": "business_rule",
    "name": "duplicateattachments",
    "description": "Type: Business Rule When: OnBefore and On Insert Operation  Table:Incident This BR runs on Insert Operation , IT compares the filename from Sysattachment table and if same attachment with Same file exists on the Incident this BR runs and Abort the Attaching Attachments",
    "script": "if(current.table_name==\"incident\") {\r\n\t\r\n\tvar attached = new GlideRecord('sys_attachment');\r\n\tattached.addQuery('table_name','incident');\r\n\tattached.addQuery('table_sys_id', current.table_sys_id);\r\n\tattached.addQuery('file_name',current.file_name);\r\n\tattached.query();\r\n\tif(attached.next())\r\n\t\t{\r\n\t\t\t\r\n\t\t\tgs.addInfoMessage('Attachement already Exists with the Same Name do not upload same attachement');\r\n\t\t\tcurrent.setAbortAction(true);\r\n\t\t\r\n\t\t}\r\n      }",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/duplicateattachments",
        "scriptFile": "AvoidduplicateattachmentsonIncident.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/duplicateattachments",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/duplicateattachments/AvoidduplicateattachmentsonIncident.js"
      },
      "table": "Incident"
    },
    "createdAt": "2025-09-20T06:44:53.509Z",
    "updatedAt": "2025-09-20T06:49:05.674Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 51,
    "type": "business_rule",
    "name": "Due date calculation based on priority",
    "description": "Objective This ServiceNow business rule script is designed to automatically calculate the due date for a task based on its priority. It executes before the record is saved (Before Business Rule) and calculates the due date in hours, depending on the priority level of the task. Priority-to-Due-Date Mapping",
    "script": "// Auto-calculate Due Date based on priority Business Rule (Before BR)\r\n// This business rule calculates the due date based on task priority.\r\n\r\n(function executeRule(current, previous /*, display*/) {\r\n\r\n    // Define priority-to-due-date mapping (in hours)\r\n    var priorityToDueDate = {\r\n        1: 4,    // High priority: Due in 4 hours\r\n        2: 24,   // Medium priority: Due in 24 hours\r\n        3: 72    // Low priority: Due in 72 hours\r\n    };\r\n\r\n    // Get the priority value from the task\r\n    var priority = current.priority;\r\n\r\n    // Check if priority is valid and mapping exists\r\n    if (priority && priorityToDueDate.hasOwnProperty(priority)) {\r\n        // Calculate the due date\r\n        var dueDate = new GlideDateTime();\r\n        dueDate.addHours(priorityToDueDate[priority]);\r\n\r\n        // Update the due date field\r\n        current.due_date = dueDate;\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Due date calculation based on priority",
        "scriptFile": "code.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Due%20date%20calculation%20based%20on%20priority",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Due%20date%20calculation%20based%20on%20priority/code.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.506Z",
    "updatedAt": "2025-09-20T06:49:05.670Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 50,
    "type": "business_rule",
    "name": "Display warning message when peer reviewer and Requested by are same person",
    "description": "This business rule is used in the Change Management module to display a warning message when requested by and Peer reviewer are the same person. You need to run this business rule \"before\" you \"insert\" under the filter conditions.",
    "script": "if (current.sysapproval.sys_class_name =='change_request' && current.approver == current.sysapproval.requested_by)\r\n{\r\ncurrent.setAbortAction('true');\r\ngs.addInfoMessage('The Requester and Peer Reviewer cannot be the same person.  The change request has been sent to the Peer Reviewer group specified and someone else from your team will need to perform the peer review.');\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Display warning message when peer reviewer and Requested by are same person",
        "scriptFile": "Warningmessage_Business rule.jss",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Display%20warning%20message%20when%20peer%20reviewer%20and%20Requested%20by%20are%20same%20person",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Display%20warning%20message%20when%20peer%20reviewer%20and%20Requested%20by%20are%20same%20person/Warningmessage_Business%20rule.jss"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.502Z",
    "updatedAt": "2025-09-20T06:49:05.666Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 49,
    "type": "business_rule",
    "name": "Display current user display name on top of form",
    "description": "Use case : Display info message with current user display name on top of a form Soulution :",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    var user = gs.getUserDisplayName();\r\n    gs.addInfoMessage(\"Welcome \" + user); //This adds info message on top of the form\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Display current user display name on top of form",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Display%20current%20user%20display%20name%20on%20top%20of%20form",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Display%20current%20user%20display%20name%20on%20top%20of%20form/script.js"
      },
      "when": "display",
      "table": "using"
    },
    "createdAt": "2025-09-20T06:44:53.499Z",
    "updatedAt": "2025-09-20T06:49:05.663Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 48,
    "type": "business_rule",
    "name": "Display BR to get groupInfo of logged in User",
    "description": "This code snippet will help you to make fields read only/hide if a the logged in user belongs to a specific group. To achieve this, we need to create a display Business rule and an onLoad client script. Display BR will look for the group of logged in user and return true or false in a scratchpad variable.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n\t// Add your code here\r\n\tg_scratchpad.isMemberOf = gs.getUser().isMemberOf('ServiceNow QA team'); // this will return true if the user is member of 'ServiceNow QA team' and false otherwise.\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Display BR to get groupInfo of logged in User",
        "scriptFile": "displayBr.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Display%20BR%20to%20get%20groupInfo%20of%20logged%20in%20User",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Display%20BR%20to%20get%20groupInfo%20of%20logged%20in%20User/displayBr.js"
      },
      "when": "display"
    },
    "createdAt": "2025-09-20T06:44:53.495Z",
    "updatedAt": "2025-09-20T06:49:05.660Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 47,
    "type": "business_rule",
    "name": "DeleteUserRole",
    "description": "Bussienss Rule to delete the User Role from table like 'Service Category User Roles [servicecategoryuserrole]' Steps: - Navigate to your instance",
    "script": "/*\r\nCreate after BR to delete the user role from table. In this example table is referenced as 'Service Category User Role[service Category User Role]'\r\n\r\n>>>>When to Run:\r\nWhen: AFter\r\nOperation:Delete\r\norder: 100\r\n\r\n>>>> Condition: \r\n  !current.user_role.nil()\r\n*/\r\ndeleteUserRole();\r\n\r\nfunction deleteUserRole() {\r\n\tvar ur = new GlideRecord(\"sys_user_has_role\");\r\n\tif (ur.get(current.user_role))\r\n\t\tur.deleteRecord();\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/DeleteUserRole",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/DeleteUserRole",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/DeleteUserRole/script.js"
      },
      "when": "after",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.491Z",
    "updatedAt": "2025-09-20T06:49:05.656Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 46,
    "type": "business_rule",
    "name": "Create comment on referenced record",
    "description": "Business Rule Script which allows adding comments to referenced records after some insert or update was made. In this example, after changing name on a Configuration Item, all incident which have that Ci  assigned will get comment about that change. You can change the script to different table, query and conditions to fit your needs. Example configuration of  Business Rule",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n    //Script to create comment on referenced records in case of update\r\n    //In this example, we are creating a comment on an incident when the name of CI was changed\r\n\r\n    //Query all incident which have Configuration item set to current one\r\n    var grInc = new GlideRecord('incident');\r\n    grInc.addQuery('cmdb_ci', current.sys_id);\r\n    grInc.query();\r\n\r\n    //Go through all incidents on query list\r\n    while (grInc.next()) {\r\n\r\n        //Add new comment about changed name of CI\r\n        grInc.work_notes = 'Name was changed from: ' + previous.getValue('name') + ' to: ' + current.getValue('name') + ' on related Configuration Item.';\r\n        grInc.update();\r\n\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Create comment on referenced record",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Create%20comment%20on%20referenced%20record",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Create%20comment%20on%20referenced%20record/script.js"
      },
      "when": "after"
    },
    "createdAt": "2025-09-20T06:44:53.488Z",
    "updatedAt": "2025-09-20T06:49:05.653Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 45,
    "type": "business_rule",
    "name": "Create choice sets if required for new choices",
    "description": "Type: Business Rule When: Before Insert: true",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t\r\n\tvar table = current.name;\r\n\tvar el = current.element;\r\n\t\r\n\tvar scs = new GlideRecord('sys_choice_set');\r\n\tscs.addQuery('name', table);\r\n\tscs.addQuery('element', el);\r\n\tscs.query();\r\n\t\r\n\tif (scs.next()) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tscs.initialize();\r\n\tscs.name = table;\r\n\tscs.element = el;\r\n\tscs.insert();\r\n\t\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Create choice sets if required for new choices",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Create%20choice%20sets%20if%20required%20for%20new%20choices",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Create%20choice%20sets%20if%20required%20for%20new%20choices/script.js"
      },
      "when": "before",
      "table": "element"
    },
    "createdAt": "2025-09-20T06:44:53.484Z",
    "updatedAt": "2025-09-20T06:49:05.650Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 44,
    "type": "business_rule",
    "name": "Create catalog task for each row of MRVS",
    "description": "This code snippet will help you to generate tasks automatically for each row of MRVS present on RITM. This can be achieved by using a Before BR on RITM. Specifications for Business rule will be: 1. When = Before",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n\t// Add your code here\r\n\r\nvar mrvs = current.variables.test_var; //get MRVS. Here 'test_var' is my mrvs name.\r\nvar total = mrvs.getRowCount(); // get the row count of mrvs\r\nfor(var i =0;i<total;i++)\r\n{\r\n  var scTask = new GlideRecord('sc_task');\r\n  scTask.initialize();\r\n  scTask.request_item = current.sys_id;\r\n  scTask.short_description = mrvs[i].name; //set the short description of task with mrvs data. Here 'name' is a variable on my mrvs.\r\n  scTask.insert();\r\n}\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Create catalog task for each row of MRVS",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Create%20catalog%20task%20for%20each%20row%20of%20MRVS",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Create%20catalog%20task%20for%20each%20row%20of%20MRVS/script.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.480Z",
    "updatedAt": "2025-09-20T06:49:05.646Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 43,
    "type": "business_rule",
    "name": "Create a copy of incident in another servicenow instance",
    "description": "Create incident copy Use case : Whenever a new incident is created in servicenow production instance, a copy of that incident should be created in backup instance. info : This method is to achieve the above use-case just with business rule and without creating a record in sysrestmessage table.",
    "script": "//This is after business rule in production instance\r\n\r\n(function executeRule(current, previous /*null when async*/) {\r\n\r\n\tvar body = {\"short_description\":current.short_description.toString(),\"description\":current.short_description.toString()}; //more fields can be added to body\r\n\t\r\n\tvar req = new sn_ws.RESTMessageV2();\r\n\treq.setEndpoint(\"https://<your-instance-name>.service-now.com/api/now/table/incident\");    //give backup(non-prod) instance name\r\n\treq.setHttpMethod(\"POST\");\r\n\treq.setBasicAuth(\"<username>\",\"<password>\");   //username and password of a user of backup(non-prod) instance. User must have rest_service and itil role\r\n\treq.setRequestHeader(\"Content-Type\",\"application/json\");\r\n\treq.setRequestBody(JSON.stringify(body));\r\n\t\r\n\tvar response = req.execute();\r\n\t\r\n\tvar body = response.getBody();\r\n\tvar status = response.getStatusCode();\r\n\r\n  gs.log(\"Response body is ---- \" +body);  //response body is logged for verification\r\n  gs.log(\"Status code is ---- \" +status);  //status code is logged. Usually 200 or 201 is success\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Create a copy of incident in another servicenow instance",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Create%20a%20copy%20of%20incident%20in%20another%20servicenow%20instance",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Create%20a%20copy%20of%20incident%20in%20another%20servicenow%20instance/script.js"
      },
      "when": "after",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.477Z",
    "updatedAt": "2025-09-20T06:49:05.643Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 42,
    "type": "business_rule",
    "name": "Count Associated Incidents in Problem",
    "description": "<h2 Count the number of associated incidents in Problem Form </h2 <h3Use - Case: </h3 <h4Created a field in the Problem form which shows the number of incident records associated with the same problem. This makes it easy for the helpdesk to find out if there are any linked incidents without scrolling down.</h4",
    "script": "(function executeRule(current, previous) {\r\n\r\n\t\r\n\tvar gr = new GlideRecord('problem');\r\n\tgr.addQuery('sys_id', current.problem_id);\r\n\tgr.query();\r\n\tif(gr.next())\r\n\t\t{\r\n\t\t\tgr.u_associated_incidents += 1;\r\n\t\t\tgr.update();\r\n\t\t\t\r\n\t\t}\r\n\t\r\n\t\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Count Associated Incidents in Problem",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Count%20Associated%20Incidents%20in%20Problem",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Count%20Associated%20Incidents%20in%20Problem/script.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.473Z",
    "updatedAt": "2025-09-20T06:49:05.639Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 41,
    "type": "business_rule",
    "name": "CopyAttachmentsFromApprovalToChange",
    "description": "Copy attahements from Approval Record to corresponding change record. This BR utilizes GlideSysAttachment API to copy all the attachments at a time. And there is no duplicate prevention enabled as Approval record is generally either approved or rejected one time. To utilize this script, create an Advanced - After - Insert/Update Business Rule with conditions",
    "script": "// Copy attachments from Approval Record to Change record upon Approval / Rejection\r\n\r\n/*\r\n  This script should be used in an Advanced - After - Insert/Update Business Rule with conditions \r\n  state :: changes to :: Approved\r\n  state :: changes to :: Rejected\r\n*/\r\n\r\n(function executeRule(current, previous /*null when async*/ ) {\r\n    var approval = current.getValue('sysapproval');\r\n    var chgGr = new GlideRecord('change_request');\r\n    // Check if the approval record is really a change record or not, if yes copy the Attachments\r\n    if (chgGr.get(approval)) {\r\n        var attachment = new GlideSysAttachment();\r\n        var ids = attachment.copy('sysapproval_approver', current.sys_id, 'change_request', approval);\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/CopyAttachmentsFromApprovalToChange",
        "scriptFile": "CopyAttachmentsApprovalToChange.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/CopyAttachmentsFromApprovalToChange",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/CopyAttachmentsFromApprovalToChange/CopyAttachmentsApprovalToChange.js"
      },
      "when": "after"
    },
    "createdAt": "2025-09-20T06:44:53.469Z",
    "updatedAt": "2025-09-20T06:49:05.636Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 40,
    "type": "business_rule",
    "name": "Copy worknotes from SCTASK to RITM comments",
    "description": "Sample code snippet to copy the latest task worknotes comments to additional comments of related RITM record. So the requester aware of recent updates of tasks.",
    "script": "var difference, task_wrk_notes, task_add_cmnt, rAddCmnt, ritm_add_cmnt;\r\n    task_add_cmnt = current.comments.getJournalEntry(1);\r\n\r\n    //Remove timestamp and name from additional comment\r\n    var reg_exp = new RegExp('\\n');\r\n    var i = task_add_cmnt.search(reg_exp);\r\n    if (i > 0) {\r\n        task_wrk_notes = task_add_cmnt.substring(i + 1, task_add_cmnt.length);\r\n    }\r\n\r\n    var grSRI = new GlideAggregate('sc_req_item');\r\n    grSRI.addQuery('sys_id', current.parent);\r\n    grSRI.query();\r\n\r\n    if (grSRI.next()) {\r\n        ritm_add_cmnt = grSRI.comments.getJournalEntry(1);\r\n\r\n        //Remove timestamp and name from additional comment\r\n        var i1 = ritm_add_cmnt.search(reg_exp);\r\n        if (i1 > 0) {\r\n            rAddCmnt = ritm_add_cmnt.substring(i1 + 1, ritm_add_cmnt.length);\r\n        }\r\n        difference = task_wrk_notes.indexOf(rAddCmnt);\r\n\r\n        if (difference == -1) // If No match found\r\n        {\r\n            //Originally prefixed, but no longer needed:  \"Comment from IT user working on your request: \"\r\n\t\t\tgrSRI.comments = task_wrk_notes.trim();\r\n            grSRI.update();\r\n        }\r\n    }",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Copy worknotes from SCTASK to RITM comments",
        "scriptFile": "sctaskToRitmAdditionalComments.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Copy%20worknotes%20from%20SCTASK%20to%20RITM%20comments",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Copy%20worknotes%20from%20SCTASK%20to%20RITM%20comments/sctaskToRitmAdditionalComments.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.465Z",
    "updatedAt": "2025-09-20T06:49:05.632Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 39,
    "type": "business_rule",
    "name": "Copy latest comment from RITM to SCTASK",
    "description": "This simple snap code helps to copy latest comment of RITM to SCTASK.",
    "script": "//Script to update comments on RITM.\r\n\r\nvar ritmGr = new GlideRecord('sc_req_item');\r\nif(ritmGr.get(current.request_item.sys_id))// Use current sys_id of ritm to pull the comments\r\n{\r\n\r\nritmGr.comments=current.comments.getJournalEntry(1);// This gets the latest comment added.\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Copy latest comment from RITM to SCTASK",
        "scriptFile": "CopyComments.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Copy%20latest%20comment%20from%20RITM%20to%20SCTASK",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Copy%20latest%20comment%20from%20RITM%20to%20SCTASK/CopyComments.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.461Z",
    "updatedAt": "2025-09-20T06:49:05.629Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 38,
    "type": "business_rule",
    "name": "Copy fields from Employee from",
    "description": "Copy response from Employee form to Specific cases/tasks/records This BR script can be used when auto field mapping feature on Employee forms is not fitting your requirements Usage scenarios",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t/**\r\n\t * This script is user to copy employee field value to any record in case\r\n\t * This can be used when Employee form auto mapping feature cant be used\r\n\t * - There are multiple Active employee forms associated with a single user at a time\r\n\t * - Form field to be copied to different cases/tasks/records\r\n\t *\r\n\t */\r\n\r\n\tvar surveyResultTable = \"asmt_metric_result\";\r\n\t// Employee form surveys linked to Tasks using \"survey instance\" field\r\n\tvar parentGR = new GlideRecord(current.parent.sys_class_name.toString());\r\n\tparentGR.get(current.parent.sys_id.toString());\r\n\r\n\tvar resultGR = new GlideRecord(surveyResultTable);\r\n\tresultGR.addQuery(\"instance\", current.survey_instance.sys_id.toString());\r\n\tresultGR.query();\r\n\twhile (resultGR.next()) {\r\n\t\tvar dataType = resultGR.metric.datatype.toString();\r\n\t\tvar fieldName = resultGR.metric.name.toString();\r\n\r\n\t\tvar value = \"\";\r\n\t\tvar stringValue = resultGR.string_value.toString();\r\n\t\tvar finalValue = \"\";\r\n\r\n\t\t// Survey response value is saved in different field depending on metric datatype\r\n\t\t// This section may need to be updated based on different metric type you add in your survey\r\n\t\tswitch (dataType) {\r\n\t\t\tcase \"choice\":\r\n\t\t\t\tvar tableName = current.parent.sys_class_name.toString();\r\n\t\t\t\t// Get the exact choice \"value\" to avoid issues with difference in Label and value of field\r\n\t\t\t\tvalue = \"\";\r\n\t\t\t\tif (stringValue /*label*/ && fieldName /*element*/ && tableName /*name*/) {\r\n\t\t\t\t\tvar choiceGR = new GlideRecord(\"sys_choice\");\r\n\t\t\t\t\tchoiceGR.addQuery(\"name\", tableName);\r\n\t\t\t\t\tchoiceGR.addQuery(\"element\", fieldName);\r\n\t\t\t\t\tchoiceGR.addQuery(\"label\", stringValue);\r\n\t\t\t\t\tchoiceGR.addQuery(\"inactive\", false);\r\n\t\t\t\t\tchoiceGR.query();\r\n\t\t\t\t\tif (choiceGR.next()) {\r\n\t\t\t\t\t\tvalue = choiceGR.value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value !== false) {\r\n\t\t\t\t\tfinalValue = value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfinalValue = stringValue;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"reference\":\r\n\t\t\t\tfinalValue = resultGR.reference_value.toString();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"date\":\r\n\t\t\t\t// finalValue = stringValue;\r\n\t\t\t\tvar gdt = new GlideDateTime(stringValue);\r\n\t\t\t\tfinalValue = gdt;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"string\":\r\n\t\t\t\tfinalValue = stringValue;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tfinalValue = stringValue;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// Setting defaults values for questions based on Default value scenarios\r\n\r\n\t\t/**\r\n\t\t *\r\n\t\t * Employee Form: <Employee Form Name>\r\n\t\t * Question: <Question Label>\r\n\t\t * Name: <Question name>\r\n\t\t * Default Values scenario: <Condition when to set this default value>\r\n\t\t * Default Value: <Default value to set>\r\n\t\t *\r\n\t\t * */\r\n\t\tif (fieldName == \"u_employee_tile\" && finalValue == \"\") {\r\n\t\t\tparentGR.setValue(\"u_employee_name\", \"Intern\");\r\n\t\t}\r\n\r\n\t\tparentGR.setValue(fieldName, finalValue);\r\n\t\t// parentGR[fieldName] = finalValue; (this is the same as above)\r\n\t}\r\n\r\n\tparentGR.update();\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Copy fields from Employee from",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Copy%20fields%20from%20Employee%20from",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Copy%20fields%20from%20Employee%20from/script.js"
      },
      "when": "async"
    },
    "createdAt": "2025-09-20T06:44:53.457Z",
    "updatedAt": "2025-09-20T06:49:05.625Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 37,
    "type": "business_rule",
    "name": "Copy details to Request",
    "description": "Script: Copy the Assignment group and Assign the details of sctask to the Request table. This script automates the process of assigning values from the first sctask in a REQ to the parent REQ record. This is useful for keeping the request record in sync with its initial task(If multiple tasks are created for one request), allowing other workflows to use these values directly from the request. P...",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n    var req = current.request.getRefRecord();\r\n\r\n    // Check if the REQ record exists\r\n    if (req.isValidRecord()) {\r\n        // Check if this is the first task for the REQ\r\n        var firstTaskForReq = new GlideRecord('sc_task');\r\n        firstTaskForReq.addQuery('request', req.getUniqueValue());\r\n        firstTaskForReq.orderBy('sys_created_on');\r\n        firstTaskForReq.setLimit(1); // Limit to the first task\r\n        firstTaskForReq.query();\r\n\r\n        if (firstTaskForReq.next() && firstTaskForReq.getUniqueValue() == current.getUniqueValue()) {\r\n            // Copy the Assignment Group and Assigned To fields\r\n            req.setValue('assignment_group', current.getValue('assignment_group'));\r\n            req.setValue('assigned_to', current.getValue('assigned_to'));\r\n\r\n            // Update the REQ record\r\n            req.update();\r\n        }\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Copy details to Request",
        "scriptFile": "Move Sc_task Assign group and assigne to Request.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Copy%20details%20to%20Request",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Copy%20details%20to%20Request/Move%20Sc_task%20Assign%20group%20and%20assigne%20to%20Request.js"
      },
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.453Z",
    "updatedAt": "2025-09-20T06:49:05.622Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 36,
    "type": "business_rule",
    "name": "Copy Comments from RITM to SCTASK Vice versa",
    "description": "End user recent comments on RITM to be copied as task worknotes to any catalog tasks which is not Closed Complete/Closed Skipped/Cancelled so the assigne aware of recent updates of End users.",
    "script": "// Sample code to Copy RITM additional Comments /  user visible comments to SCtask worknotes \r\nvar diff, tcomnt, tcmnt1, ritmcomnt1, ritmcomnt;\r\n    ritmcomnt = current.comments.getJournalEntry(1);\r\n    var reg_exp = new RegExp('\\n');\r\n    var i = ritmcomnt.search(reg_exp);\r\n    if (i > 0) {\r\n        ritmcomnt1 = ritmcomnt.substring(i + 1, ritmcomnt.length);\r\n    }\r\n\r\n    // Get the list of open sctasks for the RITM\r\n\tvar ritm_gr = new GlideRecord('sc_task');\r\n    ritm_gr.addQuery('request_item', current.sys_id);\r\n    // Exclude any closed tasks\r\n\tritm_gr.addQuery('state', '!=', '3');\r\n    ritm_gr.addQuery('state', '!=', '4');\r\n    ritm_gr.addQuery('state', '!=', '7');\r\n    ritm_gr.query();\r\n\r\n    while (ritm_gr.next()) {\r\n        tcmnt1 = ritm_gr.comments.getJournalEntry(1);\r\n\r\n        //Remove timestamp and name from additional comment\r\n        var i1 = tcmnt1.search(reg_exp);\r\n        if (i1 > 0) {\r\n            tcomnt = tcmnt1.substring(i1 + 1, tcmnt1.length);\r\n        }\r\n        diff = ritmcomnt1.indexOf(tcomnt);\r\n\r\n        if (diff == -1) // If No match found\r\n        {\r\n\t\t\tritm_gr.work_notes = \"Additional Comment from RITM: \" + ritmcomnt1.trim();\r\n            ritm_gr.update();\r\n        }\r\n    }",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Copy Comments from RITM to SCTASK Vice versa",
        "scriptFile": "copyCommentsfromRitmToSctask.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Copy%20Comments%20from%20RITM%20to%20SCTASK%20Vice%20versa",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Copy%20Comments%20from%20RITM%20to%20SCTASK%20Vice%20versa/copyCommentsfromRitmToSctask.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.448Z",
    "updatedAt": "2025-09-20T06:49:05.618Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 35,
    "type": "business_rule",
    "name": "Copy attachments from idea to demand",
    "description": "Code will copy attachments from idea to demand Name: Copy attachments to demand Table: Idea",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n\t// Chris E; 26 Aug 2019;\r\n\t// Copy the attachments from the idea record to the demand record on creation/change\r\n\t\t\r\n\ttry {\r\n    \r\n\t\tnew GlideSysAttachment().copy(current.getTableName(), current.getValue('sys_id'), current.demand.getRefRecord().getValue('sys_class_name'), current.getValue('demand'));\r\n    \r\n\t} catch(e) {\r\n\t\tif(gs.isInteractive() && gs.hasRole('admin')) {\r\n\t\t\tgs.addInfoMessage('Copy attachments to demand - '+ e.message);\r\n\t\t}\r\n\t\tgs.error(e.message);\r\n\t}\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Copy attachments from idea to demand",
        "scriptFile": "copy attach from idea to demand.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Copy%20attachments%20from%20idea%20to%20demand",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Copy%20attachments%20from%20idea%20to%20demand/copy%20attach%20from%20idea%20to%20demand.js"
      },
      "when": "async",
      "table": "Idea"
    },
    "createdAt": "2025-09-20T06:44:53.444Z",
    "updatedAt": "2025-09-20T06:49:05.615Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 34,
    "type": "business_rule",
    "name": "Copy Attachment on Email",
    "description": "This Business Rule to send physical copy of attachment before insert on given table Eg. Usecase- To send physical copy of attachment on email. When to run - Before Insert",
    "script": "var grSysAtt = new GlideRecord('sys_attachment');\r\ngrSysAtt.get(''); //mention your attachment sys_id from sys_attachment table\r\nvar content = new GlideSysAttachment().getContentStream(grSysAtt.sys_id);\r\nnew GlideSysAttachment().writeContentStream(current, grSysAtt.getValue('file_name'), grSysAtt.getValue('content_type'), content);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Copy Attachment on Email",
        "scriptFile": "copyAttachment.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Copy%20Attachment%20on%20Email",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Copy%20Attachment%20on%20Email/copyAttachment.js"
      },
      "when": "before",
      "table": "Eg."
    },
    "createdAt": "2025-09-20T06:44:53.440Z",
    "updatedAt": "2025-09-20T06:49:05.612Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 33,
    "type": "business_rule",
    "name": "Copy Attachment INC to Case",
    "description": "Copy attahements from Sc task  table to case table, using custom function to avaoid duplicate copies. Attachment file will have one or more entries in the sysattachmentdoc table. When we upload an attachment file to ServiceNow, a record is created in the Attachments table with some metadata, including the file name,",
    "script": "if (current.table_name == 'sc_task') \r\n            var id = current.table_sys_id;\r\n        var gr = new GlideAggregate('sn_customerservice_technology_services');\r\n        gr.addQuery('sc_task.sys_id', id);\r\n        gr.query();\r\n        if (gr.next()) {\r\n            var grSA = new GlideAggregate('sys_attachment');\r\n            grSA.addQuery(\"table_name\", 'sc_task');\r\n            grSA.addQuery(\"table_sys_id\", id);\r\n            grSA.addQuery('file_name', current.file_name);\r\n            grSA.query();\r\n            if (grSA.next()) {\r\n            if (grSA.getRowCount() >1) {\r\n\t\t\tgrSA.deleteRecord('id');\r\n\t\t\t\t}\r\n\t\t\t\t\telse {\t\t\t\t\t\r\n                        var grSAafter = new GlideAggregate('sys_attachment');\r\n                        grSAafter.initialize();\r\n                        grSAafter.file_name = current.file_name;\r\n                        grSAafter.content_type = current.content_type;\r\n                        grSAafter.compressed = current.compressed;\r\n                        grSAafter.table_name = 'sn_customerservice_technology_services';\r\n                        grSAafter.size_bytes = current.size_bytes;\r\n                        grSAafter.size_compressed = current.size_compressed;\r\n                        grSAafter.table_sys_id = gr.sys_id;\r\n                        var grSAafterRec = grSAafter.insert();\r\n\r\n                        var grSAafterDoc = new GlideAggregate('sys_attachment_doc');\r\n                        grSAafterDoc.addQuery('sys_attachment', current.sys_id);\r\n                        grSAafterDoc.query();\r\n                        while (grSAafterDoc.next()) {\r\n                           \r\n                          var grSAafterDocCopy = new GlideAggregate('sys_attachment_doc');\r\n                            grSAafterDocCopy.initialize();\r\n                            grSAafterDocCopy.sys_attachment = grSAafterRec;\r\n                            grSAafterDocCopy.position = grSAafterDoc.position;\r\n                            grSAafterDocCopy.length = grSAafterDoc.length;\r\n                            grSAafterDocCopy.data = grSAafterDoc.data;\r\n                            grSAafterDocCopy.insert();\r\n                        }\r\n                    }\r\n\t\t\t\t\r\n\t\t\t\r\n                }\r\n            }",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Copy Attachment INC to Case",
        "scriptFile": "copyAttachement.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Copy%20Attachment%20INC%20to%20Case",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Copy%20Attachment%20INC%20to%20Case/copyAttachement.js"
      },
      "table": "to"
    },
    "createdAt": "2025-09-20T06:44:53.437Z",
    "updatedAt": "2025-09-20T06:49:05.608Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 32,
    "type": "business_rule",
    "name": "Compare two date fields",
    "description": "This Code will show the number of days difference between 2 date like Start Date and End Date.",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    var sTime = current.start_date.getDisplayValue(); \r\n\tvar eTime = current.end_date.getDisplayValue(); \r\n\r\n\tgs.addInfoMessage(\"Start Date=\"+ sTime + \" End Date=\"+eTime);\r\n\r\n    var dur = gs.dateDiff(sTime, eTime);\r\n\r\n    var dateDiff = new GlideDuration(dur);\r\n\r\n    var d = dateDiff.getDayPart();\r\n\r\n    gs.addInfoMessage(\"Number of Days :\" + d);\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Compare two date fields",
        "scriptFile": "compareTwoDateFields.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Compare%20two%20date%20fields",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Compare%20two%20date%20fields/compareTwoDateFields.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.433Z",
    "updatedAt": "2025-09-20T06:49:05.605Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 31,
    "type": "business_rule",
    "name": "Close parent RITM when SC Task is Closed",
    "description": "This BR is created basically to close the parent requested item when ever the sc task is closed 1. When: After 2. Update: true",
    "script": "/*This BR is created basically to close the parent requested item when ever the sc task is closed \r\n1. When: After\r\n2. Update: true\r\n3. Add filter condition as \r\n    1. State is one of closed complete or closed incomplete\r\n    2. Catalog Item needs to be selected\r\n4. Advanced check box needs to be checked*/\r\n\r\n(function executeRule(current, previous /*null when async*/) {\r\n\tvar gr = new GlideRecord('sc_task'); //Pointing towards SC Task table\r\n\tgr.addQuery('request_item', current.request_item); //Add query to get parent ritm\r\n\tgr.addQuery('active', true); //Add query for active records\r\n\tgr.query();\r\n\tif(!gr.next()){\r\n\t\tvar ritm = current.request_item.getRefRecord(); \r\n\t\tritm.state = 3; //Set state to closed incomplete or closed complete\r\n\t\tritm.update();\r\n\t}\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Close parent RITM when SC Task is Closed",
        "scriptFile": "closeParentRITMwhenSCTaskisClosed.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Close%20parent%20RITM%20when%20SC%20Task%20is%20Closed",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Close%20parent%20RITM%20when%20SC%20Task%20is%20Closed/closeParentRITMwhenSCTaskisClosed.js"
      },
      "when": "after"
    },
    "createdAt": "2025-09-20T06:44:53.429Z",
    "updatedAt": "2025-09-20T06:49:05.602Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 30,
    "type": "business_rule",
    "name": "Check for active tickets before inactivating user",
    "description": "This BR is designed to identify all active tickets from the \"tables\" array in ServiceNow and if there are any active tickets are found then the user would not be inactivated. This BR helps administrators easily to find all the active tickets that assigned to the user who is being deactivated so that they can notify the management about this inconsistancy. Administrators can either notify the us...",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    // Add your code here\r\n    var tables = [\"incident\", \"change_request\", \"problem\", \"sc_task\", \"task\"]; //tables to check for \r\n    var tickets = []; //empty array\r\n\r\n    for (var i = 0; i < tables.length; i++) { //traversing through all the tables\r\n        var Findtickets = new GlideRecord(tables[i]); //gliding through each table\r\n        Findtickets.addActiveQuery(); //active query check\r\n        Findtickets.addQuery(\"assigned_to\", current.sys_id); //check if the current user who is being inactivated is assigned to user\r\n        Findtickets.query();\r\n        while (Findtickets.next()) {\r\n            tickets.push(Findtickets.number.toString()); //if any tickets are found then add them to the array\r\n        }\r\n    }\r\n    if (tickets.length() != 0) { //if tickets array is not empty then abort the action.\r\n        gs.info(\"Here are the tickets that were assigned to the user you are trying to inactivate : \" + tickets);\r\n        gs.addErrorMessage(\"Cannot inactivate user as there are active tickets assigned, Please check logs for all the ticket no.'s.\");\r\n        current.setAbortAction(true);\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Check for active tickets before inactivating user",
        "scriptFile": "Check for active tickets before inactivating user.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Check%20for%20active%20tickets%20before%20inactivating%20user",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Check%20for%20active%20tickets%20before%20inactivating%20user/Check%20for%20active%20tickets%20before%20inactivating%20user.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.422Z",
    "updatedAt": "2025-09-20T06:49:05.598Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 29,
    "type": "business_rule",
    "name": "Check domain of record against user session",
    "description": "Type: Business Rule When: onDisplay example Table: sysscript",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t\r\n\tvar sessionData = gs.getSession().getCurrentDomainID().toString();\r\n\t\r\n\t//set the scratchpad value to the domain of current user session\r\n\tvar cd = new GlideRecord('domain');\r\n\tcd.get(sessionData);\r\n\tif (cd.name.nil()) {\r\n\t\tg_scratchpad.currentDomain = 'Global';\r\n\t} else {\r\n\t\tg_scratchpad.currentDomain = cd.sys_domain.getDisplayValue();\r\n\t}\r\n\t\r\n\t//set the scratchpad value to the domain of the record it's called from\r\n\tg_scratchpad.recordDomain = current.sys_domain.getDisplayValue();\r\n\t\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Check domain of record against user session",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Check%20domain%20of%20record%20against%20user%20session",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Check%20domain%20of%20record%20against%20user%20session/script.js"
      },
      "table": "sys_script"
    },
    "createdAt": "2025-09-20T06:44:53.419Z",
    "updatedAt": "2025-09-20T06:49:05.595Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 28,
    "type": "business_rule",
    "name": "Change Risk Assesment mandatory before state change",
    "description": "This is a code snippet which can be used in a Business rule to prevent the state of Change Request Move from New state when there is no risk Assesment attached to the Change Request. Table : changerequest When: Before Update: True Conditions : state || CHANGESFROM || New AND state || is not || Cancelled AND type || is one of || Normal,Emergency Note: This script is helpful for all the tables an...",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n   //  Assesments once submitted are stored in Assesment Instances Table with record value mapped.\r\n    var assessmentinstance = new GlideRecord('asmt_assessment_instance');\r\n    assessmentinstance.addQuery('task_id', current.sys_id); //\r\n    assessmentinstance.setLimit(1);\r\n    assessmentinstance.query();// Query the record\r\n    if (!assessmentinstance.hasNext()) //If there are no assesments \r\n    {\r\n        gs.addInfoMessage('Please perform risk assesment before requesting for approval');\r\n        current.setAbortAction(true);\r\n        action.setRedirectURL(current);\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Change Risk Assesment mandatory before state change",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Change%20Risk%20Assesment%20mandatory%20before%20state%20change",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Change%20Risk%20Assesment%20mandatory%20before%20state%20change/script.js"
      },
      "when": "before",
      "table": "change_request"
    },
    "createdAt": "2025-09-20T06:44:53.415Z",
    "updatedAt": "2025-09-20T06:49:05.591Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 27,
    "type": "business_rule",
    "name": "Change Lead Time Calculations",
    "description": "Before business rule runs on insert/update - you can set the conditions as you require. Script in changeleadtimecalculations.js System property name:change.leadtime.values | type:string | value - { \"High\": 5, \"Moderate\" : 3, \"Low\" : 1 }",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t\r\n\tvar index = current.risk.getDisplayValue();\r\n\tvar property = gs.getProperty('change.leadtime.value');\r\n\tvar hashMap = JSON.parse(property); \r\n\tvar answer = hashMap[index];\r\n    var gDate = new GlideDateTime();\r\n    var sDate = new GlideDateTime(current.start_date);\r\n\tvar diffSeconds = gs.dateDiff(gDate,sDate,true); \r\n    var hours = diffSeconds/3600;\r\n\tvar days = hours/24;\r\n\tif(days < answer)\r\n\t{\r\n\t\tgs.addErrorMessage('Not enough lead time - atleast '+ answer +' day lead time required for '+ index + ' risk changes.');\r\n\t\tcurrent.setAbortAction(true);\r\n\t}\r\n\t\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Change Lead Time Calculations",
        "scriptFile": "change_lead_time_calculations.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Change%20Lead%20Time%20Calculations",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Change%20Lead%20Time%20Calculations/change_lead_time_calculations.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.411Z",
    "updatedAt": "2025-09-20T06:49:05.582Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 26,
    "type": "business_rule",
    "name": "Capture Implementation Status of Change Request",
    "description": "",
    "script": "// Create a before update business rule on change_request table with the below conditions\r\n//Type is one of Standard, Normal, Emergency\r\n//AND\r\n//State changes to Implement\r\n\r\n(function executeRule(current, previous /*null when async*/){\r\n\r\nvar startDate = current.start_date;\r\nvar nowTime = new GlideDateTime();\r\n// Find the difference between nowTime and CR startDate\r\n\r\nvar diff = gs.dateDiff(nowTime, startDate, true); // returns the difference in seconds\r\n\r\ndiff = Math.floor(diff/ 60); // convert seconds to minutes\r\n\r\nif(diff >=15){\r\n//generate an event to trigger a notification to a particular team that CR has implemented early\r\ngs.eventQueue('event_name', current, current.number);\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Capture Implementation Status of Change Request",
        "scriptFile": "Implementation Status of Change Request.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Capture%20Implementation%20Status%20of%20Change%20Request",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Capture%20Implementation%20Status%20of%20Change%20Request/Implementation%20Status%20of%20Change%20Request.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.408Z",
    "updatedAt": "2025-09-20T06:49:05.579Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 25,
    "type": "business_rule",
    "name": "Call JavaScript Probe",
    "description": "With this script you can call MID Server Script Include via JAVASCRIPT probe. As soon as you run this script it will insert the entry in eccqueue table and output record will be created against that. In that output record you will see the parameters sent to \"SFTP\" Then once the file is successfully copied or moved to SFTP and input record in eccqueue will be inserted and gives the output whethe...",
    "script": "var jspr = new global.JavascriptProbe(gs.getProperty('midserver.name.vmd')); //MID Server name\r\n\t\tjspr.setName('ShammaProbe77');\r\n\t\tjspr.setJavascript('var vk = new AttachmentSftpUtils(); res = vk.sftpFile();'); //here comes the MID Server Script Include class and function name\r\n\t\tjspr.addParameter(\"httpDomain\",gs.getProperty('instance.url')); // ServiceNOW Instance URL\r\n\t\tjspr.addParameter(\"relativeUrl\" ,url);\r\n\t\tjspr.addParameter(\"SnowMidUsername\" , gs.getProperty('snow.username')); //ServiceNow MID Server username\r\n\t\tjspr.addParameter(\"SnowMidPassword\" , gs.getProperty('snow.pass'));//ServiceNow MID Server password\r\n\t\tjspr.addParameter(\"filename\" , file_name); //name of the file which you want to send to SFTP\r\n\t\tjspr.addParameter(\"midserverpath\" , gs.getProperty('mid.server.pd.path'));\r\n\t\tjspr.addParameter(\"sftpTargetServer\" , gs.getProperty('sftp.target.server')); //SFTP SErver IP Address\r\n\t\tjspr.addParameter(\"sftpTargetUsername\" ,gs.getProperty('sftp.target.server.user'));//SFTP Target username \r\n\t\tjspr.addParameter(\"sftpTargetPassword\" ,gs.getProperty('sftp.target.server.pass')); //SFTP Target Password\r\n\t\t\tjspr.addParameter(\"sftpFilePath\" ,gs.getProperty('sftp.file.path')); //SFTP File Path\r\n\t\t\tjspr.addParameter(\"sftpTargetPort\" ,  gs.getProperty('sftp.file.port')); //SFTP Port Number\r\n\t\t\tjspr.addParameter(\"MidLogs\" ,  \"true\");\r\n\t\t\tjspr.create();",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Call JavaScript Probe",
        "scriptFile": "Call JavaScript Probe.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Call%20JavaScript%20Probe",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Call%20JavaScript%20Probe/Call%20JavaScript%20Probe.js"
      },
      "table": "and"
    },
    "createdAt": "2025-09-20T06:44:53.404Z",
    "updatedAt": "2025-09-20T06:49:05.576Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 24,
    "type": "business_rule",
    "name": "Block Attachments for specific conditions",
    "description": "This code is used to block attachments for a specific record condition (assignment group, state, etc)",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n    gs.addErrorMessage(gs.getMessage(\"You are not authorized to upload attachments.\"));\r\n    current.setAbortAction(true);\r\n    return false;\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Block Attachments for specific conditions",
        "scriptFile": "Block Attachments.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Block%20Attachments%20for%20specific%20conditions",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Block%20Attachments%20for%20specific%20conditions/Block%20Attachments.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.400Z",
    "updatedAt": "2025-09-20T06:49:05.571Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 23,
    "type": "business_rule",
    "name": "Backup Critical Table Data",
    "description": "Overview This ServiceNow script automates backing up critical record data (such as task or incident records) to an external storage solution. Designed to run as a Business Rule, it helps maintain redundancy for sensitive information by copying specific record details to a backup API whenever a record is created or modified. How It Works",
    "script": "// Script to back up critical table data to external storage\r\n(function executeRule(current, previous /*null when async*/) {\r\n    var recordData = {\r\n        sys_id: current.sys_id.toString(),\r\n        number: current.number.toString(),\r\n        short_description: current.short_description.toString()\r\n    };\r\n    \r\n    // Call external API to store data\r\n    var request = new sn_ws.RESTMessageV2();\r\n    request.setEndpoint('https://your-backup-api.com/backup');\r\n    request.setHttpMethod('POST');\r\n    request.setRequestBody(JSON.stringify(recordData));\r\n    \r\n    var response = request.execute();\r\n    gs.info(\"Backup response: \" + response.getBody());\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Backup Critical Table Data",
        "scriptFile": "backupCriticalTableData.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Backup%20Critical%20Table%20Data",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Backup%20Critical%20Table%20Data/backupCriticalTableData.js"
      },
      "table": "data"
    },
    "createdAt": "2025-09-20T06:44:53.396Z",
    "updatedAt": "2025-09-20T06:49:05.567Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 22,
    "type": "business_rule",
    "name": "Automatic Group Membership Updates via API",
    "description": "Overview This code snippet helps ServiceNow developers manage group memberships automatically by integrating with an external API. It retrieves group membership data from a specified API endpoint and updates user-group relationships in ServiceNow accordingly. This is useful for organizations where user groups are managed dynamically in external systems, and developer want a seamless and up-to-d...",
    "script": "// Script to update group memberships based on API data\r\n(function executeRule(current, previous /*null when async*/) {\r\n    var apiEndpoint = 'https://your-group-api.com/members';\r\n    var request = new sn_ws.RESTMessageV2();\r\n    request.setEndpoint(apiEndpoint);\r\n    request.setHttpMethod('GET');\r\n\r\n    var response = request.execute();\r\n    var responseData = JSON.parse(response.getBody());\r\n    \r\n    // Update group memberships\r\n    responseData.members.forEach(function(member) {\r\n        var userGR = new GlideRecord('sys_user');\r\n        userGR.addQuery('email', member.email);\r\n        userGR.query();\r\n        \r\n        if (userGR.next()) {\r\n            var groupMembership = new GlideRecord('sys_user_grmember');\r\n            groupMembership.initialize();\r\n            groupMembership.group = member.group_id;\r\n            groupMembership.user = userGR.sys_id;\r\n            groupMembership.insert();\r\n        }\r\n    });\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Automatic Group Membership Updates via API",
        "scriptFile": "autoGroupMembershipUpdate.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Automatic%20Group%20Membership%20Updates%20via%20API",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Automatic%20Group%20Membership%20Updates%20via%20API/autoGroupMembershipUpdate.js"
      },
      "table": "to"
    },
    "createdAt": "2025-09-20T06:44:53.392Z",
    "updatedAt": "2025-09-20T06:49:05.563Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 21,
    "type": "business_rule",
    "name": "Automated SLA Monitoring and Escalation",
    "description": "Create a New Business Rule: 1. Navigate to System Definition  Business Rules in your ServiceNow instance. 2. Click on New to create a new business rule.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n    if (current.sla_due && current.sla_due <= gs.minutesAgo(30)) {\r\n        current.priority = '1'; \r\n        gs.info('Incident ' + current.number + ' escalated due to impending SLA breach.');\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Automated SLA Monitoring and Escalation",
        "scriptFile": "Automated SLA Monitoring and Escalation.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Automated%20SLA%20Monitoring%20and%20Escalation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Automated%20SLA%20Monitoring%20and%20Escalation/Automated%20SLA%20Monitoring%20and%20Escalation.js"
      },
      "when": "before",
      "table": "Set"
    },
    "createdAt": "2025-09-20T06:44:53.388Z",
    "updatedAt": "2025-09-20T06:49:05.559Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 20,
    "type": "business_rule",
    "name": "Automated Incident Categorization Based on Keywords",
    "description": "Overview : This Business Rule will automatically categorize incidents based on the defined keywords when a new incident is created. Setting Up the Business Rule Name: Automated Incident Categorization",
    "script": "(function() {\r\n    var keywordCategoryMap = {\r\n        'network': 'Network Issues',\r\n        'server': 'Server Issues',\r\n        'database': 'Database Issues',\r\n        'application': 'Application Issues',\r\n        'login': 'User Access Issues',\r\n        'password': 'User Access Issues',\r\n        'error': 'General Errors',\r\n        'crash': 'Application Issues',\r\n        'slow': 'Performance Issues',\r\n    };\r\n\r\n    function categorizeIncident(shortDescription, description) {\r\n        var combinedText = (shortDescription + ' ' + description).toLowerCase();\r\n\r\n        for (var keyword in keywordCategoryMap) {\r\n            if (combinedText.indexOf(keyword) !== -1) {\r\n                return keywordCategoryMap[keyword]; \r\n            }\r\n        }\r\n        return 'Uncategorized'; \r\n\r\n    if (current.operation() === 'insert') {\r\n        var category = categorizeIncident(current.short_description, current.description);\r\n        current.category = category; \r\n        current.update();\r\n\r\n        gs.info('Incident ' + current.number + ' categorized as: ' + category);\r\n    }\r\n})();",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Automated Incident Categorization Based on Keywords",
        "scriptFile": "Automated Incident Categorization Based on Keywords.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Automated%20Incident%20Categorization%20Based%20on%20Keywords",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Automated%20Incident%20Categorization%20Based%20on%20Keywords/Automated%20Incident%20Categorization%20Based%20on%20Keywords.js"
      },
      "when": "before",
      "table": "Incident"
    },
    "createdAt": "2025-09-20T06:44:53.384Z",
    "updatedAt": "2025-09-20T06:49:05.555Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 19,
    "type": "business_rule",
    "name": "Automate Role Assignment for New User",
    "description": "Overview This snippet for ServiceNow developers automate the process of assigning roles to users based on their department. It helps to simplify user role management, especially useful in organizations where specific departments require predefined access levels. How It Works",
    "script": "// Script to automatically assign roles based on user department\r\n(function executeRule(current, previous /*null when async*/) {\r\n    var department = current.department.getDisplayValue();\r\n    \r\n    // Define roles by department\r\n    var rolesByDepartment = {\r\n        \"IT\": [\"itil\", \"asset\"],\r\n        \"HR\": [\"hr_manager\", \"employee\"],\r\n        \"Finance\": [\"finance_analyst\", \"approver\"]\r\n    };\r\n    \r\n    // Remove existing roles\r\n    current.roles = [];\r\n    \r\n    // Assign new roles based on department\r\n    if (rolesByDepartment[department]) {\r\n        rolesByDepartment[department].forEach(function(role) {\r\n            current.roles.add(role);\r\n        });\r\n        current.update();\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Automate Role Assignment for New User",
        "scriptFile": "autoRoleAssignment.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Automate%20Role%20Assignment%20for%20New%20User",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Automate%20Role%20Assignment%20for%20New%20User/autoRoleAssignment.js"
      },
      "when": "before",
      "table": "when"
    },
    "createdAt": "2025-09-20T06:44:53.380Z",
    "updatedAt": "2025-09-20T06:49:05.551Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 18,
    "type": "business_rule",
    "name": "AutoCreation of Problem from Incident",
    "description": "This is After- Business rule Created on Incident Table. In which I have enabled Both insert and Update check Box to true. Intially, we will create a field called major Incident(true/false field).",
    "script": "//This is a After-Busiens Rule with insert and update(checked) created on Incident Table\r\n//condition as Major Incident is True\r\n(function executeRule(current, previous /*null when async*/ ) {\r\n\r\n    \r\n    var gr = new GlideRecord('problem');\r\n    gr.initialize();\r\n    gr.first_reported_by_task = current.getUniqueValue();\r\n    gr.business_service = current.business_service.getValue();\r\n    gr.short_description = current.short_description;\r\n    gr.description = current.description;\r\n\tgr.urgency = current.urgency;\r\n\tgr.impact= current.impact;\r\n    gr.insert();\r\n\tgs.addInfoMessage('problem number'+gr.number.getDisplayValue());\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/AutoCreation of Problem from Incident",
        "scriptFile": "whenMajorIncidentIsTrueCreateProblem.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/AutoCreation%20of%20Problem%20from%20Incident",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/AutoCreation%20of%20Problem%20from%20Incident/whenMajorIncidentIsTrueCreateProblem.js"
      },
      "when": "after",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.376Z",
    "updatedAt": "2025-09-20T06:49:05.547Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 17,
    "type": "business_rule",
    "name": "AutoAssignment",
    "description": "This Business Rule runs before an incident is inserted. If no user is assigned, it looks up the \"IT Support\" group and assigns the incident to the group's manager. This ensures that incidents are promptly directed to the appropriate personnel.",
    "script": "// Business Rule: Auto Assign Incident\r\n// When: Before Insert & Table: Incident\r\n(function executeRule(current, previous /*null when async*/) {\r\n    if (current.assigned_to.nil()) {\r\n        var group = new GlideRecord('sys_user_group');\r\n        group.addQuery('name', 'IT Support');\r\n        group.query();\r\n        if (group.next()) {\r\n            current.assigned_to = group.getValue('manager');\r\n        }\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/AutoAssignment",
        "scriptFile": "Auto Assign Incident.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/AutoAssignment",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/AutoAssignment/Auto%20Assign%20Incident.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.373Z",
    "updatedAt": "2025-09-20T06:49:05.544Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 16,
    "type": "business_rule",
    "name": "Auto Incident Notification and Escalation",
    "description": "Complex Incident Escalation and Notification Description This project demonstrates how to implement a complex Business Rule for incident escalation and notification in ServiceNow. The Business Rule escalates incidents based on priority and time elapsed since creation, notifies the assigned group and incident manager, reassigns the incident to a higher support group if the SLA is breached, and l...",
    "script": "// Business Rule: Complex Incident Escalation\r\n// Escalates incidents based on priority and elapsed time since creation. \r\n// Notifies the assigned group and incident manager, reassigns the incident if SLA is breached, and logs all actions.\r\n\r\n(function executeRule(current, previous /* null when async */) {\r\n    const ESCALATION_THRESHOLD_HOURS = 4;\r\n    const SLA_BREACH_THRESHOLD_HOURS = 8;\r\n    const HIGHER_SUPPORT_GROUP_ID = gs.getProperty('esc.incident.higher_support_group', '');\r\n\r\n    if (!HIGHER_SUPPORT_GROUP_ID) {\r\n        gs.error('Higher Support Group sys_id not defined. Please configure esc.incident.higher_support_group.');\r\n        return;\r\n    }\r\n    const timeElapsedInHours = parseInt(gs.dateDiff(current.getValue('sys_created_on'), gs.nowDateTime(), true)) / 3600;\r\n    if (isEscalationNeeded(current, timeElapsedInHours)) {\r\n        escalateIncidentPriority(current);\r\n        notifyAssignedGroupAndManager(current);\r\n        if (isSLABreached(timeElapsedInHours)) {\r\n            reassignToHigherSupportGroup(current, HIGHER_SUPPORT_GROUP_ID);\r\n        }\r\n\r\n        logEscalationActions(current);\r\n    }\r\n    function isEscalationNeeded(incident, timeElapsed) {\r\n        return incident.getValue('state') != 6 && timeElapsed > ESCALATION_THRESHOLD_HOURS;\r\n    }\r\n    function escalateIncidentPriority(incident) {\r\n        const newPriority = Math.max(1, incident.getValue('priority') - 1);\r\n        incident.setValue('priority', newPriority);\r\n        gs.addInfoMessage('Incident priority has been escalated to ' + newPriority + '.');\r\n    }\r\n    function notifyAssignedGroupAndManager(incident) {\r\n        const assignedGroup = incident.getValue('assignment_group');\r\n        const incidentManager = incident.getValue('u_incident_manager');\r\n        gs.eventQueue('incident.escalation.notification', incident, assignedGroup, incidentManager);\r\n    }\r\n    function isSLABreached(timeElapsed) {\r\n        return timeElapsed > SLA_BREACH_THRESHOLD_HOURS;\r\n    }\r\n    function reassignToHigherSupportGroup(incident, groupId) {\r\n        incident.setValue('assignment_group', groupId);\r\n        gs.addInfoMessage('Incident reassigned to a higher support group due to SLA breach.');\r\n    }\r\n    function logEscalationActions(incident) {\r\n        const logMessage = 'Incident escalated. Priority: ' + incident.getValue('priority') + \r\n                           ', Assigned Group: ' + incident.getValue('assignment_group') + \r\n                           ', Incident Manager: ' + incident.getValue('u_incident_manager');\r\n        gs.log(logMessage, 'ComplexIncidentEscalation');\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Auto Incident Notification and Escalation",
        "scriptFile": "incident_notification.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Auto%20Incident%20Notification%20and%20Escalation",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Auto%20Incident%20Notification%20and%20Escalation/incident_notification.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.369Z",
    "updatedAt": "2025-09-20T06:49:05.540Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 15,
    "type": "business_rule",
    "name": "Auto approve if previously approved",
    "description": "The purpose of this BR is to avoid redundant approval actions if the ticket is sent to same approver. This should be a Before Insert Business rule that runs on the Approval table. Replace the table name accordingly in line 3 of the code to limit it to particular table. For instance, there may be need for auto-approval only for RITMs and not for Change requests.",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n\r\nif(current.sysapproval.sys_class_name=='<pass table dictionary name here>'){\r\n    var recis = new GlideRecord('sysapproval_approver');\r\n    recis.addQuery('sysapproval', current.sysapproval);\r\n    recis.addQuery('state', 'approved');\r\n    recis.addQuery('approver', current.approver);\r\n    recis.setLimit(1);\r\n    recis.query();\r\n    if (recis.next()) {\r\n\r\n        current.state = 'approved';\r\n        current.comments = 'Auto-Approved as this request was already approved by ' + current.approver.getDisplayValue();\r\n    } \r\n}\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Auto approve if previously approved",
        "scriptFile": "Auto_approve approvals.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Auto%20approve%20if%20previously%20approved",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Auto%20approve%20if%20previously%20approved/Auto_approve%20approvals.js"
      },
      "when": "before",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.365Z",
    "updatedAt": "2025-09-20T06:49:05.536Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 14,
    "type": "business_rule",
    "name": "Auto add email recipients to the message body when Email Override is on",
    "description": "A common complaint I hear about testing email is that people donâ€™t know who was actually supposed to receive emails when the override is on (https://docs.servicenow.com/bundle/rome-servicenow-platform/page/administer/reference-pages/reference/rOutboundMailConfiguration.html property). The included business rule takes the intended recipients information and puts it in the body of the email at th...",
    "script": "//Name: Include email recipients in body\r\n//Table: Email (sys_email)\r\n//When: Before\r\n//Insert: true\r\n//Update: true\r\n//Condition: Type is \"send-ready\"\r\n\r\nfunction onBefore(current, previous) {\r\n\t//Add the recipients to the body of the email so that testers can see who the email was meant for.\r\n\tvar recipients = \"\\n*****\\nEmail override is on.  All outbound emails are currently sent to: \" + gs.getProperty(\"glide.email.test.user\");\r\n\trecipients += \"\\nOriginal Intended Recipients: \";\r\n\tif (current.direct != \"\") {\r\n\t\trecipients += \"\\nTO: \" + current.direct;\r\n\t}\r\n\tif (current.copied != \"\") {\r\n\t\trecipients += \"\\nCC: \" + current.copied;\r\n\t}\r\n\tif (current.blind_copied != \"\") {\r\n\t\trecipients += \"\\nBCC: \" + current.blind_copied;\r\n\t}\r\n\trecipients += \"\\n*****\\n\";\r\n\t\r\n\tcurrent.body_text = current.body_text + \"\\n\\n\\n*****\\n\" + recipients + \"\\n*****\\n\";\r\n\tcurrent.body = current.body + \"<html><body><div><br />\" + recipients.replace(/\\r\\n|[\\r\\n]/g, \"<br /></div></body></html>\");\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Auto add email recipients to the message body when Email Override is on",
        "scriptFile": "IncludeEmailRecipientsInBody.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Auto%20add%20email%20recipients%20to%20the%20message%20body%20when%20Email%20Override%20is%20on",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Auto%20add%20email%20recipients%20to%20the%20message%20body%20when%20Email%20Override%20is%20on/IncludeEmailRecipientsInBody.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.361Z",
    "updatedAt": "2025-09-20T06:49:05.532Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 13,
    "type": "business_rule",
    "name": "Attachment Variable from Activity Stream to Clip Icon",
    "description": "When attaching a file via an attachment type variable, on the target record the attachment appears in the Activity Stream instead of at the top associated with the paper clip icon, where one typically looks for / notices attachments.  This Business Rule will convert the entry in the sysattachment table so that the attachment added via an attachment type variable appears at the top of the record...",
    "script": "//Run this Business Rule async Insert on the sc_req_item table if using the attachment type variable in a Catalog Item\r\n(function executeRule(current, previous /*null when async*/) {\r\n    var gr = new GlideRecord(\"sys_attachment\");\r\n\t  gr.addQuery(\"table_name\", \"ZZ_YY\" + current.getTableName());\r\n\t  gr.addQuery(\"table_sys_id\", current.sys_id);\r\n\t  gr.query();\r\n\t  while (gr.next()) {\r\n\t\t    gr.table_name = current.getTableName();\r\n\t\t    gr.update();\r\n      \t\r\n\t  }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Attachment Variable from Activity Stream to Clip Icon",
        "scriptFile": "Attachment Variable Fix.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Attachment%20Variable%20from%20Activity%20Stream%20to%20Clip%20Icon",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Attachment%20Variable%20from%20Activity%20Stream%20to%20Clip%20Icon/Attachment%20Variable%20Fix.js"
      },
      "table": "so"
    },
    "createdAt": "2025-09-20T06:44:53.357Z",
    "updatedAt": "2025-09-20T06:49:05.527Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 12,
    "type": "business_rule",
    "name": "ATF Duplicate Execution Order",
    "description": "Usage : Executes a business rule to find duplicate execution orders in ATF. Executes on table sysatftest The business rule consists of two main parts:",
    "script": "/**\r\n * Executes a business rule to find duplicate execution orders in ATF.\r\n * @Table sys_atf_test\r\n * @param {GlideRecord} current - The current GlideRecord object.\r\n * @param {GlideRecord} previous - The previous GlideRecord object. (null when async)\r\n * @returns {undefined}\r\n */\r\n\r\n(function executeRule(current, previous /*null when async*/) {\r\nvar order_array = testDuplicateTestStepExectionOrder(current.sys_id);\r\n\r\nif (order_array.length > 0)\r\n\tgs.addErrorMessage('WARNING: Test steps with duplicate Execution order: [' + order_array + '].');\r\n\r\n})(current, previous);\r\n\r\n\r\n/**\r\n * Returns an array of active tests that have at least two active test steps with the same execution order.\r\n * @param {string} testSysId - The sys_id of the test.\r\n * @returns {Array} An array of sys_ids or order numbers.\r\n */\r\n\r\nfunction testDuplicateTestStepExectionOrder (testSysId) {\r\n\r\n\t//if tests_sys_id has a value then return itself if the test fails\r\n\tvar result = [];\r\n\r\n\tvar ga = new GlideAggregate('sys_atf_step');\r\n\r\n\tif (test_sys_id)\r\n\t\tga.addQuery('test.sys_id', test_sys_id);\r\n\r\n\tga.addQuery('active', 'true');\r\n\r\n\tga.addAggregate('COUNT');\r\n\r\n\tga.groupBy('test');\r\n\tga.groupBy('order');\r\n\r\n\tga.query();\r\n\r\n\twhile (ga.next()) {\r\n\t\tif (ga.getAggregate('COUNT') > 1)\r\n\t\t\tif (test_sys_id)\r\n\t\t\t\tresult.push(ga.getValue('order'));\r\n\t\t\telse\r\n\t\t\t\tresult.push(ga.getValue('test'));\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/ATF Duplicate Execution Order",
        "scriptFile": "ATF_Duplicate_Execution_order.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/ATF%20Duplicate%20Execution%20Order",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/ATF%20Duplicate%20Execution%20Order/ATF_Duplicate_Execution_order.js"
      },
      "when": "async",
      "table": "sys_atf_test"
    },
    "createdAt": "2025-09-20T06:44:53.353Z",
    "updatedAt": "2025-09-20T06:49:05.523Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 11,
    "type": "business_rule",
    "name": "Async REST Call",
    "description": "This Business Rule script is used to make an async call to the REST integration (Eg:Salesforce from ServiceNow). After making all the REST service setup, we can call this BR script and is used after inserting a new user from ServiceNow. As soon as we create a new user in sysuser table, we call this BR and make a REST call to the target system (Eg:SalesForce) and create an entry over there.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n\t// Add your code here\r\n\ttry { \r\n var r = new sn_ws.RESTMessageV2('MySFConn', 'Default GET');\r\n r.setStringParameterNoEscape('name', current.first_name.toString() + \" \" + current.last_name.toString());\r\n\r\n//override authentication profile \r\n//authentication type ='basic'/ 'oauth2'\r\n//r.setAuthenticationProfile(authentication type, profile name);\r\n\r\n//set a MID server name if one wants to run the message on MID\r\n//r.setMIDServer('MY_MID_SERVER');\r\n\r\n//if the message is configured to communicate through ECC queue, either\r\n//by setting a MID server or calling executeAsync, one needs to set skip_sensor\r\n//to true. Otherwise, one may get an intermittent error that the response body is null\r\n//r.setEccParameter('skip_sensor', true);\r\n\r\n //var response = r.execute();\r\nvar response = r.executeAsync();\r\nresponse.waitForResponse(10);\t\t\r\n var responseBody = response.getBody();\r\n var httpStatus = response.getStatusCode();\r\n}\r\ncatch(ex) {\r\n var message = ex.message;\r\n}\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Async REST Call",
        "scriptFile": "callAsynREST.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Async%20REST%20Call",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Async%20REST%20Call/callAsynREST.js"
      },
      "when": "after"
    },
    "createdAt": "2025-09-20T06:44:53.349Z",
    "updatedAt": "2025-09-20T06:49:05.519Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 10,
    "type": "business_rule",
    "name": "Assign specific role to user",
    "description": "Business Rule Script to automatically assign a specific role on creation or update of users, with additional protection against duplication of roles. You can run that Business Rules based on your needs (on user creation or on update when specific field was changed). To assign different role, copy sysid of chose role into ROLEID variable. Example configuration of Business Rule",
    "script": "(function executeRule(current, previous /*null when async*/ ) {\r\n    //Script to automatically assgin a specific role on creation or update of users\r\n\r\n    //Sys_id value of the selected role which is to be granted for the user (in this example it is the 'knowledge' role)\r\n    var ROLE_ID = '1f26da36c0a8016b000c7f06a1ce7e14';\r\n\r\n    //Query to find out the specific role asgined to current user\r\n    var grRole = new GlideRecord('sys_user_has_role');\r\n    grRole.addQuery('user', current.sys_id);\r\n    grRole.addQuery('role', ROLE_ID);\r\n    grRole.query();\r\n\r\n    //Verify if the role already exists, to prevent role duplicates\r\n    if (!grRole.hasNext()) {\r\n\r\n        //Initialize and insert new role for current user\r\n        grRole.initialize();\r\n        grRole.user = current.sys_id;\r\n        grRole.role = ROLE_ID;\r\n        grRole.insert();\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Assign specific role to user",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Assign%20specific%20role%20to%20user",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Assign%20specific%20role%20to%20user/script.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.345Z",
    "updatedAt": "2025-09-20T06:49:05.516Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 9,
    "type": "business_rule",
    "name": "Allow only unique insert",
    "description": "Before Business rule to check for existing entry in a table , incase one would want to make an insert to be unique based on a certain criteria.",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\t\r\n\tvar gr = new GlideRecord(\"<table_name>\");\r\n\tgr.addQuery(\"<unique_field>\", current.<unique_field_name>);\r\n\tgr.query();\r\n\tif (gr.next()) {\r\n\t\tgs.addErrorMessage(\"Entry for this <field_name> already exists\");\r\n\t\tcurrent.setAbortAction(true);\r\n\t}\r\n\t\r\n\t\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Allow only unique insert",
        "scriptFile": "script.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Allow%20only%20unique%20insert",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Allow%20only%20unique%20insert/script.js"
      },
      "when": "before"
    },
    "createdAt": "2025-09-20T06:44:53.341Z",
    "updatedAt": "2025-09-20T06:49:05.512Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 8,
    "type": "business_rule",
    "name": "After-BR to generate approvals for catalog tasks",
    "description": "This code snippet will help you to generate approvals for catalog tasks via scripting. You just need to create an after insert BR and put this script there. This script can be used in a workflow run script as well and you can modify the script a little bit and use it for other tables as well. Fun fact: When you are playing with Document Id type field. You need to keep a field as dependent for t...",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n\t// Add your code here\r\nvar sysApp = new GlideRecord('sysapproval_approver');\r\n  sysApp.initialize();\r\n\r\n  sysApp.state = 'requested'; //set the state to requested\r\n  sysApp.sysapproval = current.sys_id; // set the 'Approval for' field with the current catalog task\r\n  sysApp.source_table = 'sc_task'; // set the source table field so that document ID table can be updated properly as it is dependent on source table field.\r\n  sysApp.approver = 'sys_id of the person for whom you want to trigger this approval'; // set the approver\r\n  sysApp.document_id = current.sys_id; //set the sys_id to populate correct value in the Approving field.\r\n  \r\n  sysApp.insert(); // Insert/Create the approval record.\r\n  \r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/After-BR to generate approvals for catalog tasks",
        "scriptFile": "approval.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/After-BR%20to%20generate%20approvals%20for%20catalog%20tasks",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/After-BR%20to%20generate%20approvals%20for%20catalog%20tasks/approval.js"
      },
      "when": "after",
      "table": "there"
    },
    "createdAt": "2025-09-20T06:44:53.337Z",
    "updatedAt": "2025-09-20T06:49:05.508Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 7,
    "type": "business_rule",
    "name": "Add woknotes for 75 percent SLA",
    "description": "This business rule will run on the [sysemaillog] table. When to run: after, insert Filter condition: Notification is [select the notification]",
    "script": "(function executeRule(current, previous /*null when async*/) {\r\n\r\n\tvar getTaskSLA = new GlideRecord('task_sla');\r\n\t//get the task SLA Record\r\n\tgetTaskSLA.addQuery('sys_id', current.event.instance);\r\n\tgetTaskSLA.query();\r\n\twhile(getTaskSLA.next()){\r\n\t\tvar incRec = new GlideRecord('incident');\r\n\t\t//Hardware Group sysID - 8a5055c9c61122780043563ef53438e3\r\n\t\tincRec.addEncodedQuery(\"active=true^sys_id=8a5055c9c61122780043563ef53438e3\");\r\n\t\tincRec.addQuery('sys_id', getTaskSLA.task);\r\n\t\tincRec.query();\r\n\t\twhile(incRec.next()){\r\n\t\t\tincRec.work_notes = \"This ticket\" + incRec.number +\" has exceeded 75% of SLA.\";\r\n\t\t\tincRec.update();\r\n\t\t}\r\n\t}\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Add woknotes for 75 percent SLA",
        "scriptFile": "addWorknotesForSLA.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Add%20woknotes%20for%2075%20percent%20SLA",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Add%20woknotes%20for%2075%20percent%20SLA/addWorknotesForSLA.js"
      },
      "when": "after",
      "table": "."
    },
    "createdAt": "2025-09-20T06:44:53.333Z",
    "updatedAt": "2025-09-20T06:49:05.504Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 6,
    "type": "business_rule",
    "name": "Add notes on tag addition or removal",
    "description": "This business rule will operate on the labelentry table to log notes whenever tags are added or removed from specific tables. To implement this, create three system properties: 1. custom.tagentries.logremoval (true/false): Set this to true to enable logging of tag removals. 2. custom.tagentries.tables: A list of tables, separated by commas, where notes should be managed.",
    "script": "@ -0,0 +1,38 @@\r\n/**********************BR COnfig Start***************************/\r\n/*\r\nTable: label_entry\r\nWhen: async\r\norder: 2000\r\ninsert: true\r\nFilter: labelISNOTEMPTY^label.nameISNOTEMPTY^EQ\r\n*/\r\n/**********************BR COnfig End***************************/\r\n\r\n(function executeRule(current, previous /*null when async*/ ) {\r\n    // Check if logging for tag additions is enabled\r\n    if (gs.getProperty('custom.tag_entries.log_addition').toString() == \"true\") {\r\n        var current_table = current.getValue('table'); // Get the current table name\r\n        var allowed_tables = gs.getProperty('custom.tag_entries.tables'); // Get allowed tables for addition of notes from tag entries from properties\r\n        allowed_tables = allowed_tables.split(','); // Split into an array\r\n\r\n        // Verify if the current table is in the allowed list\r\n        if (allowed_tables.indexOf(current_table) > -1) {\r\n            var gr_task = new GlideRecord(current_table); // Instantiate a GlideRecord for the current table\r\n            try {\r\n                // Query the record using sys_id stored in table_key\r\n                gr_task.addQuery(\"sys_id\", current.table_key.getValue());\r\n                gr_task.query(); // Execute the query\r\n                \r\n                // If record found, update work_notes if the field is valid\r\n                if (gr_task.next()) {\r\n                    if (gr_task.isValidField('work_notes')) {\r\n                        gr_task.work_notes = \"Tag added: \" + current.getDisplayValue('label'); // Append tag info\r\n                        gr_task.update(); // Save changes\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                // Log any exceptions encountered during execution\r\n                gs.log(\"Exception occurred in the business rule Updating record when tagged\" + e.message);\r\n            }\r\n        }\r\n    }\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Add notes on tag addition or removal",
        "scriptFile": "update_notes_tag_addition.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Add%20notes%20on%20tag%20addition%20or%20removal",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Add%20notes%20on%20tag%20addition%20or%20removal/update_notes_tag_addition.js"
      },
      "table": "to"
    },
    "createdAt": "2025-09-20T06:44:53.329Z",
    "updatedAt": "2025-09-20T06:49:05.500Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 5,
    "type": "business_rule",
    "name": "Add itil role to ootb user query to also see inactive users",
    "description": "A common request is to also allow itil users to also be able to see inactive user records. There are two pieces of code in the code.js file: 1) A conditional piece of code that should be added to the \"Condition\" field within the business rule",
    "script": "//set condition field within user query business rule to: gs.getSession().isInteractive() && !gs.hasRole(\"admin,user_admin,itil\")\r\ncurrent.addActiveQuery(); //this will add an active query to the user's sys_user query if the user is in an interactive session and does not have admin, user_admin, or itil roles",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Add itil role to ootb user query to also see inactive users",
        "scriptFile": "code.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Add%20itil%20role%20to%20ootb%20user%20query%20to%20also%20see%20inactive%20users",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Add%20itil%20role%20to%20ootb%20user%20query%20to%20also%20see%20inactive%20users/code.js"
      }
    },
    "createdAt": "2025-09-20T06:44:53.324Z",
    "updatedAt": "2025-09-20T06:49:05.496Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  },
  {
    "id": 4,
    "type": "business_rule",
    "name": "Add HR task for HR case",
    "description": "This business rule is configured to run after a record is inserted in the snhrcorecase table (which is parent table for HR cases). with conditions subjcet person is VIP and when a case priority is high. we are simply checking the conditions at the script level. (this can be checked at the condition level as well.)",
    "script": "// Business Rule: 'After' Insert on 'sn_hr_core_case'\r\n(function executeRule(current, previous /*null when async*/) {\r\n\r\n    if (current.priority == \"1\" && current.subject_person.getValue('VIP') == 'true') {\r\n        var newTask = new GlideRecord('sn_hr_core_task');\r\n        newTask.initialize();\r\n        newTask.short_description = 'Priority VIP HR task for - ' + current.number;\r\n        newTask.assigned_to = current.assigned_to;\r\n        newTask.parent = current.sys_id;\r\n        newTask.insert();\r\n        \r\n        gs.addInfoMessage('A related HR task has been created for this HR case.');\r\n    }\r\n\r\n})(current, previous);",
    "metadata": {
      "application": "Global",
      "active": true,
      "source": {
        "repo": "ServiceNowDevProgram/code-snippets",
        "directory": "Business Rules/Add HR task for HR case",
        "scriptFile": "Add HR Task for VIP HR Case.js",
        "webUrl": "https://github.com/ServiceNowDevProgram/code-snippets/tree/main/Business%20Rules/Add%20HR%20task%20for%20HR%20case",
        "rawUrl": "https://raw.githubusercontent.com/ServiceNowDevProgram/code-snippets/main/Business%20Rules/Add%20HR%20task%20for%20HR%20case/Add%20HR%20Task%20for%20VIP%20HR%20Case.js"
      },
      "when": "after",
      "table": "for"
    },
    "createdAt": "2025-09-20T06:44:53.318Z",
    "updatedAt": "2025-09-20T06:49:05.487Z",
    "owner": {
      "email": "library@servicenow.dev"
    },
    "canManage": false
  }
]